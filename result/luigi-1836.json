{
    "event": {
        "Event.DEPENDENCY_DISCOVERED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.DEPENDENCY_MISSING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.DEPENDENCY_PRESENT": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.BROKEN_TASK": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.START": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.FAILURE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.SUCCESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.PROCESSING_TIME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.TIMEOUT": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Event.PROCESS_FAILURE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ]
    },
    "task": {
        "Parameter": [
            {
                "type": "var",
                "anno": "Parameter"
            }
        ],
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "TASK_ID_INCLUDE_PARAMS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TASK_ID_TRUNCATE_PARAMS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TASK_ID_TRUNCATE_HASH": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TASK_ID_INVALID_CHAR_REGEX": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "namespace": [
            {
                "type": "func",
                "args": {
                    "namespace": "str"
                }
            }
        ],
        "Task._event_callbacks": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Task.priority": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Task.disabled": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Task.resources": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Task.worker_timeout": [
            {
                "type": "attr",
                "anno": "float | None"
            }
        ],
        "Task.max_batch_size": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Task.retry_count": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.disable_hard_timeout": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.disable_window_seconds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.owner_email": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.use_cmdline_section": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.task_module": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.param_args": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Task.param_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Task.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.__hash": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Task.set_tracking_url": [
            {
                "type": "attr",
                "anno": "register"
            }
        ],
        "Task.set_status_message": [
            {
                "type": "attr",
                "anno": "register"
            }
        ],
        "Task.initialized": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "Task.bulk_complete": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Task]",
                    "parameter_tuples": "list"
                }
            }
        ],
        "Task.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.requires": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.process_resources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.on_failure": [
            {
                "type": "method",
                "args": {
                    "exception": "BaseException"
                }
            }
        ],
        "Task.on_success": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.no_unpicklable_properties": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExternalTask.run": [
            {
                "type": "attr",
                "anno": "six.Optional[Callable[[], Task]]"
            }
        ],
        "flatten": [
            {
                "type": "func",
                "args": {
                    "struct": "list"
                }
            }
        ],
        "Task._requires": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.deps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "task_id_str": [
            {
                "type": "func",
                "args": {
                    "task_family": "str",
                    "params": "dict"
                }
            }
        ],
        "Task.get_params": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]"
                }
            }
        ],
        "Task.from_str_params": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]",
                    "params_str": "dict"
                }
            }
        ],
        "Task.get_param_names": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]",
                    "include_significant": "bool"
                }
            }
        ],
        "Task.batch_param_names": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]"
                }
            }
        ],
        "Task.batchable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.task_family": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.to_str_params": [
            {
                "type": "method",
                "args": {
                    "only_significant": "bool"
                }
            }
        ],
        "Task.get_param_values": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]",
                    "params": "dict",
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "Task.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "tuple",
                    "kwargs": "tuple"
                }
            }
        ],
        "Task.complete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.clone": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]",
                    "kwargs": "object"
                }
            }
        ],
        "WrapperTask.complete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MixinNaiveBulkComplete.bulk_complete": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "parameter_tuples": "list"
                }
            }
        ],
        "getpaths": [
            {
                "type": "func",
                "args": {
                    "struct": "dict"
                }
            }
        ],
        "Task.input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.trigger_event": [
            {
                "type": "method",
                "args": {
                    "event": "Event",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "flatten_output": [
            {
                "type": "func",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "externalize": [
            {
                "type": "func",
                "args": {
                    "task": "ExternalTask"
                }
            }
        ],
        "Task.event_handler": [
            {
                "type": "method",
                "args": {
                    "cls": "Register",
                    "event": "str"
                }
            }
        ]
    },
    "notifications": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "DEFAULT_CLIENT_EMAIL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEBUG": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "TestNotificationsTask.raise_in_complete": [
            {
                "type": "attr",
                "anno": "luigi.parameter.BoolParameter"
            }
        ],
        "TestNotificationsTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNotificationsTask.complete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "send_email_sns": [
            {
                "type": "func",
                "args": {
                    "config": "configuration.Config",
                    "sender": "str",
                    "subject": "str",
                    "message": "str",
                    "topic_ARN": "str",
                    "image_png": "str"
                }
            }
        ],
        "_prefix": [
            {
                "type": "func",
                "args": {
                    "subject": "str"
                }
            }
        ],
        "_email_recipients": [
            {
                "type": "func",
                "args": {
                    "additional_recipients": "str"
                }
            }
        ],
        "email_type": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_email_disabled": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "send_email_sendgrid": [
            {
                "type": "func",
                "args": {
                    "config": "configuration.Config",
                    "sender": "str",
                    "subject": "str",
                    "message": "str",
                    "recipients": "str",
                    "image_png": "str"
                }
            }
        ],
        "wrap_traceback": [
            {
                "type": "func",
                "args": {
                    "traceback": "str"
                }
            }
        ],
        "format_task_error": [
            {
                "type": "func",
                "args": {
                    "headline": "str",
                    "task": "luigi.task.Task",
                    "command": "str",
                    "formatted_exception": "str"
                }
            }
        ],
        "generate_email": [
            {
                "type": "func",
                "args": {
                    "sender": "str",
                    "subject": "str",
                    "message": "str",
                    "recipients": "str",
                    "image_png": "str"
                }
            }
        ],
        "send_email_ses": [
            {
                "type": "func",
                "args": {
                    "config": "configuration.Config",
                    "sender": "str",
                    "subject": "str",
                    "message": "str",
                    "recipients": "str",
                    "image_png": "str"
                }
            }
        ],
        "send_email_smtp": [
            {
                "type": "func",
                "args": {
                    "config": "configuration.Config",
                    "sender": "str",
                    "subject": "str",
                    "message": "str",
                    "recipients": "str",
                    "image_png": "str"
                }
            }
        ],
        "send_email": [
            {
                "type": "func",
                "args": {
                    "subject": "str",
                    "message": "str",
                    "sender": "str",
                    "recipients": "str",
                    "image_png": "str"
                }
            }
        ],
        "send_error_email": [
            {
                "type": "func",
                "args": {
                    "subject": "str",
                    "message": "str",
                    "additional_recipients": "str"
                }
            }
        ]
    },
    "cmdline": {
        "luigi_run": [
            {
                "type": "func",
                "args": {
                    "argv": "list"
                }
            }
        ],
        "luigid": [
            {
                "type": "func",
                "args": {
                    "argv": "list"
                }
            }
        ]
    },
    "s3": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "S3_DIRECTORY_MARKER_SUFFIX_0": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "S3_DIRECTORY_MARKER_SUFFIX_1": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "S3Client.s3": [
            {
                "type": "attr",
                "anno": "boto.s3.connection.S3Connection"
            }
        ],
        "S3Client.Key": [
            {
                "type": "attr",
                "anno": "Key"
            }
        ],
        "S3Client._path_to_bucket_and_key": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "S3Client.get_as_string": [
            {
                "type": "method",
                "args": {
                    "s3_path": "str"
                }
            }
        ],
        "S3Client.get": [
            {
                "type": "method",
                "args": {
                    "s3_path": "str",
                    "destination_local_path": "str"
                }
            }
        ],
        "S3Client.put_string": [
            {
                "type": "method",
                "args": {
                    "content": "str",
                    "destination_s3_path": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3Client.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "destination_s3_path": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3Client.get_key": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "S3Client._is_root": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "S3Client._add_path_delimiter": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "S3Client.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "start_time": "str",
                    "end_time": "str",
                    "return_key": "bool"
                }
            }
        ],
        "S3Client.list": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "start_time": "str",
                    "end_time": "str",
                    "return_key": "bool"
                }
            }
        ],
        "S3Client.isdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "S3Client.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "S3Client.is_dir": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3Client.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "S3Client.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool"
                }
            }
        ],
        "AtomicS3File.s3_client": [
            {
                "type": "attr",
                "anno": "S3Client"
            }
        ],
        "AtomicS3File.s3_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AtomicS3File.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "s3_client": "S3Client",
                    "kwargs": "dict"
                }
            }
        ],
        "ReadableS3File.s3_key": [
            {
                "type": "attr",
                "anno": "six.BytesIO"
            }
        ],
        "ReadableS3File.buffer": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "ReadableS3File.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ReadableS3File.finished": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ReadableS3File.__init__": [
            {
                "type": "method",
                "args": {
                    "s3_key": "six.BytesIO"
                }
            }
        ],
        "ReadableS3File.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadableS3File._add_to_buffer": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "ReadableS3File.readable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadableS3File.writable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadableS3File.seekable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3Target.fs": [
            {
                "type": "attr",
                "anno": "FileSystem"
            }
        ],
        "S3Target.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3Target.format": [
            {
                "type": "attr",
                "anno": "six.Format"
            }
        ],
        "S3Target.s3_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "S3FlagTarget.fs": [
            {
                "type": "attr",
                "anno": "FileSystem"
            }
        ],
        "S3FlagTarget.flag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FlagTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "format": "str",
                    "client": "S3Client",
                    "flag": "str"
                }
            }
        ],
        "S3EmrTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "S3PathTask.path": [
            {
                "type": "attr",
                "anno": "Parameter"
            }
        ],
        "S3EmrTask.path": [
            {
                "type": "attr",
                "anno": "Parameter"
            }
        ],
        "S3EmrTask.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3FlagTask.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FlagTask.flag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FlagTask.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadableS3File._flush_buffer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3Client.put_multipart": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "destination_s3_path": "str",
                    "part_size": "int",
                    "kwargs": "str"
                }
            }
        ],
        "ReadableS3File.read": [
            {
                "type": "method",
                "args": {
                    "size": "int"
                }
            }
        ],
        "ReadableS3File.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3Target.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "ReadableS3File.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadableS3File.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "str",
                    "exc": "str",
                    "traceback": "str"
                }
            }
        ],
        "ReadableS3File.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AtomicS3File.move_to_final_destination": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3FlagTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3Client._get_s3_config": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "S3Client.__copy_multipart": [
            {
                "type": "method",
                "args": {
                    "pool": "ThreadPool",
                    "src_bucket": "str",
                    "src_key": "str",
                    "dst_bucket": "str",
                    "dst_key": "str",
                    "part_size": "int",
                    "kwargs": "object"
                }
            }
        ],
        "S3Client.copy": [
            {
                "type": "method",
                "args": {
                    "source_path": "str",
                    "destination_path": "str",
                    "threads": "int",
                    "start_time": "str",
                    "end_time": "str",
                    "part_size": "int",
                    "kwargs": "object"
                }
            }
        ],
        "S3Client.move": [
            {
                "type": "method",
                "args": {
                    "source_path": "str",
                    "destination_path": "str",
                    "kwargs": "object"
                }
            }
        ],
        "S3Client.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_access_key_id": "str",
                    "aws_secret_access_key": "str",
                    "kwargs": "object"
                }
            }
        ],
        "S3Target.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "format": "six.Format",
                    "client": "S3Client",
                    "kwargs": "object"
                }
            }
        ],
        "S3PathTask.output": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "util": {
        "xrange": [
            {
                "type": "var",
                "anno": "six.Callable"
            }
        ],
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "task_wraps": [
            {
                "type": "func",
                "args": {
                    "P": "task.Task"
                }
            }
        ],
        "inherits.task_to_inherit": [
            {
                "type": "attr",
                "anno": "task.Task"
            }
        ],
        "inherits.__init__": [
            {
                "type": "method",
                "args": {
                    "task_to_inherit": "task.Task"
                }
            }
        ],
        "requires.inherit_decorator": [
            {
                "type": "attr",
                "anno": "inherits"
            }
        ],
        "requires.__init__": [
            {
                "type": "method",
                "args": {
                    "task_to_require": "task.Task"
                }
            }
        ],
        "copies.requires_decorator": [
            {
                "type": "attr",
                "anno": "requires"
            }
        ],
        "copies.__init__": [
            {
                "type": "method",
                "args": {
                    "task_to_copy": "task.Task"
                }
            }
        ],
        "common_params": [
            {
                "type": "func",
                "args": {
                    "task_instance": "task.Task",
                    "task_cls": "type[Task]"
                }
            }
        ],
        "previous": [
            {
                "type": "func",
                "args": {
                    "task": "task.Task"
                }
            }
        ],
        "inherits.Wrapped.clone_parent": [
            {
                "type": "method",
                "args": {
                    "_self": "task.Task",
                    "args": "object"
                }
            }
        ],
        "requires.Wrapped.requires": [
            {
                "type": "method",
                "args": {
                    "_self": "task.Task"
                }
            }
        ],
        "inherits.__call__": [
            {
                "type": "method",
                "args": {
                    "task_that_inherits": "task.Task"
                }
            }
        ],
        "get_previous_completed": [
            {
                "type": "func",
                "args": {
                    "task": "task.Task",
                    "max_steps": "int"
                }
            }
        ],
        "copies.Wrapped.run": [
            {
                "type": "method",
                "args": {
                    "_self": "task.Task"
                }
            }
        ],
        "requires.__call__": [
            {
                "type": "method",
                "args": {
                    "task_that_requires": "task.Task"
                }
            }
        ],
        "delegates": [
            {
                "type": "func",
                "args": {
                    "task_that_delegates": "task.Task"
                }
            }
        ],
        "copies.__call__": [
            {
                "type": "method",
                "args": {
                    "task_that_copies": "task.Task"
                }
            }
        ]
    },
    "worker": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "fork_lock": [
            {
                "type": "var",
                "anno": "threading.Lock"
            }
        ],
        "_WAIT_INTERVAL_EPS": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "TaskProcess.task": [
            {
                "type": "attr",
                "anno": "Task"
            }
        ],
        "TaskProcess.worker_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskProcess.result_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "TaskProcess.tracking_url_callback": [
            {
                "type": "attr",
                "anno": "types.GeneratorType"
            }
        ],
        "TaskProcess.status_message_callback": [
            {
                "type": "attr",
                "anno": "types.GeneratorType"
            }
        ],
        "TaskProcess.random_seed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskProcess.timeout_time": [
            {
                "type": "attr",
                "anno": "float | None"
            }
        ],
        "TaskProcess.__init__": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "worker_id": "str",
                    "result_queue": "Queue",
                    "tracking_url_callback": "types.GeneratorType",
                    "status_message_callback": "types.GeneratorType",
                    "random_seed": "bool",
                    "worker_timeout": "int"
                }
            }
        ],
        "SingleProcessPool.apply_async": [
            {
                "type": "method",
                "args": {
                    "function": "Callable",
                    "args": "tuple[asyncio.Future, ...]"
                }
            }
        ],
        "SingleProcessPool.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SingleProcessPool.join": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DequeQueue.put": [
            {
                "type": "method",
                "args": {
                    "obj": "object",
                    "block": "bool",
                    "timeout": "int"
                }
            }
        ],
        "DequeQueue.get": [
            {
                "type": "method",
                "args": {
                    "block": "bool",
                    "timeout": "float"
                }
            }
        ],
        "AsyncCompletionException.trace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AsyncCompletionException.__init__": [
            {
                "type": "method",
                "args": {
                    "trace": "str"
                }
            }
        ],
        "TracebackWrapper.trace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TracebackWrapper.__init__": [
            {
                "type": "method",
                "args": {
                    "trace": "str"
                }
            }
        ],
        "worker.ping_interval": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "worker.keep_alive": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "worker.count_uniques": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "worker.wait_interval": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "worker.wait_jitter": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "worker.max_reschedules": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "worker.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "worker.task_limit": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "worker.retry_external_tasks": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "worker.no_install_shutdown_handler": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KeepAliveThread._should_stop": [
            {
                "type": "attr",
                "anno": "threading.Event"
            }
        ],
        "KeepAliveThread._scheduler": [
            {
                "type": "attr",
                "anno": "Scheduler"
            }
        ],
        "KeepAliveThread._worker_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KeepAliveThread._ping_interval": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "KeepAliveThread.__init__": [
            {
                "type": "method",
                "args": {
                    "scheduler": "Scheduler",
                    "worker_id": "str",
                    "ping_interval": "float"
                }
            }
        ],
        "Worker.worker_processes": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Worker._worker_info": [
            {
                "type": "attr",
                "anno": "list[tuple[str, str]]"
            }
        ],
        "Worker._config": [
            {
                "type": "attr",
                "anno": "worker"
            }
        ],
        "Worker._id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Worker._scheduler": [
            {
                "type": "attr",
                "anno": "Scheduler"
            }
        ],
        "Worker._assistant": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Worker._stop_requesting_work": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Worker.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Worker._scheduled_tasks": [
            {
                "type": "attr",
                "anno": "dict[str, Task]"
            }
        ],
        "Worker._suspended_tasks": [
            {
                "type": "attr",
                "anno": "dict[str, Task]"
            }
        ],
        "Worker._batch_running_tasks": [
            {
                "type": "attr",
                "anno": "dict[str, list[str]]"
            }
        ],
        "Worker._batch_families_sent": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "Worker._first_task": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Worker.add_succeeded": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Worker.run_succeeded": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Worker.unfulfilled_counts": [
            {
                "type": "attr",
                "anno": "dict[str, int]"
            }
        ],
        "Worker._task_result_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "Worker._running_tasks": [
            {
                "type": "attr",
                "anno": "dict[str, TaskProcess]"
            }
        ],
        "Worker._add_task_history": [
            {
                "type": "attr",
                "anno": "list[tuple[str, str, bool]]"
            }
        ],
        "Worker._get_work_response_history": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "Worker._keep_alive_thread": [
            {
                "type": "attr",
                "anno": "threading.Thread"
            }
        ],
        "Worker._generate_worker_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker._validate_task": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "Worker._log_unexpected_error": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "Worker._validate_dependency": [
            {
                "type": "method",
                "args": {
                    "dependency": "Task"
                }
            }
        ],
        "Worker._check_complete_value": [
            {
                "type": "method",
                "args": {
                    "is_complete": "bool"
                }
            }
        ],
        "Worker._log_remote_tasks": [
            {
                "type": "method",
                "args": {
                    "running_tasks": "dict[str, TaskProcess]",
                    "n_pending_tasks": "int",
                    "n_unique_pending": "int"
                }
            }
        ],
        "Worker._sleeper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker._keep_alive": [
            {
                "type": "method",
                "args": {
                    "n_pending_tasks": "int",
                    "n_unique_pending": "int"
                }
            }
        ],
        "Worker.handle_interrupt": [
            {
                "type": "method",
                "args": {
                    "signum": "int",
                    "_": "int"
                }
            }
        ],
        "Worker.__init__": [
            {
                "type": "method",
                "args": {
                    "scheduler": "Scheduler",
                    "worker_id": "str",
                    "worker_processes": "int",
                    "assistant": "bool",
                    "kwargs": "str"
                }
            }
        ],
        "_get_retry_policy_dict": [
            {
                "type": "func",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "TaskProcess._recursive_terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskProcess.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker._email_error": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "formatted_traceback": "str",
                    "subject": "str",
                    "headline": "str"
                }
            }
        ],
        "Worker._email_task_failure": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "formatted_traceback": "str"
                }
            }
        ],
        "Worker._email_unexpected_error": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "formatted_traceback": "str"
                }
            }
        ],
        "Worker._email_dependency_error": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "formatted_traceback": "str"
                }
            }
        ],
        "Worker._email_complete_error": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "formatted_traceback": "str"
                }
            }
        ],
        "Worker._log_dependency_error": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "tb": "str"
                }
            }
        ],
        "Worker._log_complete_error": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "tb": "str"
                }
            }
        ],
        "Worker.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KeepAliveThread.stop": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker.__exit__": [
            {
                "type": "method",
                "args": {
                    "type": "str",
                    "value": "str",
                    "traceback": "str"
                }
            }
        ],
        "KeepAliveThread.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker._add_worker": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker._create_task_process": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "Worker._get_work_task_id": [
            {
                "type": "method",
                "args": {
                    "get_work_response": "dict"
                }
            }
        ],
        "Worker._add_task": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "Worker._add": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "is_complete": "bool"
                }
            }
        ],
        "Worker.add": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "multiprocess": "bool"
                }
            }
        ],
        "Worker._purge_children": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "check_complete": [
            {
                "type": "func",
                "args": {
                    "task": "Task",
                    "out_queue": "Queue"
                }
            }
        ],
        "Worker._get_work": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker._handle_next_task": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_is_external": [
            {
                "type": "func",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "TaskProcess.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker._run_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str"
                }
            }
        ],
        "TaskProcess._run_get_new_deps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker._add_task_batcher": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ]
    },
    "scheduler": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "UPSTREAM_RUNNING": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "UPSTREAM_MISSING_INPUT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "UPSTREAM_FAILED": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "UPSTREAM_DISABLED": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "UPSTREAM_SEVERITY_ORDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "STATUS_TO_UPSTREAM_MAP": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "TASK_FAMILY_RE": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "RPC_METHODS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_retry_policy_fields": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "RetryPolicy": [
            {
                "type": "var",
                "anno": "RetryPolicy"
            }
        ],
        "_get_empty_retry_policy": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "scheduler.retry_delay": [
            {
                "type": "attr",
                "anno": "parameter.FloatParameter"
            }
        ],
        "scheduler.remove_delay": [
            {
                "type": "attr",
                "anno": "parameter.FloatParameter"
            }
        ],
        "scheduler.worker_disconnect_delay": [
            {
                "type": "attr",
                "anno": "parameter.FloatParameter"
            }
        ],
        "scheduler.state_path": [
            {
                "type": "attr",
                "anno": "parameter.Parameter"
            }
        ],
        "scheduler.disable_window": [
            {
                "type": "attr",
                "anno": "parameter.IntParameter"
            }
        ],
        "scheduler.retry_count": [
            {
                "type": "attr",
                "anno": "parameter.IntParameter"
            }
        ],
        "scheduler.disable_hard_timeout": [
            {
                "type": "attr",
                "anno": "parameter.IntParameter"
            }
        ],
        "scheduler.disable_persist": [
            {
                "type": "attr",
                "anno": "parameter.IntParameter"
            }
        ],
        "scheduler.max_shown_tasks": [
            {
                "type": "attr",
                "anno": "parameter.IntParameter"
            }
        ],
        "scheduler.max_graph_nodes": [
            {
                "type": "attr",
                "anno": "parameter.IntParameter"
            }
        ],
        "scheduler.record_task_history": [
            {
                "type": "attr",
                "anno": "parameter.BoolParameter"
            }
        ],
        "scheduler.prune_on_get_work": [
            {
                "type": "attr",
                "anno": "parameter.BoolParameter"
            }
        ],
        "scheduler._get_retry_policy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Failures.window": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Failures.failures": [
            {
                "type": "attr",
                "anno": "collections.deque"
            }
        ],
        "Failures.first_failure_time": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Failures.__init__": [
            {
                "type": "method",
                "args": {
                    "window": "float"
                }
            }
        ],
        "Failures.add_failure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Failures.num_failures": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_get_default": [
            {
                "type": "func",
                "args": {
                    "x": "dict",
                    "default": "dict"
                }
            }
        ],
        "Task.id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.stakeholders": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "Task.workers": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "Task.deps": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "Task.status": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.time": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Task.updated": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Task.retry": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Task.remove": [
            {
                "type": "attr",
                "anno": "None"
            }
        ],
        "Task.worker_running": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.time_running": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Task.expl": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.priority": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Task.resources": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Task.family": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.module": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Task.retry_policy": [
            {
                "type": "attr",
                "anno": "RetryPolicy"
            }
        ],
        "Task.failures": [
            {
                "type": "attr",
                "anno": "Failures"
            }
        ],
        "Task.tracking_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.status_message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.scheduler_disable_time": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Task.runnable": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Task.batchable": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Task.batch_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Task.__init__": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "status": "str",
                    "deps": "set",
                    "resources": "dict",
                    "priority": "int",
                    "family": "str",
                    "module": "str",
                    "params": "dict",
                    "tracking_url": "str",
                    "status_message": "str",
                    "retry_policy": "RetryPolicy"
                }
            }
        ],
        "Task.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.is_batchable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.add_failure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Task.has_excessive_failures": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker.id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Worker.reference": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Worker.last_active": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Worker.last_get_work": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Worker.started": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Worker.tasks": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "Worker.info": [
            {
                "type": "attr",
                "anno": "dict[str, bool]"
            }
        ],
        "Worker.disabled": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Worker.__init__": [
            {
                "type": "method",
                "args": {
                    "worker_id": "str",
                    "last_active": "float"
                }
            }
        ],
        "Worker.update": [
            {
                "type": "method",
                "args": {
                    "worker_reference": "str",
                    "get_work": "bool"
                }
            }
        ],
        "Worker.prune": [
            {
                "type": "method",
                "args": {
                    "config": "configuration.Config"
                }
            }
        ],
        "Worker.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState._state_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleTaskState._tasks": [
            {
                "type": "attr",
                "anno": "dict[str, Task]"
            }
        ],
        "SimpleTaskState._status_tasks": [
            {
                "type": "attr",
                "anno": "dict[str, Task]"
            }
        ],
        "SimpleTaskState._active_workers": [
            {
                "type": "attr",
                "anno": "dict[str, Worker]"
            }
        ],
        "SimpleTaskState._task_batchers": [
            {
                "type": "attr",
                "anno": "dict[str, dict[str, str]]"
            }
        ],
        "SimpleTaskState.__init__": [
            {
                "type": "method",
                "args": {
                    "state_path": "str"
                }
            }
        ],
        "SimpleTaskState.get_state": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState.set_state": [
            {
                "type": "method",
                "args": {
                    "state": "dict[str, Task]"
                }
            }
        ],
        "SimpleTaskState.dump": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState.get_active_tasks": [
            {
                "type": "method",
                "args": {
                    "status": "str"
                }
            }
        ],
        "SimpleTaskState.get_batch_running_tasks": [
            {
                "type": "method",
                "args": {
                    "batch_id": "str"
                }
            }
        ],
        "SimpleTaskState.get_running_tasks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState.set_batcher": [
            {
                "type": "method",
                "args": {
                    "worker_id": "str",
                    "family": "str",
                    "batcher_args": "str",
                    "max_batch_size": "float"
                }
            }
        ],
        "SimpleTaskState.num_pending_tasks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState.has_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str"
                }
            }
        ],
        "SimpleTaskState.get_active_workers": [
            {
                "type": "method",
                "args": {
                    "last_active_lt": "float",
                    "last_get_work_gt": "float"
                }
            }
        ],
        "SimpleTaskState.get_worker_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState.get_worker": [
            {
                "type": "method",
                "args": {
                    "worker_id": "str"
                }
            }
        ],
        "Scheduler._config": [
            {
                "type": "attr",
                "anno": "scheduler.Scheduler"
            }
        ],
        "Scheduler._state": [
            {
                "type": "attr",
                "anno": "SimpleTaskState"
            }
        ],
        "Scheduler._task_history": [
            {
                "type": "attr",
                "anno": "history.TaskHistory"
            }
        ],
        "Scheduler._resources": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Scheduler._make_task": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "Scheduler._worker_requests": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Scheduler.update": [
            {
                "type": "method",
                "args": {
                    "worker_id": "str",
                    "worker_reference": "str",
                    "get_work": "bool"
                }
            }
        ],
        "Worker.add_info": [
            {
                "type": "method",
                "args": {
                    "info": "dict[str, bool]"
                }
            }
        ],
        "Scheduler._generate_retry_policy": [
            {
                "type": "method",
                "args": {
                    "task_retry_policy_dict": "dict"
                }
            }
        ],
        "Scheduler._rank": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "Scheduler.resources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler._used_resources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler.task_history": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "UPSTREAM_SEVERITY_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "Failures.clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler.dump": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState._remove_workers_from_tasks": [
            {
                "type": "method",
                "args": {
                    "workers": "set",
                    "remove_stakeholders": "bool"
                }
            }
        ],
        "SimpleTaskState.disable_workers": [
            {
                "type": "method",
                "args": {
                    "workers": "set"
                }
            }
        ],
        "SimpleTaskState.inactivate_workers": [
            {
                "type": "method",
                "args": {
                    "delete_workers": "set"
                }
            }
        ],
        "Task.pretty_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler.__init__": [
            {
                "type": "method",
                "args": {
                    "config": "scheduler.Scheduler",
                    "resources": "dict",
                    "task_history_impl": "history.TaskHistory",
                    "kwargs": "dict"
                }
            }
        ],
        "SimpleTaskState.inactivate_tasks": [
            {
                "type": "method",
                "args": {
                    "delete_tasks": "list[str]"
                }
            }
        ],
        "SimpleTaskState.get_pending_tasks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState.load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler.load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Worker.get_pending_tasks": [
            {
                "type": "method",
                "args": {
                    "state": "SimpleTaskState"
                }
            }
        ],
        "Scheduler._has_resources": [
            {
                "type": "method",
                "args": {
                    "needed_resources": "dict",
                    "used_resources": "dict"
                }
            }
        ],
        "SimpleTaskState.get_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "default": "dict",
                    "setdefault": "dict"
                }
            }
        ],
        "Scheduler._first_task_display_name": [
            {
                "type": "method",
                "args": {
                    "worker": "Worker"
                }
            }
        ],
        "Scheduler._filter_done": [
            {
                "type": "method",
                "args": {
                    "task_ids": "list"
                }
            }
        ],
        "SimpleTaskState.get_batcher": [
            {
                "type": "method",
                "args": {
                    "worker_id": "str",
                    "family": "str"
                }
            }
        ],
        "Worker.assistant": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskState.get_assistants": [
            {
                "type": "method",
                "args": {
                    "last_active_lt": "float"
                }
            }
        ],
        "Worker.is_trivial_worker": [
            {
                "type": "method",
                "args": {
                    "state": "SimpleTaskState"
                }
            }
        ],
        "Scheduler._serialize_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "include_deps": "bool",
                    "deps": "list"
                }
            }
        ],
        "Scheduler._upstream_status": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "upstream_status_table": "dict"
                }
            }
        ],
        "Scheduler._schedulable": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "Scheduler._update_priority": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "prio": "int",
                    "worker": "str"
                }
            }
        ],
        "rpc_method": [
            {
                "type": "func",
                "args": {
                    "request_args": "str"
                }
            }
        ],
        "Scheduler.get_task_status_message": [
            {
                "type": "method",
                "args": {
                    "task_id": "str"
                }
            }
        ],
        "Scheduler.set_task_status_message": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "status_message": "str"
                }
            }
        ],
        "Scheduler.fetch_error": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "kwargs": "str"
                }
            }
        ],
        "Scheduler.ping": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ],
        "Scheduler.update_resources": [
            {
                "type": "method",
                "args": {
                    "resources": "str"
                }
            }
        ],
        "Scheduler.disable_worker": [
            {
                "type": "method",
                "args": {
                    "worker": "Worker"
                }
            }
        ],
        "Scheduler.add_worker": [
            {
                "type": "method",
                "args": {
                    "worker": "str",
                    "info": "dict[str, bool]",
                    "kwargs": "object"
                }
            }
        ],
        "Scheduler.add_task_batcher": [
            {
                "type": "method",
                "args": {
                    "worker": "str",
                    "task_family": "str",
                    "batched_args": "str",
                    "max_batch_size": "float"
                }
            }
        ],
        "Scheduler._update_task_history": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "status": "str",
                    "host": "str"
                }
            }
        ],
        "Scheduler.add_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "status": "str",
                    "runnable": "bool",
                    "deps": "dict",
                    "new_deps": "dict",
                    "expl": "str",
                    "resources": "dict",
                    "priority": "int",
                    "family": "str",
                    "module": "str",
                    "params": "dict",
                    "assistant": "bool",
                    "tracking_url": "str",
                    "worker": "str",
                    "batchable": "bool",
                    "batch_id": "str",
                    "retry_policy_dict": "dict",
                    "kwargs": "str"
                }
            }
        ],
        "SimpleTaskState.may_prune": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "SimpleTaskState.set_status": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "new_status": "str",
                    "config": "Config"
                }
            }
        ],
        "Scheduler._reset_orphaned_batch_running_tasks": [
            {
                "type": "method",
                "args": {
                    "worker_id": "str"
                }
            }
        ],
        "SimpleTaskState.fail_dead_worker_task": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "config": "Config",
                    "assistants": "set"
                }
            }
        ],
        "SimpleTaskState.set_batch_running": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "batch_id": "str",
                    "worker_id": "str"
                }
            }
        ],
        "SimpleTaskState.re_enable": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "config": "Config"
                }
            }
        ],
        "Scheduler.re_enable_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str"
                }
            }
        ],
        "SimpleTaskState.update_status": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "config": "Config"
                }
            }
        ],
        "Scheduler._prune_tasks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler.prune": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler.task_search": [
            {
                "type": "method",
                "args": {
                    "task_str": "str",
                    "kwargs": "str"
                }
            }
        ],
        "Scheduler.resource_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler.worker_list": [
            {
                "type": "method",
                "args": {
                    "include_running": "bool",
                    "kwargs": "dict"
                }
            }
        ],
        "Scheduler.task_list": [
            {
                "type": "method",
                "args": {
                    "status": "str",
                    "upstream_status": "str",
                    "limit": "bool",
                    "search": "str",
                    "kwargs": "str"
                }
            }
        ],
        "Scheduler.get_work": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "assistant": "bool",
                    "current_tasks": "list",
                    "worker": "str",
                    "kwargs": "object"
                }
            }
        ],
        "Scheduler._prune_workers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Scheduler._traverse_graph": [
            {
                "type": "method",
                "args": {
                    "root_task_id": "str",
                    "seen": "set",
                    "dep_func": "Callable",
                    "include_done": "bool"
                }
            }
        ],
        "Scheduler.inverse_dep_graph": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "include_done": "bool",
                    "kwargs": "str"
                }
            }
        ],
        "Scheduler.dep_graph": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "include_done": "bool",
                    "kwargs": "str"
                }
            }
        ],
        "Scheduler.graph": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.gcs": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RETRYABLE_ERRORS": [
            {
                "type": "var",
                "anno": "tuple[httplib2.HttpError, IOError]"
            }
        ],
        "NUM_RETRIES": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "CHUNKSIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "DEFAULT_MIMETYPE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "EVENTUAL_CONSISTENCY_SLEEP_INTERVAL": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "EVENTUAL_CONSISTENCY_MAX_SLEEPS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_wait_for_consistency": [
            {
                "type": "func",
                "args": {
                    "checker": "Callable[[], bool]"
                }
            }
        ],
        "GCSClient.chunksize": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GCSClient.client": [
            {
                "type": "attr",
                "anno": "discovery.Client"
            }
        ],
        "GCSClient.__init__": [
            {
                "type": "method",
                "args": {
                    "oauth_credentials": "oauth2client.client.GoogleCredentials",
                    "descriptor": "str",
                    "http_": "httplib2.Http",
                    "chunksize": "int"
                }
            }
        ],
        "GCSClient._path_to_bucket_and_key": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "GCSClient._is_root": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "GCSClient._add_path_delimiter": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "_DeleteOnCloseFile.readable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DeleteOnCloseFile.writable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DeleteOnCloseFile.seekable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AtomicGCSFile.gcs_client": [
            {
                "type": "attr",
                "anno": "GCSClient"
            }
        ],
        "AtomicGCSFile.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "gcs_client": "GCSClient"
                }
            }
        ],
        "GCSTarget.fs": [
            {
                "type": "attr",
                "anno": "six.Client"
            }
        ],
        "GCSTarget.format": [
            {
                "type": "attr",
                "anno": "six.Format"
            }
        ],
        "GCSTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "format": "six.Format",
                    "client": "GCSClient"
                }
            }
        ],
        "GCSFlagTarget.fs": [
            {
                "type": "attr",
                "anno": "GCSClient"
            }
        ],
        "GCSFlagTarget.format": [
            {
                "type": "attr",
                "anno": "six.Format"
            }
        ],
        "GCSFlagTarget.flag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCSFlagTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "format": "six.Format",
                    "client": "GCSClient",
                    "flag": "str"
                }
            }
        ],
        "_DeleteOnCloseFile.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GCSClient.download": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "chunksize": "int"
                }
            }
        ],
        "GCSTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "GCSClient._list_iter": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str"
                }
            }
        ],
        "GCSClient.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "GCSClient._obj_exists": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "obj": "str"
                }
            }
        ],
        "GCSClient.isdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "GCSClient.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "GCSFlagTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GCSClient._do_put": [
            {
                "type": "method",
                "args": {
                    "media": "http.MediaFileUpload",
                    "dest_path": "str"
                }
            }
        ],
        "GCSClient.put_string": [
            {
                "type": "method",
                "args": {
                    "contents": "bytes",
                    "dest_path": "str",
                    "mimetype": "str"
                }
            }
        ],
        "GCSClient.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "GCSClient.put": [
            {
                "type": "method",
                "args": {
                    "filename": "str",
                    "dest_path": "str",
                    "mimetype": "str",
                    "chunksize": "int"
                }
            }
        ],
        "GCSClient.copy": [
            {
                "type": "method",
                "args": {
                    "source_path": "str",
                    "destination_path": "str"
                }
            }
        ],
        "GCSClient.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool"
                }
            }
        ],
        "GCSClient.move": [
            {
                "type": "method",
                "args": {
                    "source_path": "str",
                    "destination_path": "str"
                }
            }
        ],
        "GCSClient.rename": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AtomicGCSFile.move_to_final_destination": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.pig": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "PigJobTask.pig_env_vars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask.pig_properties": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask.pig_parameters": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask.pig_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask.pig_script_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigRunContext.job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigRunContext.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigRunContext.__old_signal": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "PigRunContext.kill_job": [
            {
                "type": "method",
                "args": {
                    "captured_signal": "int",
                    "stack_frame": "int"
                }
            }
        ],
        "PigRunContext.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigRunContext.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "int",
                    "exc_val": "int",
                    "exc_tb": "int"
                }
            }
        ],
        "PigJobError.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigJobError.out": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PigJobError.err": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PigJobError.__init__": [
            {
                "type": "method",
                "args": {
                    "message": "str",
                    "out": "bool",
                    "err": "bool"
                }
            }
        ],
        "PigJobError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask.pig_home": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask.track_and_progress": [
            {
                "type": "method",
                "args": {
                    "cmd": "str"
                }
            }
        ],
        "PigJobTask.pig_command_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask._build_pig_cmd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigJobTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.esindex": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "ElasticsearchTarget.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTarget.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ElasticsearchTarget.http_auth": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTarget.index": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTarget.doc_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTarget.update_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTarget.marker_index_hist_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ElasticsearchTarget.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ElasticsearchTarget.extra_elasticsearch_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ElasticsearchTarget.es": [
            {
                "type": "attr",
                "anno": "elasticsearch.Elasticsearch"
            }
        ],
        "ElasticsearchTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "port": "int",
                    "index": "str",
                    "doc_type": "str",
                    "update_id": "str",
                    "marker_index_hist_size": "int",
                    "http_auth": "str",
                    "timeout": "int",
                    "extra_elasticsearch_args": "dict"
                }
            }
        ],
        "ElasticsearchTarget.marker_index_document_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.host": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.port": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.http_auth": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.doc_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.mapping": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.settings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.chunk_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.raise_on_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.purge_existing_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.marker_index_hist_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.timeout": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.extra_elasticsearch_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex._init_connection": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.update_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ElasticsearchTarget.marker_doc_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTarget.marker_index": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTarget.ensure_hist_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ElasticsearchTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.delete_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.create_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ElasticsearchTarget.create_marker_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ElasticsearchTarget.touch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.docs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex._docs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToIndex.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hadoop_jar": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "HadoopJarJobRunner.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopJarJobTask.jar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopJarJobTask.main": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopJarJobTask.job_runner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopJarJobTask.atomic_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopJarJobTask.ssh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopJarJobTask.args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "fix_paths": [
            {
                "type": "func",
                "args": {
                    "job": "luigi.contrib.hadoop.BaseHadoopJobTask"
                }
            }
        ],
        "HadoopJarJobRunner.run_job": [
            {
                "type": "method",
                "args": {
                    "job": "luigi.contrib.hadoop.BaseHadoopJobTask",
                    "tracking_url_callback": "str"
                }
            }
        ]
    },
    "contrib.spark": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "SparkSubmitTask.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitTask.entry_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitTask.app": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitTask.always_log_stderr": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitTask.app_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.app_command": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask._list_config": [
            {
                "type": "method",
                "args": {
                    "config": "six.Union[str, six.Sequence[str]]"
                }
            }
        ],
        "SparkSubmitTask._dict_config": [
            {
                "type": "method",
                "args": {
                    "config": "dict"
                }
            }
        ],
        "SparkSubmitTask._text_arg": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "str"
                }
            }
        ],
        "SparkSubmitTask._list_arg": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "list"
                }
            }
        ],
        "SparkSubmitTask._flag_arg": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "bool"
                }
            }
        ],
        "PySparkTask.app": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PySparkTask.deploy_mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PySparkTask.name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PySparkTask.setup": [
            {
                "type": "method",
                "args": {
                    "conf": "SparkConf"
                }
            }
        ],
        "PySparkTask.main": [
            {
                "type": "method",
                "args": {
                    "sc": "SparkContext",
                    "args": "str"
                }
            }
        ],
        "PySparkTask.run_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PySparkTask.run_pickle": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PySparkTask.app_command": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask._dict_arg": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "dict"
                }
            }
        ],
        "PySparkTask._dump": [
            {
                "type": "method",
                "args": {
                    "fd": "pickle.Pickle"
                }
            }
        ],
        "PySparkTask.py_packages": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.hadoop_conf_dir": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.get_environment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.program_environment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.archives": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.num_executors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.queue": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.executor_cores": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.total_executor_cores": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.supervise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.driver_cores": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.executor_memory": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.driver_class_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.driver_library_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.driver_java_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.driver_memory": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.properties_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.conf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.py_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.packages": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.jars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.deploy_mode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.master": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.spark_submit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.spark_command": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PySparkTask.program_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitTask.program_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PySparkTask._setup_packages": [
            {
                "type": "method",
                "args": {
                    "sc": "Spark"
                }
            }
        ],
        "PySparkTask.setup_remote": [
            {
                "type": "method",
                "args": {
                    "sc": "Spark"
                }
            }
        ],
        "PySparkTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hdfs.clients": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "_AUTOCONFIG_CLIENT": [
            {
                "type": "var",
                "anno": "threading.Lock"
            }
        ],
        "get_autoconfig_client": [
            {
                "type": "func",
                "args": {
                    "client_cache": "threading.Lock"
                }
            }
        ],
        "_with_ac": [
            {
                "type": "func",
                "args": {
                    "method_name": "str"
                }
            }
        ],
        "listdir": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "mkdir": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "remove": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "rename": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "exists": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ]
    },
    "contrib.hdfs.config": {
        "hdfs.client_version": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "hdfs.effective_user": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "hdfs.snakebite_autoconfig": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "hdfs.namenode_host": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "hdfs.namenode_port": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "hdfs.client": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "hdfs.tmp_dir": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "hadoopcli.command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "hadoopcli.version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "get_configured_hadoop_version": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_configured_hdfs_client": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "load_hadoop_cmd": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "tmppath": [
            {
                "type": "func",
                "args": {
                    "path": "str",
                    "include_unix_username": "bool"
                }
            }
        ]
    },
    "contrib.hdfs.webhdfs_client": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "webhdfs.port": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "webhdfs.user": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "WebHdfsClient.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHdfsClient.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WebHdfsClient.user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHdfsClient.url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WebHdfsClient.client": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WebHdfsClient.walk": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "depth": "int"
                }
            }
        ],
        "WebHdfsClient.upload": [
            {
                "type": "method",
                "args": {
                    "hdfs_path": "str",
                    "local_path": "str",
                    "overwrite": "bool"
                }
            }
        ],
        "WebHdfsClient.remove": [
            {
                "type": "method",
                "args": {
                    "hdfs_path": "str",
                    "recursive": "bool",
                    "skip_trash": "bool"
                }
            }
        ],
        "WebHdfsClient.chmod": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "permissions": "int",
                    "recursive": "bool"
                }
            }
        ],
        "WebHdfsClient.chown": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "owner": "str",
                    "group": "str",
                    "recursive": "bool"
                }
            }
        ],
        "WebHdfsClient.count": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "WebHdfsClient.copy": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "destination": "str"
                }
            }
        ],
        "WebHdfsClient.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "destination": "str"
                }
            }
        ],
        "WebHdfsClient.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "ignore_directories": "bool",
                    "ignore_files": "bool",
                    "include_size": "bool",
                    "include_type": "bool",
                    "include_time": "bool",
                    "recursive": "bool"
                }
            }
        ],
        "WebHdfsClient.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "port": "int",
                    "user": "str"
                }
            }
        ],
        "WebHdfsClient.read": [
            {
                "type": "method",
                "args": {
                    "hdfs_path": "str",
                    "offset": "int",
                    "length": "int",
                    "buffer_size": "int",
                    "chunk_size": "int",
                    "buffer_char": "str"
                }
            }
        ],
        "WebHdfsClient.touchz": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "WebHdfsClient.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "WebHdfsClient.download": [
            {
                "type": "method",
                "args": {
                    "hdfs_path": "str",
                    "local_path": "str",
                    "overwrite": "bool",
                    "n_threads": "int"
                }
            }
        ],
        "WebHdfsClient.get": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "local_destination": "str"
                }
            }
        ],
        "WebHdfsClient.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "mode": "int",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "WebHdfsClient.move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str"
                }
            }
        ]
    },
    "contrib.hdfs.abstract_client": {
        "HdfsFileSystem.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool",
                    "skip_trash": "bool"
                }
            }
        ],
        "HdfsFileSystem.chmod": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "permissions": "int",
                    "recursive": "bool"
                }
            }
        ],
        "HdfsFileSystem.chown": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "owner": "str",
                    "group": "str",
                    "recursive": "bool"
                }
            }
        ],
        "HdfsFileSystem.count": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsFileSystem.copy": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "destination": "str"
                }
            }
        ],
        "HdfsFileSystem.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "destination": "str"
                }
            }
        ],
        "HdfsFileSystem.get": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "local_destination": "str"
                }
            }
        ],
        "HdfsFileSystem.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "HdfsFileSystem.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "ignore_directories": "bool",
                    "ignore_files": "bool",
                    "include_size": "bool",
                    "include_type": "bool",
                    "include_time": "bool",
                    "recursive": "bool"
                }
            }
        ],
        "HdfsFileSystem.touchz": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsFileSystem.rename_dont_move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str"
                }
            }
        ],
        "HdfsFileSystem.rename": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str"
                }
            }
        ]
    },
    "contrib.hdfs.error": {
        "HDFSCliError.returncode": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HDFSCliError.stdout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HDFSCliError.stderr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HDFSCliError.__init__": [
            {
                "type": "method",
                "args": {
                    "command": "str",
                    "returncode": "int",
                    "stdout": "str",
                    "stderr": "str"
                }
            }
        ]
    },
    "contrib.hdfs.target": {
        "HdfsTarget.format": [
            {
                "type": "attr",
                "anno": "hdfs_format.Format"
            }
        ],
        "HdfsTarget.is_tmp": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HdfsTarget._fs": [
            {
                "type": "attr",
                "anno": "hdfs_clients.AutoconfigClient"
            }
        ],
        "HdfsTarget.fs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HdfsTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "format": "hdfs_format.Format",
                    "is_tmp": "bool",
                    "fs": "hdfs_clients.AutoconfigClient"
                }
            }
        ],
        "HdfsTarget.move_dir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "HdfsTarget.glob_exists": [
            {
                "type": "method",
                "args": {
                    "expected_files": "int"
                }
            }
        ],
        "HdfsTarget.copy": [
            {
                "type": "method",
                "args": {
                    "dst_dir": "str"
                }
            }
        ],
        "HdfsTarget.remove": [
            {
                "type": "method",
                "args": {
                    "skip_trash": "bool"
                }
            }
        ],
        "HdfsTarget._is_writable": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsTarget.is_writable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HdfsTarget.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HdfsTarget.rename": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "HdfsTarget.move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "raise_if_exists": "bool"
                }
            }
        ]
    },
    "contrib.hdfs.hadoopcli_clients": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "HdfsClient.recursive_listdir_cmd": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HdfsClient.call_check": [
            {
                "type": "method",
                "args": {
                    "command": "list"
                }
            }
        ],
        "HdfsClient.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsClient.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool",
                    "skip_trash": "bool"
                }
            }
        ],
        "HdfsClient.chmod": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "permissions": "int",
                    "recursive": "bool"
                }
            }
        ],
        "HdfsClient.chown": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "owner": "str",
                    "group": "str",
                    "recursive": "bool"
                }
            }
        ],
        "HdfsClient.count": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsClient.copy": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "destination": "str"
                }
            }
        ],
        "HdfsClient.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "destination": "str"
                }
            }
        ],
        "HdfsClient.get": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "local_destination": "str"
                }
            }
        ],
        "HdfsClient.getmerge": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "local_destination": "str",
                    "new_line": "bool"
                }
            }
        ],
        "HdfsClient.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "HdfsClient.move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str"
                }
            }
        ],
        "HdfsClient.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "ignore_directories": "bool",
                    "ignore_files": "bool",
                    "include_size": "bool",
                    "include_type": "bool",
                    "include_time": "bool",
                    "recursive": "bool"
                }
            }
        ],
        "HdfsClient.touchz": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsClientCdh3.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsClientCdh3.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool",
                    "skip_trash": "bool"
                }
            }
        ],
        "HdfsClientApache1.recursive_listdir_cmd": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "create_hadoopcli_client": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "HdfsClientApache1.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ]
    },
    "contrib.hdfs.format": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "HdfsReadPipe.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsAtomicWritePipe.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsAtomicWritePipe.tmppath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsAtomicWritePipe.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "HdfsAtomicWriteDirPipe.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsAtomicWriteDirPipe.tmppath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsAtomicWriteDirPipe.datapath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsAtomicWriteDirPipe.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "data_extension": "str"
                }
            }
        ],
        "PlainFormat.input": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PlainFormat.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PlainFormat.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "PlainFormat.hdfs_reader": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "PlainFormat.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "output_pipe": "str"
                }
            }
        ],
        "PlainFormat.hdfs_writer": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "PlainDirFormat.input": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PlainDirFormat.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PlainDirFormat.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "PlainDirFormat.hdfs_reader": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "PlainDirFormat.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "PlainDirFormat.hdfs_writer": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "Plain": [
            {
                "type": "var",
                "anno": "luigi.format.Format"
            }
        ],
        "PlainDir": [
            {
                "type": "var",
                "anno": "PlainFormat"
            }
        ],
        "CompatibleHdfsFormat.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompatibleHdfsFormat.input": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompatibleHdfsFormat.reader": [
            {
                "type": "attr",
                "anno": "luigi.task.Task"
            }
        ],
        "CompatibleHdfsFormat.writer": [
            {
                "type": "attr",
                "anno": "luigi.task.Task"
            }
        ],
        "CompatibleHdfsFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "writer": "luigi.task.Task",
                    "reader": "luigi.task.Task",
                    "input": "luigi.task.Task"
                }
            }
        ],
        "CompatibleHdfsFormat.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "output": "luigi.task.Task"
                }
            }
        ],
        "CompatibleHdfsFormat.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "input": "luigi.task.Task"
                }
            }
        ],
        "CompatibleHdfsFormat.hdfs_writer": [
            {
                "type": "method",
                "args": {
                    "output": "str"
                }
            }
        ],
        "CompatibleHdfsFormat.hdfs_reader": [
            {
                "type": "method",
                "args": {
                    "input": "luigi.task.Task"
                }
            }
        ],
        "CompatibleHdfsFormat.__dict__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CompatibleHdfsFormat.__setstate__": [
            {
                "type": "method",
                "args": {
                    "d": "dict"
                }
            }
        ],
        "HdfsAtomicWritePipe.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HdfsAtomicWriteDirPipe.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HdfsAtomicWritePipe.abort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HdfsAtomicWriteDirPipe.abort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompatibleHdfsFormat.__getstate__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hdfs.snakebite_client": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "SnakebiteHdfsClient._bite": [
            {
                "type": "attr",
                "anno": "hdfs.Client"
            }
        ],
        "SnakebiteHdfsClient.pid": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SnakebiteHdfsClient.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnakebiteHdfsClient.list_path": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SnakebiteHdfsClient.copy": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "destination": "str"
                }
            }
        ],
        "SnakebiteHdfsClient.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "destination": "str"
                }
            }
        ],
        "SnakebiteHdfsClient.touchz": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SnakebiteHdfsClient.get_bite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnakebiteHdfsClient.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "ignore_directories": "bool",
                    "ignore_files": "bool",
                    "include_size": "bool",
                    "include_type": "bool",
                    "include_time": "bool",
                    "recursive": "bool"
                }
            }
        ],
        "SnakebiteHdfsClient.get": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "local_destination": "str"
                }
            }
        ],
        "SnakebiteHdfsClient.chown": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "owner": "str",
                    "group": "str",
                    "recursive": "bool"
                }
            }
        ],
        "SnakebiteHdfsClient.chmod": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "permissions": "int",
                    "recursive": "bool"
                }
            }
        ],
        "SnakebiteHdfsClient.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool",
                    "skip_trash": "bool"
                }
            }
        ],
        "SnakebiteHdfsClient.rename_dont_move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str"
                }
            }
        ],
        "SnakebiteHdfsClient.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SnakebiteHdfsClient.count": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SnakebiteHdfsClient.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "mode": "int",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "SnakebiteHdfsClient.move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str"
                }
            }
        ]
    },
    "contrib.hdfs": {
        "hdfs": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "load_hadoop_cmd": [
            {
                "type": "var",
                "anno": "Callable[[], Hdfs]"
            }
        ],
        "get_configured_hadoop_version": [
            {
                "type": "var",
                "anno": "Callable[[], HdfsClient]"
            }
        ],
        "get_configured_hdfs_client": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "tmppath": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "HDFSCliError": [
            {
                "type": "var",
                "anno": "HDFSCliError"
            }
        ],
        "call_check": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "list_path": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "HdfsClient": [
            {
                "type": "var",
                "anno": "Type[hdfs_hadoopcli_clients.HdfsClient]"
            }
        ],
        "SnakebiteHdfsClient": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "WebHdfsClient": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "HdfsClientCdh3": [
            {
                "type": "var",
                "anno": "HdfsClientCdh3"
            }
        ],
        "HdfsClientApache1": [
            {
                "type": "var",
                "anno": "HdfsClientApache1"
            }
        ],
        "create_hadoopcli_client": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "get_autoconfig_client": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "exists": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "rename": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "remove": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "mkdir": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "listdir": [
            {
                "type": "var",
                "anno": "HdfsClient"
            }
        ],
        "HdfsReadPipe": [
            {
                "type": "var",
                "anno": "hdfs_format.HdfsReadPipe"
            }
        ],
        "HdfsAtomicWritePipe": [
            {
                "type": "var",
                "anno": "HdfsFormat"
            }
        ],
        "HdfsAtomicWriteDirPipe": [
            {
                "type": "var",
                "anno": "HdfsAtomicWritePipe"
            }
        ],
        "PlainFormat": [
            {
                "type": "var",
                "anno": "Plain"
            }
        ],
        "PlainDirFormat": [
            {
                "type": "var",
                "anno": "Plain"
            }
        ],
        "Plain": [
            {
                "type": "var",
                "anno": "PlainFormat"
            }
        ],
        "PlainDir": [
            {
                "type": "var",
                "anno": "Plain"
            }
        ],
        "CompatibleHdfsFormat": [
            {
                "type": "var",
                "anno": "Hdfs_format"
            }
        ],
        "HdfsTarget": [
            {
                "type": "var",
                "anno": "HdfsTarget"
            }
        ]
    },
    "contrib.redshift": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RedshiftTarget.use_db_timestamps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3CopyToTable.s3_load_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.aws_access_key_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.aws_secret_access_key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.aws_session_token": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.copy_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.prune_table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.prune_column": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.prune_date": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.table_attributes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.do_truncate_table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.do_prune": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.table_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.queries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.post_copy": [
            {
                "type": "method",
                "args": {
                    "cursor": "psycopg2.Cursor"
                }
            }
        ],
        "S3CopyJSONToTable.jsonpath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyJSONToTable.copy_json_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftManifestTask.folder_paths": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "RedshiftManifestTask.text_target": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KillOpenRedshiftSessions.connection_reset_wait_seconds": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "KillOpenRedshiftSessions.host": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KillOpenRedshiftSessions.database": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KillOpenRedshiftSessions.user": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KillOpenRedshiftSessions.password": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftUnloadTask.s3_unload_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftUnloadTask.unload_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftUnloadTask.unload_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftUnloadTask.aws_access_key_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftUnloadTask.aws_secret_access_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3CopyJSONToTable.copy": [
            {
                "type": "method",
                "args": {
                    "cursor": "psycopg2.Cursor",
                    "f": "str"
                }
            }
        ],
        "S3CopyToTable.copy": [
            {
                "type": "method",
                "args": {
                    "cursor": "psycopg2.Cursor",
                    "f": "str"
                }
            }
        ],
        "KillOpenRedshiftSessions.update_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.create_table": [
            {
                "type": "method",
                "args": {
                    "connection": "psycopg2.Connection"
                }
            }
        ],
        "S3CopyToTable.does_table_exist": [
            {
                "type": "method",
                "args": {
                    "connection": "psycopg2.Connection"
                }
            }
        ],
        "S3CopyToTable.prune": [
            {
                "type": "method",
                "args": {
                    "connection": "psycopg2.Connection"
                }
            }
        ],
        "S3CopyToTable.truncate_table": [
            {
                "type": "method",
                "args": {
                    "connection": "psycopg2.Connection"
                }
            }
        ],
        "S3CopyToTable.init_copy": [
            {
                "type": "method",
                "args": {
                    "connection": "psycopg2.Connection"
                }
            }
        ],
        "RedshiftTarget.marker_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftUnloadTask.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftQuery.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KillOpenRedshiftSessions.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftUnloadTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KillOpenRedshiftSessions.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3CopyToTable.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftManifestTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.mssqldb": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "MSSqlTarget.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MSSqlTarget.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MSSqlTarget.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MSSqlTarget.user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MSSqlTarget.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MSSqlTarget.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MSSqlTarget.update_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MSSqlTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "database": "str",
                    "user": "str",
                    "password": "str",
                    "table": "str",
                    "update_id": "str"
                }
            }
        ],
        "MSSqlTarget.connect": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MSSqlTarget.marker_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MSSqlTarget.create_marker_table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MSSqlTarget.exists": [
            {
                "type": "method",
                "args": {
                    "connection": "_mssql.Connection"
                }
            }
        ],
        "MSSqlTarget.touch": [
            {
                "type": "method",
                "args": {
                    "connection": "_mssql.Connection"
                }
            }
        ]
    },
    "contrib.bigquery": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "CreateDisposition.CREATE_IF_NEEDED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CreateDisposition.CREATE_NEVER": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WriteDisposition.WRITE_TRUNCATE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WriteDisposition.WRITE_APPEND": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WriteDisposition.WRITE_EMPTY": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QueryMode.INTERACTIVE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QueryMode.BATCH": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SourceFormat.CSV": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SourceFormat.DATASTORE_BACKUP": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SourceFormat.NEWLINE_DELIMITED_JSON": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FieldDelimiter.COMMA": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FieldDelimiter.TAB": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FieldDelimiter.PIPE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Encoding.UTF_8": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Encoding.ISO_8859_1": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BQDataset": [
            {
                "type": "var",
                "anno": "collections.NamedTuple"
            }
        ],
        "BQTable.dataset": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BQTable.uri": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryClient.client": [
            {
                "type": "attr",
                "anno": "discovery.Client"
            }
        ],
        "BigqueryClient.__init__": [
            {
                "type": "method",
                "args": {
                    "oauth_credentials": "oauth2client.client.GoogleCredentials",
                    "descriptor": "str",
                    "http_": "httplib2.Http"
                }
            }
        ],
        "BigqueryTarget.table": [
            {
                "type": "attr",
                "anno": "BQTable"
            }
        ],
        "BigqueryTarget.client": [
            {
                "type": "attr",
                "anno": "BigqueryClient"
            }
        ],
        "BigqueryTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str",
                    "table_id": "str",
                    "client": "BigqueryClient"
                }
            }
        ],
        "BigqueryTarget.from_bqtable": [
            {
                "type": "method",
                "args": {
                    "cls": "type[BigqueryTarget]",
                    "table": "BQTable",
                    "client": "BigqueryClient"
                }
            }
        ],
        "BigqueryTarget.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.source_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.encoding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.write_disposition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.schema": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.max_bad_records": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.field_delimter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.skip_leading_rows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.allow_jagged_rows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.ignore_unknown_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.allow_quoted_new_lines": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryRunQueryTask.write_disposition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryRunQueryTask.create_disposition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryRunQueryTask.flatten_results": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryRunQueryTask.query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryRunQueryTask.query_mode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryCreateViewTask.view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryClient.make_dataset": [
            {
                "type": "method",
                "args": {
                    "dataset": "BQDataset",
                    "raise_if_exists": "bool",
                    "body": "dict"
                }
            }
        ],
        "BigqueryClient.get_view": [
            {
                "type": "method",
                "args": {
                    "table": "BQTable"
                }
            }
        ],
        "BigqueryClient.list_tables": [
            {
                "type": "method",
                "args": {
                    "dataset": "BQDataset"
                }
            }
        ],
        "BigqueryClient.list_datasets": [
            {
                "type": "method",
                "args": {
                    "project_id": "str"
                }
            }
        ],
        "BigqueryClient.dataset_exists": [
            {
                "type": "method",
                "args": {
                    "dataset": "BQDataset"
                }
            }
        ],
        "BigqueryClient.run_job": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "body": "dict",
                    "dataset": "BQDataset"
                }
            }
        ],
        "BigqueryClient.copy": [
            {
                "type": "method",
                "args": {
                    "source_table": "BQTable",
                    "dest_table": "BQTable",
                    "create_disposition": "str",
                    "write_disposition": "str"
                }
            }
        ],
        "BigqueryClient.delete_dataset": [
            {
                "type": "method",
                "args": {
                    "dataset": "BQDataset",
                    "delete_nonempty": "bool"
                }
            }
        ],
        "BigqueryClient.table_exists": [
            {
                "type": "method",
                "args": {
                    "table": "BQTable"
                }
            }
        ],
        "BigqueryTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryClient.update_view": [
            {
                "type": "method",
                "args": {
                    "table": "BQTable",
                    "view": "str"
                }
            }
        ],
        "BigqueryClient.delete_table": [
            {
                "type": "method",
                "args": {
                    "table": "BQTable"
                }
            }
        ],
        "BigqueryCreateViewTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryCreateViewTask.complete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MixinBigqueryBulkComplete.bulk_complete": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "parameter_tuples": "list"
                }
            }
        ],
        "BigqueryLoadTask.source_uris": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryRunQueryTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigqueryLoadTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hive": {
        "unicode": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "HiveCommandError.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCommandError.out": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCommandError.err": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCommandError.__init__": [
            {
                "type": "method",
                "args": {
                    "message": "str",
                    "out": "str",
                    "err": "str"
                }
            }
        ],
        "HiveClient.table_location": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str",
                    "partition": "str"
                }
            }
        ],
        "HiveClient.table_schema": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str"
                }
            }
        ],
        "HiveClient.table_exists": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str",
                    "partition": "str"
                }
            }
        ],
        "HiveClient.partition_spec": [
            {
                "type": "method",
                "args": {
                    "partition": "str"
                }
            }
        ],
        "MetastoreClient._existing_partitions": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str",
                    "client": "HiveThriftContext"
                }
            }
        ],
        "MetastoreClient.partition_spec": [
            {
                "type": "method",
                "args": {
                    "partition": "HivePartitionTarget"
                }
            }
        ],
        "HiveThriftContext.transport": [
            {
                "type": "attr",
                "anno": "TSocket.TSocket"
            }
        ],
        "MetastoreClient.table_exists": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str",
                    "partition": "str"
                }
            }
        ],
        "MetastoreClient.table_location": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str",
                    "partition": "HivePartitionTarget"
                }
            }
        ],
        "HiveQueryTask.n_reduce_tasks": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HiveQueryTask.bytes_per_reducer": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HiveQueryTask.reducers_max": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HiveQueryTask.query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveQueryTask.job_runner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveTableTarget.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveTableTarget.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveTableTarget.hive_cmd": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HiveTableTarget.client": [
            {
                "type": "attr",
                "anno": "HiveCommandClient"
            }
        ],
        "HiveTableTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "HivePartitionTarget.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionTarget.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionTarget.partition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionTarget.client": [
            {
                "type": "attr",
                "anno": "HiveCommandClient"
            }
        ],
        "HivePartitionTarget.fail_missing_table": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HivePartitionTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "ExternalHiveTask.database": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "ExternalHiveTask.table": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "ExternalHiveTask.partition": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "HiveCommandClient.partition_spec": [
            {
                "type": "method",
                "args": {
                    "partition": "dict"
                }
            }
        ],
        "MetastoreClient.table_schema": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str"
                }
            }
        ],
        "HiveThriftContext.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "Any",
                    "exc_val": "Any",
                    "exc_tb": "Any"
                }
            }
        ],
        "load_hive_cmd": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "run_hive": [
            {
                "type": "func",
                "args": {
                    "args": "list",
                    "check_return_code": "bool"
                }
            }
        ],
        "run_hive_script": [
            {
                "type": "func",
                "args": {
                    "script": "str"
                }
            }
        ],
        "run_hive_cmd": [
            {
                "type": "func",
                "args": {
                    "hivecmd": "str",
                    "check_return_code": "bool"
                }
            }
        ],
        "ApacheHiveCommandClient.table_schema": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str"
                }
            }
        ],
        "HiveCommandClient.table_schema": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str"
                }
            }
        ],
        "HiveCommandClient.table_exists": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str",
                    "partition": "dict"
                }
            }
        ],
        "HiveCommandClient.table_location": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str",
                    "partition": "dict"
                }
            }
        ],
        "HivePartitionTarget.path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveTableTarget.path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveQueryTask.hiveconfs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveQueryTask.hiverc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_hive_syntax": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_default_client": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "HivePartitionTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "partition": "str",
                    "database": "str",
                    "fail_missing_table": "bool",
                    "client": "HiveCommandClient"
                }
            }
        ],
        "HiveTableTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "database": "str",
                    "client": "HiveCommandClient"
                }
            }
        ],
        "ExternalHiveTask.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "client": [
            {
                "type": "var",
                "anno": "HiveCommandClient"
            }
        ],
        "HivePartitionTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveTableTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveThriftContext.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveQueryRunner.prepare_outputs": [
            {
                "type": "method",
                "args": {
                    "job": "HadoopQueryTask"
                }
            }
        ],
        "HiveQueryRunner.run_job": [
            {
                "type": "method",
                "args": {
                    "job": "HadoopQueryTask",
                    "tracking_url_callback": "str | None"
                }
            }
        ]
    },
    "contrib.sparkey": {
        "SparkeyExportTask.separator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkeyExportTask.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkeyExportTask._write_sparkey_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkeyExportTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.ssh": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RemoteCalledProcessError.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteCalledProcessError.__init__": [
            {
                "type": "method",
                "args": {
                    "returncode": "int",
                    "command": "list",
                    "host": "str",
                    "output": "str"
                }
            }
        ],
        "RemoteCalledProcessError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteContext.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteContext.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteContext.key_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteContext.connect_timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "RemoteContext.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RemoteContext.no_host_key_check": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RemoteContext.sshpass": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RemoteContext.tty": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RemoteContext.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteContext.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "RemoteContext.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem.remote_context": [
            {
                "type": "attr",
                "anno": "RemoteContext"
            }
        ],
        "AtomicRemoteFileWriter._fs": [
            {
                "type": "attr",
                "anno": "RemoteFileSystem"
            }
        ],
        "AtomicRemoteFileWriter.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AtomicRemoteFileWriter.__tmp_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AtomicRemoteFileWriter.tmp_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AtomicRemoteFileWriter.fs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteTarget.format": [
            {
                "type": "attr",
                "anno": "luigi.format.Format"
            }
        ],
        "RemoteTarget._fs": [
            {
                "type": "attr",
                "anno": "RemoteFileSystem"
            }
        ],
        "RemoteTarget.fs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem._scp": [
            {
                "type": "method",
                "args": {
                    "src": "str",
                    "dest": "str"
                }
            }
        ],
        "RemoteContext._host_ref": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem.get": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "local_path": "str"
                }
            }
        ],
        "RemoteContext._prepare_cmd": [
            {
                "type": "method",
                "args": {
                    "cmd": "list"
                }
            }
        ],
        "RemoteContext.Popen": [
            {
                "type": "method",
                "args": {
                    "cmd": "list",
                    "kwargs": "str"
                }
            }
        ],
        "RemoteContext.check_output": [
            {
                "type": "method",
                "args": {
                    "cmd": "list"
                }
            }
        ],
        "RemoteFileSystem.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool"
                }
            }
        ],
        "RemoteFileSystem.isdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "RemoteFileSystem.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "RemoteFileSystem.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "RemoteFileSystem.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "path": "str"
                }
            }
        ],
        "RemoteContext.tunnel": [
            {
                "type": "method",
                "args": {
                    "local_port": "int",
                    "remote_port": "int",
                    "remote_host": "str"
                }
            }
        ],
        "AtomicRemoteFileWriter.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteTarget.get": [
            {
                "type": "method",
                "args": {
                    "local_path": "str"
                }
            }
        ],
        "RemoteContext.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "kwargs": "object"
                }
            }
        ],
        "RemoteFileSystem.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "kwargs": "object"
                }
            }
        ],
        "RemoteTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "host": "str",
                    "format": "luigi.format.Format",
                    "kwargs": "object"
                }
            }
        ],
        "AtomicRemoteFileWriter.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "AtomicRemoteFileWriter.__init__": [
            {
                "type": "method",
                "args": {
                    "fs": "RemoteFileSystem",
                    "path": "str"
                }
            }
        ],
        "RemoteTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "RemoteTarget.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str"
                }
            }
        ]
    },
    "contrib.webhdfs": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "WebHdfsTarget.fs": [
            {
                "type": "attr",
                "anno": "Type[WebHdfsClient]"
            }
        ],
        "WebHdfsTarget.format": [
            {
                "type": "attr",
                "anno": "six.Format"
            }
        ],
        "ReadableWebHdfsFile.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ReadableWebHdfsFile.client": [
            {
                "type": "attr",
                "anno": "WebHdfsClient"
            }
        ],
        "ReadableWebHdfsFile.generator": [
            {
                "type": "attr",
                "anno": "six.Iterator[str]"
            }
        ],
        "ReadableWebHdfsFile.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "client": "WebHdfsClient"
                }
            }
        ],
        "ReadableWebHdfsFile.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AtomicWebHdfsFile.client": [
            {
                "type": "attr",
                "anno": "WebHdfsClient"
            }
        ],
        "AtomicWebHdfsFile.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "client": "WebHdfsClient"
                }
            }
        ],
        "WebHdfsClient": [
            {
                "type": "var",
                "anno": "Type[WebHdfsClient]"
            }
        ],
        "ReadableWebHdfsFile.read": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadableWebHdfsFile.readlines": [
            {
                "type": "method",
                "args": {
                    "char": "str"
                }
            }
        ],
        "ReadableWebHdfsFile.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadableWebHdfsFile.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadableWebHdfsFile.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "str",
                    "exc": "str",
                    "traceback": "str"
                }
            }
        ],
        "WebHdfsTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "WebHdfsTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "client": "WebHdfsClient",
                    "format": "six.Format"
                }
            }
        ],
        "AtomicWebHdfsFile.move_to_final_destination": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.ftp": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RemoteFileSystem.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteFileSystem.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteFileSystem.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteFileSystem.tls": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RemoteFileSystem.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RemoteFileSystem.sftp": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RemoteFileSystem.pysftp_conn_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "RemoteFileSystem.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RemoteFileSystem.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "username": "str",
                    "password": "str",
                    "port": "int",
                    "tls": "bool",
                    "timeout": "int",
                    "sftp": "bool",
                    "pysftp_conn_kwargs": "dict"
                }
            }
        ],
        "RemoteFileSystem.conn": [
            {
                "type": "attr",
                "anno": "pysftp.Connection"
            }
        ],
        "RemoteFileSystem._sftp_connect": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem._ftp_close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem._ftp_exists": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "mtime": "int"
                }
            }
        ],
        "RemoteFileSystem._sftp_remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool"
                }
            }
        ],
        "AtomicFtpFile._fs": [
            {
                "type": "attr",
                "anno": "RemoteFileSystem"
            }
        ],
        "AtomicFtpFile.__init__": [
            {
                "type": "method",
                "args": {
                    "fs": "RemoteFileSystem",
                    "path": "str"
                }
            }
        ],
        "AtomicFtpFile.fs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteTarget.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteTarget.mtime": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteTarget.format": [
            {
                "type": "attr",
                "anno": "luigi.format.Format"
            }
        ],
        "RemoteTarget.tls": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RemoteTarget.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RemoteTarget.sftp": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RemoteTarget._fs": [
            {
                "type": "attr",
                "anno": "RemoteFileSystem"
            }
        ],
        "RemoteTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "host": "str",
                    "format": "luigi.format.Format",
                    "username": "str",
                    "password": "str",
                    "port": "int",
                    "mtime": "str",
                    "tls": "bool",
                    "timeout": "int",
                    "sftp": "bool",
                    "pysftp_conn_kwargs": "dict"
                }
            }
        ],
        "RemoteTarget.fs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteTarget.__tmp_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteFileSystem._ftp_connect": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem._connect": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem._rm_recursive": [
            {
                "type": "method",
                "args": {
                    "ftp": "pysftp.Connection",
                    "path": "str"
                }
            }
        ],
        "RemoteFileSystem._ftp_remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool"
                }
            }
        ],
        "RemoteFileSystem._ftp_get": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "tmp_local_path": "str"
                }
            }
        ],
        "RemoteFileSystem._sftp_close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem._close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool"
                }
            }
        ],
        "RemoteFileSystem._sftp_get": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "tmp_local_path": "str"
                }
            }
        ],
        "RemoteFileSystem.get": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "local_path": "str"
                }
            }
        ],
        "RemoteTarget.get": [
            {
                "type": "method",
                "args": {
                    "local_path": "str"
                }
            }
        ],
        "RemoteTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "RemoteFileSystem._sftp_exists": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "mtime": "int"
                }
            }
        ],
        "RemoteFileSystem.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "mtime": "int"
                }
            }
        ],
        "RemoteTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RemoteFileSystem._ftp_put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "path": "str",
                    "atomic": "bool"
                }
            }
        ],
        "RemoteFileSystem._sftp_put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "path": "str",
                    "atomic": "bool"
                }
            }
        ],
        "RemoteFileSystem.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "path": "str",
                    "atomic": "bool"
                }
            }
        ],
        "RemoteTarget.put": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "atomic": "bool"
                }
            }
        ],
        "AtomicFtpFile.move_to_final_destination": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.mysqldb": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "MySqlTarget.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MySqlTarget.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlTarget.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlTarget.user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlTarget.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlTarget.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlTarget.update_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "database": "str",
                    "user": "str",
                    "password": "str",
                    "table": "str",
                    "update_id": "str"
                }
            }
        ],
        "MySqlTarget.connect": [
            {
                "type": "method",
                "args": {
                    "autocommit": "bool"
                }
            }
        ],
        "MySqlTarget.marker_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlTarget.create_marker_table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MySqlTarget.exists": [
            {
                "type": "method",
                "args": {
                    "connection": "mysql.connector.Connection"
                }
            }
        ],
        "MySqlTarget.touch": [
            {
                "type": "method",
                "args": {
                    "connection": "mysql.connector.Connection"
                }
            }
        ]
    },
    "contrib.sqla": {
        "SQLAlchemyTarget.marker_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQLAlchemyTarget._engine_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SQLAlchemyTarget.Connection": [
            {
                "type": "attr",
                "anno": "namedtuple"
            }
        ],
        "SQLAlchemyTarget.target_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQLAlchemyTarget.update_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQLAlchemyTarget.connection_string": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQLAlchemyTarget.echo": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SQLAlchemyTarget.connect_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SQLAlchemyTarget.marker_table_bound": [
            {
                "type": "attr",
                "anno": "sqlalchemy.Table"
            }
        ],
        "SQLAlchemyTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "connection_string": "str",
                    "target_table": "str",
                    "update_id": "str",
                    "echo": "bool",
                    "connect_args": "dict"
                }
            }
        ],
        "SQLAlchemyTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "CopyToTable._logger": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "CopyToTable.echo": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CopyToTable.connect_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CopyToTable.connection_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "CopyToTable.column_separator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CopyToTable.chunk_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CopyToTable.reflect": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CopyToTable.table_bound": [
            {
                "type": "attr",
                "anno": "sqlalchemy.Table"
            }
        ],
        "CopyToTable.create_table": [
            {
                "type": "method",
                "args": {
                    "engine": "sqlalchemy.Engine"
                }
            }
        ],
        "CopyToTable.copy": [
            {
                "type": "method",
                "args": {
                    "conn": "sqlalchemy.Connection",
                    "ins_rows": "list",
                    "table_bound": "sqlalchemy.Table"
                }
            }
        ],
        "CopyToTable.update_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SQLAlchemyTarget.engine": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SQLAlchemyTarget.create_marker_table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SQLAlchemyTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SQLAlchemyTarget.touch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.rows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.opener": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "OpenerRegistry.registry": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "OpenerRegistry.openers": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "OpenerRegistry.default_opener": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpenerRegistry.get_opener": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Opener.allowed_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Opener.filter_kwargs": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Opener.get_target": [
            {
                "type": "method",
                "args": {
                    "cls": "type[S3Target]",
                    "scheme": "str",
                    "path": "str",
                    "fragment": "str",
                    "username": "str",
                    "password": "str",
                    "hostname": "str",
                    "port": "int",
                    "query": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MockOpener.names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MockOpener.allowed_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MockOpener.get_target": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[MockTarget]",
                    "scheme": "str",
                    "path": "str",
                    "fragment": "str",
                    "username": "str",
                    "password": "str",
                    "hostname": "str",
                    "port": "int",
                    "query": "dict",
                    "kwargs": "str"
                }
            }
        ],
        "LocalOpener.names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "LocalOpener.allowed_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "LocalOpener.get_target": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[LocalTarget]",
                    "scheme": "str",
                    "path": "str",
                    "fragment": "str",
                    "username": "str",
                    "password": "str",
                    "hostname": "str",
                    "port": "int",
                    "query": "dict",
                    "kwargs": "str"
                }
            }
        ],
        "S3Opener.names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "OpenerRegistry.add": [
            {
                "type": "method",
                "args": {
                    "opener": "Opener"
                }
            }
        ],
        "OpenerRegistry.__init__": [
            {
                "type": "method",
                "args": {
                    "openers": "list"
                }
            }
        ],
        "S3Opener.allowed_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "S3Opener.filter_kwargs": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "opener": [
            {
                "type": "var",
                "anno": "OpenerRegistry"
            }
        ],
        "S3Opener.get_target": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[S3Target]",
                    "scheme": "str",
                    "path": "str",
                    "fragment": "str",
                    "username": "str",
                    "password": "str",
                    "hostname": "str",
                    "port": "int",
                    "query": "dict",
                    "kwargs": "str"
                }
            }
        ],
        "Opener.conform_query": [
            {
                "type": "method",
                "args": {
                    "cls": "Opener",
                    "query": "str"
                }
            }
        ],
        "OpenerRegistry.open": [
            {
                "type": "method",
                "args": {
                    "target_uri": "str",
                    "kwargs": "str"
                }
            }
        ],
        "OpenerTarget": [
            {
                "type": "var",
                "anno": "OpenerTarget"
            }
        ]
    },
    "contrib.rdbms": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "CopyToTable.host": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.database": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.user": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.password": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "CopyToTable.null_values": [
            {
                "type": "attr",
                "anno": "tuple[object, ...]"
            }
        ],
        "CopyToTable.column_separator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CopyToTable.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.init_copy": [
            {
                "type": "method",
                "args": {
                    "connection": "luigi.connection.Connection"
                }
            }
        ],
        "CopyToTable.post_copy": [
            {
                "type": "method",
                "args": {
                    "connection": "luigi.connection.Connection"
                }
            }
        ],
        "CopyToTable.copy": [
            {
                "type": "method",
                "args": {
                    "cursor": "luigi.task.Task",
                    "file": "luigi.task.Task"
                }
            }
        ],
        "Query.host": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Query.database": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Query.user": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Query.password": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Query.table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Query.query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Query.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Query.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Query.update_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.update_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.create_table": [
            {
                "type": "method",
                "args": {
                    "connection": "luigi.connection.Connection"
                }
            }
        ]
    },
    "contrib.sge": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "POLL_TIME": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_parse_qstat_state": [
            {
                "type": "func",
                "args": {
                    "qstat_out": "str",
                    "job_id": "str"
                }
            }
        ],
        "_parse_qsub_job_id": [
            {
                "type": "func",
                "args": {
                    "qsub_out": "str"
                }
            }
        ],
        "SGEJobTask.n_cpu": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "SGEJobTask.shared_tmp_dir": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "SGEJobTask.parallel_env": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "SGEJobTask.job_name_format": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "SGEJobTask.job_name": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "SGEJobTask.run_locally": [
            {
                "type": "attr",
                "anno": "luigi.BoolParameter"
            }
        ],
        "SGEJobTask.poll_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SGEJobTask.dont_remove_tmp_dir": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "SGEJobTask.no_tarball": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "SGEJobTask.tmp_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SGEJobTask.work": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SGEJobTask.job_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SGEJobTask.outfile": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SGEJobTask.errfile": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SGEJobTask.job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalSGEJobTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_build_qsub_command": [
            {
                "type": "func",
                "args": {
                    "cmd": "str",
                    "job_name": "str",
                    "outfile": "str",
                    "errfile": "str",
                    "pe": "str",
                    "n_cpu": "int"
                }
            }
        ],
        "SGEJobTask._fetch_task_failures": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SGEJobTask._track_job": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SGEJobTask._run_job": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SGEJobTask.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SGEJobTask._dump": [
            {
                "type": "method",
                "args": {
                    "out_dir": "str"
                }
            }
        ],
        "SGEJobTask._init_local": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SGEJobTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.dataproc": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "DEFAULT_CREDENTIALS": [
            {
                "type": "var",
                "anno": "oauth2client.client.GoogleCredentials"
            }
        ],
        "_dataproc_client": [
            {
                "type": "var",
                "anno": "discovery.Discovery"
            }
        ],
        "get_dataproc_client": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "set_dataproc_client": [
            {
                "type": "func",
                "args": {
                    "client": "discovery.Discovery"
                }
            }
        ],
        "_DataprocBaseTask.gcloud_project_id": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "_DataprocBaseTask.dataproc_cluster_name": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "_DataprocBaseTask.dataproc_region": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "_DataprocBaseTask.dataproc_client": [
            {
                "type": "attr",
                "anno": "discovery.Discovery"
            }
        ],
        "DataprocBaseTask._job": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocBaseTask._job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocBaseTask._job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocBaseTask.submit_job": [
            {
                "type": "method",
                "args": {
                    "job_config": "dict"
                }
            }
        ],
        "DataprocSparkTask.main_class": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "DataprocSparkTask.jars": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "DataprocSparkTask.job_args": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "DataprocPysparkTask.job_file": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "DataprocPysparkTask.extra_files": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "DataprocPysparkTask.job_args": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.gcloud_zone": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.gcloud_network": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.master_node_type": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.master_disk_size": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.worker_node_type": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.worker_disk_size": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.worker_normal_count": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.worker_preemptible_count": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "CreateDataprocClusterTask.image_version": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "DataprocBaseTask.submit_pyspark_job": [
            {
                "type": "method",
                "args": {
                    "job_file": "str",
                    "extra_files": "list",
                    "job_args": "str"
                }
            }
        ],
        "DataprocBaseTask.submit_spark_job": [
            {
                "type": "method",
                "args": {
                    "jars": "str",
                    "main_class": "str",
                    "job_args": "str"
                }
            }
        ],
        "DeleteDataprocClusterTask._get_cluster_status": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DeleteDataprocClusterTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DeleteDataprocClusterTask.complete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateDataprocClusterTask._get_cluster_status": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateDataprocClusterTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateDataprocClusterTask.complete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocBaseTask.wait_for_job": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocPysparkTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocSparkTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.target": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "CascadingClient.ALL_METHOD_NAMES": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "CascadingClient.clients": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "CascadingClient._make_method": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "method_name": "str"
                }
            }
        ],
        "CascadingClient.__init__": [
            {
                "type": "method",
                "args": {
                    "clients": "list",
                    "method_names": "list"
                }
            }
        ],
        "CascadingClient._chained_call": [
            {
                "type": "method",
                "args": {
                    "method_name": "str",
                    "args": "six.Any",
                    "kwargs": "six.Any"
                }
            }
        ]
    },
    "contrib.pyspark_runner": {
        "PySparkRunner.job": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PySparkRunner.args": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PySparkRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "job": "str",
                    "args": "str"
                }
            }
        ],
        "PySparkRunner.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.scalding": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "ScaldingJobRunner.scala_home": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ScaldingJobRunner.scalding_home": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ScaldingJobRunner.provided_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ScaldingJobRunner.libjars_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ScaldingJobRunner.tmp_dir": [
            {
                "type": "attr",
                "anno": "LocalTarget"
            }
        ],
        "ScaldingJobRunner._get_jars": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "ScaldingJobRunner.get_scala_jars": [
            {
                "type": "method",
                "args": {
                    "include_compiler": "bool"
                }
            }
        ],
        "ScaldingJobRunner.get_scalding_jars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobRunner.get_scalding_core": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobRunner.get_provided_jars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobRunner.get_libjars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.relpath": [
            {
                "type": "method",
                "args": {
                    "current_file": "str",
                    "rel_path": "str"
                }
            }
        ],
        "ScaldingJobTask.source": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.jar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.extra_jars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.job_class": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.atomic_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.requires": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.job_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobRunner.get_job_class": [
            {
                "type": "method",
                "args": {
                    "source": "str"
                }
            }
        ],
        "ScaldingJobRunner.get_build_dir": [
            {
                "type": "method",
                "args": {
                    "source": "str"
                }
            }
        ],
        "ScaldingJobRunner.get_tmp_job_jar": [
            {
                "type": "method",
                "args": {
                    "source": "str"
                }
            }
        ],
        "ScaldingJobRunner.build_job_jar": [
            {
                "type": "method",
                "args": {
                    "job": "ScaldingJobTask"
                }
            }
        ],
        "ScaldingJobRunner.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.job_runner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobTask.args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ScaldingJobRunner.run_job": [
            {
                "type": "method",
                "args": {
                    "job": "ScaldingJobTask",
                    "tracking_url_callback": "six.Callable"
                }
            }
        ]
    },
    "contrib.simulate": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RunAnywayTarget.temp_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunAnywayTarget.temp_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RunAnywayTarget.unique": [
            {
                "type": "attr",
                "anno": "Value"
            }
        ],
        "RunAnywayTarget.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunAnywayTarget.get_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RunAnywayTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RunAnywayTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "task_obj": "luigi.Task"
                }
            }
        ],
        "RunAnywayTarget.done": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.ecs": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "client": [
            {
                "type": "var",
                "anno": "boto3.client"
            }
        ],
        "POLL_TIME": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "ECSTask.task_def_arn": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "ECSTask.task_def": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "ECSTask.command": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ECSTask._task_ids": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "ECSTask.ecs_task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_get_task_statuses": [
            {
                "type": "func",
                "args": {
                    "task_ids": "list[str]"
                }
            }
        ],
        "_track_tasks": [
            {
                "type": "func",
                "args": {
                    "task_ids": "list[str]"
                }
            }
        ],
        "ECSTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.salesforce": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "ensure_utf": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "salesforce.username": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "salesforce.password": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "salesforce.security_token": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "salesforce.sb_security_token": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "QuerySalesforce.object_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuerySalesforce.use_sandbox": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuerySalesforce.sandbox_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuerySalesforce.is_soql_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuerySalesforce.content_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuerySalesforce.soql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.API_VERSION": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "SalesforceAPI.SOAP_NS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.API_NS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.security_token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.sb_security_token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.sandbox_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.session_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.server_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.hostname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceAPI.__init__": [
            {
                "type": "method",
                "args": {
                    "username": "str",
                    "password": "str",
                    "security_token": "str",
                    "sb_token": "str",
                    "sandbox_name": "str"
                }
            }
        ],
        "SalesforceAPI.has_active_session": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_login_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_base_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_bulk_base_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_norm_base_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_norm_query_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_create_job_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_job_id_url": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_job_details_url": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "SalesforceAPI.get_job_details": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_abort_job_url": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_close_job_url": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_create_batch_url": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_batch_info_url": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "batch_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_batch_results_url": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "batch_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_batch_result_url": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "batch_id": "str",
                    "result_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_login_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_session_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI.get_batch_result": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "batch_id": "str",
                    "result_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_norm_session_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_rest_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI.restful": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "params": "dict"
                }
            }
        ],
        "SalesforceAPI.query": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "SalesforceAPI._get_job_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_create_job_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_abort_job_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_close_job_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_create_batch_content_headers": [
            {
                "type": "method",
                "args": {
                    "content_type": "str"
                }
            }
        ],
        "SalesforceAPI.create_batch": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "data": "str",
                    "file_type": "str"
                }
            }
        ],
        "SalesforceAPI._get_batch_info_headers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_batch_info": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "batch_id": "str"
                }
            }
        ],
        "SalesforceAPI.block_on_batch": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "batch_id": "str",
                    "sleep_time_seconds": "int",
                    "max_wait_time_seconds": "int"
                }
            }
        ],
        "SalesforceAPI.get_batch_result_ids": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "batch_id": "str"
                }
            }
        ],
        "SalesforceAPI.get_batch_results": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "batch_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_login_xml": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI.start_session": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI._get_create_job_xml": [
            {
                "type": "method",
                "args": {
                    "operation": "str",
                    "obj": "str",
                    "external_id_field_name": "str",
                    "content_type": "str"
                }
            }
        ],
        "SalesforceAPI.create_operation_job": [
            {
                "type": "method",
                "args": {
                    "operation": "str",
                    "obj": "str",
                    "external_id_field_name": "str",
                    "content_type": "str"
                }
            }
        ],
        "SalesforceAPI._get_abort_job_xml": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI.abort_job": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "SalesforceAPI._get_close_job_xml": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceAPI.close_job": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "SalesforceAPI.query_more": [
            {
                "type": "method",
                "args": {
                    "next_records_identifier": "str",
                    "identifier_is_url": "bool",
                    "kwargs": "dict"
                }
            }
        ],
        "_traverse_results": [
            {
                "type": "func",
                "args": {
                    "value": "dict",
                    "fields": "list",
                    "row": "list",
                    "path": "str"
                }
            }
        ],
        "parse_results": [
            {
                "type": "func",
                "args": {
                    "fields": "list",
                    "data": "dict"
                }
            }
        ],
        "get_soql_fields": [
            {
                "type": "func",
                "args": {
                    "soql": "str"
                }
            }
        ],
        "SalesforceAPI.query_all": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "QuerySalesforce.merge_batch_results": [
            {
                "type": "method",
                "args": {
                    "result_ids": "list"
                }
            }
        ],
        "QuerySalesforce.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.external_program": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "ExternalProgramTask.program_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExternalProgramTask.program_environment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExternalProgramTask.always_log_stderr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExternalProgramRunContext.proc": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "ExternalProgramRunContext.__init__": [
            {
                "type": "method",
                "args": {
                    "proc": "subprocess.Popen"
                }
            }
        ],
        "ExternalProgramRunContext.__old_signal": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ExternalProgramRunContext.kill_job": [
            {
                "type": "method",
                "args": {
                    "captured_signal": "int",
                    "stack_frame": "int"
                }
            }
        ],
        "ExternalProgramRunContext.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "int",
                    "exc_val": "int",
                    "exc_tb": "int"
                }
            }
        ],
        "ExternalProgramRunContext.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExternalProgramRunError.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalProgramRunError.args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ExternalProgramRunError.env": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ExternalProgramRunError.out": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalProgramRunError.err": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalProgramRunError.__init__": [
            {
                "type": "method",
                "args": {
                    "message": "str",
                    "args": "list",
                    "env": "dict",
                    "stdout": "str",
                    "stderr": "str"
                }
            }
        ],
        "ExternalPythonProgramTask.virtualenv": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalPythonProgramTask.extra_pythonpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalProgramRunError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExternalProgramTask._clean_output_file": [
            {
                "type": "method",
                "args": {
                    "file_object": "os.FileIO"
                }
            }
        ],
        "ExternalProgramTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExternalPythonProgramTask.program_environment": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.redis_store": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RedisTarget.marker_prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisTarget.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisTarget.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RedisTarget.db": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RedisTarget.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisTarget.socket_timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RedisTarget.update_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisTarget.expire": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RedisTarget.redis_client": [
            {
                "type": "attr",
                "anno": "redis.StrictRedis"
            }
        ],
        "RedisTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "port": "int",
                    "db": "int",
                    "update_id": "str",
                    "password": "str",
                    "socket_timeout": "int",
                    "expire": "int"
                }
            }
        ],
        "RedisTarget.marker_key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedisTarget.touch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedisTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hadoop": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "_attached_packages": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "TRACKING_RE": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "hadoop.pool": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "attach": [
            {
                "type": "func",
                "args": {
                    "packages": "str"
                }
            }
        ],
        "dereference": [
            {
                "type": "func",
                "args": {
                    "f": "str"
                }
            }
        ],
        "get_extra_files": [
            {
                "type": "func",
                "args": {
                    "extra_files": "list"
                }
            }
        ],
        "flatten": [
            {
                "type": "func",
                "args": {
                    "sequence": "list"
                }
            }
        ],
        "HadoopRunContext.job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopRunContext.application_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopRunContext.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopRunContext.__old_signal": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HadoopRunContext.kill_job": [
            {
                "type": "method",
                "args": {
                    "captured_signal": "int",
                    "stack_frame": "int"
                }
            }
        ],
        "HadoopRunContext.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopRunContext.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "int",
                    "exc_val": "int",
                    "exc_tb": "int"
                }
            }
        ],
        "HadoopJobError.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopJobError.out": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopJobError.err": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopJobError.__init__": [
            {
                "type": "method",
                "args": {
                    "message": "str",
                    "out": "str",
                    "err": "str"
                }
            }
        ],
        "HadoopJobError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobRunner.run_job": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopJobRunner.streaming_jar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopJobRunner.modules": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HadoopJobRunner.streaming_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HadoopJobRunner.libjars": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HadoopJobRunner.libjars_in_hdfs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HadoopJobRunner.archives": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HadoopJobRunner.jobconfs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HadoopJobRunner.input_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopJobRunner.output_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopJobRunner.end_job_with_atomic_move_dir": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HadoopJobRunner.tmp_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopJobRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "streaming_jar": "str",
                    "modules": "list",
                    "streaming_args": "list",
                    "libjars": "list",
                    "libjars_in_hdfs": "list",
                    "jobconfs": "dict",
                    "input_format": "str",
                    "output_format": "str",
                    "end_job_with_atomic_move_dir": "bool",
                    "archives": "list"
                }
            }
        ],
        "HadoopJobRunner.finish": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HadoopJobRunner.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalJobRunner.samplelines": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalJobRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "samplelines": "str"
                }
            }
        ],
        "BaseHadoopJobTask.pool": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "BaseHadoopJobTask.batch_counter_default": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseHadoopJobTask.final_mapper": [
            {
                "type": "attr",
                "anno": "luigi.Task"
            }
        ],
        "BaseHadoopJobTask.final_combiner": [
            {
                "type": "attr",
                "anno": "luigi.Task"
            }
        ],
        "BaseHadoopJobTask.final_reducer": [
            {
                "type": "attr",
                "anno": "luigi.Task"
            }
        ],
        "BaseHadoopJobTask.mr_priority": [
            {
                "type": "attr",
                "anno": "luigi.Task"
            }
        ],
        "BaseHadoopJobTask.package_binary": [
            {
                "type": "attr",
                "anno": "luigi.Task"
            }
        ],
        "BaseHadoopJobTask._counter_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseHadoopJobTask.task_id": [
            {
                "type": "attr",
                "anno": "luigi.Task"
            }
        ],
        "BaseHadoopJobTask._get_pool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHadoopJobTask.job_runner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHadoopJobTask.init_local": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHadoopJobTask.init_hadoop": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHadoopJobTask.data_interchange_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseHadoopJobTask.serialize": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseHadoopJobTask.internal_serialize": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseHadoopJobTask.deserialize": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseHadoopJobTask.requires_local": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHadoopJobTask.input_local": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataInterchange": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "JobTask.jobconf_truncate": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "JobTask.n_reduce_tasks": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "JobTask.reducer": [
            {
                "type": "attr",
                "anno": "luigi.Task"
            }
        ],
        "JobTask.init_mapper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask.init_combiner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask.init_reducer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask.reader": [
            {
                "type": "method",
                "args": {
                    "input_stream": "str"
                }
            }
        ],
        "JobTask.writer": [
            {
                "type": "method",
                "args": {
                    "outputs": "list",
                    "stdout": "str",
                    "stderr": "str"
                }
            }
        ],
        "JobTask.mapper": [
            {
                "type": "method",
                "args": {
                    "item": "str"
                }
            }
        ],
        "JobTask.combiner": [
            {
                "type": "attr",
                "anno": "luigi.Task"
            }
        ],
        "JobTask._incr_counter": [
            {
                "type": "method",
                "args": {
                    "args": "tuple"
                }
            }
        ],
        "JobTask._flush_batch_incr_counter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask.extra_modules": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask.extra_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask._links": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "JobTask.add_link": [
            {
                "type": "method",
                "args": {
                    "src": "str",
                    "dst": "str"
                }
            }
        ],
        "JobTask._setup_links": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask._setup_remote": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask._map_input": [
            {
                "type": "method",
                "args": {
                    "input_stream": "str"
                }
            }
        ],
        "JobTask._reduce_input": [
            {
                "type": "method",
                "args": {
                    "inputs": "list",
                    "reducer": "luigi.Task",
                    "final": "luigi.Task"
                }
            }
        ],
        "JobTask.internal_reader": [
            {
                "type": "method",
                "args": {
                    "input_stream": "tuple"
                }
            }
        ],
        "JobTask.run_reducer": [
            {
                "type": "method",
                "args": {
                    "stdin": "tuple",
                    "stdout": "str"
                }
            }
        ],
        "JobTask.internal_writer": [
            {
                "type": "method",
                "args": {
                    "outputs": "list",
                    "stdout": "str"
                }
            }
        ],
        "JobTask.run_combiner": [
            {
                "type": "method",
                "args": {
                    "stdin": "tuple",
                    "stdout": "str"
                }
            }
        ],
        "JobTask.run_mapper": [
            {
                "type": "method",
                "args": {
                    "stdin": "tuple",
                    "stdout": "str"
                }
            }
        ],
        "BaseHadoopJobTask.on_failure": [
            {
                "type": "method",
                "args": {
                    "exception": "BaseException"
                }
            }
        ],
        "JobTask.dump": [
            {
                "type": "method",
                "args": {
                    "directory": "str"
                }
            }
        ],
        "LocalJobRunner.group": [
            {
                "type": "method",
                "args": {
                    "input_stream": "StringIO"
                }
            }
        ],
        "LocalJobRunner.sample": [
            {
                "type": "method",
                "args": {
                    "input_stream": "StringIO",
                    "n": "int",
                    "output": "StringIO"
                }
            }
        ],
        "JobTask.incr_counter": [
            {
                "type": "method",
                "args": {
                    "args": "tuple",
                    "kwargs": "object"
                }
            }
        ],
        "BaseHadoopJobTask.jobconfs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask.jobconfs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DefaultHadoopJobRunner.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JobTask.job_runner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "fetch_task_failures": [
            {
                "type": "func",
                "args": {
                    "tracking_url": "str"
                }
            }
        ],
        "run_and_track_hadoop_job": [
            {
                "type": "func",
                "args": {
                    "arglist": "list",
                    "tracking_url_callback": "str",
                    "env": "dict"
                }
            }
        ],
        "BaseHadoopJobTask.requires_hadoop": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHadoopJobTask.deps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHadoopJobTask.input_hadoop": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalJobRunner.run_job": [
            {
                "type": "method",
                "args": {
                    "job": "JobTask"
                }
            }
        ],
        "create_packages_archive": [
            {
                "type": "func",
                "args": {
                    "packages": "list",
                    "filename": "str"
                }
            }
        ],
        "HadoopJobRunner.run_job": [
            {
                "type": "method",
                "args": {
                    "job": "luigi.Task",
                    "tracking_url_callback": "str"
                }
            }
        ],
        "BaseHadoopJobTask.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "execution_summary": {
        "execution_summary.summary_length": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_root_task": [
            {
                "type": "func",
                "args": {
                    "worker": "Worker"
                }
            }
        ],
        "_get_unique_param_keys": [
            {
                "type": "func",
                "args": {
                    "params": "dict"
                }
            }
        ],
        "_ORDERED_STATUSES": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "_PENDING_SUB_STATUSES": [
            {
                "type": "var",
                "anno": "set"
            }
        ],
        "_COMMENTS": [
            {
                "type": "var",
                "anno": "set"
            }
        ],
        "_summary_wrap": [
            {
                "type": "func",
                "args": {
                    "str_output": "str"
                }
            }
        ],
        "_get_set_of_params": [
            {
                "type": "func",
                "args": {
                    "tasks": "list"
                }
            }
        ],
        "_get_len_of_params": [
            {
                "type": "func",
                "args": {
                    "task": "luigi.Task"
                }
            }
        ],
        "_ranging_attributes": [
            {
                "type": "func",
                "args": {
                    "attributes": "set",
                    "param_class": "type"
                }
            }
        ],
        "_get_number_of_tasks": [
            {
                "type": "func",
                "args": {
                    "task_dict": "dict"
                }
            }
        ],
        "_get_number_of_tasks_for": [
            {
                "type": "func",
                "args": {
                    "status": "str",
                    "group_tasks": "dict"
                }
            }
        ],
        "_get_comments": [
            {
                "type": "func",
                "args": {
                    "group_tasks": "dict"
                }
            }
        ],
        "_partition_tasks": [
            {
                "type": "func",
                "args": {
                    "worker": "Worker"
                }
            }
        ],
        "_serialize_first_param": [
            {
                "type": "func",
                "args": {
                    "task": "luigi.Task"
                }
            }
        ],
        "_get_str_one_parameter": [
            {
                "type": "func",
                "args": {
                    "tasks": "list"
                }
            }
        ],
        "_get_str_ranging_multiple_parameters": [
            {
                "type": "func",
                "args": {
                    "first": "int",
                    "last": "int",
                    "tasks": "list",
                    "unique_param": "tuple"
                }
            }
        ],
        "_get_str": [
            {
                "type": "func",
                "args": {
                    "task_dict": "dict",
                    "extra_indent": "bool"
                }
            }
        ],
        "_group_tasks_by_name_and_status": [
            {
                "type": "func",
                "args": {
                    "task_dict": "dict"
                }
            }
        ],
        "_get_external_workers": [
            {
                "type": "func",
                "args": {
                    "worker": "Worker"
                }
            }
        ],
        "_summary_format": [
            {
                "type": "func",
                "args": {
                    "set_tasks": "dict",
                    "worker": "Worker"
                }
            }
        ],
        "_get_run_by_other_worker": [
            {
                "type": "func",
                "args": {
                    "worker": "Worker"
                }
            }
        ],
        "_depth_first_search": [
            {
                "type": "func",
                "args": {
                    "set_tasks": "dict",
                    "current_task": "Task",
                    "visited": "set"
                }
            }
        ],
        "_populate_unknown_statuses": [
            {
                "type": "func",
                "args": {
                    "set_tasks": "dict"
                }
            }
        ],
        "_summary_dict": [
            {
                "type": "func",
                "args": {
                    "worker": "Worker"
                }
            }
        ],
        "summary": [
            {
                "type": "func",
                "args": {
                    "worker": "Worker"
                }
            }
        ]
    },
    "rpc": {
        "HAS_UNIX_SOCKET": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "HAS_REQUESTS": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "_urljoin": [
            {
                "type": "func",
                "args": {
                    "base": "str",
                    "url": "str"
                }
            }
        ],
        "RPCError.sub_exception": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RPCError.__init__": [
            {
                "type": "method",
                "args": {
                    "message": "str",
                    "sub_exception": "str"
                }
            }
        ],
        "URLLibFetcher.raises": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "RequestsFetcher.raises": [
            {
                "type": "attr",
                "anno": "type[RequestException]"
            }
        ],
        "RequestsFetcher.session": [
            {
                "type": "attr",
                "anno": "requests.Session"
            }
        ],
        "RequestsFetcher.__init__": [
            {
                "type": "method",
                "args": {
                    "session": "requests.Session"
                }
            }
        ],
        "RemoteScheduler._url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RemoteScheduler._connect_timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "RemoteScheduler._fetcher": [
            {
                "type": "attr",
                "anno": "URLLibFetcher"
            }
        ],
        "RemoteScheduler._wait": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "URLLibFetcher.fetch": [
            {
                "type": "method",
                "args": {
                    "full_url": "str",
                    "body": "dict",
                    "timeout": "float"
                }
            }
        ],
        "RemoteScheduler.__init__": [
            {
                "type": "method",
                "args": {
                    "url": "str",
                    "connect_timeout": "float"
                }
            }
        ],
        "RequestsFetcher.fetch": [
            {
                "type": "method",
                "args": {
                    "full_url": "str",
                    "body": "dict",
                    "timeout": "float"
                }
            }
        ],
        "RemoteScheduler._fetch": [
            {
                "type": "method",
                "args": {
                    "url_suffix": "str",
                    "body": "dict",
                    "log_exceptions": "bool",
                    "attempts": "int"
                }
            }
        ],
        "RemoteScheduler._request": [
            {
                "type": "method",
                "args": {
                    "url": "str",
                    "data": "dict",
                    "log_exceptions": "bool",
                    "attempts": "int",
                    "allow_null": "bool"
                }
            }
        ]
    },
    "task_status": {
        "PENDING": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FAILED": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DONE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "RUNNING": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BATCH_RUNNING": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SUSPENDED": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "UNKNOWN": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DISABLED": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "postgres": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "MultiReplacer._replace_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MultiReplacer._search_re": [
            {
                "type": "attr",
                "anno": "re.Pattern"
            }
        ],
        "MultiReplacer.__init__": [
            {
                "type": "method",
                "args": {
                    "replace_pairs": "list"
                }
            }
        ],
        "default_escape": [
            {
                "type": "var",
                "anno": "MultiReplacer"
            }
        ],
        "PostgresTarget.use_db_timestamps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PostgresTarget.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresTarget.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "PostgresTarget.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresTarget.user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresTarget.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresTarget.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresTarget.update_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "database": "str",
                    "user": "str",
                    "password": "str",
                    "table": "str",
                    "update_id": "str",
                    "port": "int"
                }
            }
        ],
        "PostgresTarget.connect": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PostgresTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "CopyToTable.map_column": [
            {
                "type": "method",
                "args": {
                    "value": "object"
                }
            }
        ],
        "CopyToTable.copy": [
            {
                "type": "method",
                "args": {
                    "cursor": "psycopg2.Cursor",
                    "file": "psycopg2.TemporaryFile"
                }
            }
        ],
        "MultiReplacer._replacer": [
            {
                "type": "method",
                "args": {
                    "match_object": "psycopg2.Match"
                }
            }
        ],
        "MultiReplacer.__call__": [
            {
                "type": "method",
                "args": {
                    "search_string": "str"
                }
            }
        ],
        "PostgresQuery.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PostgresTarget.marker_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresTarget.create_marker_table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PostgresTarget.exists": [
            {
                "type": "method",
                "args": {
                    "connection": "psycopg2.Connection"
                }
            }
        ],
        "PostgresTarget.touch": [
            {
                "type": "method",
                "args": {
                    "connection": "psycopg2.Connection"
                }
            }
        ],
        "PostgresQuery.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.rows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CopyToTable.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "date_interval": {
        "xrange": [
            {
                "type": "var",
                "anno": "range"
            }
        ],
        "DateInterval.date_a": [
            {
                "type": "attr",
                "anno": "datetime.timedelta"
            }
        ],
        "DateInterval.date_b": [
            {
                "type": "attr",
                "anno": "datetime.timedelta"
            }
        ],
        "DateInterval.__init__": [
            {
                "type": "method",
                "args": {
                    "date_a": "datetime.timedelta",
                    "date_b": "datetime.timedelta"
                }
            }
        ],
        "DateInterval.dates": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.hours": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.to_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.from_date": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Date]",
                    "d": "datetime.timedelta"
                }
            }
        ],
        "DateInterval.next": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.prev": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.parse": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]",
                    "s": "str"
                }
            }
        ],
        "DateInterval.__contains__": [
            {
                "type": "method",
                "args": {
                    "date": "Date"
                }
            }
        ],
        "DateInterval.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DateInterval.__cmp__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "DateInterval.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "DateInterval"
                }
            }
        ],
        "DateInterval.__le__": [
            {
                "type": "method",
                "args": {
                    "other": "DateInterval"
                }
            }
        ],
        "DateInterval.__gt__": [
            {
                "type": "method",
                "args": {
                    "other": "DateInterval"
                }
            }
        ],
        "DateInterval.__ge__": [
            {
                "type": "method",
                "args": {
                    "other": "DateInterval"
                }
            }
        ],
        "DateInterval.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "DateInterval.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "Date.__init__": [
            {
                "type": "method",
                "args": {
                    "y": "int",
                    "m": "int",
                    "d": "int"
                }
            }
        ],
        "Date.to_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Date.from_date": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Date]",
                    "d": "datetime.date"
                }
            }
        ],
        "Date.parse": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Date]",
                    "s": "str"
                }
            }
        ],
        "Week.__init__": [
            {
                "type": "method",
                "args": {
                    "y": "int",
                    "w": "int"
                }
            }
        ],
        "Week.to_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Week.from_date": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Date]",
                    "d": "Date"
                }
            }
        ],
        "Week.parse": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Week]",
                    "s": "str"
                }
            }
        ],
        "Month.__init__": [
            {
                "type": "method",
                "args": {
                    "y": "int",
                    "m": "int"
                }
            }
        ],
        "Month.to_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Month.from_date": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Date]",
                    "d": "Date"
                }
            }
        ],
        "Month.parse": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Month]",
                    "s": "str"
                }
            }
        ],
        "Year.__init__": [
            {
                "type": "method",
                "args": {
                    "y": "int"
                }
            }
        ],
        "Year.to_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Year.from_date": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Date]",
                    "d": "Date"
                }
            }
        ],
        "Year.parse": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Year]",
                    "s": "str"
                }
            }
        ],
        "Custom.to_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Custom.parse": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Date]",
                    "s": "str"
                }
            }
        ]
    },
    "mock": {
        "MockFileSystem._data": [
            {
                "type": "attr",
                "anno": "multiprocessing.Manager"
            }
        ],
        "MockFileSystem.get_all_data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MockFileSystem.copy": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "MockFileSystem.get_data": [
            {
                "type": "method",
                "args": {
                    "fn": "str"
                }
            }
        ],
        "MockFileSystem.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool",
                    "skip_trash": "bool"
                }
            }
        ],
        "MockFileSystem.move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "MockFileSystem.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "MockFileSystem.isdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "MockFileSystem.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "MockFileSystem.clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MockTarget.fs": [
            {
                "type": "attr",
                "anno": "MockFileSystem"
            }
        ],
        "MockTarget._mirror_on_stderr": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MockTarget.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MockTarget.format": [
            {
                "type": "attr",
                "anno": "target.Format"
            }
        ],
        "MockTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "fn": "str",
                    "is_tmp": "bool",
                    "mirror_on_stderr": "bool",
                    "format": "target.Format"
                }
            }
        ],
        "MockTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MockTarget.Buffer._write_line": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MockTarget.Buffer.wrapper": [
            {
                "type": "attr",
                "anno": "target.ByteWrapper"
            }
        ],
        "MockTarget.Buffer.set_wrapper": [
            {
                "type": "method",
                "args": {
                    "wrapper": "target.ByteWrapper"
                }
            }
        ],
        "MockTarget.Buffer.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MockTarget.Buffer.readable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MockTarget.Buffer.writeable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MockTarget.Buffer.seekable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MockFile.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MockTarget.Buffer.write": [
            {
                "type": "method",
                "args": {
                    "data": "bytes"
                }
            }
        ],
        "MockTarget.Buffer.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MockTarget.Buffer.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "bool",
                    "exc_val": "Exception",
                    "exc_tb": "Exception"
                }
            }
        ],
        "MockTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "MockFileSystem.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "MockTarget.move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "MockTarget.rename": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "six": {
        "__author__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PY2": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "PY3": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "PY34": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "string_types": [
            {
                "type": "var",
                "anno": "types.Type[str]"
            }
        ],
        "integer_types": [
            {
                "type": "var",
                "anno": "tuple[type, ...]"
            }
        ],
        "class_types": [
            {
                "type": "var",
                "anno": "tuple[type, types.Type]"
            }
        ],
        "text_type": [
            {
                "type": "var",
                "anno": "type"
            }
        ],
        "binary_type": [
            {
                "type": "var",
                "anno": "type"
            }
        ],
        "MAXSIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "X.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_add_doc": [
            {
                "type": "func",
                "args": {
                    "func": "types.MethodType",
                    "doc": "str"
                }
            }
        ],
        "_import_module": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "_LazyDescr.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_LazyDescr.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "MovedModule.mod": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MovedModule.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "old": "str",
                    "new": "str"
                }
            }
        ],
        "MovedModule._resolve": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MovedModule.__getattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "_LazyModule.__doc__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_LazyModule.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "_LazyModule._moved_attributes": [
            {
                "type": "attr",
                "anno": "list[types.MovedAttribute]"
            }
        ],
        "MovedAttribute.mod": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MovedAttribute.attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MovedAttribute.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "old_mod": "str",
                    "new_mod": "str",
                    "old_attr": "str",
                    "new_attr": "str"
                }
            }
        ],
        "MovedAttribute._resolve": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_LazyDescr.__get__": [
            {
                "type": "method",
                "args": {
                    "obj": "types.ModuleType",
                    "tp": "str"
                }
            }
        ],
        "_SixMetaPathImporter.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_SixMetaPathImporter.known_modules": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "_SixMetaPathImporter.__init__": [
            {
                "type": "method",
                "args": {
                    "six_module_name": "str"
                }
            }
        ],
        "_SixMetaPathImporter._add_module": [
            {
                "type": "method",
                "args": {
                    "mod": "str",
                    "fullnames": "str"
                }
            }
        ],
        "_SixMetaPathImporter._get_module": [
            {
                "type": "method",
                "args": {
                    "fullname": "str"
                }
            }
        ],
        "_SixMetaPathImporter.find_module": [
            {
                "type": "method",
                "args": {
                    "fullname": "str",
                    "path": "str"
                }
            }
        ],
        "_SixMetaPathImporter.__get_module": [
            {
                "type": "method",
                "args": {
                    "fullname": "str"
                }
            }
        ],
        "_SixMetaPathImporter.load_module": [
            {
                "type": "method",
                "args": {
                    "fullname": "str"
                }
            }
        ],
        "_SixMetaPathImporter.is_package": [
            {
                "type": "method",
                "args": {
                    "fullname": "str"
                }
            }
        ],
        "_SixMetaPathImporter.get_code": [
            {
                "type": "method",
                "args": {
                    "fullname": "str"
                }
            }
        ],
        "_SixMetaPathImporter.get_source": [
            {
                "type": "attr",
                "anno": "Callable[[str], None]"
            }
        ],
        "_importer": [
            {
                "type": "var",
                "anno": "_SixMetaPathImporter"
            }
        ],
        "_MovedItems.__path__": [
            {
                "type": "attr",
                "anno": "list[_SixMetaPathImporter]"
            }
        ],
        "_moved_attributes": [
            {
                "type": "var",
                "anno": "list[MovedAttribute]"
            }
        ],
        "moves": [
            {
                "type": "var",
                "anno": "_MovedItems"
            }
        ],
        "_urllib_parse_moved_attributes": [
            {
                "type": "var",
                "anno": "list[MovedAttribute]"
            }
        ],
        "_urllib_error_moved_attributes": [
            {
                "type": "var",
                "anno": "list[MovedAttribute]"
            }
        ],
        "_urllib_request_moved_attributes": [
            {
                "type": "var",
                "anno": "list[MovedAttribute]"
            }
        ],
        "_urllib_response_moved_attributes": [
            {
                "type": "var",
                "anno": "list[MovedAttribute]"
            }
        ],
        "_urllib_robotparser_moved_attributes": [
            {
                "type": "var",
                "anno": "list[MovedAttribute]"
            }
        ],
        "Module_six_moves_urllib.__path__": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "Module_six_moves_urllib.parse": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Module_six_moves_urllib.error": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Module_six_moves_urllib.request": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Module_six_moves_urllib.response": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Module_six_moves_urllib.robotparser": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Module_six_moves_urllib.__dir__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "remove_move": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "_meth_func": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_meth_self": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_func_closure": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_func_code": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_func_defaults": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_func_globals": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_unbound_function": [
            {
                "type": "func",
                "args": {
                    "unbound": "types.MethodType"
                }
            }
        ],
        "create_bound_method": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "obj": "object"
                }
            }
        ],
        "create_unbound_method": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "cls": "types.Type"
                }
            }
        ],
        "Iterator.next": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "advance_iterator": [
            {
                "type": "func",
                "args": {
                    "it": "Iterator"
                }
            }
        ],
        "next": [
            {
                "type": "var",
                "anno": "Iterator"
            }
        ],
        "callable": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "get_method_function": [
            {
                "type": "var",
                "anno": "typing.Callable"
            }
        ],
        "get_method_self": [
            {
                "type": "var",
                "anno": "types.MethodType"
            }
        ],
        "get_function_closure": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "get_function_code": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "get_function_defaults": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "get_function_globals": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "viewkeys": [
            {
                "type": "var",
                "anno": "types.MethodType"
            }
        ],
        "viewvalues": [
            {
                "type": "var",
                "anno": "types.MethodType"
            }
        ],
        "viewitems": [
            {
                "type": "var",
                "anno": "types.MethodType"
            }
        ],
        "iterkeys": [
            {
                "type": "func",
                "args": {
                    "d": "dict",
                    "kw": "str"
                }
            }
        ],
        "itervalues": [
            {
                "type": "func",
                "args": {
                    "d": "dict",
                    "kw": "str"
                }
            }
        ],
        "iteritems": [
            {
                "type": "func",
                "args": {
                    "d": "dict",
                    "kw": "str"
                }
            }
        ],
        "iterlists": [
            {
                "type": "func",
                "args": {
                    "d": "dict",
                    "kw": "str"
                }
            }
        ],
        "unichr": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "int2byte": [
            {
                "type": "var",
                "anno": "type[int]"
            }
        ],
        "iterbytes": [
            {
                "type": "var",
                "anno": "Callable[[], Iterator[int]]"
            }
        ],
        "StringIO": [
            {
                "type": "var",
                "anno": "Type[StringIO]"
            }
        ],
        "BytesIO": [
            {
                "type": "var",
                "anno": "Type[BytesIO]"
            }
        ],
        "_assertCountEqual": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_assertRaisesRegex": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_assertRegex": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "b": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "u": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "byte2int": [
            {
                "type": "func",
                "args": {
                    "bs": "bytes"
                }
            }
        ],
        "indexbytes": [
            {
                "type": "func",
                "args": {
                    "buf": "bytes",
                    "i": "int"
                }
            }
        ],
        "assertCountEqual": [
            {
                "type": "func",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "assertRaisesRegex": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "assertRegex": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "reraise": [
            {
                "type": "func",
                "args": {
                    "tp": "types.Type[Exception]",
                    "value": "Exception",
                    "tb": "str"
                }
            }
        ],
        "exec_": [
            {
                "type": "func",
                "args": {
                    "_code_": "str",
                    "_globs_": "str",
                    "_locs_": "str"
                }
            }
        ],
        "raise_from": [
            {
                "type": "func",
                "args": {
                    "value": "Exception",
                    "from_value": "Exception"
                }
            }
        ],
        "wraps": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "with_metaclass": [
            {
                "type": "func",
                "args": {
                    "meta": "types.Meta",
                    "bases": "str"
                }
            }
        ],
        "python_2_unicode_compatible": [
            {
                "type": "func",
                "args": {
                    "klass": "types.ModuleType"
                }
            }
        ],
        "__path__": [
            {
                "type": "var",
                "anno": "list[_SixMetaPathImporter]"
            }
        ],
        "__package__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "add_move": [
            {
                "type": "func",
                "args": {
                    "move": "object"
                }
            }
        ],
        "_LazyModule.__dir__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "print_": [
            {
                "type": "func",
                "args": {
                    "args": "object",
                    "kwargs": "object"
                }
            }
        ],
        "_print": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "add_metaclass": [
            {
                "type": "func",
                "args": {
                    "metaclass": "type"
                }
            }
        ]
    },
    "server": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RPCHandler._scheduler": [
            {
                "type": "attr",
                "anno": "Scheduler"
            }
        ],
        "RPCHandler.initialize": [
            {
                "type": "method",
                "args": {
                    "scheduler": "Scheduler"
                }
            }
        ],
        "BaseTaskHistoryHandler._scheduler": [
            {
                "type": "attr",
                "anno": "Scheduler"
            }
        ],
        "BaseTaskHistoryHandler.initialize": [
            {
                "type": "method",
                "args": {
                    "scheduler": "Scheduler"
                }
            }
        ],
        "BaseTaskHistoryHandler.get_template_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RootPathHandler.get": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "app": [
            {
                "type": "func",
                "args": {
                    "scheduler": "Scheduler"
                }
            }
        ],
        "_init_api": [
            {
                "type": "func",
                "args": {
                    "scheduler": "Scheduler",
                    "responder": "tornado.web.RequestHandler",
                    "api_port": "int",
                    "address": "str",
                    "unix_socket": "str"
                }
            }
        ],
        "from_utc": [
            {
                "type": "func",
                "args": {
                    "utcTime": "str",
                    "fmt": "str"
                }
            }
        ],
        "StaticFileHandler.get": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "RPCHandler.get": [
            {
                "type": "method",
                "args": {
                    "method": "str"
                }
            }
        ],
        "RPCHandler.post": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RecentRunHandler.get": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AllRunHandler.get": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "stop": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "ByNameHandler.get": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "ByParamsHandler.get": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "SelectedRunHandler.get": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "ByIdHandler.get": [
            {
                "type": "method",
                "args": {
                    "id": "str"
                }
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {
                    "api_port": "int",
                    "address": "str",
                    "unix_socket": "str",
                    "scheduler": "Scheduler",
                    "responder": "tornado.web.RequestHandler"
                }
            }
        ]
    },
    "task_register": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "Register.__instance_cache": [
            {
                "type": "attr",
                "anno": "dict[str, Task]"
            }
        ],
        "Register._default_namespace": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "Register._reg": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Register.AMBIGUOUS_CLASS": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "Register.__new__": [
            {
                "type": "method",
                "args": {
                    "metacls": "type",
                    "classname": "str",
                    "bases": "tuple",
                    "classdict": "dict"
                }
            }
        ],
        "Register.clear_instance_cache": [
            {
                "type": "method",
                "args": {
                    "cls": "Register"
                }
            }
        ],
        "Register.disable_instance_cache": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Register]"
                }
            }
        ],
        "Register.task_family": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]"
                }
            }
        ],
        "Register._set_reg": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "reg": "dict"
                }
            }
        ],
        "Register._editdistance": [
            {
                "type": "method",
                "args": {
                    "a": "str",
                    "b": "str"
                }
            }
        ],
        "Register._get_reg": [
            {
                "type": "method",
                "args": {
                    "cls": "object"
                }
            }
        ],
        "Register.get_all_params": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Register]"
                }
            }
        ],
        "Register.task_names": [
            {
                "type": "method",
                "args": {
                    "cls": "object"
                }
            }
        ],
        "Register.tasks_str": [
            {
                "type": "method",
                "args": {
                    "cls": "object"
                }
            }
        ],
        "Register._missing_task_msg": [
            {
                "type": "method",
                "args": {
                    "cls": "object",
                    "task_name": "str"
                }
            }
        ],
        "Register.__call__": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Task]",
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "Register.get_task_cls": [
            {
                "type": "method",
                "args": {
                    "cls": "object",
                    "name": "str"
                }
            }
        ],
        "load_task": [
            {
                "type": "func",
                "args": {
                    "module": "str",
                    "task_name": "str",
                    "params_str": "dict"
                }
            }
        ]
    },
    "cmdline_parser": {
        "CmdlineParser._instance": [
            {
                "type": "attr",
                "anno": "argparse.Namespace"
            }
        ],
        "CmdlineParser.known_args": [
            {
                "type": "attr",
                "anno": "argparse.Namespace"
            }
        ],
        "CmdlineParser._get_task_cls": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CmdlineParser._attempt_load_module": [
            {
                "type": "method",
                "args": {
                    "known_args": "argparse.Namespace"
                }
            }
        ],
        "CmdlineParser._possibly_exit_with_help": [
            {
                "type": "method",
                "args": {
                    "parser": "argparse.ArgumentParser",
                    "known_args": "argparse.Namespace"
                }
            }
        ],
        "CmdlineParser._build_parser": [
            {
                "type": "method",
                "args": {
                    "root_task": "str",
                    "help_all": "bool"
                }
            }
        ],
        "CmdlineParser.__init__": [
            {
                "type": "method",
                "args": {
                    "cmdline_args": "argparse.Namespace"
                }
            }
        ],
        "CmdlineParser._get_task_kwargs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CmdlineParser.get_task_obj": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CmdlineParser.global_instance": [
            {
                "type": "method",
                "args": {
                    "cls": "type[CmdlineParser]",
                    "cmdline_args": "argparse.Namespace",
                    "allow_override": "bool"
                }
            }
        ],
        "CmdlineParser.get_instance": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ]
    },
    "process": {
        "rootlogger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "server_logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "get_log_format": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_spool_handler": [
            {
                "type": "func",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "check_pid": [
            {
                "type": "func",
                "args": {
                    "pidfile": "str"
                }
            }
        ],
        "_server_already_running": [
            {
                "type": "func",
                "args": {
                    "pidfile": "str"
                }
            }
        ],
        "write_pid": [
            {
                "type": "func",
                "args": {
                    "pidfile": "str"
                }
            }
        ],
        "daemonize": [
            {
                "type": "func",
                "args": {
                    "cmd": "Callable[[], None]",
                    "pidfile": "str",
                    "logdir": "str",
                    "api_port": "int",
                    "address": "str",
                    "unix_socket": "str"
                }
            }
        ]
    },
    "target": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "Target.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileSystem.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FileSystem.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool",
                    "skip_trash": "bool"
                }
            }
        ],
        "FileSystemTarget.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileSystemTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FileSystemTarget.fs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileSystemTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "FileSystemTarget._touchz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AtomicLocalFile.__tmp_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AtomicLocalFile.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AtomicLocalFile.generate_tmp_path": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "AtomicLocalFile.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "AtomicLocalFile.move_to_final_destination": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AtomicLocalFile.tmp_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AtomicLocalFile.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AtomicLocalFile.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "bool",
                    "exc": "Exception",
                    "traceback": "str"
                }
            }
        ],
        "FileSystem.copy": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "FileSystem"
                }
            }
        ],
        "FileSystem.move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str"
                }
            }
        ],
        "FileSystem.rename": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FileSystem.rename_dont_move": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "dest": "str"
                }
            }
        ],
        "FileSystem.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FileSystem.isdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FileSystem.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "AtomicLocalFile.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileSystemTarget.exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileSystemTarget.remove": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "file": {
        "atomic_file.generate_tmp_path": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "LocalFileSystem.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "LocalFileSystem.isdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "LocalFileSystem.mkdir": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "parents": "bool",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "LocalFileSystem.copy": [
            {
                "type": "method",
                "args": {
                    "old_path": "str",
                    "new_path": "str",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "LocalFileSystem.listdir": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "LocalFileSystem.remove": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "recursive": "bool"
                }
            }
        ],
        "LocalFileSystem.move": [
            {
                "type": "method",
                "args": {
                    "old_path": "str",
                    "new_path": "str",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "LocalTarget.fs": [
            {
                "type": "attr",
                "anno": "LocalFileSystem"
            }
        ],
        "LocalTarget.format": [
            {
                "type": "attr",
                "anno": "six.Format"
            }
        ],
        "LocalTarget.is_tmp": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTarget.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "format": "six.Format",
                    "is_tmp": "bool"
                }
            }
        ],
        "File.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "LocalTarget.fn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalTarget.makedirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalTarget.open": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "atomic_file.move_to_final_destination": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalTarget.copy": [
            {
                "type": "method",
                "args": {
                    "new_path": "str",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "LocalTarget.remove": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalTarget.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalTarget.move": [
            {
                "type": "method",
                "args": {
                    "new_path": "str",
                    "raise_if_exists": "bool"
                }
            }
        ],
        "LocalTarget.move_dir": [
            {
                "type": "method",
                "args": {
                    "new_path": "str"
                }
            }
        ]
    },
    "format": {
        "FileWrapper._subpipe": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "FileWrapper.__init__": [
            {
                "type": "method",
                "args": {
                    "file_object": "subprocess.Popen"
                }
            }
        ],
        "FileWrapper.__getattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "FileWrapper.__enter__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FileWrapper.__exit__": [
            {
                "type": "method",
                "args": {
                    "args": "int",
                    "kwargs": "int"
                }
            }
        ],
        "FileWrapper.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper._command": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "InputPipeProcessWrapper._input_pipe": [
            {
                "type": "attr",
                "anno": "IO"
            }
        ],
        "InputPipeProcessWrapper._original_input": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "InputPipeProcessWrapper._tmp_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "InputPipeProcessWrapper._process": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "InputPipeProcessWrapper.create_subprocess": [
            {
                "type": "method",
                "args": {
                    "command": "subprocess.Popen"
                }
            }
        ],
        "InputPipeProcessWrapper.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper.__getattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "InputPipeProcessWrapper.readable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper.writable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper.seekable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "OutputPipeProcessWrapper.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "OutputPipeProcessWrapper._command": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "OutputPipeProcessWrapper._output_pipe": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "OutputPipeProcessWrapper._process": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "OutputPipeProcessWrapper._flushcount": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "OutputPipeProcessWrapper.__init__": [
            {
                "type": "method",
                "args": {
                    "command": "list",
                    "output_pipe": "subprocess.Popen"
                }
            }
        ],
        "OutputPipeProcessWrapper.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper.__getattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "OutputPipeProcessWrapper.readable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper.writable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper.seekable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseWrapper._stream": [
            {
                "type": "attr",
                "anno": "io.BufferedReader"
            }
        ],
        "BaseWrapper.__init__": [
            {
                "type": "method",
                "args": {
                    "stream": "io.BufferedReader",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BaseWrapper.__getattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "BaseWrapper.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseWrapper.__exit__": [
            {
                "type": "method",
                "args": {
                    "args": "str"
                }
            }
        ],
        "NewlineWrapper.newline": [
            {
                "type": "attr",
                "anno": "bytes"
            }
        ],
        "NewlineWrapper.__init__": [
            {
                "type": "method",
                "args": {
                    "stream": "io.TextIOWrapper",
                    "newline": "bytes"
                }
            }
        ],
        "NewlineWrapper.read": [
            {
                "type": "method",
                "args": {
                    "n": "int"
                }
            }
        ],
        "MixedUnicodeBytesWrapper.encoding": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MixedUnicodeBytesWrapper.__init__": [
            {
                "type": "method",
                "args": {
                    "stream": "io.TextIOWrapper",
                    "encoding": "str"
                }
            }
        ],
        "MixedUnicodeBytesWrapper._convert": [
            {
                "type": "method",
                "args": {
                    "b": "bytes"
                }
            }
        ],
        "MixedUnicodeBytesWrapper.writelines": [
            {
                "type": "method",
                "args": {
                    "lines": "list[bytes]"
                }
            }
        ],
        "NewlineWrapper.writelines": [
            {
                "type": "method",
                "args": {
                    "lines": "list[bytes]"
                }
            }
        ],
        "MixedUnicodeBytesWrapper.write": [
            {
                "type": "method",
                "args": {
                    "b": "bytes"
                }
            }
        ],
        "OutputPipeProcessWrapper.write": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "NewlineWrapper.write": [
            {
                "type": "method",
                "args": {
                    "b": "bytes"
                }
            }
        ],
        "OutputPipeProcessWrapper.writeLine": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "Format.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Format]",
                    "input_pipe": "six.ByteReader"
                }
            }
        ],
        "Format.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Format]",
                    "output_pipe": "six.ByteWriter"
                }
            }
        ],
        "ChainFormat.args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ChainFormat.input": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ChainFormat.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TextWrapper._stream": [
            {
                "type": "attr",
                "anno": "io.FileIO"
            }
        ],
        "TextWrapper.__init__": [
            {
                "type": "method",
                "args": {
                    "stream": "io.FileIO",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "TextWrapper.__del__": [
            {
                "type": "method",
                "args": {
                    "args": "str"
                }
            }
        ],
        "TextWrapper.__exit__": [
            {
                "type": "method",
                "args": {
                    "args": "str"
                }
            }
        ],
        "TextWrapper.__getattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TextWrapper.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NopFormat.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "input_pipe": "six.ByteReader"
                }
            }
        ],
        "NopFormat.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "output_pipe": "six.ByteWriter"
                }
            }
        ],
        "WrappedFormat.args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "WrappedFormat.kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "WrappedFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "TextFormat.input": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TextFormat.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TextFormat.wrapper_cls": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MixedUnicodeBytesFormat.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MixedUnicodeBytesFormat.wrapper_cls": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "NewlineFormat.input": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NewlineFormat.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NewlineFormat.wrapper_cls": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "WrappedFormat.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "output_pipe": "six.ByteWriter"
                }
            }
        ],
        "WrappedFormat.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "input_pipe": "six.ByteReader"
                }
            }
        ],
        "GzipFormat.input": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GzipFormat.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GzipFormat.compression_level": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GzipFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "compression_level": "int"
                }
            }
        ],
        "GzipFormat.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "output_pipe": "subprocess.Popen"
                }
            }
        ],
        "Bzip2Format.input": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Bzip2Format.output": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Bzip2Format.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "output_pipe": "subprocess.Popen"
                }
            }
        ],
        "ChainFormat.pipe_writer": [
            {
                "type": "method",
                "args": {
                    "output_pipe": "subprocess.Popen"
                }
            }
        ],
        "Text": [
            {
                "type": "var",
                "anno": "TextFormat"
            }
        ],
        "UTF8": [
            {
                "type": "var",
                "anno": "TextFormat"
            }
        ],
        "Nop": [
            {
                "type": "var",
                "anno": "NopFormat"
            }
        ],
        "SysNewLine": [
            {
                "type": "var",
                "anno": "NewLineFormat"
            }
        ],
        "Gzip": [
            {
                "type": "var",
                "anno": "Format"
            }
        ],
        "Bzip2": [
            {
                "type": "var",
                "anno": "Bzip2Format"
            }
        ],
        "MixedUnicodeBytes": [
            {
                "type": "var",
                "anno": "Format"
            }
        ],
        "get_default_format": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper._finish": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper._abort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper.__exit__": [
            {
                "type": "method",
                "args": {
                    "type": "bool",
                    "value": "str",
                    "traceback": "str"
                }
            }
        ],
        "InputPipeProcessWrapper.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "InputPipeProcessWrapper.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper._finish": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper.abort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseWrapper.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OutputPipeProcessWrapper.__exit__": [
            {
                "type": "method",
                "args": {
                    "type": "None",
                    "value": "None",
                    "traceback": "None"
                }
            }
        ],
        "InputPipeProcessWrapper.__init__": [
            {
                "type": "method",
                "args": {
                    "command": "Union[subprocess.Popen, subprocess.Popen]",
                    "input_pipe": "IO"
                }
            }
        ],
        "Bzip2Format.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "input_pipe": "IO"
                }
            }
        ],
        "GzipFormat.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "input_pipe": "IO"
                }
            }
        ],
        "ChainFormat.pipe_reader": [
            {
                "type": "method",
                "args": {
                    "input_pipe": "FileWrapper"
                }
            }
        ],
        "ChainFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "object",
                    "kwargs": "object"
                }
            }
        ],
        "Format.__rshift__": [
            {
                "type": "method",
                "args": {
                    "a": "object",
                    "b": "object"
                }
            }
        ]
    },
    "lock": {
        "getpcmd": [
            {
                "type": "func",
                "args": {
                    "pid": "int"
                }
            }
        ],
        "get_info": [
            {
                "type": "func",
                "args": {
                    "pid_dir": "str",
                    "my_pid": "int"
                }
            }
        ],
        "acquire_for": [
            {
                "type": "func",
                "args": {
                    "pid_dir": "str",
                    "num_available": "int",
                    "kill_signal": "int"
                }
            }
        ]
    },
    "parameter": {
        "_no_value": [
            {
                "type": "var",
                "anno": "object"
            }
        ],
        "Parameter._counter": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Parameter._default": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "Parameter._batch_method": [
            {
                "type": "attr",
                "anno": "Callable[[object], object]"
            }
        ],
        "Parameter.significant": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Parameter.positional": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Parameter.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Parameter.always_in_help": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Parameter._config_path": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Parameter.__init__": [
            {
                "type": "method",
                "args": {
                    "default": "object",
                    "is_global": "bool",
                    "significant": "bool",
                    "description": "str",
                    "config_path": "dict",
                    "positional": "bool",
                    "always_in_help": "bool",
                    "batch_method": "Callable[[object], object]"
                }
            }
        ],
        "Parameter._is_batchable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Parameter.parse": [
            {
                "type": "method",
                "args": {
                    "x": "object"
                }
            }
        ],
        "Parameter._parse_list": [
            {
                "type": "method",
                "args": {
                    "xs": "list"
                }
            }
        ],
        "Parameter.serialize": [
            {
                "type": "method",
                "args": {
                    "x": "object"
                }
            }
        ],
        "Parameter.normalize": [
            {
                "type": "method",
                "args": {
                    "x": "object"
                }
            }
        ],
        "Parameter.next_in_enumeration": [
            {
                "type": "method",
                "args": {
                    "_value": "str"
                }
            }
        ],
        "Parameter._parse_or_no_value": [
            {
                "type": "method",
                "args": {
                    "x": "object"
                }
            }
        ],
        "Parameter._parser_global_dest": [
            {
                "type": "method",
                "args": {
                    "param_name": "str",
                    "task_name": "str"
                }
            }
        ],
        "Parameter._parser_action": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_UNIX_EPOCH": [
            {
                "type": "var",
                "anno": "datetime.datetime"
            }
        ],
        "_DateParameterBase.interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DateParameterBase.start": [
            {
                "type": "attr",
                "anno": "datetime.datetime"
            }
        ],
        "_DateParameterBase.__init__": [
            {
                "type": "method",
                "args": {
                    "interval": "int",
                    "start": "datetime.datetime",
                    "kwargs": "object"
                }
            }
        ],
        "_DateParameterBase.date_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DateParameterBase.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_DateParameterBase.serialize": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime.datetime"
                }
            }
        ],
        "DateParameter.date_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DateParameter.next_in_enumeration": [
            {
                "type": "method",
                "args": {
                    "value": "datetime.timedelta"
                }
            }
        ],
        "DateParameter.normalize": [
            {
                "type": "method",
                "args": {
                    "value": "six.Union[datetime.datetime, datetime.timedelta]"
                }
            }
        ],
        "MonthParameter.date_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MonthParameter._add_months": [
            {
                "type": "method",
                "args": {
                    "date": "datetime.datetime",
                    "months": "int"
                }
            }
        ],
        "MonthParameter.next_in_enumeration": [
            {
                "type": "method",
                "args": {
                    "value": "datetime.datetime"
                }
            }
        ],
        "MonthParameter.normalize": [
            {
                "type": "method",
                "args": {
                    "value": "datetime.datetime"
                }
            }
        ],
        "YearParameter.date_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "YearParameter.next_in_enumeration": [
            {
                "type": "method",
                "args": {
                    "value": "Year"
                }
            }
        ],
        "YearParameter.normalize": [
            {
                "type": "method",
                "args": {
                    "value": "datetime.datetime"
                }
            }
        ],
        "_DatetimeParameterBase.interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DatetimeParameterBase.start": [
            {
                "type": "attr",
                "anno": "datetime.datetime"
            }
        ],
        "_DatetimeParameterBase.__init__": [
            {
                "type": "method",
                "args": {
                    "interval": "int",
                    "start": "datetime.datetime",
                    "kwargs": "object"
                }
            }
        ],
        "_DatetimeParameterBase.date_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DatetimeParameterBase._timedelta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DatetimeParameterBase.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_DatetimeParameterBase.serialize": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime.datetime"
                }
            }
        ],
        "_DatetimeParameterBase.normalize": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime.datetime"
                }
            }
        ],
        "_DatetimeParameterBase.next_in_enumeration": [
            {
                "type": "method",
                "args": {
                    "value": "int"
                }
            }
        ],
        "DateHourParameter.date_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DateHourParameter._timedelta": [
            {
                "type": "attr",
                "anno": "datetime.timedelta"
            }
        ],
        "DateMinuteParameter.date_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DateMinuteParameter._timedelta": [
            {
                "type": "attr",
                "anno": "datetime.timedelta"
            }
        ],
        "DateMinuteParameter.deprecated_date_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DateSecondParameter.date_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DateSecondParameter._timedelta": [
            {
                "type": "attr",
                "anno": "datetime.timedelta"
            }
        ],
        "IntParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "IntParameter.next_in_enumeration": [
            {
                "type": "method",
                "args": {
                    "value": "int"
                }
            }
        ],
        "FloatParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "BoolParameter._default": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "BoolParameter.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "object",
                    "kwargs": "object"
                }
            }
        ],
        "BoolParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "BoolParameter.normalize": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "BoolParameter._parser_action": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BooleanParameter.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TimeDeltaParameter._apply_regex": [
            {
                "type": "method",
                "args": {
                    "regex": "str",
                    "input": "str"
                }
            }
        ],
        "TimeDeltaParameter._parseIso8601": [
            {
                "type": "method",
                "args": {
                    "input": "str"
                }
            }
        ],
        "TimeDeltaParameter._parseSimple": [
            {
                "type": "method",
                "args": {
                    "input": "str"
                }
            }
        ],
        "TimeDeltaParameter.parse": [
            {
                "type": "method",
                "args": {
                    "input": "str"
                }
            }
        ],
        "TaskParameter.parse": [
            {
                "type": "method",
                "args": {
                    "input": "str"
                }
            }
        ],
        "EnumParameter._enum": [
            {
                "type": "attr",
                "anno": "Mapping[str, str]"
            }
        ],
        "EnumParameter.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "EnumParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "FrozenOrderedDict.__dict": [
            {
                "type": "attr",
                "anno": "OrderedDict"
            }
        ],
        "FrozenOrderedDict.__hash": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "FrozenOrderedDict.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "FrozenOrderedDict.__getitem__": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "FrozenOrderedDict.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FrozenOrderedDict.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FrozenOrderedDict.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FrozenOrderedDict.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FrozenOrderedDict.get_wrapped": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DictParameter.DictParamEncoder.default": [
            {
                "type": "method",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "DictParameter.normalize": [
            {
                "type": "method",
                "args": {
                    "value": "dict"
                }
            }
        ],
        "DictParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "DictParameter.serialize": [
            {
                "type": "method",
                "args": {
                    "x": "dict"
                }
            }
        ],
        "ListParameter.normalize": [
            {
                "type": "method",
                "args": {
                    "x": "list"
                }
            }
        ],
        "ListParameter.parse": [
            {
                "type": "method",
                "args": {
                    "x": "str"
                }
            }
        ],
        "ListParameter.serialize": [
            {
                "type": "method",
                "args": {
                    "x": "list"
                }
            }
        ],
        "TupleParameter.parse": [
            {
                "type": "method",
                "args": {
                    "x": "str"
                }
            }
        ],
        "TupleParameter.serialize": [
            {
                "type": "method",
                "args": {
                    "x": "tuple"
                }
            }
        ],
        "NumericalParameter._var_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NumericalParameter._min_value": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NumericalParameter._max_value": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NumericalParameter._left_op": [
            {
                "type": "attr",
                "anno": "operator.Operator"
            }
        ],
        "NumericalParameter._right_op": [
            {
                "type": "attr",
                "anno": "operator.Operator"
            }
        ],
        "NumericalParameter._permitted_range": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NumericalParameter.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NumericalParameter.__init__": [
            {
                "type": "method",
                "args": {
                    "left_op": "operator.Operator",
                    "right_op": "operator.Operator",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "NumericalParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "ChoiceParameter._choices": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "ChoiceParameter._var_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ChoiceParameter.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ChoiceParameter.__init__": [
            {
                "type": "method",
                "args": {
                    "var_type": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "ChoiceParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "DateMinuteParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "DateIntervalParameter.parse": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "EnumParameter.serialize": [
            {
                "type": "method",
                "args": {
                    "e": "EnumParameter"
                }
            }
        ],
        "TaskParameter.serialize": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "Parameter._get_value_from_config": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "name": "str"
                }
            }
        ],
        "Parameter._value_iterator": [
            {
                "type": "method",
                "args": {
                    "task_name": "str",
                    "param_name": "str"
                }
            }
        ],
        "Parameter._get_value": [
            {
                "type": "method",
                "args": {
                    "task_name": "str",
                    "param_name": "str"
                }
            }
        ],
        "Parameter.task_value": [
            {
                "type": "method",
                "args": {
                    "task_name": "str",
                    "param_name": "str"
                }
            }
        ],
        "Parameter.has_task_value": [
            {
                "type": "method",
                "args": {
                    "task_name": "str",
                    "param_name": "str"
                }
            }
        ]
    },
    "retcodes": {
        "retcode.unhandled_exception": [
            {
                "type": "attr",
                "anno": "IntParameter"
            }
        ],
        "retcode.missing_data": [
            {
                "type": "attr",
                "anno": "IntParameter"
            }
        ],
        "retcode.task_failed": [
            {
                "type": "attr",
                "anno": "IntParameter"
            }
        ],
        "retcode.already_running": [
            {
                "type": "attr",
                "anno": "IntParameter"
            }
        ],
        "retcode.scheduling_error": [
            {
                "type": "attr",
                "anno": "IntParameter"
            }
        ],
        "retcode.not_run": [
            {
                "type": "attr",
                "anno": "IntParameter"
            }
        ],
        "run_with_retcodes": [
            {
                "type": "func",
                "args": {
                    "argv": "list"
                }
            }
        ]
    },
    "": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ]
    },
    "interface": {
        "setup_interface_logging": [
            {
                "type": "func",
                "args": {
                    "conf_file": "str"
                }
            }
        ],
        "core.use_cmdline_section": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "core.local_scheduler": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "core.scheduler_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "core.scheduler_port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "core.scheduler_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "core.lock_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "core.no_lock": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "core.lock_pid_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "core.take_lock": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "core.workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "core.logging_conf_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "core.module": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "core.parallel_scheduling": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "core.assistant": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "core.help": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "core.help_all": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "_WorkerSchedulerFactory.create_local_scheduler": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_WorkerSchedulerFactory.create_remote_scheduler": [
            {
                "type": "method",
                "args": {
                    "url": "str"
                }
            }
        ],
        "_WorkerSchedulerFactory.create_worker": [
            {
                "type": "method",
                "args": {
                    "scheduler": "scheduler.Scheduler",
                    "worker_processes": "int",
                    "assistant": "bool"
                }
            }
        ],
        "_schedule_and_run": [
            {
                "type": "func",
                "args": {
                    "tasks": "list[task.Task]",
                    "worker_scheduler_factory": "_WorkerSchedulerFactory",
                    "override_defaults": "dict"
                }
            }
        ],
        "build": [
            {
                "type": "func",
                "args": {
                    "tasks": "list[task.Task]",
                    "worker_scheduler_factory": "_WorkerSchedulerFactory",
                    "env_params": "dict"
                }
            }
        ],
        "_run": [
            {
                "type": "func",
                "args": {
                    "cmdline_args": "str",
                    "main_task_cls": "task.Task",
                    "worker_scheduler_factory": "_WorkerSchedulerFactory",
                    "use_dynamic_argparse": "bool",
                    "local_scheduler": "bool"
                }
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "tools.deps_tree": {
        "bcolors.OKBLUE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "bcolors.OKGREEN": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "bcolors.ENDC": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "print_tree": [
            {
                "type": "func",
                "args": {
                    "task": "Task",
                    "indent": "str",
                    "last": "bool"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "tools.range": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RangeEvent.COMPLETE_COUNT": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RangeEvent.COMPLETE_FRACTION": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RangeEvent.DELAY": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RangeBase.of": [
            {
                "type": "attr",
                "anno": "luigi.TaskParameter"
            }
        ],
        "RangeBase.of_params": [
            {
                "type": "attr",
                "anno": "luigi.DictParameter"
            }
        ],
        "RangeBase.start": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "RangeBase.stop": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "RangeBase.reverse": [
            {
                "type": "attr",
                "anno": "luigi.BoolParameter"
            }
        ],
        "RangeBase.task_limit": [
            {
                "type": "attr",
                "anno": "luigi.IntParameter"
            }
        ],
        "RangeBase.now": [
            {
                "type": "attr",
                "anno": "luigi.IntParameter"
            }
        ],
        "RangeBase.param_name": [
            {
                "type": "attr",
                "anno": "luigi.Parameter"
            }
        ],
        "RangeBase.of_cls": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RangeBase.datetime_to_parameter": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime"
                }
            }
        ],
        "RangeBase.parameter_to_datetime": [
            {
                "type": "method",
                "args": {
                    "p": "luigi.Parameter"
                }
            }
        ],
        "RangeBase.datetime_to_parameters": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime"
                }
            }
        ],
        "RangeBase.parameters_to_datetime": [
            {
                "type": "method",
                "args": {
                    "p": "str"
                }
            }
        ],
        "RangeBase.moving_start": [
            {
                "type": "method",
                "args": {
                    "now": "datetime"
                }
            }
        ],
        "RangeBase.moving_stop": [
            {
                "type": "method",
                "args": {
                    "now": "datetime"
                }
            }
        ],
        "RangeBase.finite_datetimes": [
            {
                "type": "method",
                "args": {
                    "finite_start": "datetime",
                    "finite_stop": "datetime"
                }
            }
        ],
        "RangeBase._format_datetime": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime"
                }
            }
        ],
        "RangeBase._format_range": [
            {
                "type": "method",
                "args": {
                    "datetimes": "list"
                }
            }
        ],
        "RangeBase._param_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RangeBase._task_parameters": [
            {
                "type": "method",
                "args": {
                    "param": "luigi.Parameter"
                }
            }
        ],
        "RangeBase._instantiate_task_cls": [
            {
                "type": "method",
                "args": {
                    "param": "luigi.Parameter"
                }
            }
        ],
        "RangeBase._cached_requires": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "RangeDailyBase.start": [
            {
                "type": "attr",
                "anno": "luigi.DateParameter"
            }
        ],
        "RangeDailyBase.stop": [
            {
                "type": "attr",
                "anno": "luigi.DateParameter"
            }
        ],
        "RangeDailyBase.days_back": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RangeDailyBase.days_forward": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RangeDailyBase.datetime_to_parameter": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime"
                }
            }
        ],
        "RangeDailyBase.parameter_to_datetime": [
            {
                "type": "method",
                "args": {
                    "p": "luigi.Parameter"
                }
            }
        ],
        "RangeDailyBase.datetime_to_parameters": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime"
                }
            }
        ],
        "RangeDailyBase.parameters_to_datetime": [
            {
                "type": "method",
                "args": {
                    "p": "luigi.Parameter"
                }
            }
        ],
        "RangeDailyBase.moving_start": [
            {
                "type": "method",
                "args": {
                    "now": "datetime"
                }
            }
        ],
        "RangeDailyBase.moving_stop": [
            {
                "type": "method",
                "args": {
                    "now": "datetime"
                }
            }
        ],
        "RangeDailyBase.finite_datetimes": [
            {
                "type": "method",
                "args": {
                    "finite_start": "datetime",
                    "finite_stop": "datetime"
                }
            }
        ],
        "RangeHourlyBase.start": [
            {
                "type": "attr",
                "anno": "luigi.DateHourParameter"
            }
        ],
        "RangeHourlyBase.stop": [
            {
                "type": "attr",
                "anno": "luigi.DateHourParameter"
            }
        ],
        "RangeHourlyBase.hours_back": [
            {
                "type": "attr",
                "anno": "luigi.IntParameter"
            }
        ],
        "RangeHourlyBase.hours_forward": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RangeHourlyBase.datetime_to_parameter": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime"
                }
            }
        ],
        "RangeHourlyBase.parameter_to_datetime": [
            {
                "type": "method",
                "args": {
                    "p": "datetime"
                }
            }
        ],
        "RangeHourlyBase.datetime_to_parameters": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime"
                }
            }
        ],
        "RangeHourlyBase.parameters_to_datetime": [
            {
                "type": "method",
                "args": {
                    "p": "dict"
                }
            }
        ],
        "RangeHourlyBase.moving_start": [
            {
                "type": "method",
                "args": {
                    "now": "datetime"
                }
            }
        ],
        "RangeHourlyBase.moving_stop": [
            {
                "type": "method",
                "args": {
                    "now": "datetime"
                }
            }
        ],
        "RangeHourlyBase.finite_datetimes": [
            {
                "type": "method",
                "args": {
                    "finite_start": "datetime",
                    "finite_stop": "datetime"
                }
            }
        ],
        "most_common": [
            {
                "type": "func",
                "args": {
                    "items": "tuple"
                }
            }
        ],
        "RangeHourlyBase._format_datetime": [
            {
                "type": "method",
                "args": {
                    "dt": "datetime.datetime"
                }
            }
        ],
        "_get_per_location_glob": [
            {
                "type": "func",
                "args": {
                    "tasks": "tuple",
                    "outputs": "tuple",
                    "regexes": "tuple"
                }
            }
        ],
        "_get_filesystems_and_globs": [
            {
                "type": "func",
                "args": {
                    "datetime_to_task": "str",
                    "datetime_to_re": "str"
                }
            }
        ],
        "_constrain_glob": [
            {
                "type": "func",
                "args": {
                    "glob": "str",
                    "paths": "list",
                    "limit": "int"
                }
            }
        ],
        "_list_existing": [
            {
                "type": "func",
                "args": {
                    "filesystem": "FileSystemTarget",
                    "glob": "str",
                    "paths": "list"
                }
            }
        ],
        "infer_bulk_complete_from_fs": [
            {
                "type": "func",
                "args": {
                    "datetimes": "list",
                    "datetime_to_task": "str",
                    "datetime_to_re": "str"
                }
            }
        ],
        "RangeBase.missing_datetimes": [
            {
                "type": "method",
                "args": {
                    "finite_datetimes": "list"
                }
            }
        ],
        "RangeBase._missing_datetimes": [
            {
                "type": "method",
                "args": {
                    "finite_datetimes": "list"
                }
            }
        ],
        "RangeHourly.missing_datetimes": [
            {
                "type": "method",
                "args": {
                    "finite_datetimes": "list"
                }
            }
        ],
        "RangeDaily.missing_datetimes": [
            {
                "type": "method",
                "args": {
                    "finite_datetimes": "list"
                }
            }
        ],
        "RangeBase._emit_metrics": [
            {
                "type": "method",
                "args": {
                    "missing_datetimes": "list",
                    "finite_start": "datetime",
                    "finite_stop": "datetime"
                }
            }
        ],
        "RangeBase.requires": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "tools.deps": {
        "upstream.family": [
            {
                "type": "attr",
                "anno": "parameter.Parameter"
            }
        ],
        "get_task_output_description": [
            {
                "type": "func",
                "args": {
                    "task_output": "Union[RemoteTarget, PostgresTarget]"
                }
            }
        ],
        "get_task_requires": [
            {
                "type": "func",
                "args": {
                    "task": "luigi.task.Task"
                }
            }
        ],
        "dfs_paths": [
            {
                "type": "func",
                "args": {
                    "start_task": "luigi.task.Task",
                    "goal_task_family": "str",
                    "path": "list"
                }
            }
        ],
        "find_deps": [
            {
                "type": "func",
                "args": {
                    "task": "luigi.task.Task",
                    "upstream_task_family": "str"
                }
            }
        ],
        "find_deps_cli": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "tools.luigi_grep": {
        "LuigiGrep._host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LuigiGrep._port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LuigiGrep.__init__": [
            {
                "type": "method",
                "args": {
                    "host": "str",
                    "port": "int"
                }
            }
        ],
        "LuigiGrep.graph_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LuigiGrep._fetch_json": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LuigiGrep._build_results": [
            {
                "type": "method",
                "args": {
                    "jobs": "dict",
                    "job": "str"
                }
            }
        ],
        "LuigiGrep.prefix_search": [
            {
                "type": "method",
                "args": {
                    "job_name_prefix": "str"
                }
            }
        ],
        "LuigiGrep.status_search": [
            {
                "type": "method",
                "args": {
                    "status": "str"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "db_task_history": {
        "Base": [
            {
                "type": "var",
                "anno": "sqlalchemy.ext.declarative.Declarative"
            }
        ],
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "DbTaskHistory.CURRENT_SOURCE_VERSION": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DbTaskHistory.engine": [
            {
                "type": "attr",
                "anno": "sqlalchemy.Engine"
            }
        ],
        "DbTaskHistory.session_factory": [
            {
                "type": "attr",
                "anno": "sqlalchemy.orm.SessionFactory"
            }
        ],
        "DbTaskHistory._session": [
            {
                "type": "method",
                "args": {
                    "session": "sqlalchemy.orm.Session"
                }
            }
        ],
        "DbTaskHistory.tasks": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DbTaskHistory.find_all_runs": [
            {
                "type": "method",
                "args": {
                    "session": "sqlalchemy.orm.Session"
                }
            }
        ],
        "DbTaskHistory.find_all_events": [
            {
                "type": "method",
                "args": {
                    "session": "sqlalchemy.orm.Session"
                }
            }
        ],
        "TaskParameter.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskParameter.task_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskParameter.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskParameter.value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskParameter.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskEvent.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskEvent.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskEvent.task_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskEvent.event_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskEvent.ts": [
            {
                "type": "attr",
                "anno": "datetime.datetime"
            }
        ],
        "TaskEvent.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskRecord.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskRecord.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DbTaskHistory.find_latest_runs": [
            {
                "type": "method",
                "args": {
                    "session": "sqlalchemy.orm.Session"
                }
            }
        ],
        "TaskRecord.task_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskRecord.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskRecord.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskRecord.parameters": [
            {
                "type": "attr",
                "anno": "sqlalchemy.orm.Relation[TaskParameter]"
            }
        ],
        "TaskRecord.events": [
            {
                "type": "attr",
                "anno": "sqlalchemy.orm.Relation[TaskEvent]"
            }
        ],
        "TaskRecord.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_upgrade_schema": [
            {
                "type": "func",
                "args": {
                    "engine": "sqlalchemy.Engine"
                }
            }
        ],
        "DbTaskHistory._get_task": [
            {
                "type": "method",
                "args": {
                    "task": "sqlalchemy.orm.tasks.Task",
                    "status": "str",
                    "host": "str"
                }
            }
        ],
        "DbTaskHistory.find_all_by_parameters": [
            {
                "type": "method",
                "args": {
                    "task_name": "str",
                    "session": "sqlalchemy.orm.Session",
                    "task_params": "str"
                }
            }
        ],
        "DbTaskHistory.find_all_by_name": [
            {
                "type": "method",
                "args": {
                    "task_name": "str",
                    "session": "sqlalchemy.orm.Session"
                }
            }
        ],
        "DbTaskHistory.find_task_by_id": [
            {
                "type": "method",
                "args": {
                    "id": "str",
                    "session": "sqlalchemy.orm.Session"
                }
            }
        ],
        "DbTaskHistory.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DbTaskHistory._find_or_create_task": [
            {
                "type": "method",
                "args": {
                    "task": "sqlalchemy.orm.tasks.Task"
                }
            }
        ],
        "DbTaskHistory._add_task_event": [
            {
                "type": "method",
                "args": {
                    "task": "sqlalchemy.orm.tasks.Task",
                    "event": "TaskEvent"
                }
            }
        ],
        "DbTaskHistory.task_started": [
            {
                "type": "method",
                "args": {
                    "task": "sqlalchemy.orm.tasks.Task",
                    "worker_host": "str"
                }
            }
        ],
        "DbTaskHistory.task_finished": [
            {
                "type": "method",
                "args": {
                    "task": "sqlalchemy.orm.tasks.Task",
                    "successful": "bool"
                }
            }
        ],
        "DbTaskHistory.task_scheduled": [
            {
                "type": "method",
                "args": {
                    "task": "sqlalchemy.orm.tasks.Task"
                }
            }
        ]
    },
    "contrib.sge_runner": {
        "_extract_packages_archive": [
            {
                "type": "func",
                "args": {
                    "work_dir": "str"
                }
            }
        ],
        "_do_work_on_compute_node": [
            {
                "type": "func",
                "args": {
                    "work_dir": "str",
                    "tarball": "bool"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {
                    "args": "list"
                }
            }
        ]
    },
    "mrrunner": {
        "Runner.job": [
            {
                "type": "attr",
                "anno": "pickle.Pickle"
            }
        ],
        "Runner.run": [
            {
                "type": "method",
                "args": {
                    "kind": "str",
                    "stdin": "tuple",
                    "stdout": "str"
                }
            }
        ],
        "Runner.extract_packages_archive": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Runner.__init__": [
            {
                "type": "method",
                "args": {
                    "job": "pickle.Pickle"
                }
            }
        ],
        "print_exception": [
            {
                "type": "func",
                "args": {
                    "exc": "Exception"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {
                    "args": "tuple",
                    "stdin": "tuple",
                    "stdout": "str",
                    "print_exception": "Callable[[Exception], None]"
                }
            }
        ]
    },
    "configuration": {
        "LuigiConfigParser.NO_DEFAULT": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "LuigiConfigParser._instance": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "LuigiConfigParser._config_paths": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "LuigiConfigParser.config_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LuigiConfigParser.reload": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[luigi.config.ConfigParser]"
                }
            }
        ],
        "LuigiConfigParser.instance": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[luigi.config.ConfigParser]",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "LuigiConfigParser.add_config_path": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[luigi.config.ConfigParser]",
                    "path": "str"
                }
            }
        ],
        "LuigiConfigParser._get_with_default": [
            {
                "type": "method",
                "args": {
                    "method": "Callable[[LuigiConfigParser, str, object], object]",
                    "section": "str",
                    "option": "str",
                    "default": "object",
                    "expected_type": "type",
                    "kwargs": "object"
                }
            }
        ],
        "LuigiConfigParser.get": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str",
                    "default": "object",
                    "kwargs": "object"
                }
            }
        ],
        "LuigiConfigParser.getboolean": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str",
                    "default": "object"
                }
            }
        ],
        "LuigiConfigParser.getint": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str",
                    "default": "object"
                }
            }
        ],
        "LuigiConfigParser.getfloat": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str",
                    "default": "object"
                }
            }
        ],
        "LuigiConfigParser.getintdict": [
            {
                "type": "method",
                "args": {
                    "section": "str"
                }
            }
        ],
        "LuigiConfigParser.set": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str",
                    "value": "str"
                }
            }
        ],
        "get_config": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "task_history": {
        "logger": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "StoredTask._task": [
            {
                "type": "attr",
                "anno": "luigi.task.Task"
            }
        ],
        "StoredTask.status": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "StoredTask.record_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "StoredTask.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "StoredTask.__init__": [
            {
                "type": "method",
                "args": {
                    "task": "luigi.task.Task",
                    "status": "str",
                    "host": "str"
                }
            }
        ],
        "StoredTask.task_family": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StoredTask.parameters": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskHistory.task_scheduled": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "TaskHistory.task_finished": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "successful": "bool"
                }
            }
        ],
        "TaskHistory.task_started": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "worker_host": "str"
                }
            }
        ],
        "NopHistory.task_scheduled": [
            {
                "type": "method",
                "args": {
                    "task": "Task"
                }
            }
        ],
        "NopHistory.task_finished": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "successful": "bool"
                }
            }
        ],
        "NopHistory.task_started": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "worker_host": "str"
                }
            }
        ]
    }
}