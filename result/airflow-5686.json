{
    "lineage.backend.atlas": {
        "SERIALIZED_DATE_FORMAT_STR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_username": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_password": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_port": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_host": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AtlasBackend.send_lineage": [
            {
                "type": "method",
                "args": {
                    "operator": "datasets.Operator",
                    "inlets": "list",
                    "outlets": "list",
                    "context": "dict"
                }
            }
        ]
    },
    "lineage.backend.atlas.typedefs": {
        "operator_typedef": [
            {
                "type": "var",
                "anno": "dict"
            }
        ]
    },
    "lineage.backend": {
        "LineageBackend.send_lineage": [
            {
                "type": "method",
                "args": {
                    "operator": "Callable",
                    "inlets": "list",
                    "outlets": "list",
                    "context": "dict"
                }
            }
        ]
    },
    "lineage": {
        "PIPELINE_OUTLETS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PIPELINE_INLETS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "_get_backend": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "prepare_lineage": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "apply_lineage": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ]
    },
    "lineage.datasets": {
        "_inherited": [
            {
                "type": "func",
                "args": {
                    "cls": "Type[DataSet]"
                }
            }
        ],
        "DataSet.attributes": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "DataSet.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataSet._qualified_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataSet.context": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataSet._data": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataSet.set_context": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "DataSet.qualified_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataSet.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataSet.as_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataBase.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataBase.attributes": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "File.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "File.attributes": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "File._qualified_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopFile.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopFile.attributes": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "HadoopFile.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopFile._qualified_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Operator.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Operator.attributes": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "DataSet.__init__": [
            {
                "type": "method",
                "args": {
                    "qualified_name": "str",
                    "data": "dict",
                    "kwargs": "str"
                }
            }
        ],
        "File.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "data": "DataBase"
                }
            }
        ],
        "HadoopFile.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "data": "DataBase"
                }
            }
        ],
        "DataSet.map_type": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "DataSet.__getattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "DataSet.__getitem__": [
            {
                "type": "method",
                "args": {
                    "item": "str"
                }
            }
        ]
    },
    "models.pool": {
        "Pool.__tablename__": [
            {
                "type": "attr",
                "anno": "Text"
            }
        ],
        "Pool.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Pool.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pool.slots": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Pool.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pool.DEFAULT_POOL_NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pool.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Pool.to_json": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Pool.queued_slots": [
            {
                "type": "method",
                "args": {
                    "session": "provide_session"
                }
            }
        ],
        "Pool.used_slots": [
            {
                "type": "method",
                "args": {
                    "session": "provide_session"
                }
            }
        ],
        "Pool.occupied_slots": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "Pool.open_slots": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "Pool.get_pool": [
            {
                "type": "method",
                "args": {
                    "pool_name": "str",
                    "session": "provide_session"
                }
            }
        ],
        "Pool.get_default_pool": [
            {
                "type": "method",
                "args": {
                    "session": "provide_session"
                }
            }
        ]
    },
    "models.crypto": {
        "NullFernet.is_encrypted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NullFernet.decrypt": [
            {
                "type": "method",
                "args": {
                    "b": "bytes"
                }
            }
        ],
        "NullFernet.encrypt": [
            {
                "type": "method",
                "args": {
                    "b": "bytes"
                }
            }
        ],
        "_fernet": [
            {
                "type": "var",
                "anno": "MultiFernet"
            }
        ],
        "get_fernet": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "models.base": {
        "SQL_ALCHEMY_SCHEMA": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "metadata": [
            {
                "type": "var",
                "anno": "MetaData"
            }
        ],
        "Base": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "ID_LEN": [
            {
                "type": "var",
                "anno": "int"
            }
        ]
    },
    "models.dagbag": {
        "DagBag.CYCLE_NEW": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagBag.CYCLE_IN_PROGRESS": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagBag.CYCLE_DONE": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagBag.dag_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagBag.dags": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagBag.file_last_changed": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagBag.executor": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagBag.import_errors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagBag.has_logged": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagBag.size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagBag.dagbag_stats": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagBag.dag_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagBag.get_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "DagBag.dagbag_report": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagBag.process_file": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "only_if_updated": "bool",
                    "safe_mode": "bool"
                }
            }
        ],
        "DagBag.collect_dags": [
            {
                "type": "method",
                "args": {
                    "dag_folder": "str",
                    "only_if_updated": "bool",
                    "include_examples": "bool",
                    "safe_mode": "bool"
                }
            }
        ],
        "DagBag.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_folder": "str",
                    "executor": "dict",
                    "include_examples": "bool",
                    "safe_mode": "bool"
                }
            }
        ],
        "DagBag.bag_dag": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "parent_dag": "DAGModel",
                    "root_dag": "DAGModel"
                }
            }
        ],
        "DagBag.kill_zombies": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ]
    },
    "models.connection": {
        "Connection.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Connection.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.conn_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.login": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection._password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Connection.is_encrypted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Connection.is_extra_encrypted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Connection._extra": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection._types": [
            {
                "type": "attr",
                "anno": "list[tuple[str, str]]"
            }
        ],
        "Connection.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "parse_netloc_to_hostname": [
            {
                "type": "func",
                "args": {
                    "uri_parts": "urlparse"
                }
            }
        ],
        "Connection.rotate_fernet_key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Connection.parse_from_uri": [
            {
                "type": "method",
                "args": {
                    "uri": "str"
                }
            }
        ],
        "Connection.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "conn_type": "str",
                    "host": "str",
                    "login": "str",
                    "password": "str",
                    "schema": "str",
                    "port": "int",
                    "extra": "str",
                    "uri": "str"
                }
            }
        ],
        "Connection.extra_dejson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Connection.debug_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Connection.set_extra": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "Connection.set_password": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "Connection.password": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Base]"
                }
            }
        ],
        "Connection.get_extra": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Connection.extra": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Base]"
                }
            }
        ],
        "Connection.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Connection.get_password": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "models.log": {
        "Log.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Log.dttm": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "Log.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.event": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.execution_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "Log.owner": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.extra": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.__table_args__": [
            {
                "type": "attr",
                "anno": "Sequence[Index]"
            }
        ],
        "Log.__init__": [
            {
                "type": "method",
                "args": {
                    "event": "str",
                    "task_instance": "Base",
                    "owner": "str",
                    "extra": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "models.variable": {
        "Variable.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Variable.__NO_DEFAULT_SENTINEL": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "Variable.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Variable.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Variable._val": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Variable.is_encrypted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Variable.rotate_fernet_key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Variable.get": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "key": "str",
                    "default_var": "Any",
                    "deserialize_json": "bool",
                    "session": "Any"
                }
            }
        ],
        "Variable.delete": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "key": "str",
                    "session": "Any"
                }
            }
        ],
        "Variable.set": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "key": "str",
                    "value": "Any",
                    "serialize_json": "bool",
                    "session": "Any"
                }
            }
        ],
        "Variable.set_val": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "Variable.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Variable.get_val": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Variable.val": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "Variable.setdefault": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Variable]",
                    "key": "str",
                    "default": "Any",
                    "deserialize_json": "bool"
                }
            }
        ]
    },
    "models.taskreschedule": {
        "TaskReschedule.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskReschedule.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskReschedule.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskReschedule.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskReschedule.execution_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskReschedule.try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskReschedule.start_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskReschedule.end_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskReschedule.duration": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskReschedule.reschedule_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskReschedule.__table_args__": [
            {
                "type": "attr",
                "anno": "Column"
            }
        ],
        "TaskReschedule.__init__": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "execution_date": "UtcDateTime",
                    "try_number": "int",
                    "start_date": "UtcDateTime",
                    "end_date": "UtcDateTime",
                    "reschedule_date": "UtcDateTime"
                }
            }
        ],
        "TaskReschedule.find_for_task_instance": [
            {
                "type": "method",
                "args": {
                    "task_instance": "TaskInstance",
                    "session": "provide_session"
                }
            }
        ]
    },
    "models.kubernetes": {
        "KubeResourceVersion.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeResourceVersion.one_row_id": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeResourceVersion.resource_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeWorkerIdentifier.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeWorkerIdentifier.one_row_id": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeWorkerIdentifier.worker_uuid": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeResourceVersion.get_current_resource_version": [
            {
                "type": "method",
                "args": {
                    "session": "provide_session"
                }
            }
        ],
        "KubeWorkerIdentifier.checkpoint_kube_worker_uuid": [
            {
                "type": "method",
                "args": {
                    "worker_uuid": "str",
                    "session": "provide_session"
                }
            }
        ],
        "KubeWorkerIdentifier.get_or_create_current_kube_worker_uuid": [
            {
                "type": "method",
                "args": {
                    "session": "provide_session"
                }
            }
        ],
        "KubeResourceVersion.reset_resource_version": [
            {
                "type": "method",
                "args": {
                    "session": "provide_session"
                }
            }
        ],
        "KubeResourceVersion.checkpoint_resource_version": [
            {
                "type": "method",
                "args": {
                    "resource_version": "str",
                    "session": "provide_session"
                }
            }
        ]
    },
    "models.taskinstance": {
        "TaskInstance.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.execution_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskInstance.start_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskInstance.end_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskInstance.duration": [
            {
                "type": "attr",
                "anno": "Optional[float]"
            }
        ],
        "TaskInstance.state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance._try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.max_tries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.hostname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.unixname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.priority_weight": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.operator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.queued_dttm": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskInstance.pid": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.executor_config": [
            {
                "type": "attr",
                "anno": "PickleType"
            }
        ],
        "TaskInstance.__table_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TaskInstance.task": [
            {
                "type": "attr",
                "anno": "Task"
            }
        ],
        "TaskInstance._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "TaskInstance.run_as_user": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "TaskInstance.raw": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskInstance.test_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskInstance.init_on_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.next_try_number": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.generate_command": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_id": "str",
                    "execution_date": "UtcDateTime",
                    "mark_success": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "local": "bool",
                    "pickle_id": "Optional[str]",
                    "file_path": "Optional[str]",
                    "raw": "bool",
                    "job_id": "Optional[str]",
                    "pool": "Optional[str]",
                    "cfg_path": "str"
                }
            }
        ],
        "TaskInstance.try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.VariableAccessor.var": [
            {
                "type": "attr",
                "anno": "Variable"
            }
        ],
        "TaskInstance.VariableJsonAccessor.var": [
            {
                "type": "attr",
                "anno": "Variable"
            }
        ],
        "TaskInstance.VariableJsonAccessor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.VariableAccessor.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.VariableAccessor.__getattr__": [
            {
                "type": "method",
                "args": {
                    "item": "str"
                }
            }
        ],
        "TaskInstance.VariableAccessor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.VariableJsonAccessor.__getattr__": [
            {
                "type": "method",
                "args": {
                    "item": "str"
                }
            }
        ],
        "TaskInstance.VariableJsonAccessor.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.set_duration": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.xcom_pull": [
            {
                "type": "method",
                "args": {
                    "task_ids": "str",
                    "dag_id": "str",
                    "key": "str",
                    "include_prior_dates": "bool"
                }
            }
        ],
        "TaskInstance.is_eligible_to_retry": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance._run_raw_task": [
            {
                "type": "method",
                "args": {
                    "mark_success": "bool",
                    "test_mode": "bool",
                    "job_id": "str",
                    "pool": "str",
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.run": [
            {
                "type": "method",
                "args": {
                    "verbose": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "mark_success": "bool",
                    "test_mode": "bool",
                    "job_id": "str",
                    "pool": "str",
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.get_num_running_task_instances": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.get_dagrun": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.are_dependents_done": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.refresh_from_db": [
            {
                "type": "method",
                "args": {
                    "session": "Session",
                    "lock_for_update": "bool"
                }
            }
        ],
        "TaskInstance.current_state": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.set_state": [
            {
                "type": "method",
                "args": {
                    "state": "State",
                    "session": "Session",
                    "commit": "bool"
                }
            }
        ],
        "TaskInstance.error": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.__init__": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "execution_date": "UtcDateTime",
                    "state": "str"
                }
            }
        ],
        "TaskInstance._handle_reschedule": [
            {
                "type": "method",
                "args": {
                    "actual_start_date": "UtcDateTime",
                    "reschedule_exception": "AirflowRescheduleException",
                    "test_mode": "bool",
                    "context": "dict",
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.get_failed_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "dep_context": "DepContext",
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.are_dependencies_met": [
            {
                "type": "method",
                "args": {
                    "dep_context": "DepContext",
                    "session": "Session",
                    "verbose": "bool"
                }
            }
        ],
        "TaskInstance._check_and_change_state_before_execution": [
            {
                "type": "method",
                "args": {
                    "verbose": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "mark_success": "bool",
                    "test_mode": "bool",
                    "job_id": "str",
                    "pool": "str",
                    "session": "Session"
                }
            }
        ],
        "clear_task_instances": [
            {
                "type": "func",
                "args": {
                    "tis": "Session",
                    "session": "Session",
                    "activate_dag_runs": "bool",
                    "dag": "Optional[DagRun]"
                }
            }
        ],
        "TaskInstance.xcom_push": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "value": "str",
                    "execution_date": "UtcDateTime"
                }
            }
        ],
        "TaskInstance.get_template_context": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.overwrite_params_with_dag_run_conf": [
            {
                "type": "method",
                "args": {
                    "params": "dict",
                    "dag_run": "Optional[DagRun]"
                }
            }
        ],
        "TaskInstance.clear_xcom_data": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.init_run_context": [
            {
                "type": "method",
                "args": {
                    "raw": "bool"
                }
            }
        ],
        "TaskInstance.render_templates": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "TaskInstance.dry_run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.next_retry_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.ready_for_retry": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.is_premature": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.mark_success_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.log_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.log_filepath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.command_as_list": [
            {
                "type": "method",
                "args": {
                    "mark_success": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_ti_state": "bool",
                    "local": "bool",
                    "pickle_id": "Optional[str]",
                    "raw": "bool",
                    "job_id": "Optional[str]",
                    "pool": "Optional[str]",
                    "cfg_path": "str"
                }
            }
        ],
        "TaskInstance.command": [
            {
                "type": "method",
                "args": {
                    "mark_success": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "local": "bool",
                    "pickle_id": "Optional[str]",
                    "raw": "bool",
                    "job_id": "Optional[str]",
                    "pool": "Optional[str]",
                    "cfg_path": "Optional[str]"
                }
            }
        ],
        "TaskInstance.email_alert": [
            {
                "type": "method",
                "args": {
                    "exception": "Exception"
                }
            }
        ],
        "TaskInstance.handle_failure": [
            {
                "type": "method",
                "args": {
                    "error": "Exception",
                    "test_mode": "bool",
                    "context": "dict",
                    "session": "Session"
                }
            }
        ],
        "TaskInstance.pool_full": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ]
    },
    "models.dag": {
        "ScheduleInterval": [
            {
                "type": "var",
                "anno": "Union[str, timedelta, relativedelta]"
            }
        ],
        "DAG._comps": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "DAG.user_defined_macros": [
            {
                "type": "attr",
                "anno": "Optional[Dict]"
            }
        ],
        "DAG.user_defined_filters": [
            {
                "type": "attr",
                "anno": "Optional[Dict]"
            }
        ],
        "DAG.default_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DAG.params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DAG._dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG._full_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG._concurrency": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DAG._pickle_id": [
            {
                "type": "attr",
                "anno": "Optional[DagPickle]"
            }
        ],
        "DAG._description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.fileloc": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.task_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DAG.timezone": [
            {
                "type": "attr",
                "anno": "settings.Timezone"
            }
        ],
        "DAG.start_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.end_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.schedule_interval": [
            {
                "type": "attr",
                "anno": "Optional[ScheduleInterval]"
            }
        ],
        "DAG._schedule_interval": [
            {
                "type": "attr",
                "anno": "Optional[ScheduleInterval]"
            }
        ],
        "DAG.template_searchpath": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "DAG.template_undefined": [
            {
                "type": "attr",
                "anno": "Type[jinja2.Undefined]"
            }
        ],
        "DAG.parent_dag": [
            {
                "type": "attr",
                "anno": "Optional[DagModel]"
            }
        ],
        "DAG.last_loaded": [
            {
                "type": "attr",
                "anno": "timezone.Timezone"
            }
        ],
        "DAG.safe_dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.max_active_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DAG.dagrun_timeout": [
            {
                "type": "attr",
                "anno": "Optional[timedelta]"
            }
        ],
        "DAG.sla_miss_callback": [
            {
                "type": "attr",
                "anno": "Optional[Callable]"
            }
        ],
        "DAG._default_view": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "DAG.orientation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.catchup": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DAG.is_subdag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DAG.partial": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DAG.on_success_callback": [
            {
                "type": "attr",
                "anno": "Optional[Callable[[], timedelta]]"
            }
        ],
        "DAG.on_failure_callback": [
            {
                "type": "attr",
                "anno": "Optional[Callable[[], timedelta]]"
            }
        ],
        "DAG.doc_md": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "DAG._old_context_manager_dags": [
            {
                "type": "attr",
                "anno": "List[settings.CONTEXT_MANAGER_DAG]"
            }
        ],
        "DAG._access_control": [
            {
                "type": "attr",
                "anno": "Callable[[], str]"
            }
        ],
        "DAG.is_paused_upon_creation": [
            {
                "type": "attr",
                "anno": "Optional[bool]"
            }
        ],
        "DAG.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "DAG.__exit__": [
            {
                "type": "method",
                "args": {
                    "_type": "str",
                    "_value": "str",
                    "_tb": "str"
                }
            }
        ],
        "DAG.get_default_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.date_range": [
            {
                "type": "method",
                "args": {
                    "start_date": "str",
                    "num": "int",
                    "end_date": "str"
                }
            }
        ],
        "DAG.is_fixed_time_schedule": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.dag_id": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "DAG.full_filepath": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "DAG.concurrency": [
            {
                "type": "method",
                "args": {
                    "value": "int"
                }
            }
        ],
        "DAG.access_control": [
            {
                "type": "method",
                "args": {
                    "value": "Callable[[], str]"
                }
            }
        ],
        "DAG.description": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.tasks": [
            {
                "type": "method",
                "args": {
                    "val": "Iterable[BaseOperator]"
                }
            }
        ],
        "DAG.folder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.get_template_env": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.last_pickled": [
            {
                "type": "attr",
                "anno": "timezone.Timezone"
            }
        ],
        "DAG.pickle_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.task_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DAG.cli": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModel.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.is_paused_at_creation": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.is_paused": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.is_subdag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.is_active": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.last_scheduler_run": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "DagModel.last_pickled": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "DagModel.last_expired": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "DagModel.scheduler_lock": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.pickle_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagModel.fileloc": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.owners": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.default_view": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "DagModel.schedule_interval": [
            {
                "type": "attr",
                "anno": "ScheduleInterval"
            }
        ],
        "DagModel.timezone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModel.get_default_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.owner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModel.safe_dag_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.filepath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "description": "str",
                    "schedule_interval": "Optional[ScheduleInterval]",
                    "start_date": "Optional[datetime]",
                    "end_date": "Optional[datetime]",
                    "full_filepath": "Optional[str]",
                    "template_searchpath": "Optional[Union[str, Iterable[str]]]",
                    "template_undefined": "Type[jinja2.Undefined]",
                    "user_defined_macros": "Optional[Dict]",
                    "user_defined_filters": "Optional[Dict]",
                    "default_args": "Optional[Dict]",
                    "concurrency": "int",
                    "max_active_runs": "int",
                    "dagrun_timeout": "Optional[timedelta]",
                    "sla_miss_callback": "Optional[Callable]",
                    "default_view": "Optional[str]",
                    "orientation": "str",
                    "catchup": "bool",
                    "on_success_callback": "Optional[Callable]",
                    "on_failure_callback": "Optional[Callable]",
                    "doc_md": "Optional[str]",
                    "params": "Optional[Dict]",
                    "access_control": "Optional[Dict]",
                    "is_paused_upon_creation": "Optional[bool]"
                }
            }
        ],
        "DAG.__deepcopy__": [
            {
                "type": "method",
                "args": {
                    "memo": "Dict"
                }
            }
        ],
        "DAG.has_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str"
                }
            }
        ],
        "DAG.sub_dag": [
            {
                "type": "method",
                "args": {
                    "task_regex": "str",
                    "include_downstream": "bool",
                    "include_upstream": "bool"
                }
            }
        ],
        "DAG.get_active_runs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.subdags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "DAG"
                }
            }
        ],
        "DAG.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "DAG.previous_schedule": [
            {
                "type": "method",
                "args": {
                    "dttm": "UtcDateTime"
                }
            }
        ],
        "DAG.following_schedule": [
            {
                "type": "method",
                "args": {
                    "dttm": "UtcDateTime"
                }
            }
        ],
        "DAG.normalize_schedule": [
            {
                "type": "method",
                "args": {
                    "dttm": "UtcDateTime"
                }
            }
        ],
        "DAG.get_run_dates": [
            {
                "type": "method",
                "args": {
                    "start_date": "str",
                    "end_date": "str"
                }
            }
        ],
        "DagModel.get_dag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModel.create_dagrun": [
            {
                "type": "method",
                "args": {
                    "run_id": "str",
                    "state": "State",
                    "execution_date": "str",
                    "start_date": "str",
                    "external_trigger": "bool",
                    "conf": "dict",
                    "session": "Session"
                }
            }
        ],
        "DAG.run": [
            {
                "type": "method",
                "args": {
                    "start_date": "str",
                    "end_date": "str",
                    "mark_success": "bool",
                    "local": "bool",
                    "executor": "Optional[Executor]",
                    "donot_pickle": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_first_depends_on_past": "bool",
                    "pool": "str",
                    "delay_on_limit_secs": "float",
                    "verbose": "bool",
                    "conf": "dict",
                    "rerun_failed_tasks": "bool",
                    "run_backwards": "bool"
                }
            }
        ],
        "DagModel.get_current": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseDag]",
                    "dag_id": "str",
                    "session": "Session"
                }
            }
        ],
        "DagModel.get_dagmodel": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "session": "Session"
                }
            }
        ],
        "DAG.get_num_task_instances": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_ids": "Iterable[str]",
                    "states": "Iterable[State]",
                    "session": "Session"
                }
            }
        ],
        "DAG.set_dag_runs_state": [
            {
                "type": "method",
                "args": {
                    "state": "State",
                    "session": "Session",
                    "start_date": "str",
                    "end_date": "str"
                }
            }
        ],
        "DAG.get_task_instances": [
            {
                "type": "method",
                "args": {
                    "start_date": "Optional[datetime]",
                    "end_date": "Optional[datetime]",
                    "state": "Optional[State]",
                    "session": "Session"
                }
            }
        ],
        "DAG._get_latest_execution_date": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "DAG.latest_execution_date": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.get_dagrun": [
            {
                "type": "method",
                "args": {
                    "execution_date": "datetime",
                    "session": "Session"
                }
            }
        ],
        "DAG.get_num_active_runs": [
            {
                "type": "method",
                "args": {
                    "external_trigger": "bool",
                    "session": "Session"
                }
            }
        ],
        "DAG._get_is_paused": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "DAG.is_paused": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG._get_concurrency_reached": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "DAG.concurrency_reached": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_last_dagrun": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "session": "Session",
                    "include_externally_triggered": "bool"
                }
            }
        ],
        "DagModel.get_last_dagrun": [
            {
                "type": "method",
                "args": {
                    "session": "Session",
                    "include_externally_triggered": "bool"
                }
            }
        ],
        "DAG.get_last_dagrun": [
            {
                "type": "method",
                "args": {
                    "session": "Session",
                    "include_externally_triggered": "bool"
                }
            }
        ],
        "DAG.deactivate_unknown_dags": [
            {
                "type": "method",
                "args": {
                    "active_dag_ids": "Iterable[str]",
                    "session": "Session"
                }
            }
        ],
        "DAG.pickle": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "DAG.deactivate_stale_dags": [
            {
                "type": "method",
                "args": {
                    "expiration_date": "UtcDateTime",
                    "session": "Session"
                }
            }
        ],
        "DAG.sync_to_db": [
            {
                "type": "method",
                "args": {
                    "owner": "Optional[str]",
                    "sync_time": "Optional[timezone]",
                    "session": "models.Session"
                }
            }
        ],
        "DAG.resolve_template_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModel.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG._test_cycle_helper": [
            {
                "type": "method",
                "args": {
                    "visit_map": "Dict[int, int]",
                    "task_id": "int"
                }
            }
        ],
        "DAG.test_cycle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.add_task": [
            {
                "type": "method",
                "args": {
                    "task": "TaskInstance"
                }
            }
        ],
        "DAG.add_tasks": [
            {
                "type": "method",
                "args": {
                    "tasks": "Iterable[TaskInstance]"
                }
            }
        ],
        "DAG.pickle_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.get_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str"
                }
            }
        ],
        "DAG.roots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.tree_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.create_dagrun": [
            {
                "type": "method",
                "args": {
                    "run_id": "str",
                    "state": "State",
                    "execution_date": "str",
                    "start_date": "str",
                    "external_trigger": "bool",
                    "conf": "dict",
                    "session": "Session"
                }
            }
        ],
        "DAG.set_dependency": [
            {
                "type": "method",
                "args": {
                    "upstream_task_id": "str",
                    "downstream_task_id": "str"
                }
            }
        ],
        "DAG.clear": [
            {
                "type": "method",
                "args": {
                    "start_date": "str",
                    "end_date": "str",
                    "only_failed": "bool",
                    "only_running": "bool",
                    "confirm_prompt": "bool",
                    "include_subdags": "bool",
                    "include_parentdag": "bool",
                    "reset_dag_runs": "bool",
                    "dry_run": "bool",
                    "session": "Session",
                    "get_tis": "bool"
                }
            }
        ],
        "DAG.clear_dags": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseDag]",
                    "dags": "Iterable[BaseDag]",
                    "start_date": "str",
                    "end_date": "str",
                    "only_failed": "bool",
                    "only_running": "bool",
                    "confirm_prompt": "bool",
                    "include_subdags": "bool",
                    "include_parentdag": "bool",
                    "reset_dag_runs": "bool",
                    "dry_run": "bool"
                }
            }
        ],
        "DAG.topological_sort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.handle_callback": [
            {
                "type": "method",
                "args": {
                    "dagrun": "DagRun",
                    "success": "bool",
                    "reason": "str",
                    "session": "Session"
                }
            }
        ],
        "DagModel.set_is_paused": [
            {
                "type": "method",
                "args": {
                    "is_paused": "bool",
                    "including_subdags": "bool",
                    "session": "Session"
                }
            }
        ]
    },
    "models.slamiss": {
        "SlaMiss.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMiss.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMiss.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMiss.execution_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "SlaMiss.email_sent": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlaMiss.timestamp": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "SlaMiss.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMiss.notification_sent": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlaMiss.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[Text, ...]"
            }
        ],
        "SlaMiss.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "models.xcom": {
        "MAX_XCOM_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "XCOM_RETURN_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "XCom.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XCom.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "XCom.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XCom.value": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "XCom.timestamp": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "XCom.execution_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "XCom.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XCom.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XCom.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[Index, ...]"
            }
        ],
        "XCom.init_on_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "XCom.get_many": [
            {
                "type": "method",
                "args": {
                    "cls": "type[XCom]",
                    "execution_date": "UtcDateTime",
                    "key": "str",
                    "task_ids": "list",
                    "dag_ids": "list",
                    "include_prior_dates": "bool",
                    "limit": "int",
                    "session": "provide_session"
                }
            }
        ],
        "XCom.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "XCom.delete": [
            {
                "type": "method",
                "args": {
                    "cls": "type[XCom]",
                    "xcoms": "XCom",
                    "session": "Any"
                }
            }
        ],
        "XCom.serialize_value": [
            {
                "type": "method",
                "args": {
                    "value": "dict"
                }
            }
        ],
        "XCom.set": [
            {
                "type": "method",
                "args": {
                    "cls": "type[XCom]",
                    "key": "str",
                    "value": "dict",
                    "execution_date": "UtcDateTime",
                    "task_id": "str",
                    "dag_id": "str",
                    "session": "Any"
                }
            }
        ],
        "XCom.get_one": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Base]",
                    "execution_date": "UtcDateTime",
                    "key": "str",
                    "task_id": "str",
                    "dag_id": "str",
                    "include_prior_dates": "bool",
                    "session": "provide_session"
                }
            }
        ]
    },
    "models.dagrun": {
        "DagRun.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.ID_PREFIX": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.ID_FORMAT_PREFIX": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagRun.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.execution_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "DagRun.start_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "DagRun.end_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "DagRun._state": [
            {
                "type": "attr",
                "anno": "State"
            }
        ],
        "DagRun.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.external_trigger": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagRun.conf": [
            {
                "type": "attr",
                "anno": "PickleType"
            }
        ],
        "DagRun.dag": [
            {
                "type": "attr",
                "anno": "Optional[DagModel]"
            }
        ],
        "DagRun.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DagRun.get_state": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRun.set_state": [
            {
                "type": "method",
                "args": {
                    "state": "State"
                }
            }
        ],
        "DagRun.state": [
            {
                "type": "attr",
                "anno": "State"
            }
        ],
        "DagRun.is_backfill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRun.get_latest_runs": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Base]",
                    "session": "Session"
                }
            }
        ],
        "DagRun.get_run": [
            {
                "type": "method",
                "args": {
                    "session": "Session",
                    "dag_id": "str",
                    "execution_date": "UtcDateTime"
                }
            }
        ],
        "DagRun.get_task_instance": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "session": "Session"
                }
            }
        ],
        "DagRun.get_task_instances": [
            {
                "type": "method",
                "args": {
                    "state": "Optional[State]",
                    "session": "Session"
                }
            }
        ],
        "DagRun.find": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "execution_date": "Union[str, list, datetime]",
                    "state": "State",
                    "external_trigger": "bool",
                    "no_backfills": "bool",
                    "session": "Session"
                }
            }
        ],
        "DagRun.refresh_from_db": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "DagRun._emit_duration_stats_for_finished_state": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRun.get_dag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRun.get_previous_scheduled_dagrun": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "DagRun.id_for_date": [
            {
                "type": "method",
                "args": {
                    "cls": "type[Base]",
                    "date": "UtcDateTime",
                    "prefix": "str"
                }
            }
        ],
        "DagRun.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRun.verify_integrity": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "DagRun.update_state": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ]
    },
    "models.baseoperator": {
        "BaseOperator.template_fields": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "BaseOperator.template_ext": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "BaseOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator._base_operator_shallow_copy_attrs": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BaseOperator.shallow_copy_attrs": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BaseOperator.operator_extra_links": [
            {
                "type": "attr",
                "anno": "Iterable[BaseOperatorLink]"
            }
        ],
        "BaseOperator._comps": [
            {
                "type": "attr",
                "anno": "Set"
            }
        ],
        "BaseOperator.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.owner": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.email": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BaseOperator.email_on_retry": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.email_on_failure": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.start_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.end_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.trigger_rule": [
            {
                "type": "attr",
                "anno": "TriggerRule"
            }
        ],
        "BaseOperator.depends_on_past": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.wait_for_downstream": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator._schedule_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseOperator.retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseOperator.queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.sla": [
            {
                "type": "attr",
                "anno": "Optional[timedelta]"
            }
        ],
        "BaseOperator.execution_timeout": [
            {
                "type": "attr",
                "anno": "timedelta"
            }
        ],
        "BaseOperator.on_failure_callback": [
            {
                "type": "attr",
                "anno": "Callable[[], None]"
            }
        ],
        "BaseOperator.on_success_callback": [
            {
                "type": "attr",
                "anno": "Callable[[], None]"
            }
        ],
        "BaseOperator.on_retry_callback": [
            {
                "type": "attr",
                "anno": "Callable[[], None]"
            }
        ],
        "BaseOperator.retry_delay": [
            {
                "type": "attr",
                "anno": "timedelta"
            }
        ],
        "BaseOperator.retry_exponential_backoff": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.max_retry_delay": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "BaseOperator.params": [
            {
                "type": "attr",
                "anno": "Dict[str, str]"
            }
        ],
        "BaseOperator.priority_weight": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseOperator.weight_rule": [
            {
                "type": "attr",
                "anno": "WeightRule"
            }
        ],
        "BaseOperator.resources": [
            {
                "type": "attr",
                "anno": "Resources"
            }
        ],
        "BaseOperator.run_as_user": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BaseOperator.task_concurrency": [
            {
                "type": "attr",
                "anno": "Optional[int]"
            }
        ],
        "BaseOperator.executor_config": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "BaseOperator.do_xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator._upstream_task_ids": [
            {
                "type": "attr",
                "anno": "Set[str]"
            }
        ],
        "BaseOperator._downstream_task_ids": [
            {
                "type": "attr",
                "anno": "Set[str]"
            }
        ],
        "BaseOperator._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "BaseOperator.inlets": [
            {
                "type": "attr",
                "anno": "Dict[str, List[str]]"
            }
        ],
        "BaseOperator.outlets": [
            {
                "type": "attr",
                "anno": "Dict[str, List[str]]"
            }
        ],
        "BaseOperator.lineage_data": [
            {
                "type": "attr",
                "anno": "DataSet"
            }
        ],
        "BaseOperator._inlets": [
            {
                "type": "attr",
                "anno": "Dict[str, List[str]]"
            }
        ],
        "BaseOperator._outlets": [
            {
                "type": "attr",
                "anno": "Dict[str, List[str]]"
            }
        ],
        "BaseOperator.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "BaseOperator._dag": [
            {
                "type": "attr",
                "anno": "DAG"
            }
        ],
        "BaseOperator.has_dag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.deps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.pre_execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BaseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BaseOperator.post_execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "result": "str"
                }
            }
        ],
        "BaseOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.__dict__": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "BaseOperator.__setstate__": [
            {
                "type": "method",
                "args": {
                    "state": "Dict[str, Callable]"
                }
            }
        ],
        "BaseOperator.__getstate__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.prepare_template": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.upstream_task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.downstream_task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.get_direct_relative_ids": [
            {
                "type": "method",
                "args": {
                    "upstream": "bool"
                }
            }
        ],
        "BaseOperator.get_flat_relative_ids": [
            {
                "type": "method",
                "args": {
                    "upstream": "bool",
                    "found_descendants": "Set[str]"
                }
            }
        ],
        "BaseOperator.get_flat_relatives": [
            {
                "type": "method",
                "args": {
                    "upstream": "bool"
                }
            }
        ],
        "BaseOperator.task_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.dag": [
            {
                "type": "attr",
                "anno": "DAG"
            }
        ],
        "BaseOperator.get_template_env": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.schedule_interval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.xcom_pull": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "task_ids": "str",
                    "dag_id": "str",
                    "key": "str",
                    "include_prior_dates": "bool"
                }
            }
        ],
        "BaseOperator.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.__deepcopy__": [
            {
                "type": "method",
                "args": {
                    "memo": "Dict[str, Callable]"
                }
            }
        ],
        "BaseOperator.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "BaseOperator"
                }
            }
        ],
        "BaseOperator.priority_weight_total": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.dag_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.global_operator_extra_link_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.operator_extra_link_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.run": [
            {
                "type": "method",
                "args": {
                    "start_date": "str",
                    "end_date": "str",
                    "ignore_first_depends_on_past": "bool",
                    "ignore_ti_state": "bool",
                    "mark_success": "bool"
                }
            }
        ],
        "BaseOperator.get_task_instances": [
            {
                "type": "method",
                "args": {
                    "start_date": "str",
                    "end_date": "str",
                    "session": "Session"
                }
            }
        ],
        "BaseOperator.clear": [
            {
                "type": "method",
                "args": {
                    "start_date": "str",
                    "end_date": "str",
                    "upstream": "bool",
                    "downstream": "bool",
                    "session": "Session"
                }
            }
        ],
        "BaseOperator.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.render_template_from_field": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "content": "str",
                    "context": "dict",
                    "jinja_env": "jinja2.Environment"
                }
            }
        ],
        "BaseOperator.render_template": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "content": "str",
                    "context": "dict"
                }
            }
        ],
        "BaseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "owner": "str",
                    "email": "Optional[str]",
                    "email_on_retry": "bool",
                    "email_on_failure": "bool",
                    "retries": "int",
                    "retry_delay": "timedelta",
                    "retry_exponential_backoff": "bool",
                    "max_retry_delay": "Optional[datetime]",
                    "start_date": "Optional[datetime]",
                    "end_date": "Optional[datetime]",
                    "schedule_interval": "Optional[int]",
                    "depends_on_past": "bool",
                    "wait_for_downstream": "bool",
                    "dag": "Optional[DAG]",
                    "params": "Optional[Dict]",
                    "default_args": "Optional[Dict]",
                    "priority_weight": "int",
                    "weight_rule": "str",
                    "queue": "str",
                    "pool": "str",
                    "sla": "Optional[timedelta]",
                    "execution_timeout": "Optional[timedelta]",
                    "on_failure_callback": "Optional[Callable]",
                    "on_success_callback": "Optional[Callable]",
                    "on_retry_callback": "Optional[Callable]",
                    "trigger_rule": "str",
                    "resources": "Optional[Dict]",
                    "run_as_user": "Optional[str]",
                    "task_concurrency": "Optional[int]",
                    "executor_config": "Optional[Dict]",
                    "do_xcom_push": "bool",
                    "inlets": "Optional[Dict]",
                    "outlets": "Optional[Dict]",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BaseOperator.add_only_new": [
            {
                "type": "method",
                "args": {
                    "item_set": "Set[str]",
                    "item": "str"
                }
            }
        ],
        "BaseOperator._set_relatives": [
            {
                "type": "method",
                "args": {
                    "task_or_task_list": "Union[DAG, TaskInstance]",
                    "upstream": "bool"
                }
            }
        ],
        "BaseOperator.set_upstream": [
            {
                "type": "method",
                "args": {
                    "task_or_task_list": "Union[DAG, TaskInstance]"
                }
            }
        ],
        "BaseOperator.__lshift__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[DAG, TaskInstance]"
                }
            }
        ],
        "BaseOperator.__rrshift__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[DAG, TaskInstance]"
                }
            }
        ],
        "BaseOperator.set_downstream": [
            {
                "type": "method",
                "args": {
                    "task_or_task_list": "Union[DAG, TaskInstance]"
                }
            }
        ],
        "BaseOperator.__rshift__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[DAG, TaskInstance]"
                }
            }
        ],
        "BaseOperator.__rlshift__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[DAG, TaskInstance]"
                }
            }
        ],
        "BaseOperator.dry_run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.resolve_template_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.downstream_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.upstream_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.get_direct_relatives": [
            {
                "type": "method",
                "args": {
                    "upstream": "bool"
                }
            }
        ],
        "BaseOperator.xcom_push": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "key": "str",
                    "value": "str",
                    "execution_date": "datetime"
                }
            }
        ],
        "BaseOperator.get_extra_links": [
            {
                "type": "method",
                "args": {
                    "dttm": "datetime",
                    "link_name": "str"
                }
            }
        ],
        "BaseOperator.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ]
    },
    "models.errors": {
        "ImportError.__tablename__": [
            {
                "type": "attr",
                "anno": "Text"
            }
        ],
        "ImportError.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ImportError.timestamp": [
            {
                "type": "attr",
                "anno": "Column"
            }
        ],
        "ImportError.filename": [
            {
                "type": "attr",
                "anno": "Text"
            }
        ],
        "ImportError.stacktrace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ]
    },
    "models.taskfail": {
        "TaskFail.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskFail.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskFail.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskFail.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskFail.execution_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskFail.start_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskFail.end_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskFail.duration": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskFail.__table_args__": [
            {
                "type": "attr",
                "anno": "Column"
            }
        ],
        "TaskFail.__init__": [
            {
                "type": "method",
                "args": {
                    "task": "Task",
                    "execution_date": "UtcDateTime",
                    "start_date": "UtcDateTime",
                    "end_date": "UtcDateTime"
                }
            }
        ]
    },
    "models.dagpickle": {
        "DagPickle.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagPickle.pickle": [
            {
                "type": "attr",
                "anno": "DagPickle"
            }
        ],
        "DagPickle.created_dttm": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "DagPickle.pickle_hash": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagPickle.__tablename__": [
            {
                "type": "attr",
                "anno": "Text"
            }
        ],
        "DagPickle.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagPickle.__init__": [
            {
                "type": "method",
                "args": {
                    "dag": "DagModel"
                }
            }
        ]
    },
    "logging_config": {
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "validate_logging_config": [
            {
                "type": "func",
                "args": {
                    "logging_config": "dict"
                }
            }
        ],
        "configure_logging": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.env": {
        "config": [
            {
                "type": "var",
                "anno": "settings.Config"
            }
        ],
        "target_metadata": [
            {
                "type": "var",
                "anno": "models.base.Base.metadata"
            }
        ],
        "COMPARE_TYPE": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "run_migrations_offline": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "run_migrations_online": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.86770d1215c0_add_kubernetes_scheduler_uniqueness": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "RESOURCE_TABLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.8504051e801b_xcom_dag_task_indices": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.1507a7289a2f_create_is_encrypted": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "connectionhelper": [
            {
                "type": "var",
                "anno": "sa.Table"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.a56c9515abdc_remove_dag_stat_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Column]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.9635ae0956e7_index_faskfail": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.bba5a7cfc896_add_a_column_to_track_the_encryption_": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.c8ffec048a3b_add_fields_to_dag": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.856955da8476_fix_sqlite_foreign_key": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.e3a246e0dc1_current_schema": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.6e96a59344a4_make_taskinstance_pool_not_nullable": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Optional[str]"
            }
        ],
        "Base": [
            {
                "type": "var",
                "anno": "sa.Type[TaskInstance]"
            }
        ],
        "ID_LEN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TaskInstance.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.execution_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskInstance.start_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskInstance.end_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskInstance.duration": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TaskInstance.state": [
            {
                "type": "attr",
                "anno": "State"
            }
        ],
        "TaskInstance._try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.max_tries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.hostname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.unixname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.job_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.priority_weight": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.operator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.queued_dttm": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "TaskInstance.pid": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.executor_config": [
            {
                "type": "attr",
                "anno": "PickleType"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.502898887f84_adding_extra_to_log": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.5e7d17757c7a_add_pid_field_to_taskinstance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.2e541a1dcfed_task_duration": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.cf5dc11e79ad_drop_user_and_chart": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.127d2bf2dfa7_add_dag_id_state_index_on_dag_run_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.Parameter"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.bdaa763e6c56_make_xcom_value_column_a_large_binary": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.0e2a74e0fc9f_add_time_zone_awareness": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.dd25f486b8ea_add_idx_log_dag": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.64de9cddf6c9_add_task_fails_journal_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Column]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.4addfa1236f1_add_fractional_seconds_to_mysql_tables": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.BranchLabel]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.ForeignKey]"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.0a2a5b66e19d_add_task_reschedule_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "TABLE_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "INDEX_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "mssql_timestamp": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "mysql_timestamp": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "sa_timestamp": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.52d714495f0_job_id_indices": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.4446e08588_dagrun_start_end": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.03bc53e68815_add_sm_dag_index": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "op.Tuple[str, str]"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.4ebbffe0a39a_merge_heads": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.bf00311e1990_add_index_to_taskinstance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.05f30312d566_merge_heads": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "tuple[str, str]"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.33ae817a1ff4_add_kubernetes_resource_checkpointing": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "RESOURCE_TABLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.dd4ecb8fbee3_add_schedule_interval_to_dag": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.13eb55f81627_for_compatibility": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.bbc73705a13e_add_notification_sent_column_to_sla_miss": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.d2ae31099d61_increase_text_size_for_mysql": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.BranchLabel]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.Column]"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.947454bf1dff_add_ti_job_id_index": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Parameter"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.211e584da130_add_ti_state_index": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.41f5f12752f8_add_superuser_field": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.561833c1c74b_add_password_column_to_user": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.1b38cef5b76e_add_dagrun": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.40e67319e3a9_dagrun_config": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.338e90f54d61_more_logging_into_task_isntance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.2e82aab8ef20_rename_user_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Parameter"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.f23433877c24_fix_mysql_not_null_constraint": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.BranchLabel]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.ForeignKey]"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.cc1e65623dc7_add_max_tries_column_to_task_instance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Optional[Column]"
            }
        ],
        "Base": [
            {
                "type": "var",
                "anno": "sa.Type[TaskInstance]"
            }
        ],
        "BATCH_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "ID_LEN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TaskInstance.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.execution_date": [
            {
                "type": "attr",
                "anno": "sa.DateTime"
            }
        ],
        "TaskInstance.max_tries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.f2ca10b85618_add_dag_stats_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Column]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.939bb1e647c8_task_reschedule_fk_on_cascade_delete": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.004c1210f153_increase_queue_name_size_limit": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Column]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.1968acfc09e3_add_is_encrypted_column_to_variable_": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.27c6a30d7c24_add_executor_config_to_task_instance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "TASK_INSTANCE_TABLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "NEW_COLUMN": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "api.auth.backend.default": {
        "CLIENT_AUTH": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "init_app": [
            {
                "type": "func",
                "args": {
                    "_": "dict"
                }
            }
        ],
        "requires_authentication": [
            {
                "type": "func",
                "args": {
                    "function": "Callable"
                }
            }
        ]
    },
    "api.auth.backend.deny_all": {
        "CLIENT_AUTH": [
            {
                "type": "var",
                "anno": "Response"
            }
        ],
        "init_app": [
            {
                "type": "func",
                "args": {
                    "_": "Response"
                }
            }
        ],
        "requires_authentication": [
            {
                "type": "func",
                "args": {
                    "function": "Callable"
                }
            }
        ]
    },
    "api.auth.backend.kerberos_auth": {
        "CLIENT_AUTH": [
            {
                "type": "var",
                "anno": "HTTPKerberosAuth"
            }
        ],
        "KerberosService.service_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KerberosService.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_KERBEROS_SERVICE": [
            {
                "type": "var",
                "anno": "KerberosService"
            }
        ],
        "_unauthorized": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_forbidden": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_gssapi_authenticate": [
            {
                "type": "func",
                "args": {
                    "token": "str"
                }
            }
        ],
        "requires_authentication": [
            {
                "type": "func",
                "args": {
                    "function": "Response"
                }
            }
        ],
        "LOG": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "init_app": [
            {
                "type": "func",
                "args": {
                    "app": "kerberos.Kerberos"
                }
            }
        ]
    },
    "api": {
        "ApiAuth.api_auth": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ApiAuth.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "API_AUTH": [
            {
                "type": "var",
                "anno": "ApiAuth"
            }
        ],
        "LOG": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "load_auth": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "api.client.api_client": {
        "Client._api_base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Client._auth": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Client.__init__": [
            {
                "type": "method",
                "args": {
                    "api_base_url": "str",
                    "auth": "str"
                }
            }
        ],
        "Client.trigger_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "conf": "dict",
                    "execution_date": "str"
                }
            }
        ],
        "Client.delete_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "Client.get_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.get_pools": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Client.create_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "slots": "int",
                    "description": "str"
                }
            }
        ],
        "Client.delete_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ]
    },
    "executors.base_executor": {
        "PARALLELISM": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "BaseExecutor.parallelism": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseExecutor.queued_tasks": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseExecutor.running": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseExecutor.event_buffer": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseExecutor.__init__": [
            {
                "type": "method",
                "args": {
                    "parallelism": "int"
                }
            }
        ],
        "BaseExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ],
        "BaseExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.get_event_buffer": [
            {
                "type": "method",
                "args": {
                    "dag_ids": "list[str]"
                }
            }
        ],
        "BaseExecutor.trigger_tasks": [
            {
                "type": "method",
                "args": {
                    "open_slots": "int"
                }
            }
        ],
        "BaseExecutor.has_task": [
            {
                "type": "method",
                "args": {
                    "task_instance": "str"
                }
            }
        ],
        "BaseExecutor.change_state": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "state": "State"
                }
            }
        ],
        "BaseExecutor.success": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "BaseExecutor.fail": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "BaseExecutor.heartbeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.queue_command": [
            {
                "type": "method",
                "args": {
                    "simple_task_instance": "airflow.utils.dag_processing.SimpleTaskInstance",
                    "command": "str",
                    "priority": "int",
                    "queue": "str"
                }
            }
        ],
        "BaseExecutor.queue_task_instance": [
            {
                "type": "method",
                "args": {
                    "task_instance": "airflow.utils.dag_processing.SimpleTaskInstance",
                    "mark_success": "bool",
                    "pickle_id": "str",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "pool": "str",
                    "cfg_path": "str"
                }
            }
        ]
    },
    "executors.kubernetes_executor": {
        "KubernetesExecutorConfig.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.image_pull_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.request_memory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.request_cpu": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.limit_memory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.limit_cpu": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.limit_gpu": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.gcp_service_account_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.node_selectors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesExecutorConfig.affinity": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesExecutorConfig.annotations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesExecutorConfig.volumes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesExecutorConfig.volume_mounts": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesExecutorConfig.tolerations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesExecutorConfig.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesExecutorConfig.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "str",
                    "image_pull_policy": "str",
                    "request_memory": "str",
                    "request_cpu": "str",
                    "limit_memory": "str",
                    "limit_cpu": "str",
                    "limit_gpu": "str",
                    "gcp_service_account_key": "str",
                    "node_selectors": "dict",
                    "affinity": "dict",
                    "annotations": "dict",
                    "volumes": "list",
                    "volume_mounts": "list",
                    "tolerations": "dict",
                    "labels": "dict"
                }
            }
        ],
        "KubernetesExecutorConfig.as_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubeConfig.core_section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kubernetes_section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.core_configuration": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_secrets": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.kube_env_vars": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.env_from_configmap_ref": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.env_from_secret_ref": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.airflow_home": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.dags_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.parallelism": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KubeConfig.worker_container_repository": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.worker_container_tag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_image_pull_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_node_selectors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.kube_annotations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.kube_labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.delete_worker_pods": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeConfig.worker_pods_creation_batch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KubeConfig.worker_service_account_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.image_pull_secrets": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.dags_in_image": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeConfig.worker_run_as_user": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeConfig.worker_fs_group": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KubeConfig.git_repo": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_branch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_subpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_root": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_dest": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_dags_folder_mount_point": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_ssh_key_secret_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_ssh_known_hosts_configmap_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.dags_volume_claim": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.logs_volume_claim": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.dags_volume_subpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.logs_volume_subpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.dags_volume_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.logs_volume_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.base_log_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.executor_namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.gcp_service_account_keys": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_container_repository": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_container_tag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_container": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_init_container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_run_as_user": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeConfig.airflow_configmap": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_affinity": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.kube_tolerations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.kube_client_request_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig._get_security_context_val": [
            {
                "type": "method",
                "args": {
                    "scontext": "str"
                }
            }
        ],
        "KubeConfig._validate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesJobWatcher.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesJobWatcher.worker_uuid": [
            {
                "type": "attr",
                "anno": "KubeWorkerIdentifier"
            }
        ],
        "KubernetesJobWatcher.watcher_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "KubernetesJobWatcher.resource_version": [
            {
                "type": "attr",
                "anno": "KubeResourceVersion"
            }
        ],
        "KubernetesJobWatcher.kube_config": [
            {
                "type": "attr",
                "anno": "KubeConfig"
            }
        ],
        "KubernetesJobWatcher.__init__": [
            {
                "type": "method",
                "args": {
                    "namespace": "str",
                    "watcher_queue": "multiprocessing.Queue",
                    "resource_version": "KubeResourceVersion",
                    "worker_uuid": "KubeWorkerIdentifier",
                    "kube_config": "KubeConfig"
                }
            }
        ],
        "AirflowKubernetesScheduler.kube_config": [
            {
                "type": "attr",
                "anno": "KubernetesConfig"
            }
        ],
        "AirflowKubernetesScheduler.task_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "AirflowKubernetesScheduler.result_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "AirflowKubernetesScheduler.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowKubernetesScheduler.kube_client": [
            {
                "type": "attr",
                "anno": "KubernetesClient"
            }
        ],
        "AirflowKubernetesScheduler.launcher": [
            {
                "type": "attr",
                "anno": "PodLauncher"
            }
        ],
        "AirflowKubernetesScheduler.worker_configuration": [
            {
                "type": "attr",
                "anno": "WorkerConfiguration"
            }
        ],
        "AirflowKubernetesScheduler._manager": [
            {
                "type": "attr",
                "anno": "multiprocessing.Manager"
            }
        ],
        "AirflowKubernetesScheduler.watcher_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "AirflowKubernetesScheduler.worker_uuid": [
            {
                "type": "attr",
                "anno": "KubeWorkerIdentifier"
            }
        ],
        "AirflowKubernetesScheduler.kube_watcher": [
            {
                "type": "attr",
                "anno": "KubernetesJobWatcher"
            }
        ],
        "AirflowKubernetesScheduler._strip_unsafe_kubernetes_special_chars": [
            {
                "type": "method",
                "args": {
                    "string": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._make_safe_pod_id": [
            {
                "type": "method",
                "args": {
                    "safe_dag_id": "str",
                    "safe_task_id": "str",
                    "safe_uuid": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._create_pod_id": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_id": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor.kube_config": [
            {
                "type": "attr",
                "anno": "KubernetesConfig"
            }
        ],
        "KubernetesExecutor.task_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "KubernetesExecutor.result_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "KubernetesExecutor.kube_scheduler": [
            {
                "type": "attr",
                "anno": "AirflowKubernetesScheduler"
            }
        ],
        "KubernetesExecutor.kube_client": [
            {
                "type": "attr",
                "anno": "KubernetesClient"
            }
        ],
        "KubernetesExecutor.worker_uuid": [
            {
                "type": "attr",
                "anno": "KubeWorkerIdentifier"
            }
        ],
        "KubernetesExecutor._manager": [
            {
                "type": "attr",
                "anno": "multiprocessing.Manager"
            }
        ],
        "AirflowKubernetesScheduler._make_safe_label_value": [
            {
                "type": "method",
                "args": {
                    "string": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._datetime_to_label_safe_datestring": [
            {
                "type": "method",
                "args": {
                    "datetime_obj": "datetime.datetime"
                }
            }
        ],
        "AirflowKubernetesScheduler._label_safe_datestring_to_datetime": [
            {
                "type": "method",
                "args": {
                    "string": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._make_kube_watcher": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowKubernetesScheduler.__init__": [
            {
                "type": "method",
                "args": {
                    "kube_config": "KubernetesConfig",
                    "task_queue": "multiprocessing.Queue",
                    "result_queue": "multiprocessing.Queue",
                    "kube_client": "KubernetesClient",
                    "worker_uuid": "KubeWorkerIdentifier"
                }
            }
        ],
        "AirflowKubernetesScheduler._health_check_kube_watcher": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowKubernetesScheduler.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubeConfig.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor.clear_not_launched_queued_tasks": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "KubernetesExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesJobWatcher.process_error": [
            {
                "type": "method",
                "args": {
                    "event": "dict"
                }
            }
        ],
        "KubernetesJobWatcher._run": [
            {
                "type": "method",
                "args": {
                    "kube_client": "KubernetesClient",
                    "resource_version": "KubeResourceVersion",
                    "worker_uuid": "str",
                    "kube_config": "KubeConfig"
                }
            }
        ],
        "KubernetesJobWatcher.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutorConfig.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor._change_state": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "state": "State",
                    "pod_id": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._labels_to_key": [
            {
                "type": "method",
                "args": {
                    "labels": "dict"
                }
            }
        ],
        "AirflowKubernetesScheduler.process_watcher_task": [
            {
                "type": "method",
                "args": {
                    "task": "tuple"
                }
            }
        ],
        "KubernetesJobWatcher.process_status": [
            {
                "type": "method",
                "args": {
                    "pod_id": "str",
                    "status": "str",
                    "labels": "dict",
                    "resource_version": "KubeResourceVersion"
                }
            }
        ],
        "AirflowKubernetesScheduler.run_next": [
            {
                "type": "method",
                "args": {
                    "next_job": "dict"
                }
            }
        ],
        "KubernetesExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor._inject_secrets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutorConfig.from_dict": [
            {
                "type": "method",
                "args": {
                    "obj": "dict"
                }
            }
        ],
        "KubernetesExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ]
    },
    "executors.celery_executor": {
        "CELERY_FETCH_ERR_MSG_HEADER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CELERY_SEND_ERR_MSG_HEADER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "celery_configuration": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "app": [
            {
                "type": "var",
                "anno": "Celery"
            }
        ],
        "ExceptionWithTraceback.exception": [
            {
                "type": "attr",
                "anno": "Exception"
            }
        ],
        "ExceptionWithTraceback.traceback": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExceptionWithTraceback.__init__": [
            {
                "type": "method",
                "args": {
                    "exception": "Exception",
                    "exception_traceback": "str"
                }
            }
        ],
        "CeleryExecutor._sync_parallelism": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CeleryExecutor._sync_pool": [
            {
                "type": "attr",
                "anno": "Pool"
            }
        ],
        "CeleryExecutor.tasks": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CeleryExecutor.last_state": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CeleryExecutor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CeleryExecutor._num_tasks_per_send_process": [
            {
                "type": "method",
                "args": {
                    "to_send_count": "int"
                }
            }
        ],
        "CeleryExecutor._num_tasks_per_fetch_process": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "send_task_to_executor": [
            {
                "type": "func",
                "args": {
                    "task_tuple": "tuple"
                }
            }
        ],
        "fetch_celery_task_state": [
            {
                "type": "func",
                "args": {
                    "celery_task": "tuple"
                }
            }
        ],
        "CeleryExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "execute_command": [
            {
                "type": "func",
                "args": {
                    "command_to_exec": "str"
                }
            }
        ],
        "CeleryExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CeleryExecutor.end": [
            {
                "type": "method",
                "args": {
                    "synchronous": "bool"
                }
            }
        ],
        "CeleryExecutor.trigger_tasks": [
            {
                "type": "method",
                "args": {
                    "open_slots": "int"
                }
            }
        ]
    },
    "executors.sequential_executor": {
        "SequentialExecutor.commands_to_run": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SequentialExecutor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SequentialExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ],
        "SequentialExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SequentialExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "executors.local_executor": {
        "LocalWorker.daemon": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalWorker.result_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "LocalWorker.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalWorker.command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalWorker.__init__": [
            {
                "type": "method",
                "args": {
                    "result_queue": "multiprocessing.Queue"
                }
            }
        ],
        "QueuedLocalWorker.task_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Process"
            }
        ],
        "QueuedLocalWorker.__init__": [
            {
                "type": "method",
                "args": {
                    "task_queue": "multiprocessing.Process",
                    "result_queue": "multiprocessing.Process"
                }
            }
        ],
        "LocalExecutor._UnlimitedParallelism.executor": [
            {
                "type": "attr",
                "anno": "BaseExecutor"
            }
        ],
        "LocalExecutor._UnlimitedParallelism.__init__": [
            {
                "type": "method",
                "args": {
                    "executor": "BaseExecutor"
                }
            }
        ],
        "LocalExecutor._LimitedParallelism.executor": [
            {
                "type": "attr",
                "anno": "BaseExecutor"
            }
        ],
        "LocalExecutor._LimitedParallelism.__init__": [
            {
                "type": "method",
                "args": {
                    "executor": "BaseExecutor"
                }
            }
        ],
        "LocalExecutor._LimitedParallelism.queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "LocalExecutor._LimitedParallelism.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str"
                }
            }
        ],
        "LocalExecutor.manager": [
            {
                "type": "attr",
                "anno": "multiprocessing.Manager"
            }
        ],
        "LocalExecutor.result_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Process"
            }
        ],
        "LocalExecutor.workers": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "LocalExecutor.workers_used": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LocalExecutor.workers_active": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LocalExecutor._UnlimitedParallelism.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor.impl": [
            {
                "type": "attr",
                "anno": "BaseExecutor"
            }
        ],
        "LocalExecutor._UnlimitedParallelism.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._LimitedParallelism.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalWorker.execute_work": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str"
                }
            }
        ],
        "QueuedLocalWorker.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalWorker.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._LimitedParallelism.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._UnlimitedParallelism.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._LimitedParallelism.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._UnlimitedParallelism.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str"
                }
            }
        ],
        "LocalExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ]
    },
    "executors": {
        "DEFAULT_EXECUTOR": [
            {
                "type": "var",
                "anno": "BaseExecutor"
            }
        ],
        "Executors.LocalExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.SequentialExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.CeleryExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.DaskExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.KubernetesExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_get_executor": [
            {
                "type": "func",
                "args": {
                    "executor_name": "str"
                }
            }
        ],
        "get_default_executor": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "executors.dask_executor": {
        "DaskExecutor.cluster_address": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DaskExecutor.tls_ca": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DaskExecutor.tls_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DaskExecutor.tls_cert": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DaskExecutor.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_address": "str"
                }
            }
        ],
        "DaskExecutor.client": [
            {
                "type": "attr",
                "anno": "distributed.Client"
            }
        ],
        "DaskExecutor.futures": [
            {
                "type": "attr",
                "anno": "dict[distributed.Future, str]"
            }
        ],
        "DaskExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DaskExecutor._process_future": [
            {
                "type": "method",
                "args": {
                    "future": "distributed.Future"
                }
            }
        ],
        "DaskExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DaskExecutor.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DaskExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DaskExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ]
    },
    "macros.hive": {
        "_closest_date": [
            {
                "type": "func",
                "args": {
                    "target_dt": "datetime.datetime",
                    "date_list": "list",
                    "before_target": "bool"
                }
            }
        ],
        "max_partition": [
            {
                "type": "func",
                "args": {
                    "table": "str",
                    "schema": "str",
                    "field": "str",
                    "filter_map": "dict",
                    "metastore_conn_id": "str"
                }
            }
        ],
        "closest_ds_partition": [
            {
                "type": "func",
                "args": {
                    "table": "str",
                    "ds": "str",
                    "before": "bool",
                    "schema": "str",
                    "metastore_conn_id": "str"
                }
            }
        ]
    },
    "macros": {
        "ds_add": [
            {
                "type": "func",
                "args": {
                    "ds": "str",
                    "days": "int"
                }
            }
        ],
        "ds_format": [
            {
                "type": "func",
                "args": {
                    "ds": "str",
                    "input_format": "str",
                    "output_format": "str"
                }
            }
        ],
        "datetime_diff_for_humans": [
            {
                "type": "func",
                "args": {
                    "dt": "datetime",
                    "since": "timedelta"
                }
            }
        ],
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "exceptions": {
        "AirflowException.status_code": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowBadRequest.status_code": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowNotFoundException.status_code": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowRescheduleException.reschedule_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowRescheduleException.__init__": [
            {
                "type": "method",
                "args": {
                    "reschedule_date": "str"
                }
            }
        ]
    },
    "jobs.base_job": {
        "BaseJob.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseJob.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.state": [
            {
                "type": "attr",
                "anno": "State"
            }
        ],
        "BaseJob.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.start_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "BaseJob.end_date": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "BaseJob.latest_heartbeat": [
            {
                "type": "attr",
                "anno": "UtcDateTime"
            }
        ],
        "BaseJob.executor_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.hostname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.unixname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseJob.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[Index, ...]"
            }
        ],
        "BaseJob.heartrate": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "BaseJob.executor": [
            {
                "type": "attr",
                "anno": "executors.BaseExecutor"
            }
        ],
        "BaseJob.max_tis_per_query": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseJob.__init__": [
            {
                "type": "method",
                "args": {
                    "executor": "executors.BaseExecutor",
                    "heartrate": "Optional[float]",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BaseJob.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseJob.heartbeat_callback": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "BaseJob._execute": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseJob.is_alive": [
            {
                "type": "method",
                "args": {
                    "grace_multiplier": "float"
                }
            }
        ],
        "BaseJob.most_recent_job": [
            {
                "type": "method",
                "args": {
                    "cls": "type[BaseJob]",
                    "session": "Session"
                }
            }
        ],
        "BaseJob.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseJob.reset_state_for_orphaned_tasks": [
            {
                "type": "method",
                "args": {
                    "filter_by_dag_run": "Optional[models.DagRun]",
                    "session": "Session"
                }
            }
        ],
        "BaseJob.kill": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "BaseJob.heartbeat": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "jobs.local_task_job": {
        "LocalTaskJob.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "LocalTaskJob.task_instance": [
            {
                "type": "attr",
                "anno": "TaskInstance"
            }
        ],
        "LocalTaskJob.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalTaskJob.ignore_all_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.ignore_depends_on_past": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.ignore_task_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.ignore_ti_state": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalTaskJob.pickle_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalTaskJob.mark_success": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.terminating": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.task_runner": [
            {
                "type": "attr",
                "anno": "BaseTaskRunner"
            }
        ],
        "LocalTaskJob.__init__": [
            {
                "type": "method",
                "args": {
                    "task_instance": "TaskInstance",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "mark_success": "bool",
                    "pickle_id": "str",
                    "pool": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "LocalTaskJob.heartbeat_callback": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "LocalTaskJob.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalTaskJob._execute": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "jobs.scheduler_job": {
        "DagFileProcessor.class_creation_counter": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessor._file_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessor._process": [
            {
                "type": "attr",
                "anno": "multiprocessing.Process"
            }
        ],
        "DagFileProcessor._dag_id_white_list": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DagFileProcessor._pickle_dags": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagFileProcessor._result": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessor._done": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagFileProcessor._start_time": [
            {
                "type": "attr",
                "anno": "timezone.Timezone"
            }
        ],
        "DagFileProcessor._instance_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessor.__init__": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "pickle_dags": "bool",
                    "dag_id_white_list": "list[str]"
                }
            }
        ],
        "DagFileProcessor.file_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor._result_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "DagFileProcessor.exit_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.start_time": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SchedulerJob.heartrate": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SchedulerJob.dag_ids": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SchedulerJob.subdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SchedulerJob.num_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob._processor_poll_interval": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "SchedulerJob.do_pickle": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SchedulerJob.max_threads": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "SchedulerJob.using_sqlite": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SchedulerJob.max_tis_per_query": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob.processor_agent": [
            {
                "type": "attr",
                "anno": "DagFileProcessorAgent"
            }
        ],
        "SchedulerJob.heartbeat_callback": [
            {
                "type": "method",
                "args": {
                    "session": "dict"
                }
            }
        ],
        "DagFileProcessor.pid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob.is_alive": [
            {
                "type": "method",
                "args": {
                    "grace_multiplier": "float"
                }
            }
        ],
        "SchedulerJob.create_dag_run": [
            {
                "type": "method",
                "args": {
                    "dag": "SimpleDag",
                    "session": "models.Session"
                }
            }
        ],
        "SchedulerJob._process_dags": [
            {
                "type": "method",
                "args": {
                    "dagbag": "DagBag",
                    "dags": "list",
                    "tis_out": "list"
                }
            }
        ],
        "SchedulerJob.process_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "pickle_dags": "bool",
                    "session": "models.Session"
                }
            }
        ],
        "DagFileProcessor._run_file_processor": [
            {
                "type": "method",
                "args": {
                    "result_channel": "multiprocessing.Process",
                    "file_path": "str",
                    "pickle_dags": "bool",
                    "dag_id_white_list": "list[str]",
                    "thread_name": "str"
                }
            }
        ],
        "DagFileProcessor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob.__get_concurrency_maps": [
            {
                "type": "method",
                "args": {
                    "states": "list[State]",
                    "session": "models.Session"
                }
            }
        ],
        "DagFileProcessor._kill_process": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob.update_import_errors": [
            {
                "type": "method",
                "args": {
                    "session": "models.Session",
                    "dagbag": "DagBag"
                }
            }
        ],
        "DagFileProcessor.done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.result": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.terminate": [
            {
                "type": "method",
                "args": {
                    "sigkill": "bool"
                }
            }
        ],
        "SchedulerJob._exit_gracefully": [
            {
                "type": "method",
                "args": {
                    "signum": "int",
                    "frame": "str"
                }
            }
        ],
        "SchedulerJob.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "dag_ids": "list[str]",
                    "subdir": "str",
                    "num_runs": "int",
                    "processor_poll_interval": "float",
                    "do_pickle": "bool",
                    "log": "logging.Logger",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SchedulerJob._process_executor_events": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._change_state_for_tasks_failed_to_execute": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._enqueue_task_instances_with_queued_state": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "simple_task_instances": "list"
                }
            }
        ],
        "SchedulerJob._change_state_for_executable_task_instances": [
            {
                "type": "method",
                "args": {
                    "task_instances": "list",
                    "acceptable_states": "list[State]",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._find_executable_task_instances": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "states": "list[State]",
                    "session": "models.Session"
                }
            }
        ],
        "SchedulerJob._execute_task_instances": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "states": "list[State]",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._change_state_for_tis_without_dagrun": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "old_states": "list[State]",
                    "new_state": "State",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._execute_helper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob._execute": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob._process_task_instances": [
            {
                "type": "method",
                "args": {
                    "dag": "SimpleDag",
                    "task_instances_list": "list",
                    "session": "models.Session"
                }
            }
        ],
        "SchedulerJob.manage_slas": [
            {
                "type": "method",
                "args": {
                    "dag": "SimpleDag",
                    "session": "models.Session"
                }
            }
        ]
    },
    "jobs.backfill_job": {
        "BackfillJob.ID_PREFIX": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.ID_FORMAT_PREFIX": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.STATES_COUNT_AS_RUNNING": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BackfillJob.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BackfillJob._DagRunTaskStatus.to_run": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BackfillJob._DagRunTaskStatus.running": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BackfillJob._DagRunTaskStatus.skipped": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.succeeded": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.failed": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.not_ready": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.deadlocked": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.active_runs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BackfillJob._DagRunTaskStatus.executed_dag_run_dates": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.finished_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BackfillJob._DagRunTaskStatus.total_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BackfillJob._DagRunTaskStatus.__init__": [
            {
                "type": "method",
                "args": {
                    "to_run": "OrderedDict",
                    "running": "dict",
                    "skipped": "set",
                    "succeeded": "set",
                    "failed": "set",
                    "not_ready": "set",
                    "deadlocked": "set",
                    "active_runs": "list",
                    "executed_dag_run_dates": "set",
                    "finished_runs": "int",
                    "total_runs": "int"
                }
            }
        ],
        "BackfillJob.dag": [
            {
                "type": "attr",
                "anno": "DAG"
            }
        ],
        "BackfillJob.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.bf_start_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.bf_end_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.mark_success": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.donot_pickle": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.ignore_first_depends_on_past": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.ignore_task_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.delay_on_limit_secs": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "BackfillJob.verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BackfillJob.rerun_failed_tasks": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.run_backwards": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.__init__": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "start_date": "str",
                    "end_date": "str",
                    "mark_success": "bool",
                    "donot_pickle": "bool",
                    "ignore_first_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "pool": "str",
                    "delay_on_limit_secs": "float",
                    "verbose": "bool",
                    "conf": "dict",
                    "rerun_failed_tasks": "bool",
                    "run_backwards": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BackfillJob._collect_errors": [
            {
                "type": "method",
                "args": {
                    "ti_status": "BackfillJob._DagRunTaskStatus",
                    "session": "Session"
                }
            }
        ],
        "BackfillJob._log_progress": [
            {
                "type": "method",
                "args": {
                    "ti_status": "DagRunTaskStatus"
                }
            }
        ],
        "BackfillJob._update_counters": [
            {
                "type": "method",
                "args": {
                    "ti_status": "DagRunTaskStatus"
                }
            }
        ],
        "BackfillJob._get_dag_run": [
            {
                "type": "method",
                "args": {
                    "run_date": "str",
                    "session": "Session"
                }
            }
        ],
        "BackfillJob._set_unfinished_dag_runs_to_failed": [
            {
                "type": "method",
                "args": {
                    "dag_runs": "list",
                    "session": "Session"
                }
            }
        ],
        "BackfillJob._task_instances_for_dag_run": [
            {
                "type": "method",
                "args": {
                    "dag_run": "DagRun",
                    "session": "Session"
                }
            }
        ],
        "BackfillJob._manage_executor_state": [
            {
                "type": "method",
                "args": {
                    "running": "dict"
                }
            }
        ],
        "BackfillJob._process_backfill_task_instances": [
            {
                "type": "method",
                "args": {
                    "ti_status": "DagRunTaskStatus",
                    "executor": "executors.Executor",
                    "pickle_id": "str",
                    "start_date": "str",
                    "session": "Session"
                }
            }
        ],
        "BackfillJob._execute_for_run_dates": [
            {
                "type": "method",
                "args": {
                    "run_dates": "list",
                    "ti_status": "BackfillJob._DagRunTaskStatus",
                    "executor": "executors.Executor",
                    "pickle_id": "str",
                    "start_date": "str",
                    "session": "Session"
                }
            }
        ],
        "BackfillJob._execute": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ]
    },
    "security.utils": {
        "get_components": [
            {
                "type": "func",
                "args": {
                    "principal": "str"
                }
            }
        ],
        "replace_hostname_pattern": [
            {
                "type": "func",
                "args": {
                    "components": "list",
                    "host": "str"
                }
            }
        ],
        "get_fqdn": [
            {
                "type": "func",
                "args": {
                    "hostname_or_ip": "str"
                }
            }
        ],
        "principal_from_username": [
            {
                "type": "func",
                "args": {
                    "username": "str",
                    "realm": "str"
                }
            }
        ]
    },
    "security.kerberos": {
        "NEED_KRB181_WORKAROUND": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "perform_krb181_workaround": [
            {
                "type": "func",
                "args": {
                    "principal": "str"
                }
            }
        ],
        "detect_conf_var": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "renew_from_kt": [
            {
                "type": "func",
                "args": {
                    "principal": "str",
                    "keytab": "str"
                }
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {
                    "principal": "str",
                    "keytab": "str"
                }
            }
        ]
    },
    "contrib.task_runner.cgroup_task_runner": {
        "CgroupTaskRunner.process": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "CgroupTaskRunner._finished_running": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CgroupTaskRunner._cpu_shares": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CgroupTaskRunner._mem_mb_limit": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CgroupTaskRunner._created_cpu_cgroup": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CgroupTaskRunner._created_mem_cgroup": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CgroupTaskRunner._cur_user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CgroupTaskRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "local_task_job": "str"
                }
            }
        ],
        "CgroupTaskRunner.mem_cgroup_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CgroupTaskRunner.cpu_cgroup_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CgroupTaskRunner._get_cgroup_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner.return_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner._delete_cgroup": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "CgroupTaskRunner.on_finish": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner._create_cgroup": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ]
    },
    "contrib.example_dags.example_kubernetes_executor": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "affinity": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "tolerations": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "print_stuff": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "use_zip_binary": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "start_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "one_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "two_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "three_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "four_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "contrib.example_dags.example_qubole_operator": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "options": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "branching": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "join": [
            {
                "type": "var",
                "anno": "DummyOperator"
            }
        ],
        "t4": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t5": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t6": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t7": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t8": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t9": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t10": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "prog": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "t11": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "compare_result": [
            {
                "type": "func",
                "args": {
                    "ds": "str",
                    "kwargs": "str"
                }
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "contrib.example_dags.example_emr_job_flow_manual_steps": {
        "DEFAULT_ARGS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "SPARK_TEST_STEPS": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "JOB_FLOW_OVERRIDES": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "cluster_creator": [
            {
                "type": "var",
                "anno": "EmrCreateJobFlowOperator"
            }
        ],
        "step_adder": [
            {
                "type": "var",
                "anno": "EmrAddStepsOperator"
            }
        ],
        "step_checker": [
            {
                "type": "var",
                "anno": "EmrStepSensor"
            }
        ],
        "cluster_remover": [
            {
                "type": "var",
                "anno": "EmrTerminateJobFlowOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_sql_query": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_REGION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_POSTGRES_INSTANCE_NAME_QUERY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_POSTGRES_DATABASE_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_POSTGRES_USER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_POSTGRES_PASSWORD": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_POSTGRES_PUBLIC_IP": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_POSTGRES_PUBLIC_PORT": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GCSQL_POSTGRES_CLIENT_CERT_FILE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_POSTGRES_CLIENT_KEY_FILE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_POSTGRES_SERVER_CA_FILE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_MYSQL_INSTANCE_NAME_QUERY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_MYSQL_DATABASE_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_MYSQL_USER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_MYSQL_PASSWORD": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_MYSQL_PUBLIC_IP": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_MYSQL_PUBLIC_PORT": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GCSQL_MYSQL_CLIENT_CERT_FILE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_MYSQL_CLIENT_KEY_FILE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCSQL_MYSQL_SERVER_CA_FILE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SQL": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "HOME_DIR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_absolute_path": [
            {
                "type": "func",
                "args": {
                    "path": "str"
                }
            }
        ],
        "postgres_kwargs": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "mysql_kwargs": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "connection_names": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "tasks": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "task": [
            {
                "type": "var",
                "anno": "CloudSqlQueryOperator"
            }
        ],
        "prev_task": [
            {
                "type": "var",
                "anno": "CloudSqlQueryOperator"
            }
        ],
        "sql_proxy_binary_path": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "contrib.example_dags.example_gcs_to_bq_operator": {
        "gcs_to_bq": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "models.DAG"
            }
        ],
        "create_test_dataset": [
            {
                "type": "var",
                "anno": "bash_operator.BashOperator"
            }
        ],
        "load_csv": [
            {
                "type": "var",
                "anno": "gcs_to_bq.GoogleCloudStorageToBigQueryOperator"
            }
        ],
        "delete_test_dataset": [
            {
                "type": "var",
                "anno": "bash_operator.BashOperator"
            }
        ]
    },
    "contrib.example_dags.example_emr_job_flow_automatic_steps": {
        "DEFAULT_ARGS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "SPARK_TEST_STEPS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "JOB_FLOW_OVERRIDES": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "job_flow_creator": [
            {
                "type": "var",
                "anno": "EmrCreateJobFlowOperator"
            }
        ],
        "job_sensor": [
            {
                "type": "var",
                "anno": "EmrJobFlowSensor"
            }
        ]
    },
    "contrib.example_dags.example_gcp_cloud_build": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_SOURCE_ARCHIVE_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_SOURCE_REPOSITORY_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_SOURCE_ARCHIVE_URL_PARTS": [
            {
                "type": "var",
                "anno": "urllib.Parse"
            }
        ],
        "GCP_SOURCE_BUCKET_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "create_build_from_repo_body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "create_build_from_storage_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "create_build_from_repo": [
            {
                "type": "var",
                "anno": "CloudBuildCreateBuildOperator"
            }
        ],
        "create_build_from_repo_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "create_build_from_storage_body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "create_build_from_storage": [
            {
                "type": "var",
                "anno": "CloudBuildCreateBuildOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_vision": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "GCP_VISION_LOCATION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_VISION_PRODUCT_SET_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_VISION_PRODUCT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_VISION_REFERENCE_IMAGE_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_VISION_REFERENCE_IMAGE_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_VISION_ANNOTATE_IMAGE_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "product_set": [
            {
                "type": "var",
                "anno": "ProductSet"
            }
        ],
        "product": [
            {
                "type": "var",
                "anno": "Product"
            }
        ],
        "reference_image": [
            {
                "type": "var",
                "anno": "ReferenceImage"
            }
        ],
        "annotate_image_request": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "DETECT_IMAGE": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "product_set_create": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetCreateOperator"
            }
        ],
        "product_set_get": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetGetOperator"
            }
        ],
        "product_set_update": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetUpdateOperator"
            }
        ],
        "product_set_delete": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetDeleteOperator"
            }
        ],
        "product_create": [
            {
                "type": "var",
                "anno": "CloudVisionProductCreateOperator"
            }
        ],
        "product_get": [
            {
                "type": "var",
                "anno": "CloudVisionProductGetOperator"
            }
        ],
        "product_update": [
            {
                "type": "var",
                "anno": "CloudVisionProductUpdateOperator"
            }
        ],
        "product_delete": [
            {
                "type": "var",
                "anno": "CloudVisionProductDeleteOperator"
            }
        ],
        "reference_image_create": [
            {
                "type": "var",
                "anno": "CloudVisionReferenceImageCreateOperator"
            }
        ],
        "add_product_to_product_set": [
            {
                "type": "var",
                "anno": "CloudVisionAddProductToProductSetOperator"
            }
        ],
        "remove_product_from_product_set": [
            {
                "type": "var",
                "anno": "CloudVisionRemoveProductFromProductSetOperator"
            }
        ],
        "product_set_create_2": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetCreateOperator"
            }
        ],
        "product_set_create_2_idempotence": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetCreateOperator"
            }
        ],
        "product_set_get_2": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetGetOperator"
            }
        ],
        "product_set_update_2": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetUpdateOperator"
            }
        ],
        "product_set_delete_2": [
            {
                "type": "var",
                "anno": "CloudVisionProductSetDeleteOperator"
            }
        ],
        "product_create_2": [
            {
                "type": "var",
                "anno": "CloudVisionProductCreateOperator"
            }
        ],
        "product_create_2_idempotence": [
            {
                "type": "var",
                "anno": "CloudVisionProductCreateOperator"
            }
        ],
        "product_get_2": [
            {
                "type": "var",
                "anno": "CloudVisionProductGetOperator"
            }
        ],
        "product_update_2": [
            {
                "type": "var",
                "anno": "CloudVisionProductUpdateOperator"
            }
        ],
        "product_delete_2": [
            {
                "type": "var",
                "anno": "CloudVisionProductDeleteOperator"
            }
        ],
        "reference_image_create_2": [
            {
                "type": "var",
                "anno": "CloudVisionReferenceImageCreateOperator"
            }
        ],
        "reference_image_create_2_idempotence": [
            {
                "type": "var",
                "anno": "CloudVisionReferenceImageCreateOperator"
            }
        ],
        "add_product_to_product_set_2": [
            {
                "type": "var",
                "anno": "CloudVisionAddProductToProductSetOperator"
            }
        ],
        "remove_product_from_product_set_2": [
            {
                "type": "var",
                "anno": "CloudVisionRemoveProductFromProductSetOperator"
            }
        ],
        "annotate_image": [
            {
                "type": "var",
                "anno": "CloudVisionAnnotateImageOperator"
            }
        ],
        "annotate_image_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "detect_text": [
            {
                "type": "var",
                "anno": "CloudVisionDetectTextOperator"
            }
        ],
        "detect_text_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "document_detect_text": [
            {
                "type": "var",
                "anno": "CloudVisionDetectDocumentTextOperator"
            }
        ],
        "document_detect_text_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "detect_labels": [
            {
                "type": "var",
                "anno": "CloudVisionDetectImageLabelsOperator"
            }
        ],
        "detect_labels_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "detect_safe_search": [
            {
                "type": "var",
                "anno": "CloudVisionDetectImageSafeSearchOperator"
            }
        ],
        "detect_safe_search_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_transfer": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_DESCRIPTION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_TRANSFER_TARGET_BUCKET": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "WAIT_FOR_OPERATION_POKE_INTERVAL": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GCP_TRANSFER_SOURCE_AWS_BUCKET": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_TRANSFER_FIRST_TARGET_BUCKET": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_TRANSFER_SECOND_TARGET_BUCKET": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "aws_to_gcs_transfer_body": [
            {
                "type": "var",
                "anno": "Dict[str, Any]"
            }
        ],
        "gcs_to_gcs_transfer_body": [
            {
                "type": "var",
                "anno": "Dict[str, Any]"
            }
        ],
        "list_filter_dict": [
            {
                "type": "var",
                "anno": "Dict[str, str]"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "Dict[str, Any]"
            }
        ],
        "create_transfer_job_from_aws": [
            {
                "type": "var",
                "anno": "GcpTransferServiceJobCreateOperator"
            }
        ],
        "wait_for_operation_to_start": [
            {
                "type": "var",
                "anno": "GCPTransferServiceWaitForJobStatusSensor"
            }
        ],
        "pause_operation": [
            {
                "type": "var",
                "anno": "GcpTransferServiceOperationPauseOperator"
            }
        ],
        "list_operations": [
            {
                "type": "var",
                "anno": "GcpTransferServiceOperationsListOperator"
            }
        ],
        "get_operation": [
            {
                "type": "var",
                "anno": "GcpTransferServiceOperationGetOperator"
            }
        ],
        "resume_operation": [
            {
                "type": "var",
                "anno": "GcpTransferServiceOperationResumeOperator"
            }
        ],
        "wait_for_operation_to_end": [
            {
                "type": "var",
                "anno": "GCPTransferServiceWaitForJobStatusSensor"
            }
        ],
        "job_time": [
            {
                "type": "var",
                "anno": "datetime"
            }
        ],
        "create_transfer_job_from_gcp": [
            {
                "type": "var",
                "anno": "GcpTransferServiceJobCreateOperator"
            }
        ],
        "wait_for_second_operation_to_start": [
            {
                "type": "var",
                "anno": "GCPTransferServiceWaitForJobStatusSensor"
            }
        ],
        "cancel_operation": [
            {
                "type": "var",
                "anno": "GcpTransferServiceOperationCancelOperator"
            }
        ],
        "delete_transfer_from_aws_job": [
            {
                "type": "var",
                "anno": "GcpTransferServiceJobDeleteOperator"
            }
        ],
        "delete_transfer_from_gcp_job": [
            {
                "type": "var",
                "anno": "GcpTransferServiceJobDeleteOperator"
            }
        ],
        "update_body": [
            {
                "type": "var",
                "anno": "Dict[str, Any]"
            }
        ],
        "update_job": [
            {
                "type": "var",
                "anno": "GcpTransferServiceJobUpdateOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_bigtable_operators": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_INSTANCE_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_INSTANCE_DISPLAY_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_INSTANCE_TYPE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_INSTANCE_LABELS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_CLUSTER_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_CLUSTER_ZONE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_CLUSTER_NODES": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_CLUSTER_NODES_UPDATED": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_CLUSTER_STORAGE_TYPE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_TABLE_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CBT_POKE_INTERVAL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "create_instance_task": [
            {
                "type": "var",
                "anno": "BigtableInstanceCreateOperator"
            }
        ],
        "create_instance_task2": [
            {
                "type": "var",
                "anno": "BigtableInstanceCreateOperator"
            }
        ],
        "cluster_update_task": [
            {
                "type": "var",
                "anno": "BigtableClusterUpdateOperator"
            }
        ],
        "cluster_update_task2": [
            {
                "type": "var",
                "anno": "BigtableClusterUpdateOperator"
            }
        ],
        "delete_instance_task": [
            {
                "type": "var",
                "anno": "BigtableInstanceDeleteOperator"
            }
        ],
        "delete_instance_task2": [
            {
                "type": "var",
                "anno": "BigtableInstanceDeleteOperator"
            }
        ],
        "create_table_task": [
            {
                "type": "var",
                "anno": "BigtableTableCreateOperator"
            }
        ],
        "create_table_task2": [
            {
                "type": "var",
                "anno": "BigtableTableCreateOperator"
            }
        ],
        "wait_for_table_replication_task": [
            {
                "type": "var",
                "anno": "BigtableTableWaitForReplicationSensor"
            }
        ],
        "wait_for_table_replication_task2": [
            {
                "type": "var",
                "anno": "BigtableTableWaitForReplicationSensor"
            }
        ],
        "delete_table_task": [
            {
                "type": "var",
                "anno": "BigtableTableDeleteOperator"
            }
        ],
        "delete_table_task2": [
            {
                "type": "var",
                "anno": "BigtableTableDeleteOperator"
            }
        ]
    },
    "contrib.example_dags.example_azure_container_instances_operator": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "AzureContainerInstancesOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_video_intelligence": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "GCP_BUCKET_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "detect_video_label_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "detect_video_explicit_content_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "detect_video_shots_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "INPUT_URI": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "detect_video_shots": [
            {
                "type": "var",
                "anno": "CloudVideoIntelligenceDetectVideoShotsOperator"
            }
        ],
        "detect_video_explicit_content": [
            {
                "type": "var",
                "anno": "CloudVideoIntelligenceDetectVideoExplicitContentOperator"
            }
        ],
        "detect_video_label": [
            {
                "type": "var",
                "anno": "CloudVideoIntelligenceDetectVideoLabelsOperator"
            }
        ]
    },
    "contrib.example_dags.example_azure_cosmosdb_sensor": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "AzureCosmosDocumentSensor"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "AzureCosmosInsertDocumentOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_dlp_operator": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "GCP_PROJECT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEMPLATE_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ITEM": [
            {
                "type": "var",
                "anno": "ContentItem"
            }
        ],
        "INSPECT_CONFIG": [
            {
                "type": "var",
                "anno": "InspectConfig"
            }
        ],
        "INSPECT_TEMPLATE": [
            {
                "type": "var",
                "anno": "InspectTemplate"
            }
        ],
        "create_template": [
            {
                "type": "var",
                "anno": "CloudDLPCreateInspectTemplateOperator"
            }
        ],
        "inspect_content": [
            {
                "type": "var",
                "anno": "CloudDLPInspectContentOperator"
            }
        ],
        "delete_template": [
            {
                "type": "var",
                "anno": "CloudDLPDeleteInspectTemplateOperator"
            }
        ]
    },
    "contrib.example_dags.libs.helper": {
        "print_stuff": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "contrib.example_dags.example_gcp_compute": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCE_ZONE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCE_INSTANCE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "GCE_SHORT_MACHINE_TYPE_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "gce_instance_start": [
            {
                "type": "var",
                "anno": "GceInstanceStartOperator"
            }
        ],
        "gce_instance_start2": [
            {
                "type": "var",
                "anno": "GceInstanceStartOperator"
            }
        ],
        "gce_instance_stop": [
            {
                "type": "var",
                "anno": "GceInstanceStopOperator"
            }
        ],
        "gce_instance_stop2": [
            {
                "type": "var",
                "anno": "GceInstanceStopOperator"
            }
        ],
        "SET_MACHINE_TYPE_BODY": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "gce_set_machine_type2": [
            {
                "type": "var",
                "anno": "GceSetMachineTypeOperator"
            }
        ],
        "gce_set_machine_type": [
            {
                "type": "var",
                "anno": "GceSetMachineTypeOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcs_acl": {
        "GCS_ACL_BUCKET": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCS_ACL_OBJECT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCS_ACL_ENTITY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCS_ACL_BUCKET_ROLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCS_ACL_OBJECT_ROLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "gcs_bucket_create_acl_entry_task": [
            {
                "type": "var",
                "anno": "airflow.Operator"
            }
        ],
        "gcs_object_create_acl_entry_task": [
            {
                "type": "var",
                "anno": "airflow.Operator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_speech": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BUCKET_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FILENAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "INPUT": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "VOICE": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "AUDIO_CONFIG": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "CONFIG": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "TARGET_LANGUAGE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "MODEL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SOURCE_LANGUAGE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "text_to_speech_synthesize_task": [
            {
                "type": "var",
                "anno": "GcpTextToSpeechSynthesizeOperator"
            }
        ],
        "AUDIO": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "translate_speech_task": [
            {
                "type": "var",
                "anno": "GcpTranslateSpeechOperator"
            }
        ],
        "speech_to_text_recognize_task": [
            {
                "type": "var",
                "anno": "GcpSpeechToTextRecognizeSpeechOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_natural_language": {
        "TEXT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "document": [
            {
                "type": "var",
                "anno": "Document"
            }
        ],
        "GCS_CONTENT_URI": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "document_gcs": [
            {
                "type": "var",
                "anno": "Document"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "analyze_entities": [
            {
                "type": "var",
                "anno": "CloudLanguageAnalyzeEntitiesOperator"
            }
        ],
        "analyze_entities_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "analyze_entity_sentiment": [
            {
                "type": "var",
                "anno": "CloudLanguageAnalyzeEntitySentimentOperator"
            }
        ],
        "analyze_entity_sentiment_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "analyze_sentiment": [
            {
                "type": "var",
                "anno": "CloudLanguageAnalyzeSentimentOperator"
            }
        ],
        "analyze_sentiment_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "analyze_classify_text": [
            {
                "type": "var",
                "anno": "CloudLanguageClassifyTextOperator"
            }
        ],
        "analyze_classify_text_result": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "contrib.example_dags.example_dingding_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "text_msg_remind_none": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "text_msg_remind_specific": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "text_msg_remind_include_invalid": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "text_msg_remind_all": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "link_msg": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "markdown_msg": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "single_action_card_msg": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "multi_action_card_msg": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "feed_card_msg": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "msg_failure_callback": [
            {
                "type": "var",
                "anno": "DingdingOperator"
            }
        ],
        "failure_callback": [
            {
                "type": "func",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.example_dags.example_gcp_function": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_LOCATION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCF_SOURCE_ARCHIVE_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCF_SOURCE_UPLOAD_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCF_ZIP_PATH": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCF_ENTRYPOINT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCF_RUNTIME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_VALIDATE_BODY": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "GCF_SHORT_FUNCTION_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCF_SOURCE_REPOSITORY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FUNCTION_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "delete_task": [
            {
                "type": "var",
                "anno": "GcfFunctionDeleteOperator"
            }
        ],
        "body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "deploy2_task": [
            {
                "type": "var",
                "anno": "GcfFunctionDeployOperator"
            }
        ],
        "deploy_task": [
            {
                "type": "var",
                "anno": "GcfFunctionDeployOperator"
            }
        ]
    },
    "contrib.example_dags.example_databricks_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "new_cluster": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "notebook_task_params": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "notebook_task": [
            {
                "type": "var",
                "anno": "DatabricksSubmitRunOperator"
            }
        ],
        "spark_jar_task": [
            {
                "type": "var",
                "anno": "DatabricksSubmitRunOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_compute_igm": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCE_ZONE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "GCE_TEMPLATE_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCE_NEW_TEMPLATE_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCE_NEW_DESCRIPTION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCE_INSTANCE_TEMPLATE_BODY_UPDATE": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "GCE_INSTANCE_GROUP_MANAGER_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SOURCE_TEMPLATE_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DESTINATION_TEMPLATE_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "UPDATE_POLICY": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "gce_instance_template_copy": [
            {
                "type": "var",
                "anno": "GceInstanceTemplateCopyOperator"
            }
        ],
        "gce_instance_template_copy2": [
            {
                "type": "var",
                "anno": "GceInstanceTemplateCopyOperator"
            }
        ],
        "gce_instance_group_manager_update_template": [
            {
                "type": "var",
                "anno": "GceInstanceGroupManagerUpdateTemplateOperator"
            }
        ],
        "gce_instance_group_manager_update_template2": [
            {
                "type": "var",
                "anno": "GceInstanceGroupManagerUpdateTemplateOperator"
            }
        ]
    },
    "contrib.example_dags.example_winrm_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "cmd": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "run_this_last": [
            {
                "type": "var",
                "anno": "WinRMOperator"
            }
        ],
        "winRMHook": [
            {
                "type": "var",
                "anno": "WinRMHook"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "WinRMOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "WinRMOperator"
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "WinRMOperator"
            }
        ]
    },
    "contrib.example_dags.example_twitter_dag": {
        "fetchtweets": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "cleantweets": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "analyzetweets": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "transfertodb": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "fetch_tweets": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "clean_tweets": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "analyze_tweets": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "hive_to_mysql": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "from_channels": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "to_channels": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "yesterday": [
            {
                "type": "var",
                "anno": "date"
            }
        ],
        "dt": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "local_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "hdfs_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "file_name": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "load_to_hdfs": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "load_to_hive": [
            {
                "type": "var",
                "anno": "HiveOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_translate": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "product_set_create": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "translation_access": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "contrib.example_dags.example_kubernetes_executor_config": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "start_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "third_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "test_volume_mount": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "second_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_sql": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "INSTANCE_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "INSTANCE_NAME2": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DB_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "EXPORT_URI": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "IMPORT_URI": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FAILOVER_REPLICA_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "READ_REPLICA_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "body2": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "read_replica_body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "patch_body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "export_body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "import_body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "db_create_body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "db_patch_body": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "sql_instance_create_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceCreateOperator"
            }
        ],
        "sql_instance_create_2_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceCreateOperator"
            }
        ],
        "sql_instance_read_replica_create": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceCreateOperator"
            }
        ],
        "sql_instance_patch_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstancePatchOperator"
            }
        ],
        "sql_instance_patch_task2": [
            {
                "type": "var",
                "anno": "CloudSqlInstancePatchOperator"
            }
        ],
        "sql_db_create_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDatabaseCreateOperator"
            }
        ],
        "sql_db_create_task2": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDatabaseCreateOperator"
            }
        ],
        "sql_db_patch_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDatabasePatchOperator"
            }
        ],
        "sql_db_patch_task2": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDatabasePatchOperator"
            }
        ],
        "export_url_split": [
            {
                "type": "var",
                "anno": "urlsplit"
            }
        ],
        "sql_gcp_add_bucket_permission_task": [
            {
                "type": "var",
                "anno": "GoogleCloudStorageBucketCreateAclEntryOperator"
            }
        ],
        "sql_export_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceExportOperator"
            }
        ],
        "sql_export_task2": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceExportOperator"
            }
        ],
        "import_url_split": [
            {
                "type": "var",
                "anno": "urlsplit"
            }
        ],
        "sql_gcp_add_object_permission_task": [
            {
                "type": "var",
                "anno": "GoogleCloudStorageObjectCreateAclEntryOperator"
            }
        ],
        "sql_gcp_add_bucket_permission_2_task": [
            {
                "type": "var",
                "anno": "GoogleCloudStorageBucketCreateAclEntryOperator"
            }
        ],
        "sql_import_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceImportOperator"
            }
        ],
        "sql_import_task2": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceImportOperator"
            }
        ],
        "sql_db_delete_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDatabaseDeleteOperator"
            }
        ],
        "sql_db_delete_task2": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDatabaseDeleteOperator"
            }
        ],
        "sql_instance_failover_replica_delete_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDeleteOperator"
            }
        ],
        "sql_instance_read_replica_delete_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDeleteOperator"
            }
        ],
        "sql_instance_delete_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDeleteOperator"
            }
        ],
        "sql_instance_delete_task2": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDeleteOperator"
            }
        ],
        "sql_instance_delete_2_task": [
            {
                "type": "var",
                "anno": "CloudSqlInstanceDeleteOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcp_dataproc_create_cluster": {
        "PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CLUSTER_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "REGION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ZONE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "create_cluster": [
            {
                "type": "var",
                "anno": "DataprocClusterCreateOperator"
            }
        ],
        "delete_cluster": [
            {
                "type": "var",
                "anno": "DataprocClusterDeleteOperator"
            }
        ]
    },
    "contrib.example_dags.example_kubernetes_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "tolerations": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "k": [
            {
                "type": "var",
                "anno": "KubernetesPodOperator"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ]
    },
    "contrib.example_dags.example_gcp_dataproc_pig_operator": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "CLUSTER_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "REGION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "create_task": [
            {
                "type": "var",
                "anno": "DataprocClusterCreateOperator"
            }
        ],
        "pig_task": [
            {
                "type": "var",
                "anno": "DataProcPigOperator"
            }
        ],
        "delete_task": [
            {
                "type": "var",
                "anno": "DataprocClusterDeleteOperator"
            }
        ]
    },
    "contrib.example_dags.example_pubsub_flow": {
        "project": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "topic": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "subscription": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "messages": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "echo_template": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "PubSubTopicCreateOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "PubSubSubscriptionCreateOperator"
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "PubSubPublishOperator"
            }
        ],
        "t4": [
            {
                "type": "var",
                "anno": "PubSubPullSensor"
            }
        ],
        "t5": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "t6": [
            {
                "type": "var",
                "anno": "PubSubSubscriptionDeleteOperator"
            }
        ],
        "t7": [
            {
                "type": "var",
                "anno": "PubSubTopicDeleteOperator"
            }
        ]
    },
    "contrib.example_dags.example_qubole_sensor": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "QuboleFileSensor"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "QubolePartitionSensor"
            }
        ]
    },
    "contrib.example_dags.example_gcp_spanner": {
        "GCP_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_SPANNER_INSTANCE_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_SPANNER_DATABASE_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_SPANNER_CONFIG_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_SPANNER_NODE_COUNT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_SPANNER_DISPLAY_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "OPERATION_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "spanner_instance_create_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDeployOperator"
            }
        ],
        "spanner_instance_update_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDeployOperator"
            }
        ],
        "spanner_database_deploy_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseDeployOperator"
            }
        ],
        "spanner_database_deploy_task2": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseDeployOperator"
            }
        ],
        "spanner_database_update_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseUpdateOperator"
            }
        ],
        "spanner_database_update_idempotent1_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseUpdateOperator"
            }
        ],
        "spanner_database_update_idempotent2_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseUpdateOperator"
            }
        ],
        "spanner_instance_query_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseQueryOperator"
            }
        ],
        "spanner_instance_query_task2": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseQueryOperator"
            }
        ],
        "spanner_database_delete_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseDeleteOperator"
            }
        ],
        "spanner_database_delete_task2": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDatabaseDeleteOperator"
            }
        ],
        "spanner_instance_delete_task": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDeleteOperator"
            }
        ],
        "spanner_instance_delete_task2": [
            {
                "type": "var",
                "anno": "CloudSpannerInstanceDeleteOperator"
            }
        ]
    },
    "contrib.plugins.metastore_browser.main": {
        "METASTORE_CONN_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "METASTORE_MYSQL_CONN_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PRESTO_CONN_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "HIVE_CLI_CONN_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEFAULT_DB": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DB_WHITELIST": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "DB_BLACKLIST": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "TABLE_SELECTOR_LIMIT": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "MetastoreBrowserView.default_view": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "bp": [
            {
                "type": "var",
                "anno": "Blueprint"
            }
        ],
        "MetastoreBrowserPlugin.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastoreBrowserPlugin.flask_blueprints": [
            {
                "type": "attr",
                "anno": "list[Blueprint]"
            }
        ],
        "MetastoreBrowserPlugin.appbuilder_views": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "MetastoreBrowserView.index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.ddl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.partitions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.db": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.objects": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.gcs_acl_operator": {
        "GoogleCloudStorageBucketCreateAclEntryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageBucketCreateAclEntryOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageBucketCreateAclEntryOperator.entity": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageBucketCreateAclEntryOperator.role": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageBucketCreateAclEntryOperator.user_project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageBucketCreateAclEntryOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageBucketCreateAclEntryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "entity": "str",
                    "role": "str",
                    "user_project": "str",
                    "google_cloud_storage_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.object_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.entity": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.role": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.user_project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object_name": "str",
                    "entity": "str",
                    "role": "str",
                    "user_project": "str",
                    "google_cloud_storage_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageObjectCreateAclEntryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudStorageBucketCreateAclEntryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_endpoint_config_operator": {
        "SageMakerEndpointConfigOperator.integer_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SageMakerEndpointConfigOperator.config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerEndpointConfigOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerEndpointConfigOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.azure_cosmos_operator": {
        "AzureCosmosInsertDocumentOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AzureCosmosInsertDocumentOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosInsertDocumentOperator.database_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosInsertDocumentOperator.collection_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosInsertDocumentOperator.document": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosInsertDocumentOperator.azure_cosmos_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosInsertDocumentOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "database_name": "str",
                    "collection_name": "str",
                    "document": "str",
                    "azure_cosmos_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureCosmosInsertDocumentOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_base_operator": {
        "SageMakerBaseOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "SageMakerBaseOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "SageMakerBaseOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerBaseOperator.integer_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "SageMakerBaseOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerBaseOperator.config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerBaseOperator.hook": [
            {
                "type": "attr",
                "anno": "SagemakerHook"
            }
        ],
        "SageMakerBaseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "aws_conn_id": "str",
                    "args": "Iterable",
                    "kwargs": "Iterable"
                }
            }
        ],
        "SageMakerBaseOperator.parse_integer": [
            {
                "type": "method",
                "args": {
                    "config": "Config",
                    "field": "str"
                }
            }
        ],
        "SageMakerBaseOperator.parse_config_integers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerBaseOperator.expand_role": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerBaseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "SageMakerBaseOperator.preprocess_config": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.gcs_to_s3": {
        "GoogleCloudStorageToS3Operator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageToS3Operator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToS3Operator.dest_aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToS3Operator.dest_s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToS3Operator.dest_verify": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToS3Operator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToS3Operator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "dest_aws_conn_id": "str",
                    "dest_s3_key": "str",
                    "dest_verify": "bool",
                    "replace": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageToS3Operator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_tuning_operator": {
        "SageMakerTuningOperator.integer_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SageMakerTuningOperator.config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerTuningOperator.wait_for_completion": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerTuningOperator.check_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerTuningOperator.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerTuningOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerTuningOperator.expand_role": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTuningOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_transfer_operator": {
        "AwsHook": [
            {
                "type": "var",
                "anno": "AwsHook"
            }
        ],
        "TransferJobPreprocessor.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TransferJobPreprocessor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TransferJobPreprocessor.__init__": [
            {
                "type": "method",
                "args": {
                    "body": "dict",
                    "aws_conn_id": "str"
                }
            }
        ],
        "TransferJobPreprocessor._convert_date_to_dict": [
            {
                "type": "method",
                "args": {
                    "field_date": "date"
                }
            }
        ],
        "TransferJobPreprocessor._reformat_date": [
            {
                "type": "method",
                "args": {
                    "field_key": "str"
                }
            }
        ],
        "TransferJobPreprocessor._convert_time_to_dict": [
            {
                "type": "method",
                "args": {
                    "time_object": "time"
                }
            }
        ],
        "TransferJobPreprocessor._reformat_time": [
            {
                "type": "method",
                "args": {
                    "field_key": "str"
                }
            }
        ],
        "TransferJobPreprocessor._reformat_schedule": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TransferJobValidator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TransferJobValidator.__init__": [
            {
                "type": "method",
                "args": {
                    "body": "dict"
                }
            }
        ],
        "TransferJobValidator._verify_data_source": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TransferJobValidator._restrict_aws_credentials": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TransferJobValidator.validate_body": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceJobCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTransferServiceJobCreateOperator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GcpTransferServiceJobCreateOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobCreateOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobUpdateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTransferServiceJobUpdateOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobUpdateOperator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GcpTransferServiceJobUpdateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobUpdateOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobUpdateOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTransferServiceJobDeleteOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobDeleteOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceJobDeleteOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceJobDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "project_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcpTransferServiceOperationGetOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTransferServiceOperationGetOperator.operation_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationGetOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationGetOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationGetOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceOperationGetOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "operation_name": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "GcpTransferServiceOperationsListOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTransferServiceOperationsListOperator.filter": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "GcpTransferServiceOperationsListOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationsListOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationsListOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceOperationsListOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "request_filter": "Dict",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcpTransferServiceOperationPauseOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTransferServiceOperationPauseOperator.operation_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationPauseOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationPauseOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationPauseOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceOperationPauseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "operation_name": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "GcpTransferServiceOperationResumeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTransferServiceOperationResumeOperator.operation_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationResumeOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationResumeOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationResumeOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceOperationResumeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "operation_name": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcpTransferServiceOperationCancelOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTransferServiceOperationCancelOperator.operation_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationCancelOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationCancelOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferServiceOperationCancelOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceOperationCancelOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "operation_name": "str",
                    "api_version": "str",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.gcs_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.schedule": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.object_conditions": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.transfer_options": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.wait": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "s3_bucket": "str",
                    "gcs_bucket": "str",
                    "project_id": "str",
                    "aws_conn_id": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "description": "str",
                    "schedule": "str",
                    "object_conditions": "str",
                    "transfer_options": "str",
                    "wait": "bool",
                    "timeout": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator._create_body": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.source_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.destination_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.schedule": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.object_conditions": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.transfer_options": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.wait": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_bucket": "str",
                    "destination_bucket": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "description": "str",
                    "schedule": "str",
                    "object_conditions": "str",
                    "transfer_options": "str",
                    "wait": "bool",
                    "timeout": "int",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator._create_body": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceJobUpdateOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceJobUpdateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "body": "dict",
                    "aws_conn_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcpTransferServiceJobCreateOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTransferServiceJobCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "body": "dict",
                    "aws_conn_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcpTransferServiceJobCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcpTransferServiceJobUpdateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcpTransferServiceJobDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcpTransferServiceOperationCancelOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcpTransferServiceOperationGetOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcpTransferServiceOperationsListOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcpTransferServiceOperationPauseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcpTransferServiceOperationResumeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "TransferJobPreprocessor._inject_aws_credentials": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TransferJobPreprocessor.process_body": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageTransferOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "S3ToGoogleCloudStorageTransferOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.spark_jdbc_operator": {
        "SparkJDBCOperator._spark_app_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_conf": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_py_files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._num_executors": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._executor_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._driver_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCOperator._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._cmd_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._jdbc_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._jdbc_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._jdbc_driver": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._metastore_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._jdbc_truncate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCOperator._save_mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._save_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._batch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._fetch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._num_partitions": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._partition_column": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._lower_bound": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._upper_bound": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._create_table_column_types": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "spark_app_name": "str",
                    "spark_conn_id": "str",
                    "spark_conf": "str",
                    "spark_py_files": "str",
                    "spark_files": "str",
                    "spark_jars": "str",
                    "num_executors": "int",
                    "executor_cores": "int",
                    "executor_memory": "int",
                    "driver_memory": "int",
                    "verbose": "bool",
                    "keytab": "str",
                    "principal": "str",
                    "cmd_type": "str",
                    "jdbc_table": "str",
                    "jdbc_conn_id": "str",
                    "jdbc_driver": "str",
                    "metastore_table": "str",
                    "jdbc_truncate": "bool",
                    "save_mode": "str",
                    "save_format": "str",
                    "batch_size": "int",
                    "fetch_size": "int",
                    "num_partitions": "int",
                    "partition_column": "str",
                    "lower_bound": "str",
                    "upper_bound": "str",
                    "create_table_column_types": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkJDBCOperator._hook": [
            {
                "type": "attr",
                "anno": "SparkJDBCHook"
            }
        ],
        "SparkJDBCOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "SparkJDBCOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.grpc_operator": {
        "GrpcOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GrpcOperator.stub_class": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "GrpcOperator.call_func": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "GrpcOperator.grpc_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GrpcOperator.data": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GrpcOperator.interceptors": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "GrpcOperator.custom_connection_func": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "GrpcOperator.streaming": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GrpcOperator.log_response": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GrpcOperator.response_callback": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "GrpcOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "stub_class": "type",
                    "call_func": "Callable",
                    "grpc_conn_id": "str",
                    "data": "dict",
                    "interceptors": "list",
                    "custom_connection_func": "Callable",
                    "streaming": "bool",
                    "response_callback": "Callable",
                    "log_response": "bool",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "GrpcOperator._get_grpc_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GrpcOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GrpcOperator._handle_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict",
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sftp_to_s3_operator": {
        "SFTPToS3Operator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SFTPToS3Operator.sftp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPToS3Operator.sftp_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPToS3Operator.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPToS3Operator.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPToS3Operator.s3_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPToS3Operator.__init__": [
            {
                "type": "method",
                "args": {
                    "s3_bucket": "str",
                    "s3_key": "str",
                    "sftp_path": "str",
                    "sftp_conn_id": "str",
                    "s3_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SFTPToS3Operator.get_s3_key": [
            {
                "type": "method",
                "args": {
                    "s3_key": "str"
                }
            }
        ],
        "SFTPToS3Operator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.s3_copy_object_operator": {
        "S3CopyObjectOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3CopyObjectOperator.source_bucket_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3CopyObjectOperator.dest_bucket_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3CopyObjectOperator.source_bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3CopyObjectOperator.dest_bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3CopyObjectOperator.source_version_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3CopyObjectOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3CopyObjectOperator.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3CopyObjectOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_bucket_key": "str",
                    "dest_bucket_key": "str",
                    "source_bucket_name": "str",
                    "dest_bucket_name": "str",
                    "source_version_id": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3CopyObjectOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.aws_sqs_publish_operator": {
        "SQSPublishOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SQSPublishOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQSPublishOperator.sqs_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQSPublishOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQSPublishOperator.message_content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQSPublishOperator.delay_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SQSPublishOperator.message_attributes": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SQSPublishOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sqs_queue": "str",
                    "message_content": "str",
                    "message_attributes": "dict",
                    "delay_seconds": "int",
                    "aws_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SQSPublishOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_model_operator": {
        "SageMakerModelOperator.config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerModelOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerModelOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "SageMakerModelOperator.expand_role": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.gcp_text_to_speech_operator": {
        "GcpTextToSpeechSynthesizeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.input_data": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.voice": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.audio_config": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.target_bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.target_filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "GcpTextToSpeechSynthesizeOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "input_data": "str",
                    "voice": "str",
                    "audio_config": "str",
                    "target_bucket_name": "str",
                    "target_filename": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcpTextToSpeechSynthesizeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.opsgenie_alert_operator": {
        "OpsgenieAlertOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "OpsgenieAlertOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.opsgenie_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.alias": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.responders": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.visibleTo": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.actions": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.tags": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.details": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.entity": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.source": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.priority": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.note": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertOperator.hook": [
            {
                "type": "attr",
                "anno": "OpsgenieAlertHook"
            }
        ],
        "OpsgenieAlertOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "message": "str",
                    "opsgenie_conn_id": "str",
                    "alias": "str",
                    "description": "str",
                    "responders": "str",
                    "visibleTo": "str",
                    "actions": "str",
                    "tags": "str",
                    "details": "str",
                    "entity": "str",
                    "source": "str",
                    "priority": "str",
                    "user": "str",
                    "note": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "OpsgenieAlertOperator._build_opsgenie_payload": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OpsgenieAlertOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.databricks_operator": {
        "XCOM_RUN_ID_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "XCOM_RUN_PAGE_URL_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DatabricksSubmitRunOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.json": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatabricksSubmitRunOperator.databricks_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.polling_period_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksSubmitRunOperator.databricks_retry_limit": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksSubmitRunOperator.databricks_retry_delay": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksSubmitRunOperator.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.do_xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DatabricksSubmitRunOperator._get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DatabricksRunNowOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DatabricksRunNowOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksRunNowOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksRunNowOperator.json": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatabricksRunNowOperator.databricks_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksRunNowOperator.polling_period_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksRunNowOperator.databricks_retry_limit": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksRunNowOperator.databricks_retry_delay": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksRunNowOperator.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksRunNowOperator.do_xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DatabricksRunNowOperator._get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_deep_string_coerce": [
            {
                "type": "func",
                "args": {
                    "content": "dict",
                    "json_path": "str"
                }
            }
        ],
        "DatabricksRunNowOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "json": "dict",
                    "notebook_params": "dict",
                    "python_params": "dict",
                    "spark_submit_params": "dict",
                    "databricks_conn_id": "str",
                    "polling_period_seconds": "int",
                    "databricks_retry_limit": "int",
                    "databricks_retry_delay": "int",
                    "do_xcom_push": "bool",
                    "kwargs": "dict"
                }
            }
        ],
        "DatabricksSubmitRunOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "json": "dict",
                    "spark_jar_task": "str",
                    "notebook_task": "str",
                    "new_cluster": "str",
                    "existing_cluster_id": "str",
                    "libraries": "dict",
                    "run_name": "str",
                    "timeout_seconds": "int",
                    "databricks_conn_id": "str",
                    "polling_period_seconds": "int",
                    "databricks_retry_limit": "int",
                    "databricks_retry_delay": "int",
                    "do_xcom_push": "bool",
                    "kwargs": "dict"
                }
            }
        ],
        "DatabricksRunNowOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DatabricksSubmitRunOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_handle_databricks_operator_execution": [
            {
                "type": "func",
                "args": {
                    "operator": "BaseOperator",
                    "hook": "DatabricksHook",
                    "log": "AirflowException",
                    "context": "dict"
                }
            }
        ],
        "DatabricksRunNowOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DatabricksSubmitRunOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.ecs_operator": {
        "ECSOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.client": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.arn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "ECSOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.task_definition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.cluster": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.overrides": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.launch_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.group": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.placement_constraints": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.platform_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.network_configuration": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.hook": [
            {
                "type": "attr",
                "anno": "AwsHook"
            }
        ],
        "ECSOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ECSOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "task_definition": "str",
                    "cluster": "str",
                    "overrides": "str",
                    "aws_conn_id": "str",
                    "region_name": "str",
                    "launch_type": "str",
                    "group": "str",
                    "placement_constraints": "str",
                    "platform_version": "str",
                    "network_configuration": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "ECSOperator._wait_for_task_ended": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ECSOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "ECSOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ECSOperator._check_success_task": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.sns_publish_operator": {
        "SnsPublishOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SnsPublishOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SnsPublishOperator.target_arn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnsPublishOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnsPublishOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnsPublishOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "target_arn": "str",
                    "message": "str",
                    "aws_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SnsPublishOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_bigtable_operator": {
        "BigtableValidationMixin.REQUIRED_ATTRIBUTES": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableInstanceCreateOperator.REQUIRED_ATTRIBUTES": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableInstanceCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableInstanceCreateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceCreateOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceCreateOperator.main_cluster_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceCreateOperator.main_cluster_zone": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceCreateOperator.replica_cluster_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceCreateOperator.replica_cluster_zone": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceCreateOperator.instance_display_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceCreateOperator.instance_type": [
            {
                "type": "attr",
                "anno": "enums.Instance.Type"
            }
        ],
        "BigtableInstanceCreateOperator.instance_labels": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceCreateOperator.cluster_nodes": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigtableInstanceCreateOperator.cluster_storage_type": [
            {
                "type": "attr",
                "anno": "enums.StorageType"
            }
        ],
        "BigtableInstanceCreateOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "BigtableInstanceCreateOperator.hook": [
            {
                "type": "attr",
                "anno": "BigtableHook"
            }
        ],
        "BigtableInstanceDeleteOperator.REQUIRED_ATTRIBUTES": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableInstanceDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableInstanceDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceDeleteOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableInstanceDeleteOperator.hook": [
            {
                "type": "attr",
                "anno": "BigtableHook"
            }
        ],
        "BigtableTableCreateOperator.REQUIRED_ATTRIBUTES": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableTableCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableTableCreateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableCreateOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableCreateOperator.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableCreateOperator.initial_split_keys": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableTableCreateOperator.column_families": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigtableTableCreateOperator.hook": [
            {
                "type": "attr",
                "anno": "BigtableHook"
            }
        ],
        "BigtableTableCreateOperator.instance": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableDeleteOperator.REQUIRED_ATTRIBUTES": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableTableDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableTableDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableDeleteOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableDeleteOperator.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableDeleteOperator.app_profile_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableDeleteOperator.hook": [
            {
                "type": "attr",
                "anno": "BigtableHook"
            }
        ],
        "BigtableClusterUpdateOperator.REQUIRED_ATTRIBUTES": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableClusterUpdateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableClusterUpdateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableClusterUpdateOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableClusterUpdateOperator.cluster_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableClusterUpdateOperator.nodes": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableClusterUpdateOperator.hook": [
            {
                "type": "attr",
                "anno": "BigtableHook"
            }
        ],
        "BigtableTableWaitForReplicationSensor.REQUIRED_ATTRIBUTES": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableTableWaitForReplicationSensor.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigtableTableWaitForReplicationSensor.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableWaitForReplicationSensor.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableWaitForReplicationSensor.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigtableTableWaitForReplicationSensor.hook": [
            {
                "type": "attr",
                "anno": "BigtableHook"
            }
        ],
        "BigtableInstanceCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigtableInstanceDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigtableValidationMixin._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigtableTableWaitForReplicationSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "table_id": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigtableClusterUpdateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "cluster_id": "str",
                    "nodes": "Iterable[str]",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigtableTableDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "table_id": "str",
                    "project_id": "str",
                    "app_profile_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigtableTableCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "table_id": "str",
                    "project_id": "str",
                    "initial_split_keys": "Iterable[str]",
                    "column_families": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigtableInstanceDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigtableInstanceCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "main_cluster_id": "str",
                    "main_cluster_zone": "str",
                    "project_id": "str",
                    "replica_cluster_id": "str",
                    "replica_cluster_zone": "str",
                    "instance_display_name": "str",
                    "instance_type": "enums.Instance.Type",
                    "instance_labels": "str",
                    "cluster_nodes": "int",
                    "cluster_storage_type": "enums.StorageType",
                    "timeout": "float",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigtableTableCreateOperator._compare_column_families": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigtableTableWaitForReplicationSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigtableClusterUpdateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigtableTableDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigtableTableCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sqoop_operator": {
        "SqoopOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SqoopOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.cmd_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.target_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.append": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.file_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.columns": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.num_mappers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SqoopOperator.split_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.where": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.export_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_null_string": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_null_non_string": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.staging_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.clear_staging_table": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.enclosed_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.escaped_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_fields_terminated_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_lines_terminated_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_optionally_enclosed_by": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.batch": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.direct": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.driver": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.relaxed_isolation": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.hcatalog_database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.hcatalog_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.create_hcatalog_table": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.extra_import_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SqoopOperator.extra_export_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SqoopOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "cmd_type": "str",
                    "table": "str",
                    "query": "str",
                    "target_dir": "str",
                    "append": "bool",
                    "file_type": "str",
                    "columns": "str",
                    "num_mappers": "int",
                    "split_by": "str",
                    "where": "str",
                    "export_dir": "str",
                    "input_null_string": "str",
                    "input_null_non_string": "str",
                    "staging_table": "str",
                    "clear_staging_table": "bool",
                    "enclosed_by": "str",
                    "escaped_by": "str",
                    "input_fields_terminated_by": "str",
                    "input_lines_terminated_by": "str",
                    "input_optionally_enclosed_by": "str",
                    "batch": "bool",
                    "direct": "bool",
                    "driver": "str",
                    "verbose": "bool",
                    "relaxed_isolation": "bool",
                    "properties": "str",
                    "hcatalog_database": "str",
                    "hcatalog_table": "str",
                    "create_hcatalog_table": "bool",
                    "extra_import_options": "dict",
                    "extra_export_options": "dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SqoopOperator.hook": [
            {
                "type": "attr",
                "anno": "SqoopHook"
            }
        ],
        "SqoopOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SqoopOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcs_delete_operator": {
        "GoogleCloudStorageDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "GoogleCloudStorageDeleteOperator.bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDeleteOperator.objects": [
            {
                "type": "attr",
                "anno": "Optional[Iterable[str]]"
            }
        ],
        "GoogleCloudStorageDeleteOperator.prefix": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "GoogleCloudStorageDeleteOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDeleteOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "GoogleCloudStorageDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "objects": "Optional[Iterable[str]]",
                    "prefix": "Optional[str]",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "Optional[str]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "GoogleCloudStorageDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sftp_operator": {
        "SFTPOperation.PUT": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperation.GET": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SFTPOperator.ssh_hook": [
            {
                "type": "attr",
                "anno": "SSHHook"
            }
        ],
        "SFTPOperator.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.local_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.remote_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.operation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.confirm": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SFTPOperator.create_intermediate_dirs": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "_make_intermediate_dirs": [
            {
                "type": "func",
                "args": {
                    "sftp_client": "SftpClient",
                    "remote_directory": "str"
                }
            }
        ],
        "SFTPOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "SFTPOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "ssh_hook": "SSHHook",
                    "ssh_conn_id": "str",
                    "remote_host": "str",
                    "local_filepath": "str",
                    "remote_filepath": "str",
                    "operation": "str",
                    "confirm": "bool",
                    "create_intermediate_dirs": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.operators.qubole_operator": {
        "QDSLink.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "QuboleOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "QuboleOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleOperator.qubole_hook_allowed_args_list": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "QuboleOperator.operator_extra_links": [
            {
                "type": "attr",
                "anno": "Iterable[BaseOperatorLink]"
            }
        ],
        "QuboleOperator.args": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleOperator.kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "QuboleOperator.hook": [
            {
                "type": "attr",
                "anno": "QuboleHook"
            }
        ],
        "QuboleOperator.on_failure_callback": [
            {
                "type": "attr",
                "anno": "Callable[[str], None]"
            }
        ],
        "QuboleOperator.on_retry_callback": [
            {
                "type": "attr",
                "anno": "Callable[[str], None]"
            }
        ],
        "QuboleOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuboleOperator.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "QuboleOperator.__setattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "str"
                }
            }
        ],
        "QuboleOperator.get_log": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleOperator.get_jobs_id": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleOperator._get_filtered_args": [
            {
                "type": "method",
                "args": {
                    "all_kwargs": "dict"
                }
            }
        ],
        "QuboleOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "qubole_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QDSLink.get_link": [
            {
                "type": "method",
                "args": {
                    "operator": "Qubole",
                    "dttm": "str"
                }
            }
        ],
        "QuboleOperator.on_kill": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleOperator.get_results": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "fp": "str",
                    "inline": "bool",
                    "delim": "str",
                    "fetch": "bool"
                }
            }
        ]
    },
    "contrib.operators.s3_to_gcs_operator": {
        "S3ToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3ToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator.dest_gcs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator.dest_gcs": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToGoogleCloudStorageOperator.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator._gcs_object_is_directory": [
            {
                "type": "method",
                "args": {
                    "object": "str"
                }
            }
        ],
        "S3ToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "S3ToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "dest_gcs_conn_id": "str",
                    "dest_gcs": "str",
                    "delegate_to": "str",
                    "replace": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.operators.vertica_to_hive": {
        "VerticaToHiveTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaToHiveTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaToHiveTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.hive_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.partition": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VerticaToHiveTransfer.create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VerticaToHiveTransfer.recreate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VerticaToHiveTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.vertica_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "hive_table": "str",
                    "create": "bool",
                    "recreate": "bool",
                    "partition": "dict",
                    "delimiter": "str",
                    "vertica_conn_id": "str",
                    "hive_cli_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "VerticaToHiveTransfer.type_map": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "vertica_type": "str"
                }
            }
        ],
        "VerticaToHiveTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.adls_to_gcs": {
        "AdlsToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AdlsToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AdlsToGoogleCloudStorageOperator.src_adls": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AdlsToGoogleCloudStorageOperator.dest_gcs": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AdlsToGoogleCloudStorageOperator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "AdlsToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AdlsToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AdlsToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "src_adls": "str",
                    "dest_gcs": "str",
                    "azure_data_lake_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "replace": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AdlsToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.qubole_check_operator": {
        "QuboleCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "QuboleCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "QuboleCheckOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleCheckOperator.on_failure_callback": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleCheckOperator.on_retry_callback": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleCheckOperator.hook": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleValueCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "QuboleValueCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleValueCheckOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleValueCheckOperator.on_failure_callback": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleValueCheckOperator.on_retry_callback": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleValueCheckOperator.hook": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "get_sql_from_qbol_cmd": [
            {
                "type": "func",
                "args": {
                    "params": "dict"
                }
            }
        ],
        "QuboleValueCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "pass_value": "str",
                    "tolerance": "float",
                    "qubole_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "qubole_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.__setattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "QuboleCheckOperator.__setattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "str"
                }
            }
        ],
        "QuboleCheckOperator.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.get_hook": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuboleCheckOperator.get_hook": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "QuboleCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuboleCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "handle_airflow_exception": [
            {
                "type": "func",
                "args": {
                    "airflow_exception": "AirflowException",
                    "hook": "QuboleCheckHook"
                }
            }
        ]
    },
    "contrib.operators.aws_athena_operator": {
        "AWSAthenaOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSAthenaOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AWSAthenaOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AWSAthenaOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSAthenaOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSAthenaOperator.output_location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSAthenaOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSAthenaOperator.client_request_token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSAthenaOperator.query_execution_context": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AWSAthenaOperator.result_configuration": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AWSAthenaOperator.sleep_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AWSAthenaOperator.max_tries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AWSAthenaOperator.query_execution_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSAthenaOperator.hook": [
            {
                "type": "attr",
                "anno": "AWSAthenaHook"
            }
        ],
        "AWSAthenaOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "database": "str",
                    "output_location": "str",
                    "aws_conn_id": "str",
                    "client_request_token": "str",
                    "query_execution_context": "dict",
                    "result_configuration": "dict",
                    "sleep_time": "int",
                    "max_tries": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AWSAthenaOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSAthenaOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "AWSAthenaOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.mysql_to_gcs": {
        "MySqlToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.type_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.ensure_utc": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "mysql_conn_id": "str",
                    "ensure_utc": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MySqlToGoogleCloudStorageOperator.convert_type": [
            {
                "type": "method",
                "args": {
                    "value": "Union[datetime, date, timedelta, Decimal, None]",
                    "schema_type": "str"
                }
            }
        ],
        "MySqlToGoogleCloudStorageOperator.query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MySqlToGoogleCloudStorageOperator.field_to_bigquery": [
            {
                "type": "method",
                "args": {
                    "field": "tuple"
                }
            }
        ]
    },
    "contrib.operators.gcp_natural_language_operator": {
        "CloudLanguageAnalyzeEntitiesOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudLanguageAnalyzeEntitiesOperator.document": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeEntitiesOperator.encoding_type": [
            {
                "type": "attr",
                "anno": "enums.EncodingType"
            }
        ],
        "CloudLanguageAnalyzeEntitiesOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudLanguageAnalyzeEntitiesOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudLanguageAnalyzeEntitiesOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeEntitiesOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeEntitiesOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "document": "str",
                    "encoding_type": "enums.EncodingType",
                    "retry": "int",
                    "timeout": "float",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.document": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.encoding_type": [
            {
                "type": "attr",
                "anno": "enums.EncodingType"
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "document": "str",
                    "encoding_type": "enums.EncodingType",
                    "retry": "int",
                    "timeout": "float",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.document": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.encoding_type": [
            {
                "type": "attr",
                "anno": "enums.EncodingType"
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "document": "str",
                    "encoding_type": "enums.EncodingType",
                    "retry": "int",
                    "timeout": "float",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudLanguageClassifyTextOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudLanguageClassifyTextOperator.document": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageClassifyTextOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudLanguageClassifyTextOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudLanguageClassifyTextOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageClassifyTextOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudLanguageClassifyTextOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "document": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudLanguageClassifyTextOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudLanguageAnalyzeSentimentOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudLanguageAnalyzeEntitySentimentOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudLanguageAnalyzeEntitiesOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcs_list_operator": {
        "GoogleCloudStorageListOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "GoogleCloudStorageListOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "Iterable",
                    "kwargs": "Iterable"
                }
            }
        ],
        "GoogleCloudStorageListOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.pubsub_operator": {
        "PubSubTopicCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PubSubTopicCreateOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.topic": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.fail_if_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubTopicCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "fail_if_exists": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubSubscriptionCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PubSubSubscriptionCreateOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.topic_project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.topic": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.subscription": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.subscription_project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.ack_deadline_secs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "PubSubSubscriptionCreateOperator.fail_if_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubSubscriptionCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "topic_project": "str",
                    "topic": "str",
                    "subscription": "str",
                    "subscription_project": "str",
                    "ack_deadline_secs": "int",
                    "fail_if_exists": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubTopicDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PubSubTopicDeleteOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.topic": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.fail_if_not_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubTopicDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "fail_if_not_exists": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubSubscriptionDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PubSubSubscriptionDeleteOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.subscription": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.fail_if_not_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubSubscriptionDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "fail_if_not_exists": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubPublishOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PubSubPublishOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.topic": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.messages": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "messages": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubPublishOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PubSubTopicCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PubSubTopicDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PubSubSubscriptionCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PubSubSubscriptionDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.bigquery_operator": {
        "BigQueryConsoleLink.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigQueryOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigQueryOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.operator_extra_links": [
            {
                "type": "attr",
                "anno": "Iterable[BaseOperatorLink]"
            }
        ],
        "BigQueryOperator.sql": [
            {
                "type": "attr",
                "anno": "Union[str, Iterable]"
            }
        ],
        "BigQueryOperator.destination_dataset_table": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryOperator.write_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.create_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.allow_large_results": [
            {
                "type": "attr",
                "anno": "Optional[bool]"
            }
        ],
        "BigQueryOperator.flatten_results": [
            {
                "type": "attr",
                "anno": "Optional[bool]"
            }
        ],
        "BigQueryOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryOperator.udf_config": [
            {
                "type": "attr",
                "anno": "Optional[list]"
            }
        ],
        "BigQueryOperator.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryOperator.maximum_billing_tier": [
            {
                "type": "attr",
                "anno": "Optional[int]"
            }
        ],
        "BigQueryOperator.maximum_bytes_billed": [
            {
                "type": "attr",
                "anno": "Optional[float]"
            }
        ],
        "BigQueryOperator.schema_update_options": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryOperator.query_params": [
            {
                "type": "attr",
                "anno": "Optional[list]"
            }
        ],
        "BigQueryOperator.labels": [
            {
                "type": "attr",
                "anno": "Optional[dict]"
            }
        ],
        "BigQueryOperator.bq_cursor": [
            {
                "type": "attr",
                "anno": "Optional[Union[str, Iterable]]"
            }
        ],
        "BigQueryOperator.priority": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryOperator.time_partitioning": [
            {
                "type": "attr",
                "anno": "Optional[dict]"
            }
        ],
        "BigQueryOperator.api_resource_configs": [
            {
                "type": "attr",
                "anno": "Optional[dict]"
            }
        ],
        "BigQueryOperator.cluster_fields": [
            {
                "type": "attr",
                "anno": "Optional[List[str]]"
            }
        ],
        "BigQueryOperator.location": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryOperator.encryption_configuration": [
            {
                "type": "attr",
                "anno": "Optional[dict]"
            }
        ],
        "BigQueryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "Union[str, Iterable]",
                    "destination_dataset_table": "Optional[str]",
                    "write_disposition": "Optional[str]",
                    "allow_large_results": "Optional[bool]",
                    "flatten_results": "Optional[bool]",
                    "bigquery_conn_id": "Optional[str]",
                    "delegate_to": "Optional[str]",
                    "udf_config": "Optional[list]",
                    "use_legacy_sql": "Optional[bool]",
                    "maximum_billing_tier": "Optional[int]",
                    "maximum_bytes_billed": "Optional[float]",
                    "create_disposition": "Optional[str]",
                    "schema_update_options": "Optional[tuple]",
                    "query_params": "Optional[list]",
                    "labels": "Optional[dict]",
                    "priority": "Optional[str]",
                    "time_partitioning": "Optional[dict]",
                    "api_resource_configs": "Optional[dict]",
                    "cluster_fields": "Optional[List[str]]",
                    "location": "Optional[str]",
                    "encryption_configuration": "Optional[dict]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BigQueryCreateEmptyTableOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigQueryCreateEmptyTableOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.schema_fields": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateEmptyTableOperator.gcs_schema_object": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryCreateEmptyTableOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryCreateEmptyTableOperator.time_partitioning": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateEmptyTableOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateEmptyTableOperator.encryption_configuration": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryCreateEmptyTableOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str",
                    "project_id": "Optional[str]",
                    "schema_fields": "Optional[dict]",
                    "gcs_schema_object": "Optional[str]",
                    "time_partitioning": "Optional[dict]",
                    "bigquery_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "Optional[str]",
                    "labels": "Optional[dict]",
                    "encryption_configuration": "Optional[str]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BigQueryCreateExternalTableOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigQueryCreateExternalTableOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.source_objects": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigQueryCreateExternalTableOperator.schema_object": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryCreateExternalTableOperator.destination_project_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.schema_fields": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryCreateExternalTableOperator.source_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.compression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.skip_leading_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryCreateExternalTableOperator.field_delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.max_bad_records": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryCreateExternalTableOperator.quote_character": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryCreateExternalTableOperator.allow_quoted_newlines": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryCreateExternalTableOperator.allow_jagged_rows": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryCreateExternalTableOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryCreateExternalTableOperator.src_fmt_configs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateExternalTableOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateExternalTableOperator.encryption_configuration": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BigQueryCreateExternalTableOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "source_objects": "Iterable[str]",
                    "destination_project_dataset_table": "str",
                    "schema_fields": "Optional[str]",
                    "schema_object": "Optional[str]",
                    "source_format": "str",
                    "compression": "str",
                    "skip_leading_rows": "int",
                    "field_delimiter": "str",
                    "max_bad_records": "int",
                    "quote_character": "Optional[str]",
                    "allow_quoted_newlines": "bool",
                    "allow_jagged_rows": "bool",
                    "bigquery_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "Optional[str]",
                    "src_fmt_configs": "dict",
                    "labels": "Optional[str]",
                    "encryption_configuration": "Optional[str]",
                    "args": "Union[str, Iterable[str]]",
                    "kwargs": "Union[str, Iterable[str]]"
                }
            }
        ],
        "BigQueryDeleteDatasetOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigQueryDeleteDatasetOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryDeleteDatasetOperator.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryDeleteDatasetOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryDeleteDatasetOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryDeleteDatasetOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.dataset_reference": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryCreateEmptyTableOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryCreateExternalTableOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryDeleteDatasetOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryConsoleLink.get_link": [
            {
                "type": "method",
                "args": {
                    "operator": "BaseOperator",
                    "dttm": "datetime"
                }
            }
        ],
        "BigQueryCreateEmptyDatasetOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "project_id": "Optional[str]",
                    "dataset_reference": "dict",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "BigQueryDeleteDatasetOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "project_id": "Optional[str]",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "BigQueryOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.redis_publish_operator": {
        "RedisPublishOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "RedisPublishOperator.redis_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisPublishOperator.channel": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisPublishOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisPublishOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "channel": "str",
                    "message": "str",
                    "redis_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "RedisPublishOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_cloud_build_operator": {
        "REGEX_REPO_PATH": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "BuildProcessor.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BuildProcessor.__init__": [
            {
                "type": "method",
                "args": {
                    "body": "dict"
                }
            }
        ],
        "BuildProcessor._verify_source": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudBuildCreateBuildOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudBuildCreateBuildOperator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudBuildCreateBuildOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudBuildCreateBuildOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudBuildCreateBuildOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudBuildCreateBuildOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudBuildCreateBuildOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "body": "dict",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BuildProcessor._convert_storage_url_to_dict": [
            {
                "type": "method",
                "args": {
                    "storage_url": "str"
                }
            }
        ],
        "BuildProcessor._reformat_storage_source": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BuildProcessor._convert_repo_url_to_dict": [
            {
                "type": "method",
                "args": {
                    "source": "str"
                }
            }
        ],
        "BuildProcessor._reformat_repo_source": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BuildProcessor._reformat_source": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BuildProcessor.process_body": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudBuildCreateBuildOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.wasb_delete_blob_operator": {
        "WasbDeleteBlobOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "WasbDeleteBlobOperator.wasb_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbDeleteBlobOperator.container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbDeleteBlobOperator.blob_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbDeleteBlobOperator.check_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "WasbDeleteBlobOperator.is_prefix": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WasbDeleteBlobOperator.ignore_if_missing": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WasbDeleteBlobOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "blob_name": "str",
                    "wasb_conn_id": "str",
                    "check_options": "dict",
                    "is_prefix": "bool",
                    "ignore_if_missing": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbDeleteBlobOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.segment_track_event_operator": {
        "SegmentTrackEventOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SegmentTrackEventOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentTrackEventOperator.user_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentTrackEventOperator.event": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentTrackEventOperator.properties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SegmentTrackEventOperator.segment_debug_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SegmentTrackEventOperator.segment_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentTrackEventOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "user_id": "str",
                    "event": "str",
                    "properties": "dict",
                    "segment_conn_id": "str",
                    "segment_debug_mode": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SegmentTrackEventOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.adls_list_operator": {
        "AzureDataLakeStorageListOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "AzureDataLakeStorageListOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureDataLakeStorageListOperator.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureDataLakeStorageListOperator.azure_data_lake_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureDataLakeStorageListOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "azure_data_lake_conn_id": "str",
                    "args": "Iterable",
                    "kwargs": "Iterable"
                }
            }
        ],
        "AzureDataLakeStorageListOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.datastore_export_operator": {
        "DatastoreExportOperator.datastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.entity_filter": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatastoreExportOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatastoreExportOperator.polling_interval_in_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatastoreExportOperator.overwrite_existing": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DatastoreExportOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "namespace": "str",
                    "datastore_conn_id": "str",
                    "cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "entity_filter": "dict",
                    "labels": "dict",
                    "polling_interval_in_seconds": "int",
                    "overwrite_existing": "bool",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "DatastoreExportOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_spanner_operator": {
        "CloudSpannerInstanceDeployOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDeployOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDeployOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDeployOperator.configuration_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDeployOperator.node_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudSpannerInstanceDeployOperator.display_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDeployOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDeployOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudSpannerHook"
            }
        ],
        "CloudSpannerInstanceDeployOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSpannerInstanceDeployOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "configuration_name": "str",
                    "node_count": "int",
                    "display_name": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSpannerInstanceDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDeleteOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDeleteOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudSpannerHook"
            }
        ],
        "CloudSpannerInstanceDeleteOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSpannerInstanceDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.database_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudSpannerHook"
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "database_id": "str",
                    "query": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.sanitize_queries": [
            {
                "type": "method",
                "args": {
                    "queries": "list"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.database_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.ddl_statements": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudSpannerHook"
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "database_id": "str",
                    "ddl_statements": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.database_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.ddl_statements": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.operation_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudSpannerHook"
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "database_id": "str",
                    "ddl_statements": "str",
                    "project_id": "str",
                    "operation_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator.instance_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator.database_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudSpannerHook"
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "database_id": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSpannerInstanceDeployOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseDeployOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseQueryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSpannerInstanceDatabaseUpdateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSpannerInstanceDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sql_to_gcs": {
        "BaseSQLToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.schema_filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.approx_max_file_size_bytes": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.export_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.field_delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.gzip": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.schema": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.parameters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "bucket": "str",
                    "filename": "str",
                    "schema_filename": "str",
                    "approx_max_file_size_bytes": "int",
                    "export_format": "str",
                    "field_delimiter": "str",
                    "gzip": "bool",
                    "schema": "list",
                    "parameters": "list",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator._configure_csv_file": [
            {
                "type": "method",
                "args": {
                    "file_handle": "str",
                    "schema": "list"
                }
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.field_to_bigquery": [
            {
                "type": "method",
                "args": {
                    "field": "str"
                }
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.convert_type": [
            {
                "type": "method",
                "args": {
                    "value": "str",
                    "schema_type": "str"
                }
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.convert_types": [
            {
                "type": "method",
                "args": {
                    "schema": "list",
                    "col_type_dict": "dict",
                    "row": "list"
                }
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator._write_local_schema_file": [
            {
                "type": "method",
                "args": {
                    "cursor": "GoogleCloudStorageHook"
                }
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator._get_col_type_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator._write_local_data_files": [
            {
                "type": "method",
                "args": {
                    "cursor": "GoogleCloudStorageHook"
                }
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator._upload_to_gcs": [
            {
                "type": "method",
                "args": {
                    "files_to_upload": "list"
                }
            }
        ],
        "BaseSQLToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.postgres_to_gcs_operator": {
        "PostgresToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.type_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.postgres_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "postgres_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PostgresToGoogleCloudStorageOperator.convert_type": [
            {
                "type": "method",
                "args": {
                    "value": "object",
                    "schema_type": "str"
                }
            }
        ],
        "PostgresToGoogleCloudStorageOperator.query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PostgresToGoogleCloudStorageOperator.field_to_bigquery": [
            {
                "type": "method",
                "args": {
                    "field": "tuple"
                }
            }
        ]
    },
    "contrib.operators.hipchat_operator": {
        "HipChatAPIOperator.token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HipChatAPIOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "token": "str",
                    "base_url": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HipChatAPIOperator.prepare_request": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HipChatAPISendRoomNotificationOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.room_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.message_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.frm": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.attach_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.notify": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.card": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "room_id": "str",
                    "message": "str",
                    "message_format": "str",
                    "color": "str",
                    "frm": "str",
                    "attach_to": "str",
                    "notify": "bool",
                    "card": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HipChatAPISendRoomNotificationOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.prepare_request": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HipChatAPIOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_dlp_operator": {
        "CloudDLPCancelDLPJobOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPCancelDLPJobOperator.dlp_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCancelDLPJobOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCancelDLPJobOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCancelDLPJobOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCancelDLPJobOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCancelDLPJobOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCancelDLPJobOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dlp_job_id": "str",
                    "project_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.deidentify_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "deidentify_template": "str",
                    "template_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPCreateDLPJobOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPCreateDLPJobOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDLPJobOperator.inspect_job": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDLPJobOperator.risk_job": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDLPJobOperator.job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDLPJobOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDLPJobOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDLPJobOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDLPJobOperator.wait_until_finished": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudDLPCreateDLPJobOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateDLPJobOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "inspect_job": "str",
                    "risk_job": "str",
                    "job_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "wait_until_finished": "bool",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.inspect_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "inspect_template": "str",
                    "template_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPCreateJobTriggerOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPCreateJobTriggerOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateJobTriggerOperator.job_trigger": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateJobTriggerOperator.trigger_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateJobTriggerOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateJobTriggerOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateJobTriggerOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateJobTriggerOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateJobTriggerOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_trigger": "str",
                    "trigger_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.config": [
            {
                "type": "attr",
                "anno": "Config"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.stored_info_type_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.metadata": [
            {
                "type": "attr",
                "anno": "Metadata"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "config": "Config",
                    "stored_info_type_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "Metadata",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPDeidentifyContentOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPDeidentifyContentOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.deidentify_config": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.inspect_config": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.item": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.inspect_template_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.deidentify_template_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeidentifyContentOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "deidentify_config": "str",
                    "inspect_config": "str",
                    "item": "str",
                    "inspect_template_name": "str",
                    "deidentify_template_name": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPDeleteDlpJobOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPDeleteDlpJobOperator.dlp_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteDlpJobOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteDlpJobOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPDeleteDlpJobOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPDeleteDlpJobOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPDeleteDlpJobOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteDlpJobOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dlp_job_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.job_trigger_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_trigger_id": "str",
                    "project_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.stored_info_type_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "stored_info_type_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPGetDlpJobOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPGetDlpJobOperator.dlp_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDlpJobOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDlpJobOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDlpJobOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDlpJobOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPGetDlpJobOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetDlpJobOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dlp_job_id": "str",
                    "project_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPGetInspectTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPGetInspectTemplateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetInspectTemplateOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetInspectTemplateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetInspectTemplateOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPGetInspectTemplateOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPGetInspectTemplateOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPGetInspectTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetInspectTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPGetJobTripperOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPGetJobTripperOperator.job_trigger_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetJobTripperOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetJobTripperOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetJobTripperOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetJobTripperOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetJobTripperOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetJobTripperOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_trigger_id": "str",
                    "project_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.stored_info_type_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "stored_info_type_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPInspectContentOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPInspectContentOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPInspectContentOperator.inspect_config": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPInspectContentOperator.item": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPInspectContentOperator.inspect_template_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPInspectContentOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPInspectContentOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPInspectContentOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPInspectContentOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPInspectContentOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "inspect_config": "str",
                    "item": "str",
                    "inspect_template_name": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.order_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "page_size": "int",
                    "order_by": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPListDlpJobsOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPListDlpJobsOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDlpJobsOperator.results_filter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDlpJobsOperator.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListDlpJobsOperator.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDlpJobsOperator.order_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDlpJobsOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListDlpJobsOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListDlpJobsOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDlpJobsOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListDlpJobsOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "results_filter": "str",
                    "page_size": "int",
                    "job_type": "str",
                    "order_by": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPListInfoTypesOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPListInfoTypesOperator.language_code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListInfoTypesOperator.results_filter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListInfoTypesOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListInfoTypesOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListInfoTypesOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListInfoTypesOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListInfoTypesOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "language_code": "str",
                    "results_filter": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPListInspectTemplatesOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.order_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListInspectTemplatesOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "page_size": "int",
                    "order_by": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPListJobTriggersOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPListJobTriggersOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListJobTriggersOperator.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListJobTriggersOperator.order_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListJobTriggersOperator.results_filter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListJobTriggersOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListJobTriggersOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListJobTriggersOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListJobTriggersOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListJobTriggersOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "page_size": "int",
                    "order_by": "str",
                    "results_filter": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.order_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "page_size": "int",
                    "order_by": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPRedactImageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPRedactImageOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.inspect_config": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.image_redaction_configs": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.include_findings": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.byte_item": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPRedactImageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "inspect_config": "str",
                    "image_redaction_configs": "str",
                    "include_findings": "str",
                    "byte_item": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPReidentifyContentOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPReidentifyContentOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.reidentify_config": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.inspect_config": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.item": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.inspect_template_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.reidentify_template_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPReidentifyContentOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "reidentify_config": "str",
                    "inspect_config": "str",
                    "item": "str",
                    "inspect_template_name": "str",
                    "reidentify_template_name": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.deidentify_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.update_mask": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "deidentify_template": "str",
                    "update_mask": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.inspect_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.update_mask": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "inspect_template": "str",
                    "update_mask": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.job_trigger_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.job_trigger": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.update_mask": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.retry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_trigger_id": "str",
                    "project_id": "str",
                    "job_trigger": "str",
                    "update_mask": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.stored_info_type_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.organization_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.config": [
            {
                "type": "attr",
                "anno": "Config"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.update_mask": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.metadata": [
            {
                "type": "attr",
                "anno": "Metadata"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "stored_info_type_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "config": "Config",
                    "update_mask": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "Metadata",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudDLPUpdateStoredInfoTypeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPUpdateJobTriggerOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPUpdateInspectTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPUpdateDeidentifyTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPReidentifyContentOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPRedactImageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPListStoredInfoTypesOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPListJobTriggersOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPListInspectTemplatesOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPListInfoTypesOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPListDlpJobsOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPListDeidentifyTemplatesOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPInspectContentOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPGetStoredInfoTypeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPGetJobTripperOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPGetInspectTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPGetDlpJobOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPGetDeidentifyTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPDeleteStoredInfoTypeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPDeleteJobTriggerOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPDeleteInspectTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPDeleteDlpJobOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPDeleteDeidentifyTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPDeidentifyContentOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPCreateStoredInfoTypeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPCreateJobTriggerOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPCreateInspectTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPCreateDLPJobOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPCreateDeidentifyTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudDLPCancelDLPJobOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.s3_list_operator": {
        "S3ListOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "S3ListOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "args": "Iterable",
                    "kwargs": "Iterable"
                }
            }
        ],
        "S3ListOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.emr_add_steps_operator": {
        "EmrAddStepsOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrAddStepsOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrAddStepsOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrAddStepsOperator.job_flow_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrAddStepsOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrAddStepsOperator.steps": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrAddStepsOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_flow_id": "str",
                    "aws_conn_id": "str",
                    "steps": "list",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "EmrAddStepsOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.vertica_to_mysql": {
        "VerticaToMySqlTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaToMySqlTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaToMySqlTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.mysql_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.mysql_preoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.mysql_postoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.vertica_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.bulk_load": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VerticaToMySqlTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mysql_table": "str",
                    "vertica_conn_id": "str",
                    "mysql_conn_id": "str",
                    "mysql_preoperator": "str",
                    "mysql_postoperator": "str",
                    "bulk_load": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "VerticaToMySqlTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_sql_operator": {
        "SETTINGS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SETTINGS_VERSION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CLOUD_SQL_CREATE_VALIDATION": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "CLOUD_SQL_EXPORT_VALIDATION": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "CLOUD_SQL_IMPORT_VALIDATION": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "CLOUD_SQL_DATABASE_CREATE_VALIDATION": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "CLOUD_SQL_DATABASE_PATCH_VALIDATION": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "CloudSqlBaseOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlBaseOperator.instance": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlBaseOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlBaseOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlBaseOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudSqlHook"
            }
        ],
        "CloudSqlBaseOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlBaseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlBaseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlInstanceCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlInstanceCreateOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlInstanceCreateOperator.validate_body": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlInstanceCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "body": "str",
                    "instance": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "validate_body": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlInstancePatchOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlInstancePatchOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlInstancePatchOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "body": "str",
                    "instance": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlInstanceDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlInstanceDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlInstanceDatabaseCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlInstanceDatabaseCreateOperator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudSqlInstanceDatabaseCreateOperator.validate_body": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlInstanceDatabaseCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance": "str",
                    "body": "dict",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "validate_body": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlInstanceDatabasePatchOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlInstanceDatabasePatchOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlInstanceDatabasePatchOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlInstanceDatabasePatchOperator.validate_body": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlInstanceDatabasePatchOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance": "str",
                    "database": "str",
                    "body": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "validate_body": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlInstanceDatabaseDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlInstanceDatabaseDeleteOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlInstanceDatabaseDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance": "str",
                    "database": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlInstanceExportOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlInstanceExportOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlInstanceExportOperator.validate_body": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlInstanceExportOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance": "str",
                    "body": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "validate_body": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlInstanceImportOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlInstanceImportOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlInstanceImportOperator.validate_body": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlInstanceImportOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "instance": "str",
                    "body": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "validate_body": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlQueryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlQueryOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudSqlQueryOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlQueryOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlQueryOperator.gcp_cloudsql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlQueryOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlQueryOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudSqlQueryOperator.gcp_connection": [
            {
                "type": "attr",
                "anno": "BaseHook.Connection"
            }
        ],
        "CloudSqlQueryOperator.cloudsql_db_hook": [
            {
                "type": "attr",
                "anno": "CloudSqlDatabaseHook"
            }
        ],
        "CloudSqlQueryOperator.cloud_sql_proxy_runner": [
            {
                "type": "attr",
                "anno": "CloudSqlProxyRunner"
            }
        ],
        "CloudSqlQueryOperator.database_hook": [
            {
                "type": "attr",
                "anno": "CloudSqlDatabaseHook"
            }
        ],
        "CloudSqlQueryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "autocommit": "bool",
                    "parameters": "dict",
                    "gcp_conn_id": "str",
                    "gcp_cloudsql_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudSqlBaseOperator._get_settings_version": [
            {
                "type": "method",
                "args": {
                    "instance": "dict"
                }
            }
        ],
        "CloudSqlQueryOperator._execute_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlQueryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlInstancePatchOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlInstanceDatabasePatchOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlInstanceExportOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlInstanceImportOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlInstanceCreateOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstancePatchOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceDatabaseCreateOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceDatabasePatchOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceDatabaseDeleteOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceExportOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceImportOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceImportOperator._validate_body_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceExportOperator._validate_body_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceDatabasePatchOperator._validate_body_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceDatabaseCreateOperator._validate_body_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlInstanceCreateOperator._validate_body_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlBaseOperator._check_if_db_exists": [
            {
                "type": "method",
                "args": {
                    "db_name": "str"
                }
            }
        ],
        "CloudSqlInstanceDatabaseDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlInstanceDatabaseCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlBaseOperator._check_if_instance_exists": [
            {
                "type": "method",
                "args": {
                    "instance": "str"
                }
            }
        ],
        "CloudSqlInstanceDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudSqlInstanceCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.datastore_import_operator": {
        "DatastoreImportOperator.datastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.entity_filter": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatastoreImportOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatastoreImportOperator.polling_interval_in_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatastoreImportOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "file": "str",
                    "namespace": "str",
                    "entity_filter": "dict",
                    "labels": "dict",
                    "datastore_conn_id": "str",
                    "delegate_to": "str",
                    "polling_interval_in_seconds": "int",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "DatastoreImportOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_translate_speech_operator": {
        "GcpTranslateSpeechOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpTranslateSpeechOperator.audio": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTranslateSpeechOperator.config": [
            {
                "type": "attr",
                "anno": "Config"
            }
        ],
        "GcpTranslateSpeechOperator.target_language": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTranslateSpeechOperator.format_": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTranslateSpeechOperator.source_language": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTranslateSpeechOperator.model": [
            {
                "type": "attr",
                "anno": "Model"
            }
        ],
        "GcpTranslateSpeechOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTranslateSpeechOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTranslateSpeechOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "audio": "str",
                    "config": "Config",
                    "target_language": "str",
                    "format_": "str",
                    "source_language": "str",
                    "model": "Model",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcpTranslateSpeechOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.winrm_operator": {
        "WinRMOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "WinRMOperator.winrm_hook": [
            {
                "type": "attr",
                "anno": "WinRMHook"
            }
        ],
        "WinRMOperator.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMOperator.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMOperator.command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WinRMOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "winrm_hook": "WinRMHook",
                    "ssh_conn_id": "str",
                    "remote_host": "str",
                    "command": "str",
                    "timeout": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WinRMOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_speech_to_text_operator": {
        "GcpSpeechToTextRecognizeSpeechOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator.audio": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator.config": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "audio": "str",
                    "config": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcpSpeechToTextRecognizeSpeechOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.emr_terminate_job_flow_operator": {
        "EmrTerminateJobFlowOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrTerminateJobFlowOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrTerminateJobFlowOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrTerminateJobFlowOperator.job_flow_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrTerminateJobFlowOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrTerminateJobFlowOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_flow_id": "str",
                    "aws_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "EmrTerminateJobFlowOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_container_operator": {
        "GKEClusterDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "GKEClusterDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "name": "str",
                    "location": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GKEClusterCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "GKEClusterCreateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterCreateOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterCreateOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterCreateOperator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GKEClusterCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "location": "str",
                    "body": "dict",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "KUBE_CONFIG_ENV_VAR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "G_APP_CRED": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GKEPodOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GKEPodOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "location": "str",
                    "cluster_name": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GKEPodOperator.config_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GKEClusterCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GKEPodOperator._get_field": [
            {
                "type": "method",
                "args": {
                    "extras": "dict",
                    "field": "str",
                    "default": "str"
                }
            }
        ],
        "GKEPodOperator._set_env_from_extras": [
            {
                "type": "method",
                "args": {
                    "extras": "dict"
                }
            }
        ],
        "GKEClusterCreateOperator._check_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GKEClusterDeleteOperator._check_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GKEClusterDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcs_download_operator": {
        "GoogleCloudStorageDownloadOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageDownloadOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.store_to_xcom_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object_name": "str",
                    "filename": "str",
                    "store_to_xcom_key": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageDownloadOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcs_to_gcs": {
        "WILDCARD": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.source_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.source_object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.destination_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.destination_object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.move_object": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.last_modified_time": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_bucket": "str",
                    "source_object": "str",
                    "destination_bucket": "str",
                    "destination_object": "str",
                    "move_object": "bool",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "last_modified_time": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator._copy_single_object": [
            {
                "type": "method",
                "args": {
                    "hook": "GoogleCloudStorageHook",
                    "source_object": "str",
                    "destination_object": "str"
                }
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.mssql_to_gcs": {
        "MsSqlToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToGoogleCloudStorageOperator.type_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MsSqlToGoogleCloudStorageOperator.mssql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "mssql_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MsSqlToGoogleCloudStorageOperator.convert_type": [
            {
                "type": "method",
                "args": {
                    "cls": "type[BaseSQLToGoogleCloudStorageOperator]",
                    "value": "object",
                    "schema_type": "str"
                }
            }
        ],
        "MsSqlToGoogleCloudStorageOperator.field_to_bigquery": [
            {
                "type": "method",
                "args": {
                    "field": "tuple"
                }
            }
        ],
        "MsSqlToGoogleCloudStorageOperator.query": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.dataflow_operator": {
        "CheckJobRunning.IgnoreJob": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CheckJobRunning.FinishIfRunning": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CheckJobRunning.WaitForRun": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataFlowJavaOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataFlowJavaOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.jar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.multiple_jobs": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DataFlowJavaOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.dataflow_default_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataFlowJavaOperator.options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataFlowJavaOperator.poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataFlowJavaOperator.job_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.check_if_running": [
            {
                "type": "attr",
                "anno": "CheckJobRunning"
            }
        ],
        "DataflowTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataflowTemplateOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.dataflow_default_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataflowTemplateOperator.poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataflowTemplateOperator.template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataflowTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template": "str",
                    "job_name": "str",
                    "dataflow_default_options": "dict",
                    "parameters": "dict",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "poll_sleep": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataFlowPythonOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataFlowPythonOperator.py_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowPythonOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowPythonOperator.py_options": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataFlowPythonOperator.dataflow_default_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataFlowPythonOperator.options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataFlowPythonOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowPythonOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowPythonOperator.poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudBucketHelper.GCS_PREFIX_LENGTH": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudBucketHelper._gcs_hook": [
            {
                "type": "attr",
                "anno": "GoogleCloudStorageHook"
            }
        ],
        "GoogleCloudBucketHelper.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "DataFlowJavaOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataflowTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudBucketHelper.google_cloud_to_local": [
            {
                "type": "method",
                "args": {
                    "file_name": "str"
                }
            }
        ],
        "DataFlowPythonOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataFlowPythonOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "py_file": "str",
                    "job_name": "str",
                    "py_options": "list",
                    "dataflow_default_options": "dict",
                    "options": "dict",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "poll_sleep": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataFlowJavaOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "jar": "str",
                    "job_name": "str",
                    "dataflow_default_options": "dict",
                    "options": "dict",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "poll_sleep": "int",
                    "job_class": "str",
                    "check_if_running": "CheckJobRunning",
                    "multiple_jobs": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.operators.gcs_to_bq": {
        "GoogleCloudStorageToBigQueryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.source_objects": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.schema_object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.destination_project_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.schema_fields": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.source_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.compression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.create_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.skip_leading_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.write_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.field_delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.max_bad_records": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.quote_character": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.ignore_unknown_values": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.allow_quoted_newlines": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.allow_jagged_rows": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.external_table": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.max_id_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.schema_update_options": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.src_fmt_configs": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.time_partitioning": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.cluster_fields": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.autodetect": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.encryption_configuration": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "source_objects": "list[str]",
                    "destination_project_dataset_table": "str",
                    "schema_fields": "str",
                    "schema_object": "str",
                    "source_format": "str",
                    "compression": "str",
                    "create_disposition": "str",
                    "skip_leading_rows": "int",
                    "write_disposition": "str",
                    "field_delimiter": "str",
                    "max_bad_records": "int",
                    "quote_character": "str",
                    "ignore_unknown_values": "bool",
                    "allow_quoted_newlines": "bool",
                    "allow_jagged_rows": "bool",
                    "max_id_key": "str",
                    "bigquery_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "schema_update_options": "dict[str, str]",
                    "src_fmt_configs": "dict[str, str]",
                    "external_table": "bool",
                    "time_partitioning": "dict[str, str]",
                    "cluster_fields": "str",
                    "autodetect": "bool",
                    "encryption_configuration": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.vertica_operator": {
        "VerticaOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaOperator.vertica_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "vertica_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "VerticaOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.jenkins_job_trigger_operator": {
        "JenkinsJobTriggerOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "JenkinsJobTriggerOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "JenkinsJobTriggerOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JenkinsJobTriggerOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JenkinsJobTriggerOperator.parameters": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "JenkinsJobTriggerOperator.sleep_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "JenkinsJobTriggerOperator.jenkins_connection_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JenkinsJobTriggerOperator.max_try_before_job_appears": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "JenkinsJobTriggerOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "jenkins_connection_id": "str",
                    "job_name": "str",
                    "parameters": "str",
                    "sleep_time": "int",
                    "max_try_before_job_appears": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "JenkinsJobTriggerOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "jenkins_request_with_headers": [
            {
                "type": "func",
                "args": {
                    "jenkins_server": "jenkins.Jenkins",
                    "req": "Request"
                }
            }
        ],
        "JenkinsJobTriggerOperator.poll_job_in_queue": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "jenkins_server": "jenkins.Jenkins"
                }
            }
        ],
        "JenkinsJobTriggerOperator.build_job": [
            {
                "type": "method",
                "args": {
                    "jenkins_server": "jenkins.Jenkins"
                }
            }
        ],
        "JenkinsJobTriggerOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.azure_container_instances_operator": {
        "Volume": [
            {
                "type": "var",
                "anno": "Dict[str, str]"
            }
        ],
        "DEFAULT_ENVIRONMENT_VARIABLES": [
            {
                "type": "var",
                "anno": "Dict[str, EnvironmentVariable]"
            }
        ],
        "DEFAULT_SECURED_VARIABLES": [
            {
                "type": "var",
                "anno": "Sequence[EnvironmentVariable]"
            }
        ],
        "DEFAULT_VOLUMES": [
            {
                "type": "var",
                "anno": "Sequence[VolumeMount]"
            }
        ],
        "DEFAULT_MEMORY_IN_GB": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "DEFAULT_CPU": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "AzureContainerInstancesOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Sequence[str]"
            }
        ],
        "AzureContainerInstancesOperator.ci_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerInstancesOperator.resource_group": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerInstancesOperator.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerInstancesOperator.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerInstancesOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerInstancesOperator.registry_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerInstancesOperator.environment_variables": [
            {
                "type": "attr",
                "anno": "Dict[str, EnvironmentVariable]"
            }
        ],
        "AzureContainerInstancesOperator.secured_variables": [
            {
                "type": "attr",
                "anno": "Sequence[EnvironmentVariable]"
            }
        ],
        "AzureContainerInstancesOperator.volumes": [
            {
                "type": "attr",
                "anno": "Sequence[VolumeMount]"
            }
        ],
        "AzureContainerInstancesOperator.memory_in_gb": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "AzureContainerInstancesOperator.cpu": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "AzureContainerInstancesOperator.gpu": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "AzureContainerInstancesOperator.command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerInstancesOperator.remove_on_error": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "AzureContainerInstancesOperator.fail_if_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "AzureContainerInstancesOperator._ci_hook": [
            {
                "type": "attr",
                "anno": "AzureContainerInstanceHook"
            }
        ],
        "AzureContainerInstancesOperator._check_name": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "AzureContainerInstancesOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "ci_conn_id": "str",
                    "registry_conn_id": "str",
                    "resource_group": "str",
                    "name": "str",
                    "image": "str",
                    "region": "str",
                    "environment_variables": "Dict[str, EnvironmentVariable]",
                    "secured_variables": "Sequence[EnvironmentVariable]",
                    "volumes": "Sequence[VolumeMount]",
                    "memory_in_gb": "float",
                    "cpu": "float",
                    "gpu": "float",
                    "command": "str",
                    "remove_on_error": "bool",
                    "fail_if_exists": "bool",
                    "args": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "AzureContainerInstancesOperator._log_last": [
            {
                "type": "method",
                "args": {
                    "logs": "Sequence[str]",
                    "last_line_logged": "str"
                }
            }
        ],
        "AzureContainerInstancesOperator._monitor_logging": [
            {
                "type": "method",
                "args": {
                    "ci_hook": "AzureContainerInstanceHook",
                    "resource_group": "str",
                    "name": "str"
                }
            }
        ],
        "AzureContainerInstancesOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureContainerInstancesOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_transform_operator": {
        "SageMakerTransformOperator.config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerTransformOperator.wait_for_completion": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerTransformOperator.check_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerTransformOperator.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerTransformOperator.integer_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerTransformOperator.create_integer_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTransformOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerTransformOperator.expand_role": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTransformOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.imap_attachment_to_s3_operator": {
        "ImapAttachmentToS3Operator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "ImapAttachmentToS3Operator.imap_attachment_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImapAttachmentToS3Operator.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImapAttachmentToS3Operator.imap_mail_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImapAttachmentToS3Operator.imap_check_regex": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ImapAttachmentToS3Operator.s3_overwrite": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ImapAttachmentToS3Operator.imap_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImapAttachmentToS3Operator.s3_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImapAttachmentToS3Operator.__init__": [
            {
                "type": "method",
                "args": {
                    "imap_attachment_name": "str",
                    "s3_key": "str",
                    "imap_mail_folder": "str",
                    "imap_check_regex": "bool",
                    "s3_overwrite": "bool",
                    "imap_conn_id": "str",
                    "s3_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "ImapAttachmentToS3Operator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.jira_operator": {
        "JiraOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "JiraOperator.jira_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraOperator.method_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraOperator.jira_method_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JiraOperator.result_processor": [
            {
                "type": "attr",
                "anno": "Callable[[dict, dict], dict]"
            }
        ],
        "JiraOperator.get_jira_resource_method": [
            {
                "type": "attr",
                "anno": "Callable[[dict], JiraOperator]"
            }
        ],
        "JiraOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "jira_conn_id": "str",
                    "jira_method": "str",
                    "jira_method_args": "dict",
                    "result_processor": "Callable[[dict, dict], dict]",
                    "get_jira_resource_method": "Callable[[dict], JiraOperator]",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "JiraOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.mlengine_operator": {
        "MLEngineBatchPredictionOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineBatchPredictionOperator._project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._data_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._input_paths": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineBatchPredictionOperator._output_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._model_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._version_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._max_worker_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MLEngineBatchPredictionOperator._runtime_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._signature_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_id": "str",
                    "region": "str",
                    "data_format": "str",
                    "input_paths": "list",
                    "output_path": "str",
                    "model_name": "str",
                    "version_name": "str",
                    "uri": "str",
                    "max_worker_count": "int",
                    "runtime_version": "str",
                    "signature_name": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MLEngineModelOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineModelOperator._project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineModelOperator._model": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MLEngineModelOperator._operation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineModelOperator._gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineModelOperator._delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineModelOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model": "dict",
                    "operation": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MLEngineVersionOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineVersionOperator._project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._model_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._version_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._version": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MLEngineVersionOperator._operation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model_name": "str",
                    "version_name": "str",
                    "version": "dict",
                    "operation": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MLEngineTrainingOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineTrainingOperator._project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._package_uris": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._training_python_module": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._training_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineTrainingOperator._region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._scale_tier": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._master_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._runtime_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._python_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._job_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_id": "str",
                    "package_uris": "str",
                    "training_python_module": "str",
                    "training_args": "list",
                    "region": "str",
                    "scale_tier": "str",
                    "master_type": "str",
                    "runtime_version": "str",
                    "python_version": "str",
                    "job_dir": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "mode": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "_normalize_mlengine_job_id": [
            {
                "type": "func",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "MLEngineBatchPredictionOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "MLEngineVersionOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "MLEngineTrainingOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "MLEngineModelOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ]
    },
    "contrib.operators.snowflake_operator": {
        "SnowflakeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SnowflakeOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SnowflakeOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.snowflake_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SnowflakeOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SnowflakeOperator.warehouse": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.role": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "snowflake_conn_id": "str",
                    "parameters": "dict",
                    "autocommit": "bool",
                    "warehouse": "str",
                    "database": "str",
                    "role": "str",
                    "schema": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SnowflakeOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnowflakeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.file_to_wasb": {
        "FileToWasbOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "FileToWasbOperator.file_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToWasbOperator.container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToWasbOperator.blob_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToWasbOperator.wasb_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToWasbOperator.load_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "FileToWasbOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "container_name": "str",
                    "blob_name": "str",
                    "wasb_conn_id": "str",
                    "load_options": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FileToWasbOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.emr_create_job_flow_operator": {
        "EmrCreateJobFlowOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrCreateJobFlowOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrCreateJobFlowOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrCreateJobFlowOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrCreateJobFlowOperator.emr_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrCreateJobFlowOperator.job_flow_overrides": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "EmrCreateJobFlowOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrCreateJobFlowOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "emr_conn_id": "str",
                    "job_flow_overrides": "dict",
                    "region_name": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "EmrCreateJobFlowOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.discord_webhook_operator": {
        "DiscordWebhookOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DiscordWebhookOperator.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.webhook_endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.avatar_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.tts": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DiscordWebhookOperator.proxy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.hook": [
            {
                "type": "attr",
                "anno": "DiscordWebhookHook"
            }
        ],
        "DiscordWebhookOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_endpoint": "str",
                    "message": "str",
                    "username": "str",
                    "avatar_url": "str",
                    "tts": "bool",
                    "proxy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DiscordWebhookOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.bigquery_to_bigquery": {
        "BigQueryToBigQueryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryToBigQueryOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryToBigQueryOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.source_project_dataset_tables": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.destination_project_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.write_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.create_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.labels": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "BigQueryToBigQueryOperator.encryption_configuration": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_project_dataset_tables": "str",
                    "destination_project_dataset_table": "str",
                    "write_disposition": "str",
                    "create_disposition": "str",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "labels": "dict[str, str]",
                    "encryption_configuration": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryToBigQueryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_compute_operator": {
        "GceBaseOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceBaseOperator.zone": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceBaseOperator.resource_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceBaseOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceBaseOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceBaseOperator._hook": [
            {
                "type": "attr",
                "anno": "GceHook"
            }
        ],
        "GceBaseOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GceBaseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "zone": "str",
                    "resource_id": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GceBaseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GceInstanceStartOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GceInstanceStartOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "zone": "str",
                    "resource_id": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GceInstanceStopOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GceInstanceStopOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "zone": "str",
                    "resource_id": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SET_MACHINE_TYPE_VALIDATION_SPECIFICATION": [
            {
                "type": "var",
                "anno": "List[Dict[str, str]]"
            }
        ],
        "GceSetMachineTypeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GceSetMachineTypeOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceSetMachineTypeOperator._field_validator": [
            {
                "type": "attr",
                "anno": "GcpBodyFieldValidator"
            }
        ],
        "GceSetMachineTypeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "zone": "str",
                    "resource_id": "str",
                    "body": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "validate_body": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GCE_INSTANCE_TEMPLATE_VALIDATION_PATCH_SPECIFICATION": [
            {
                "type": "var",
                "anno": "List[dict]"
            }
        ],
        "GCE_INSTANCE_TEMPLATE_FIELDS_TO_SANITIZE": [
            {
                "type": "var",
                "anno": "List[str]"
            }
        ],
        "GceInstanceTemplateCopyOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GceInstanceTemplateCopyOperator.body_patch": [
            {
                "type": "attr",
                "anno": "Dict[str, str]"
            }
        ],
        "GceInstanceTemplateCopyOperator.request_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceInstanceTemplateCopyOperator._field_validator": [
            {
                "type": "attr",
                "anno": "GcpBodyFieldValidator"
            }
        ],
        "GceInstanceTemplateCopyOperator._field_sanitizer": [
            {
                "type": "attr",
                "anno": "GcpBodyFieldSanitizer"
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator.zone": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator.source_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator.destination_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator.request_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator.update_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator._change_performed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "resource_id": "str",
                    "zone": "str",
                    "source_template": "str",
                    "destination_template": "str",
                    "project_id": "str",
                    "update_policy": "str",
                    "request_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GceInstanceStartOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GceInstanceStopOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GceSetMachineTypeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GceInstanceTemplateCopyOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GceInstanceGroupManagerUpdateTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GceInstanceTemplateCopyOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "resource_id": "str",
                    "body_patch": "Dict[str, str]",
                    "project_id": "str",
                    "request_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "validate_body": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GceInstanceTemplateCopyOperator._validate_all_body_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GceSetMachineTypeOperator._validate_all_body_fields": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.file_to_gcs": {
        "FileToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "FileToGoogleCloudStorageOperator.src": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.dst": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.mime_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.gzip": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "FileToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "src": "str",
                    "dst": "str",
                    "bucket": "str",
                    "google_cloud_storage_conn_id": "str",
                    "mime_type": "str",
                    "delegate_to": "str",
                    "gzip": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FileToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.oracle_to_azure_data_lake_transfer": {
        "OracleToAzureDataLakeTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "OracleToAzureDataLakeTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.oracle_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.sql_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "OracleToAzureDataLakeTransfer.azure_data_lake_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.azure_data_lake_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.encoding": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.quotechar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.quoting": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "filename": "str",
                    "azure_data_lake_conn_id": "str",
                    "azure_data_lake_path": "str",
                    "oracle_conn_id": "str",
                    "sql": "str",
                    "sql_params": "dict",
                    "delimiter": "str",
                    "encoding": "str",
                    "quotechar": "str",
                    "quoting": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "OracleToAzureDataLakeTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "OracleToAzureDataLakeTransfer._write_temp_file": [
            {
                "type": "method",
                "args": {
                    "cursor": "sqlalchemy.Cursor",
                    "path_to_save": "str"
                }
            }
        ]
    },
    "contrib.operators.bigquery_check_operator": {
        "BigQueryCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryCheckOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCheckOperator.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "bigquery_conn_id": "str",
                    "use_legacy_sql": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BigQueryCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryValueCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryValueCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryValueCheckOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryValueCheckOperator.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryValueCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "pass_value": "bool",
                    "tolerance": "float",
                    "bigquery_conn_id": "str",
                    "use_legacy_sql": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryValueCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryIntervalCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryIntervalCheckOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryIntervalCheckOperator.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryIntervalCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "metrics_thresholds": "dict",
                    "date_filter_column": "str",
                    "days_back": "int",
                    "bigquery_conn_id": "str",
                    "use_legacy_sql": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BigQueryIntervalCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.kubernetes_pod_operator": {
        "KubernetesPodOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "KubernetesPodOperator.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.cmds": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.arguments": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.startup_timeout_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KubernetesPodOperator.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.env_vars": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.ports": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.volume_mounts": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.volumes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.secrets": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.in_cluster": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.cluster_context": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.get_logs": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.image_pull_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.node_selectors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.annotations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.affinity": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.do_xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.resources": [
            {
                "type": "attr",
                "anno": "Resources"
            }
        ],
        "KubernetesPodOperator.config_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.image_pull_secrets": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.service_account_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.is_delete_operator_pod": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.hostnetwork": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.tolerations": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.configmaps": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.security_context": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.pod_runtime_info_envs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.dnspolicy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator._set_resources": [
            {
                "type": "method",
                "args": {
                    "resources": "dict"
                }
            }
        ],
        "KubernetesPodOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "namespace": "str",
                    "image": "str",
                    "name": "str",
                    "cmds": "list",
                    "arguments": "list",
                    "ports": "list",
                    "volume_mounts": "list",
                    "volumes": "list",
                    "env_vars": "dict",
                    "secrets": "list",
                    "in_cluster": "bool",
                    "cluster_context": "dict",
                    "labels": "dict",
                    "startup_timeout_seconds": "int",
                    "get_logs": "bool",
                    "image_pull_policy": "str",
                    "annotations": "dict",
                    "resources": "dict",
                    "affinity": "dict",
                    "config_file": "str",
                    "do_xcom_push": "bool",
                    "node_selectors": "dict",
                    "image_pull_secrets": "str",
                    "service_account_name": "str",
                    "is_delete_operator_pod": "bool",
                    "hostnetwork": "bool",
                    "tolerations": "list",
                    "configmaps": "list",
                    "security_context": "dict",
                    "pod_runtime_info_envs": "list",
                    "dnspolicy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "KubernetesPodOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.dingding_operator": {
        "DingdingOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DingdingOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DingdingOperator.dingding_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DingdingOperator.message_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DingdingOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DingdingOperator.at_mobiles": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DingdingOperator.at_all": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DingdingOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dingding_conn_id": "str",
                    "message_type": "str",
                    "message": "str",
                    "at_mobiles": "bool",
                    "at_all": "bool",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "DingdingOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.hive_to_dynamodb": {
        "HiveToDynamoDBTransferOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveToDynamoDBTransferOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveToDynamoDBTransferOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.table_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.table_keys": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.pre_process": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.pre_process_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HiveToDynamoDBTransferOperator.pre_process_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveToDynamoDBTransferOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.hiveserver2_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "table_name": "str",
                    "table_keys": "str",
                    "pre_process": "str",
                    "pre_process_args": "list",
                    "pre_process_kwargs": "dict",
                    "region_name": "str",
                    "schema": "str",
                    "hiveserver2_conn_id": "str",
                    "aws_conn_id": "str",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "HiveToDynamoDBTransferOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_translate_operator": {
        "CloudTranslateTextOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudTranslateTextOperator.values": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudTranslateTextOperator.target_language": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudTranslateTextOperator.format_": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudTranslateTextOperator.source_language": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudTranslateTextOperator.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudTranslateTextOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudTranslateTextOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "values": "dict",
                    "target_language": "str",
                    "format_": "str",
                    "source_language": "str",
                    "model": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudTranslateTextOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.oracle_to_oracle_transfer": {
        "OracleToOracleTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "OracleToOracleTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.oracle_destination_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.destination_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.oracle_source_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.source_sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.source_sql_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "OracleToOracleTransfer.rows_chunk": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "OracleToOracleTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "oracle_destination_conn_id": "str",
                    "destination_table": "str",
                    "oracle_source_conn_id": "str",
                    "source_sql": "str",
                    "source_sql_params": "dict",
                    "rows_chunk": "int",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "OracleToOracleTransfer._execute": [
            {
                "type": "method",
                "args": {
                    "src_hook": "OracleHook",
                    "dest_hook": "OracleHook",
                    "context": "dict"
                }
            }
        ],
        "OracleToOracleTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.cassandra_to_gcs": {
        "CassandraToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.cql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.schema_filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.approx_max_file_size_bytes": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.cassandra_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.hook": [
            {
                "type": "attr",
                "anno": "CassandraHook"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "cql": "str",
                    "bucket": "str",
                    "filename": "str",
                    "schema_filename": "str",
                    "approx_max_file_size_bytes": "int",
                    "cassandra_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.CQL_TYPE_MAP": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.is_simple_type": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.is_array_type": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.is_record_type": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.get_bq_type": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.get_bq_mode": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.generate_schema_dict": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "name": "str",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.get_bq_fields": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "name": "str",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_user_type": [
            {
                "type": "method",
                "args": {
                    "cls": "str",
                    "name": "str",
                    "value": "Union[datetime, tuple, OrderedMapSerializedKey]"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_value": [
            {
                "type": "method",
                "args": {
                    "cls": "str",
                    "name": "str",
                    "value": "Union[datetime, tuple, OrderedMapSerializedKey]"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_map_type": [
            {
                "type": "method",
                "args": {
                    "cls": "str",
                    "name": "str",
                    "value": "OrderedMapSerializedKey"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_array_types": [
            {
                "type": "method",
                "args": {
                    "cls": "str",
                    "name": "str",
                    "value": "Iterable"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.generate_data_dict": [
            {
                "type": "method",
                "args": {
                    "cls": "str",
                    "names": "list",
                    "values": "tuple"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_tuple_type": [
            {
                "type": "method",
                "args": {
                    "cls": "str",
                    "name": "str",
                    "value": "tuple"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator._query_cassandra": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CassandraToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator._write_local_schema_file": [
            {
                "type": "method",
                "args": {
                    "cursor": "requests.Cursor"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator._write_local_data_files": [
            {
                "type": "method",
                "args": {
                    "cursor": "requests.Cursor"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator._upload_to_gcs": [
            {
                "type": "method",
                "args": {
                    "files_to_upload": "dict"
                }
            }
        ]
    },
    "contrib.operators.s3_delete_objects_operator": {
        "S3DeleteObjectsOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3DeleteObjectsOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3DeleteObjectsOperator.keys": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "S3DeleteObjectsOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3DeleteObjectsOperator.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3DeleteObjectsOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "keys": "list[str]",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "S3DeleteObjectsOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.bigquery_table_delete_operator": {
        "BigQueryTableDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryTableDeleteOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableDeleteOperator.deletion_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableDeleteOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableDeleteOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableDeleteOperator.ignore_if_missing": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryTableDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "deletion_dataset_table": "str",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "ignore_if_missing": "bool",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "BigQueryTableDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcs_operator": {
        "GoogleCloudStorageCreateBucketOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.resource": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.storage_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "resource": "str",
                    "storage_class": "str",
                    "location": "str",
                    "project_id": "str",
                    "labels": "dict",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.s3_to_sftp_operator": {
        "S3ToSFTPOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3ToSFTPOperator.sftp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToSFTPOperator.sftp_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToSFTPOperator.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToSFTPOperator.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToSFTPOperator.s3_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToSFTPOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "s3_bucket": "str",
                    "s3_key": "str",
                    "sftp_path": "str",
                    "sftp_conn_id": "str",
                    "s3_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3ToSFTPOperator.get_s3_key": [
            {
                "type": "method",
                "args": {
                    "s3_key": "str"
                }
            }
        ],
        "S3ToSFTPOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.slack_webhook_operator": {
        "SlackWebhookOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SlackWebhookOperator.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.webhook_token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.attachments": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.channel": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.icon_emoji": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.link_names": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlackWebhookOperator.proxy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.hook": [
            {
                "type": "attr",
                "anno": "SlackWebhookHook"
            }
        ],
        "SlackWebhookOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_token": "str",
                    "message": "str",
                    "attachments": "str",
                    "channel": "str",
                    "username": "str",
                    "icon_emoji": "str",
                    "link_names": "bool",
                    "proxy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SlackWebhookOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.bigquery_to_gcs": {
        "BigQueryToCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryToCloudStorageOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryToCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.source_project_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.destination_cloud_storage_uris": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.compression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.export_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.field_delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.print_header": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryToCloudStorageOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryToCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_project_dataset_table": "str",
                    "destination_cloud_storage_uris": "str",
                    "compression": "str",
                    "export_format": "str",
                    "field_delimiter": "str",
                    "print_header": "bool",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "labels": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryToCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_video_intelligence_operator": {
        "CloudVideoIntelligenceDetectVideoLabelsOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.input_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.input_content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.output_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.video_context": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "input_uri": "str",
                    "input_content": "str",
                    "output_uri": "str",
                    "video_context": "str",
                    "location": "str",
                    "retry": "int",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.input_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.output_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.input_content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.video_context": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "input_uri": "str",
                    "output_uri": "str",
                    "input_content": "str",
                    "video_context": "str",
                    "location": "str",
                    "retry": "int",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.input_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.output_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.input_content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.video_context": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.retry": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "input_uri": "str",
                    "output_uri": "str",
                    "input_content": "str",
                    "video_context": "str",
                    "location": "str",
                    "retry": "int",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CloudVideoIntelligenceDetectVideoShotsOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVideoIntelligenceDetectVideoExplicitContentOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVideoIntelligenceDetectVideoLabelsOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.druid_operator": {
        "DruidOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DruidOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DruidOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidOperator.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DruidOperator.index_spec_str": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "json_index_file": "str",
                    "druid_ingest_conn_id": "str",
                    "max_ingestion_time": "int",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "DruidOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_function_operator": {
        "_validate_available_memory_in_mb": [
            {
                "type": "func",
                "args": {
                    "value": "int"
                }
            }
        ],
        "_validate_max_instances": [
            {
                "type": "func",
                "args": {
                    "value": "int"
                }
            }
        ],
        "CLOUD_FUNCTION_VALIDATION": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "GcfFunctionDeployOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcfFunctionDeployOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfFunctionDeployOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfFunctionDeployOperator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GcfFunctionDeployOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfFunctionDeployOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfFunctionDeployOperator.zip_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfFunctionDeployOperator.zip_path_preprocessor": [
            {
                "type": "attr",
                "anno": "ZipPathPreprocessor"
            }
        ],
        "GcfFunctionDeployOperator._field_validator": [
            {
                "type": "attr",
                "anno": "GcpBodyFieldValidator"
            }
        ],
        "GcfFunctionDeployOperator._hook": [
            {
                "type": "attr",
                "anno": "GcfHook"
            }
        ],
        "GCF_SOURCE_ARCHIVE_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCF_SOURCE_UPLOAD_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SOURCE_REPOSITORY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCF_ZIP_PATH": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ZipPathPreprocessor.upload_function": [
            {
                "type": "attr",
                "anno": "GcpHook"
            }
        ],
        "ZipPathPreprocessor.body": [
            {
                "type": "attr",
                "anno": "GcpBodyFieldValidator"
            }
        ],
        "ZipPathPreprocessor.zip_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ZipPathPreprocessor.__init__": [
            {
                "type": "method",
                "args": {
                    "body": "GcpBodyFieldValidator",
                    "zip_path": "str"
                }
            }
        ],
        "ZipPathPreprocessor._is_present_and_empty": [
            {
                "type": "method",
                "args": {
                    "dictionary": "dict",
                    "field": "str"
                }
            }
        ],
        "ZipPathPreprocessor.should_upload_function": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FUNCTION_NAME_PATTERN": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FUNCTION_NAME_COMPILED_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "GcfFunctionDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GcfFunctionDeleteOperator.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfFunctionDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfFunctionDeleteOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfFunctionDeleteOperator.hook": [
            {
                "type": "attr",
                "anno": "GcfHook"
            }
        ],
        "GcfFunctionDeployOperator._set_airflow_version_label": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcfFunctionDeployOperator._check_if_function_exists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcfFunctionDeployOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcfFunctionDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GcfFunctionDeleteOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcfFunctionDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "ZipPathPreprocessor._verify_archive_url_and_zip_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ZipPathPreprocessor._verify_upload_url_and_zip_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ZipPathPreprocessor._verify_upload_url_and_no_zip_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ZipPathPreprocessor.preprocess_body": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcfFunctionDeployOperator._validate_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcfFunctionDeployOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "body": "dict",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "zip_path": "str",
                    "validate_body": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GcfFunctionDeployOperator._validate_all_body_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcfFunctionDeployOperator._upload_source_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcfFunctionDeployOperator._update_function": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GcfFunctionDeployOperator._create_new_function": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.ssh_operator": {
        "SSHOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SSHOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SSHOperator.ssh_hook": [
            {
                "type": "attr",
                "anno": "SSHHook"
            }
        ],
        "SSHOperator.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHOperator.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHOperator.command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SSHOperator.environment": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "ssh_hook": "SSHHook",
                    "ssh_conn_id": "str",
                    "remote_host": "str",
                    "command": "str",
                    "timeout": "int",
                    "environment": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SSHOperator.tunnel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SSHOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.spark_submit_operator": {
        "SparkSubmitOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SparkSubmitOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._application": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitOperator._files": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._py_files": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._archives": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._driver_class_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._jars": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._java_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._packages": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._exclude_packages": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._repositories": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._total_executor_cores": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._executor_cores": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._executor_memory": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._driver_memory": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._num_executors": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._application_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._env_vars": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitOperator._spark_binary": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._hook": [
            {
                "type": "attr",
                "anno": "SparkSubmitHook"
            }
        ],
        "SparkSubmitOperator._conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "application": "str",
                    "conf": "dict",
                    "conn_id": "str",
                    "files": "list",
                    "py_files": "list",
                    "archives": "list",
                    "driver_class_path": "str",
                    "jars": "list",
                    "java_class": "str",
                    "packages": "list",
                    "exclude_packages": "list",
                    "repositories": "list",
                    "total_executor_cores": "list",
                    "executor_cores": "list",
                    "executor_memory": "list",
                    "driver_memory": "list",
                    "keytab": "str",
                    "principal": "str",
                    "name": "str",
                    "num_executors": "list",
                    "application_args": "list",
                    "env_vars": "list",
                    "verbose": "bool",
                    "spark_binary": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkSubmitOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "SparkSubmitOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.gcp_vision_operator": {
        "CloudVisionProductSetCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionProductSetCreateOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetCreateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetCreateOperator.product_set": [
            {
                "type": "attr",
                "anno": "Union[dict, ProductSet]"
            }
        ],
        "CloudVisionProductSetCreateOperator.product_set_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetCreateOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionProductSetCreateOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionProductSetCreateOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionProductSetCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetCreateOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudVisionHook"
            }
        ],
        "CloudVisionProductSetCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "product_set": "Union[dict, ProductSet]",
                    "location": "str",
                    "project_id": "str",
                    "product_set_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionProductSetGetOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionProductSetGetOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetGetOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetGetOperator.product_set_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetGetOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionProductSetGetOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionProductSetGetOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionProductSetGetOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetGetOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudVisionHook"
            }
        ],
        "CloudVisionProductSetGetOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product_set_id": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionProductSetUpdateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionProductSetUpdateOperator.product_set": [
            {
                "type": "attr",
                "anno": "Union[dict, ProductSet]"
            }
        ],
        "CloudVisionProductSetUpdateOperator.update_mask": [
            {
                "type": "attr",
                "anno": "Union[dict, FieldMask]"
            }
        ],
        "CloudVisionProductSetUpdateOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetUpdateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetUpdateOperator.product_set_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetUpdateOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionProductSetUpdateOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionProductSetUpdateOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionProductSetUpdateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetUpdateOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudVisionHook"
            }
        ],
        "CloudVisionProductSetUpdateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "product_set": "Union[Dict, ProductSet]",
                    "location": "str",
                    "product_set_id": "str",
                    "project_id": "str",
                    "update_mask": "Union[Dict, FieldMask]",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionProductSetDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionProductSetDeleteOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetDeleteOperator.product_set_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetDeleteOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionProductSetDeleteOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionProductSetDeleteOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionProductSetDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductSetDeleteOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudVisionHook"
            }
        ],
        "CloudVisionProductSetDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product_set_id": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionProductCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionProductCreateOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductCreateOperator.product": [
            {
                "type": "attr",
                "anno": "Union[dict, Product]"
            }
        ],
        "CloudVisionProductCreateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductCreateOperator.product_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductCreateOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionProductCreateOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionProductCreateOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionProductCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductCreateOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudVisionHook"
            }
        ],
        "CloudVisionProductCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product": "str",
                    "project_id": "str",
                    "product_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionProductGetOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionProductGetOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductGetOperator.product_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductGetOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductGetOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionProductGetOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionProductGetOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionProductGetOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductGetOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudVisionHook"
            }
        ],
        "CloudVisionProductGetOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product_id": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionProductUpdateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionProductUpdateOperator.product": [
            {
                "type": "attr",
                "anno": "Union[dict, Product]"
            }
        ],
        "CloudVisionProductUpdateOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductUpdateOperator.product_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductUpdateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductUpdateOperator.update_mask": [
            {
                "type": "attr",
                "anno": "Union[Dict, FieldMask]"
            }
        ],
        "CloudVisionProductUpdateOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionProductUpdateOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionProductUpdateOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionProductUpdateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductUpdateOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudVisionHook"
            }
        ],
        "CloudVisionProductUpdateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "product": "Union[Dict, Product]",
                    "location": "str",
                    "product_id": "str",
                    "project_id": "str",
                    "update_mask": "Union[Dict, FieldMask]",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionProductDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionProductDeleteOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductDeleteOperator.product_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductDeleteOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionProductDeleteOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionProductDeleteOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionProductDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionProductDeleteOperator._hook": [
            {
                "type": "attr",
                "anno": "CloudVisionHook"
            }
        ],
        "CloudVisionProductDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product_id": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionAnnotateImageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionAnnotateImageOperator.request": [
            {
                "type": "attr",
                "anno": "Union[dict, AnnotateImageRequest]"
            }
        ],
        "CloudVisionAnnotateImageOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionAnnotateImageOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionAnnotateImageOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionAnnotateImageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "request": "Union[Dict, AnnotateImageRequest]",
                    "retry": "Retry",
                    "timeout": "float",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionReferenceImageCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.product_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.reference_image": [
            {
                "type": "attr",
                "anno": "Union[Dict, ReferenceImage]"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.reference_image_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionReferenceImageCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "reference_image": "Union[Dict, ReferenceImage]",
                    "product_id": "str",
                    "reference_image_id": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "str",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionAddProductToProductSetOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.product_set_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.product_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionAddProductToProductSetOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "product_set_id": "str",
                    "product_id": "str",
                    "location": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.product_set_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.product_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.metadata": [
            {
                "type": "attr",
                "anno": "Sequence[Tuple[str, str]]"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "product_set_id": "str",
                    "product_id": "str",
                    "location": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionDetectTextOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionDetectTextOperator.image": [
            {
                "type": "attr",
                "anno": "Union[Dict, Image]"
            }
        ],
        "CloudVisionDetectTextOperator.max_results": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudVisionDetectTextOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionDetectTextOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionDetectTextOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionDetectTextOperator.kwargs": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "CloudVisionDetectTextOperator.additional_properties": [
            {
                "type": "attr",
                "anno": "Optional[Dict]"
            }
        ],
        "CloudVisionDetectDocumentTextOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionDetectDocumentTextOperator.image": [
            {
                "type": "attr",
                "anno": "Union[Dict, Image]"
            }
        ],
        "CloudVisionDetectDocumentTextOperator.max_results": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudVisionDetectDocumentTextOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionDetectDocumentTextOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionDetectDocumentTextOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionDetectDocumentTextOperator.additional_properties": [
            {
                "type": "attr",
                "anno": "Optional[Dict]"
            }
        ],
        "CloudVisionDetectImageLabelsOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionDetectImageLabelsOperator.image": [
            {
                "type": "attr",
                "anno": "Union[Dict, Image]"
            }
        ],
        "CloudVisionDetectImageLabelsOperator.max_results": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudVisionDetectImageLabelsOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionDetectImageLabelsOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionDetectImageLabelsOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionDetectImageLabelsOperator.additional_properties": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "CloudVisionDetectImageLabelsOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "Union[Dict, Image]",
                    "max_results": "int",
                    "retry": "Retry",
                    "timeout": "float",
                    "additional_properties": "Dict",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Tuple[str, ...]"
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.image": [
            {
                "type": "attr",
                "anno": "Union[Dict, Image]"
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.max_results": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.retry": [
            {
                "type": "attr",
                "anno": "Retry"
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.additional_properties": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "Union[Dict, Image]",
                    "max_results": "int",
                    "retry": "Retry",
                    "timeout": "float",
                    "additional_properties": "Dict",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionDetectDocumentTextOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "Union[Dict, Image]",
                    "max_results": "int",
                    "retry": "Retry",
                    "timeout": "float",
                    "language_hints": "Union[str, List[str]]",
                    "web_detection_params": "Dict",
                    "additional_properties": "Dict",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionDetectTextOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "Union[Dict, Image]",
                    "max_results": "int",
                    "retry": "Retry",
                    "timeout": "float",
                    "language_hints": "Union[str, List[str]]",
                    "web_detection_params": "Dict",
                    "additional_properties": "Dict",
                    "gcp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CloudVisionDetectImageSafeSearchOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionDetectImageLabelsOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionDetectDocumentTextOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionDetectTextOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionAnnotateImageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionRemoveProductFromProductSetOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionAddProductToProductSetOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionReferenceImageCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionProductDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionProductUpdateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionProductGetOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionProductCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionProductSetDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionProductSetUpdateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionProductSetGetOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CloudVisionProductSetCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_training_operator": {
        "SageMakerTrainingOperator.integer_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SageMakerTrainingOperator.wait_for_completion": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerTrainingOperator.print_log": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerTrainingOperator.check_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerTrainingOperator.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerTrainingOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "print_log": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerTrainingOperator.expand_role": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTrainingOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_endpoint_operator": {
        "SageMakerEndpointOperator.config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerEndpointOperator.wait_for_completion": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerEndpointOperator.check_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerEndpointOperator.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerEndpointOperator.operation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerEndpointOperator.integer_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerEndpointOperator.create_integer_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerEndpointOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int",
                    "operation": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SageMakerEndpointOperator.expand_role": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerEndpointOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.dataproc_operator": {
        "DataprocOperationBaseOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocOperationBaseOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocOperationBaseOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocOperationBaseOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocOperationBaseOperator.hook": [
            {
                "type": "attr",
                "anno": "DataProcHook"
            }
        ],
        "DataprocOperationBaseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "region": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataprocOperationBaseOperator.start": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataprocClusterCreateOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.num_workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterCreateOperator.num_preemptible_workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterCreateOperator.storage_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.init_actions_uris": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.init_action_timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.metadata": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocClusterCreateOperator.custom_image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.image_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.properties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocClusterCreateOperator.master_machine_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.master_disk_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.master_disk_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterCreateOperator.autoscaling_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.worker_machine_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.worker_disk_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.worker_disk_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterCreateOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocClusterCreateOperator.zone": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.network_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.subnetwork_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.internal_ip_only": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DataprocClusterCreateOperator.tags": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocClusterCreateOperator.service_account": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.service_account_scopes": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.idle_delete_ttl": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.auto_delete_time": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.auto_delete_ttl": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.customer_managed_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.single_node": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DataprocClusterCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "cluster_name": "str",
                    "num_workers": "int",
                    "zone": "str",
                    "network_uri": "str",
                    "subnetwork_uri": "str",
                    "internal_ip_only": "bool",
                    "tags": "dict",
                    "storage_bucket": "str",
                    "init_actions_uris": "str",
                    "init_action_timeout": "str",
                    "metadata": "dict",
                    "custom_image": "str",
                    "image_version": "str",
                    "autoscaling_policy": "str",
                    "properties": "dict",
                    "master_machine_type": "str",
                    "master_disk_type": "str",
                    "master_disk_size": "int",
                    "worker_machine_type": "str",
                    "worker_disk_type": "str",
                    "worker_disk_size": "int",
                    "num_preemptible_workers": "int",
                    "labels": "dict",
                    "region": "str",
                    "service_account": "str",
                    "service_account_scopes": "str",
                    "idle_delete_ttl": "str",
                    "auto_delete_time": "str",
                    "auto_delete_ttl": "str",
                    "customer_managed_key": "str",
                    "args": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "DataprocClusterScaleOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataprocClusterScaleOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterScaleOperator.num_workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterScaleOperator.num_preemptible_workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterScaleOperator.optional_arguments": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocClusterScaleOperator._build_scale_cluster_data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocClusterDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataprocClusterDeleteOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_name": "str",
                    "project_id": "str",
                    "region": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcJobBaseOperator.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcJobBaseOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcJobBaseOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcJobBaseOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataProcJobBaseOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcJobBaseOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcJobBaseOperator.dataproc_properties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataProcJobBaseOperator.dataproc_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcJobBaseOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcJobBaseOperator.job_error_states": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataProcJobBaseOperator.hook": [
            {
                "type": "attr",
                "anno": "DataProcHook"
            }
        ],
        "DataProcJobBaseOperator.job_template": [
            {
                "type": "attr",
                "anno": "_DataProcJobBuilder"
            }
        ],
        "DataProcJobBaseOperator.job": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataProcJobBaseOperator.dataproc_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcJobBaseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "cluster_name": "str",
                    "dataproc_properties": "dict",
                    "dataproc_jars": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "labels": "dict",
                    "region": "str",
                    "job_error_states": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcPigOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcPigOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DataProcPigOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.query_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.variables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataProcPigOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "query_uri": "str",
                    "variables": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcHiveOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcHiveOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DataProcHiveOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.query_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.variables": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "query_uri": "str",
                    "variables": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DataProcSparkSqlOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcSparkSqlOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DataProcSparkSqlOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.query_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.variables": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "query_uri": "str",
                    "variables": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DataProcSparkOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcSparkOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.main_jar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.main_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.arguments": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcSparkOperator.archives": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcSparkOperator.files": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcSparkOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "main_jar": "str",
                    "main_class": "str",
                    "arguments": "list[str]",
                    "archives": "list[str]",
                    "files": "list[str]",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcHadoopOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcHadoopOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.main_jar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.main_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.arguments": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcHadoopOperator.archives": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcHadoopOperator.files": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcHadoopOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "main_jar": "str",
                    "main_class": "str",
                    "arguments": "list[str]",
                    "archives": "list[str]",
                    "files": "list[str]",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcPySparkOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcPySparkOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.main": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.arguments": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "DataProcPySparkOperator.archives": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "DataProcPySparkOperator.files": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "DataProcPySparkOperator.pyfiles": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "DataProcPySparkOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "main": "str",
                    "arguments": "str | None",
                    "archives": "str | None",
                    "pyfiles": "str | None",
                    "files": "str | None",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataprocWorkflowTemplateInstantiateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataprocWorkflowTemplateInstantiateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateInstantiateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "DataprocWorkflowTemplateInstantiateInlineOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataprocWorkflowTemplateInstantiateInlineOperator.template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateInstantiateInlineOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template": "str",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocClusterScaleOperator.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcPigOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcHiveOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcSparkSqlOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcSparkOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcHadoopOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcPySparkOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataprocOperationBaseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcJobBaseOperator.create_job_template": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcPySparkOperator._generate_temp_filename": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "DataprocClusterScaleOperator._get_graceful_decommission_timeout": [
            {
                "type": "method",
                "args": {
                    "timeout": "str"
                }
            }
        ],
        "DataprocClusterScaleOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_name": "str",
                    "project_id": "str",
                    "region": "str",
                    "num_workers": "int",
                    "num_preemptible_workers": "int",
                    "graceful_decommission_timeout": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataprocClusterCreateOperator._build_lifecycle_config": [
            {
                "type": "method",
                "args": {
                    "cluster_data": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator._build_gce_cluster_config": [
            {
                "type": "method",
                "args": {
                    "cluster_data": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator._get_init_action_timeout": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocClusterCreateOperator._build_cluster_data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcJobBaseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcJobBaseOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcPySparkOperator._upload_file_temp": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "local_file": "str"
                }
            }
        ],
        "DataprocWorkflowTemplateInstantiateInlineOperator.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocWorkflowTemplateInstantiateOperator.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocClusterDeleteOperator.start": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.bigquery_get_data": {
        "BigQueryGetDataOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryGetDataOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.max_results": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryGetDataOperator.selected_fields": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str",
                    "max_results": "int",
                    "selected_fields": "str",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "BigQueryGetDataOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.awsbatch_operator": {
        "AWSBatchOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.client": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.arn": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "AWSBatchOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AWSBatchOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.job_definition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.job_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.overrides": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AWSBatchOperator.max_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AWSBatchOperator.jobId": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.jobName": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.hook": [
            {
                "type": "attr",
                "anno": "AwsHook"
            }
        ],
        "AWSBatchOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSBatchOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "job_definition": "str",
                    "job_queue": "str",
                    "overrides": "dict",
                    "max_retries": "int",
                    "aws_conn_id": "str",
                    "region_name": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "AWSBatchOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSBatchOperator._check_success_task": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSBatchOperator._wait_for_task_ended": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSBatchOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.spark_sql_operator": {
        "SparkSqlOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSqlOperator.template_ext": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSqlOperator._sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSqlOperator._conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._total_executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlOperator._executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlOperator._executor_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlOperator._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._master": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._num_executors": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlOperator._yarn_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._hook": [
            {
                "type": "attr",
                "anno": "SparkSqlHook"
            }
        ],
        "SparkSqlOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "conf": "dict",
                    "conn_id": "str",
                    "total_executor_cores": "int",
                    "executor_cores": "int",
                    "executor_memory": "int",
                    "keytab": "str",
                    "principal": "str",
                    "master": "str",
                    "name": "str",
                    "num_executors": "int",
                    "yarn_queue": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkSqlOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "SparkSqlOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.mongo_to_s3": {
        "MongoToS3Operator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MongoToS3Operator.mongo_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.s3_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.mongo_db": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.mongo_collection": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.mongo_query": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MongoToS3Operator.is_pipeline": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MongoToS3Operator.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MongoToS3Operator.__init__": [
            {
                "type": "method",
                "args": {
                    "mongo_conn_id": "str",
                    "s3_conn_id": "str",
                    "mongo_collection": "str",
                    "mongo_query": "list",
                    "s3_bucket": "str",
                    "s3_key": "str",
                    "mongo_db": "str",
                    "replace": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MongoToS3Operator._stringify": [
            {
                "type": "method",
                "args": {
                    "iterable": "list",
                    "joinable": "str"
                }
            }
        ],
        "MongoToS3Operator.transform": [
            {
                "type": "method",
                "args": {
                    "docs": "list"
                }
            }
        ],
        "MongoToS3Operator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.utils.mlengine_prediction_summary": {
        "JsonCoder.encode": [
            {
                "type": "method",
                "args": {
                    "x": "dict"
                }
            }
        ],
        "JsonCoder.decode": [
            {
                "type": "method",
                "args": {
                    "x": "str"
                }
            }
        ],
        "MakeSummary": [
            {
                "type": "func",
                "args": {
                    "pcoll": "beam.Pipeline",
                    "metric_fn": "beam.Pipeline",
                    "metric_keys": "beam.Pipeline"
                }
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {
                    "argv": "str"
                }
            }
        ]
    },
    "contrib.utils.gcp_field_sanitizer": {
        "GcpBodyFieldSanitizer._sanitize_specs": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "GcpBodyFieldSanitizer._sanitize": [
            {
                "type": "method",
                "args": {
                    "dictionary": "dict",
                    "remaining_field_spec": "str",
                    "current_path": "str"
                }
            }
        ],
        "GcpBodyFieldSanitizer.sanitize": [
            {
                "type": "method",
                "args": {
                    "body": "dict"
                }
            }
        ]
    },
    "contrib.utils.log.task_handler_with_custom_formatter": {
        "TaskHandlerWithCustomFormatter.__init__": [
            {
                "type": "method",
                "args": {
                    "stream": "logging.Logger"
                }
            }
        ],
        "TaskHandlerWithCustomFormatter._render_prefix": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "TaskHandlerWithCustomFormatter.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ]
    },
    "contrib.utils.weekday": {
        "WeekDay.MONDAY": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WeekDay.TUESDAY": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WeekDay.WEDNESDAY": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WeekDay.THURSDAY": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WeekDay.FRIDAY": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WeekDay.SATURDAY": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WeekDay.SUNDAY": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WeekDay.get_weekday_number": [
            {
                "type": "method",
                "args": {
                    "cls": "type[WeekDay]",
                    "week_day_str": "str"
                }
            }
        ]
    },
    "contrib.utils.gcp_field_validator": {
        "COMPOSITE_FIELD_TYPES": [
            {
                "type": "var",
                "anno": "Sequence[str]"
            }
        ],
        "_int_greater_than_zero": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "EXAMPLE_VALIDATION_SPECIFICATION": [
            {
                "type": "var",
                "anno": "Sequence[Dict[str, str]]"
            }
        ],
        "GcpBodyFieldValidator._validation_specs": [
            {
                "type": "attr",
                "anno": "Sequence[str]"
            }
        ],
        "GcpBodyFieldValidator._api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpBodyFieldValidator._get_field_name_with_parent": [
            {
                "type": "method",
                "args": {
                    "field_name": "str",
                    "parent": "str"
                }
            }
        ],
        "GcpBodyFieldValidator._sanity_checks": [
            {
                "type": "method",
                "args": {
                    "children_validation_specs": "Dict",
                    "field_type": "str",
                    "full_field_path": "str",
                    "regexp": "str",
                    "allow_empty": "bool",
                    "custom_validation": "Callable",
                    "value": "str"
                }
            }
        ],
        "GcpBodyFieldValidator._validate_field": [
            {
                "type": "method",
                "args": {
                    "validation_spec": "GcpValidationSpecification",
                    "dictionary_to_validate": "Dict",
                    "parent": "str",
                    "force_optional": "bool"
                }
            }
        ],
        "GcpBodyFieldValidator.validate": [
            {
                "type": "method",
                "args": {
                    "body_to_validate": "Dict"
                }
            }
        ]
    },
    "contrib.sensors.jira_sensor": {
        "JiraSensor.jira_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraSensor.result_processor": [
            {
                "type": "attr",
                "anno": "Resource"
            }
        ],
        "JiraSensor.method_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraSensor.method_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JiraSensor.jira_operator": [
            {
                "type": "attr",
                "anno": "JiraOperator"
            }
        ],
        "JiraTicketSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "JiraTicketSensor.jira_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraTicketSensor.ticket_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraTicketSensor.field": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraTicketSensor.expected_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "jira_conn_id": "str",
                    "method_name": "str",
                    "method_params": "dict",
                    "result_processor": "Resource",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "JiraTicketSensor.issue_field_checker": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "issue": "Resource"
                }
            }
        ],
        "JiraTicketSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "jira_conn_id": "str",
                    "ticket_id": "str",
                    "field": "str",
                    "expected_value": "str",
                    "field_checker_func": "Callable",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "JiraSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "JiraTicketSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.aws_athena_sensor": {
        "AthenaSensor.INTERMEDIATE_STATES": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "AthenaSensor.FAILURE_STATES": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "AthenaSensor.SUCCESS_STATES": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "AthenaSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "AthenaSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AthenaSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AthenaSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AthenaSensor.query_execution_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AthenaSensor.hook": [
            {
                "type": "attr",
                "anno": "AWSAthenaHook"
            }
        ],
        "AthenaSensor.sleep_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AthenaSensor.max_retires": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AthenaSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "query_execution_id": "str",
                    "max_retires": "int",
                    "aws_conn_id": "str",
                    "sleep_time": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AthenaSensor.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AthenaSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.redis_pub_sub_sensor": {
        "RedisPubSubSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "RedisPubSubSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisPubSubSensor.channels": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisPubSubSensor.redis_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisPubSubSensor.pubsub": [
            {
                "type": "attr",
                "anno": "RedisHook"
            }
        ],
        "RedisPubSubSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "channels": "str",
                    "redis_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "RedisPubSubSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.wasb_sensor": {
        "WasbBlobSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "WasbBlobSensor.wasb_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbBlobSensor.container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbBlobSensor.blob_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbBlobSensor.check_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "WasbBlobSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "blob_name": "str",
                    "wasb_conn_id": "str",
                    "check_options": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbPrefixSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "WasbPrefixSensor.wasb_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbPrefixSensor.container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbPrefixSensor.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbPrefixSensor.check_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "WasbPrefixSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "prefix": "str",
                    "wasb_conn_id": "str",
                    "check_options": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbPrefixSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "WasbBlobSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.aws_redshift_cluster_sensor": {
        "AwsRedshiftClusterSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AwsRedshiftClusterSensor.cluster_identifier": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsRedshiftClusterSensor.target_status": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsRedshiftClusterSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsRedshiftClusterSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str",
                    "target_status": "str",
                    "aws_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "AwsRedshiftClusterSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.imap_attachment_sensor": {
        "ImapAttachmentSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "ImapAttachmentSensor.attachment_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImapAttachmentSensor.mail_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImapAttachmentSensor.check_regex": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ImapAttachmentSensor.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImapAttachmentSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "attachment_name": "str",
                    "mail_folder": "str",
                    "check_regex": "bool",
                    "conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "ImapAttachmentSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.sftp_sensor": {
        "SFTPSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SFTPSensor.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPSensor.hook": [
            {
                "type": "attr",
                "anno": "SFTPHook"
            }
        ],
        "SFTPSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "sftp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SFTPSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.aws_glue_catalog_partition_sensor": {
        "AwsGlueCatalogPartitionSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AwsGlueCatalogPartitionSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsGlueCatalogPartitionSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsGlueCatalogPartitionSensor.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsGlueCatalogPartitionSensor.table_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsGlueCatalogPartitionSensor.expression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsGlueCatalogPartitionSensor.database_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsGlueCatalogPartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table_name": "str",
                    "expression": "str",
                    "aws_conn_id": "str",
                    "region_name": "str",
                    "database_name": "str",
                    "poke_interval": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AwsGlueCatalogPartitionSensor.hook": [
            {
                "type": "attr",
                "anno": "AwsGlueCatalogHook"
            }
        ],
        "AwsGlueCatalogPartitionSensor.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsGlueCatalogPartitionSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.sagemaker_base_sensor": {
        "SageMakerBaseSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerBaseSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerBaseSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerBaseSensor.non_terminal_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerBaseSensor.failed_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerBaseSensor.get_sagemaker_response": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerBaseSensor.get_failed_reason_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerBaseSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerBaseSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.aws_sqs_sensor": {
        "SQSSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SQSSensor.sqs_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQSSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SQSSensor.max_messages": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SQSSensor.wait_time_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SQSSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "sqs_queue": "str",
                    "aws_conn_id": "str",
                    "max_messages": "int",
                    "wait_time_seconds": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SQSSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.emr_step_sensor": {
        "EmrStepSensor.NON_TERMINAL_STATES": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrStepSensor.FAILED_STATE": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrStepSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrStepSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrStepSensor.job_flow_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrStepSensor.step_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrStepSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_flow_id": "str",
                    "step_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "EmrStepSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "EmrStepSensor.failure_message_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "EmrStepSensor.get_emr_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.sensors.cassandra_record_sensor": {
        "CassandraRecordSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CassandraRecordSensor.cassandra_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraRecordSensor.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraRecordSensor.keys": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "CassandraRecordSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "keys": "list[str]",
                    "cassandra_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "CassandraRecordSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.redis_key_sensor": {
        "RedisKeySensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "RedisKeySensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisKeySensor.redis_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisKeySensor.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisKeySensor.__init__": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "redis_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "RedisKeySensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.weekday_sensor": {
        "DayOfWeekSensor.week_day": [
            {
                "type": "attr",
                "anno": "Union[str, WeekDay]"
            }
        ],
        "DayOfWeekSensor.use_task_execution_day": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DayOfWeekSensor._week_day_num": [
            {
                "type": "attr",
                "anno": "set[int]"
            }
        ],
        "DayOfWeekSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "week_day": "Union[str, WeekDay]",
                    "use_task_execution_day": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DayOfWeekSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.hdfs_sensor": {
        "HdfsSensorRegex.regex": [
            {
                "type": "attr",
                "anno": "Pattern"
            }
        ],
        "HdfsSensorRegex.__init__": [
            {
                "type": "method",
                "args": {
                    "regex": "Pattern",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "HdfsSensorFolder.be_empty": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HdfsSensorFolder.__init__": [
            {
                "type": "method",
                "args": {
                    "be_empty": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HdfsSensorFolder.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "HdfsSensorRegex.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.gcs_sensor": {
        "GoogleCloudStorageObjectSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageObjectSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.google_cloud_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "google_cloud_conn_id": "str",
                    "delegate_to": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "ts_function": [
            {
                "type": "func",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.ts_func": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.google_cloud_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "ts_func": "datetime",
                    "google_cloud_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStoragePrefixSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStoragePrefixSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.google_cloud_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "google_cloud_conn_id": "str",
                    "delegate_to": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "get_time": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.inactivity_period": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.min_objects": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.previous_num_objects": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.inactivity_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.allow_delete": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.google_cloud_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.last_activity_time": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "inactivity_period": "int",
                    "min_objects": "int",
                    "previous_num_objects": "int",
                    "allow_delete": "bool",
                    "google_cloud_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.is_bucket_updated": [
            {
                "type": "method",
                "args": {
                    "current_num_objects": "int"
                }
            }
        ],
        "GoogleCloudStorageUploadSessionCompleteSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudStoragePrefixSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudStorageObjectSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.datadog_sensor": {
        "DatadogSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogSensor.datadog_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogSensor.from_seconds_ago": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatadogSensor.up_to_seconds_from_now": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatadogSensor.priority": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatadogSensor.sources": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogSensor.tags": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogSensor.response_check": [
            {
                "type": "attr",
                "anno": "Callable[[dict], bool]"
            }
        ],
        "DatadogSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "datadog_conn_id": "str",
                    "from_seconds_ago": "int",
                    "up_to_seconds_from_now": "int",
                    "priority": "int",
                    "sources": "str",
                    "tags": "str",
                    "response_check": "Callable[[dict], bool]",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "DatadogSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.azure_cosmos_sensor": {
        "AzureCosmosDocumentSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AzureCosmosDocumentSensor.azure_cosmos_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDocumentSensor.database_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDocumentSensor.collection_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDocumentSensor.document_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDocumentSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "database_name": "str",
                    "collection_name": "str",
                    "document_id": "str",
                    "azure_cosmos_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureCosmosDocumentSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.cassandra_table_sensor": {
        "CassandraTableSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CassandraTableSensor.cassandra_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraTableSensor.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraTableSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "cassandra_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "CassandraTableSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.pubsub_sensor": {
        "PubSubPullSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PubSubPullSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.subscription": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.max_messages": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "PubSubPullSensor.return_immediately": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubPullSensor.ack_messages": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubPullSensor._messages": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PubSubPullSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "max_messages": "int",
                    "return_immediately": "bool",
                    "ack_messages": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubPullSensor.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PubSubPullSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.bigquery_sensor": {
        "BigQueryTableSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryTableSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str",
                    "table_id": "str",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryTableSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.mongo_sensor": {
        "MongoSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MongoSensor.mongo_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoSensor.collection": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoSensor.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "collection": "str",
                    "query": "str",
                    "mongo_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MongoSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.sagemaker_training_sensor": {
        "SageMakerTrainingSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerTrainingSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SageMakerTrainingSensor.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerTrainingSensor.print_log": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerTrainingSensor.positions": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerTrainingSensor.stream_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerTrainingSensor.instance_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerTrainingSensor.state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerTrainingSensor.last_description": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerTrainingSensor.last_describe_job_call": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "SageMakerTrainingSensor.log_resource_inited": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerTrainingSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "print_log": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SageMakerTrainingSensor.non_terminal_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTrainingSensor.failed_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTrainingSensor.get_failed_reason_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTrainingSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTrainingSensor.init_log_resource": [
            {
                "type": "method",
                "args": {
                    "hook": "SagemakerHook"
                }
            }
        ],
        "SageMakerTrainingSensor.get_sagemaker_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.sensors.emr_base_sensor": {
        "EmrBaseSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrBaseSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrBaseSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "EmrBaseSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.celery_queue_sensor": {
        "CeleryQueueSensor.celery_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CeleryQueueSensor.target_task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CeleryQueueSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "celery_queue": "str",
                    "target_task_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CeleryQueueSensor._check_task_id": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "CeleryQueueSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.bash_sensor": {
        "BashSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BashSensor.bash_command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashSensor.env": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BashSensor.output_encoding": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bash_command": "str",
                    "env": "dict",
                    "output_encoding": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BashSensor.sp": [
            {
                "type": "attr",
                "anno": "Popen"
            }
        ],
        "BashSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.gcp_transfer_sensor": {
        "GCPTransferServiceWaitForJobStatusSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GCPTransferServiceWaitForJobStatusSensor.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCPTransferServiceWaitForJobStatusSensor.expected_statuses": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCPTransferServiceWaitForJobStatusSensor.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCPTransferServiceWaitForJobStatusSensor.gcp_cloud_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCPTransferServiceWaitForJobStatusSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "expected_statuses": "str",
                    "project_id": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GCPTransferServiceWaitForJobStatusSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.file_sensor": {
        "FileSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "FileSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileSensor.filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileSensor.fs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "fs_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FileSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.ftp_sensor": {
        "FTPSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "FTPSensor.transient_errors": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "FTPSensor.error_code_pattern": [
            {
                "type": "attr",
                "anno": "re.Pattern"
            }
        ],
        "FTPSensor.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FTPSensor.ftp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FTPSensor.fail_on_transient_errors": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "FTPSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "ftp_conn_id": "str",
                    "fail_on_transient_errors": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FTPSensor._create_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPSensor._get_error_code": [
            {
                "type": "method",
                "args": {
                    "e": "ftplib.error_perm"
                }
            }
        ],
        "FTPSSensor._create_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.emr_job_flow_sensor": {
        "EmrJobFlowSensor.NON_TERMINAL_STATES": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrJobFlowSensor.FAILED_STATE": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrJobFlowSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrJobFlowSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrJobFlowSensor.job_flow_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrJobFlowSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_flow_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "EmrJobFlowSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "EmrJobFlowSensor.failure_message_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "EmrJobFlowSensor.get_emr_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.sensors.sagemaker_transform_sensor": {
        "SageMakerTransformSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerTransformSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SageMakerTransformSensor.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerTransformSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SageMakerTransformSensor.non_terminal_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTransformSensor.failed_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTransformSensor.get_failed_reason_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTransformSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTransformSensor.get_sagemaker_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.sensors.sagemaker_endpoint_sensor": {
        "SageMakerEndpointSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerEndpointSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SageMakerEndpointSensor.endpoint_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerEndpointSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "endpoint_name": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SageMakerEndpointSensor.non_terminal_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerEndpointSensor.failed_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerEndpointSensor.get_failed_reason_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerEndpointSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerEndpointSensor.get_sagemaker_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.sensors.qubole_sensor": {
        "QuboleSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "QuboleSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "QuboleSensor.data": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleSensor.qubole_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleFileSensor.sensor_class": [
            {
                "type": "attr",
                "anno": "FileSensor"
            }
        ],
        "QuboleFileSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QubolePartitionSensor.sensor_class": [
            {
                "type": "attr",
                "anno": "PartitionSensor"
            }
        ],
        "QubolePartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "str",
                    "qubole_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.python_sensor": {
        "PythonSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PythonSensor.python_callable": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "PythonSensor.op_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PythonSensor.op_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PythonSensor.provide_context": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PythonSensor.templates_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PythonSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "python_callable": "Callable",
                    "op_args": "list",
                    "op_kwargs": "dict",
                    "provide_context": "bool",
                    "templates_dict": "dict",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "PythonSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.sagemaker_tuning_sensor": {
        "SageMakerTuningSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerTuningSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SageMakerTuningSensor.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerTuningSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SageMakerTuningSensor.non_terminal_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTuningSensor.failed_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTuningSensor.get_failed_reason_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTuningSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTuningSensor.get_sagemaker_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.ftp_hook": {
        "FTPHook.ftp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FTPHook.conn": [
            {
                "type": "attr",
                "anno": "ftplib.FTP"
            }
        ],
        "FTPHook.__init__": [
            {
                "type": "method",
                "args": {
                    "ftp_conn_id": "str"
                }
            }
        ],
        "FTPHook.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPHook.close_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPHook.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "Exception",
                    "exc_val": "Exception",
                    "exc_tb": "Exception"
                }
            }
        ],
        "FTPSHook.conn": [
            {
                "type": "attr",
                "anno": "ftplib.FTP_TLS"
            }
        ],
        "mlsd": [
            {
                "type": "func",
                "args": {
                    "conn": "ftplib.FTP",
                    "path": "str",
                    "facts": "ftplib.Field"
                }
            }
        ],
        "FTPHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPHook.get_size": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPHook.get_mod_time": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPHook.rename": [
            {
                "type": "method",
                "args": {
                    "from_name": "str",
                    "to_name": "str"
                }
            }
        ],
        "FTPHook.delete_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPHook.create_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPHook.list_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "nlst": "bool"
                }
            }
        ],
        "FTPHook.describe_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPHook.delete_file": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPHook.store_file": [
            {
                "type": "method",
                "args": {
                    "remote_full_path": "str",
                    "local_full_path_or_buffer": "ftplib.FTP"
                }
            }
        ],
        "FTPHook.retrieve_file": [
            {
                "type": "method",
                "args": {
                    "remote_full_path": "str",
                    "local_full_path_or_buffer": "str",
                    "callback": "Callable[[], None]"
                }
            }
        ]
    },
    "contrib.hooks.gcp_function_hook": {
        "TIME_TO_SLEEP_IN_SECONDS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GcfHook._conn": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "GcfHook.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcfHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GcfHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcp_video_intelligence_hook": {
        "CloudVideoIntelligenceHook._conn": [
            {
                "type": "attr",
                "anno": "VideoIntelligenceServiceClient"
            }
        ]
    },
    "contrib.hooks.azure_data_lake_hook": {
        "AzureDataLakeHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureDataLakeHook.connection": [
            {
                "type": "attr",
                "anno": "lib.AzureDLFileSystem"
            }
        ],
        "AzureDataLakeHook.account_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureDataLakeHook.check_for_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "AzureDataLakeHook.upload_file": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "remote_path": "str",
                    "nthreads": "int",
                    "overwrite": "bool",
                    "buffersize": "int",
                    "blocksize": "int"
                }
            }
        ],
        "AzureDataLakeHook.download_file": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "remote_path": "str",
                    "nthreads": "int",
                    "overwrite": "bool",
                    "buffersize": "int",
                    "blocksize": "int"
                }
            }
        ],
        "AzureDataLakeHook.list": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "AzureDataLakeHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureDataLakeHook.__init__": [
            {
                "type": "method",
                "args": {
                    "azure_data_lake_conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.discord_webhook_hook": {
        "DiscordWebhookHook.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.webhook_endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.avatar_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.tts": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DiscordWebhookHook.proxy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook._build_discord_payload": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DiscordWebhookHook._get_webhook_endpoint": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_endpoint": "str"
                }
            }
        ],
        "DiscordWebhookHook.__init__": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_endpoint": "str",
                    "message": "str",
                    "username": "str",
                    "avatar_url": "str",
                    "tts": "bool",
                    "proxy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DiscordWebhookHook.execute": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.dingding_hook": {
        "DingdingHook.message_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DingdingHook.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DingdingHook.at_mobiles": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DingdingHook.at_all": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DingdingHook.__init__": [
            {
                "type": "method",
                "args": {
                    "dingding_conn_id": "str",
                    "message_type": "str",
                    "message": "str",
                    "at_mobiles": "bool",
                    "at_all": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DingdingHook._build_message": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DingdingHook.base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DingdingHook.get_conn": [
            {
                "type": "method",
                "args": {
                    "headers": "dict"
                }
            }
        ],
        "DingdingHook._get_endpoint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DingdingHook.send": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.azure_cosmos_hook": {
        "AzureCosmosDBHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDBHook.connection": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "AzureCosmosDBHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AzureCosmosDBHook.endpoint_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDBHook.master_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDBHook.default_database_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDBHook.default_collection_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureCosmosDBHook.cosmos_client": [
            {
                "type": "attr",
                "anno": "cosmos_client.CosmosClient"
            }
        ],
        "AzureCosmosDBHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureCosmosDBHook.__get_database_name": [
            {
                "type": "method",
                "args": {
                    "database_name": "str"
                }
            }
        ],
        "AzureCosmosDBHook.__get_collection_name": [
            {
                "type": "method",
                "args": {
                    "collection_name": "str"
                }
            }
        ],
        "AzureCosmosDBHook.does_database_exist": [
            {
                "type": "method",
                "args": {
                    "database_name": "str"
                }
            }
        ],
        "AzureCosmosDBHook.create_database": [
            {
                "type": "method",
                "args": {
                    "database_name": "str"
                }
            }
        ],
        "get_database_link": [
            {
                "type": "func",
                "args": {
                    "database_id": "str"
                }
            }
        ],
        "AzureCosmosDBHook.delete_database": [
            {
                "type": "method",
                "args": {
                    "database_name": "str"
                }
            }
        ],
        "AzureCosmosDBHook.create_collection": [
            {
                "type": "method",
                "args": {
                    "collection_name": "str",
                    "database_name": "str"
                }
            }
        ],
        "AzureCosmosDBHook.does_collection_exist": [
            {
                "type": "method",
                "args": {
                    "collection_name": "str",
                    "database_name": "str"
                }
            }
        ],
        "get_collection_link": [
            {
                "type": "func",
                "args": {
                    "database_id": "str",
                    "collection_id": "str"
                }
            }
        ],
        "AzureCosmosDBHook.get_documents": [
            {
                "type": "method",
                "args": {
                    "sql_string": "str",
                    "database_name": "str",
                    "collection_name": "str",
                    "partition_key": "str"
                }
            }
        ],
        "AzureCosmosDBHook.insert_documents": [
            {
                "type": "method",
                "args": {
                    "documents": "list",
                    "database_name": "str",
                    "collection_name": "str"
                }
            }
        ],
        "AzureCosmosDBHook.upsert_document": [
            {
                "type": "method",
                "args": {
                    "document": "dict",
                    "database_name": "str",
                    "collection_name": "str",
                    "document_id": "str"
                }
            }
        ],
        "AzureCosmosDBHook.delete_collection": [
            {
                "type": "method",
                "args": {
                    "collection_name": "str",
                    "database_name": "str"
                }
            }
        ],
        "get_document_link": [
            {
                "type": "func",
                "args": {
                    "database_id": "str",
                    "collection_id": "str",
                    "document_id": "str"
                }
            }
        ],
        "AzureCosmosDBHook.get_document": [
            {
                "type": "method",
                "args": {
                    "document_id": "str",
                    "database_name": "str",
                    "collection_name": "str"
                }
            }
        ],
        "AzureCosmosDBHook.delete_document": [
            {
                "type": "method",
                "args": {
                    "document_id": "str",
                    "database_name": "str",
                    "collection_name": "str"
                }
            }
        ],
        "AzureCosmosDBHook.__init__": [
            {
                "type": "method",
                "args": {
                    "azure_cosmos_conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.qubole_check_hook": {
        "COL_DELIM": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ROW_DELIM": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "isint": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "isfloat": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "isbool": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "parse_first_row": [
            {
                "type": "func",
                "args": {
                    "row_list": "list"
                }
            }
        ],
        "QuboleCheckHook.results_parser_callable": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "QuboleCheckHook.context": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "QuboleCheckHook.__init__": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "args": "list",
                    "kwargs": "list"
                }
            }
        ],
        "QuboleCheckHook.get_first": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "QuboleCheckHook.handle_failure_retry": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleCheckHook.get_query_results": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.spark_jdbc_hook": {
        "SparkJDBCHook._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkJDBCHook._py_files": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkJDBCHook._files": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkJDBCHook._jars": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkJDBCHook._num_executors": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._executor_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._driver_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCHook._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._cmd_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_driver": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._metastore_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_truncate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCHook._save_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCHook._save_format": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCHook._batch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._fetch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._num_partitions": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._partition_column": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._lower_bound": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._upper_bound": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._create_table_column_types": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_connection": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkJDBCHook._application_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkJDBCHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkJDBCHook._build_jdbc_application_arguments": [
            {
                "type": "method",
                "args": {
                    "jdbc_conn": "dict"
                }
            }
        ],
        "SparkJDBCHook._resolve_jdbc_connection": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkJDBCHook.__init__": [
            {
                "type": "method",
                "args": {
                    "spark_app_name": "str",
                    "spark_conn_id": "str",
                    "spark_conf": "dict",
                    "spark_py_files": "dict",
                    "spark_files": "dict",
                    "spark_jars": "dict",
                    "num_executors": "int",
                    "executor_cores": "int",
                    "executor_memory": "int",
                    "driver_memory": "int",
                    "verbose": "bool",
                    "principal": "str",
                    "keytab": "str",
                    "cmd_type": "str",
                    "jdbc_table": "str",
                    "jdbc_conn_id": "str",
                    "jdbc_driver": "str",
                    "metastore_table": "str",
                    "jdbc_truncate": "bool",
                    "save_mode": "bool",
                    "save_format": "bool",
                    "batch_size": "int",
                    "fetch_size": "int",
                    "num_partitions": "int",
                    "partition_column": "str",
                    "lower_bound": "int",
                    "upper_bound": "int",
                    "create_table_column_types": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkJDBCHook.submit_jdbc_job": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.snowflake_hook": {
        "SnowflakeHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SnowflakeHook.account": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.warehouse": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.role": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SnowflakeHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "snowflake.connector.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "SnowflakeHook._get_aws_credentials": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnowflakeHook._get_conn_params": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnowflakeHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnowflakeHook.get_uri": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcp_bigtable_hook": {
        "BigtableHook._client": [
            {
                "type": "attr",
                "anno": "Client"
            }
        ],
        "BigtableHook._get_client": [
            {
                "type": "method",
                "args": {
                    "project_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.gcp_cloud_build_hook": {
        "TIME_TO_SLEEP_IN_SECONDS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "CloudBuildHook._conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudBuildHook.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudBuildHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudBuildHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcp_sql_hook": {
        "UNIX_PATH_MAX": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TIME_TO_SLEEP_IN_SECONDS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "CloudSqlOperationStatus.PENDING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlOperationStatus.RUNNING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlOperationStatus.DONE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlOperationStatus.UNKNOWN": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlHook.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudSqlHook._conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "CLOUD_SQL_PROXY_DOWNLOAD_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CLOUD_SQL_PROXY_VERSION_DOWNLOAD_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_CREDENTIALS_KEY_PATH": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCP_CREDENTIALS_KEYFILE_DICT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner.path_prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner.sql_proxy_was_downloaded": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlProxyRunner.sql_proxy_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner.download_sql_proxy_dir": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "CloudSqlProxyRunner.sql_proxy_process": [
            {
                "type": "attr",
                "anno": "Optional[Popen]"
            }
        ],
        "CloudSqlProxyRunner.instance_specification": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner.command_line_parameters": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "CloudSqlProxyRunner.cloud_sql_proxy_socket_directory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner.sql_proxy_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner.credentials_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlProxyRunner._build_command_line_parameters": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlProxyRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "path_prefix": "str",
                    "instance_specification": "str",
                    "gcp_conn_id": "str",
                    "project_id": "str",
                    "sql_proxy_version": "str",
                    "sql_proxy_binary_path": "str"
                }
            }
        ],
        "CONNECTION_URIS": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "CLOUD_SQL_VALID_DATABASE_TYPES": [
            {
                "type": "var",
                "anno": "List[str]"
            }
        ],
        "CloudSqlDatabaseHook._conn": [
            {
                "type": "attr",
                "anno": "Optional[Connection]"
            }
        ],
        "CloudSqlDatabaseHook.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.gcp_cloudsql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.cloudsql_connection": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "CloudSqlDatabaseHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CloudSqlDatabaseHook.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.instance": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "CloudSqlDatabaseHook.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.location": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "CloudSqlDatabaseHook.database_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.use_proxy": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlDatabaseHook.use_ssl": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlDatabaseHook.sql_proxy_use_tcp": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CloudSqlDatabaseHook.sql_proxy_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.sql_proxy_binary_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.public_ip": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.public_port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CloudSqlDatabaseHook.sslcert": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.sslkey": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.sslrootcert": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.sql_proxy_tcp_port": [
            {
                "type": "attr",
                "anno": "Optional[int]"
            }
        ],
        "CloudSqlDatabaseHook.sql_proxy_unique_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook.db_hook": [
            {
                "type": "attr",
                "anno": "Union[PostgresHook, MySqlHook]"
            }
        ],
        "CloudSqlDatabaseHook.reserved_tcp_socket": [
            {
                "type": "attr",
                "anno": "Optional[socket.socket]"
            }
        ],
        "CloudSqlDatabaseHook.db_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudSqlDatabaseHook._quote": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "CloudSqlDatabaseHook._get_instance_socket_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlDatabaseHook._get_sqlproxy_instance_specification": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlDatabaseHook._check_ssl_file": [
            {
                "type": "method",
                "args": {
                    "file_to_check": "str",
                    "name": "str"
                }
            }
        ],
        "CloudSqlDatabaseHook.create_connection": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "CloudSqlProxyRunner._get_credential_parameters": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "CloudSqlProxyRunner._download_sql_proxy_if_needed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlProxyRunner.get_proxy_version": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudSqlHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.aws_dynamodb_hook": {
        "AwsDynamoDBHook.table_keys": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsDynamoDBHook.table_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsDynamoDBHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsDynamoDBHook.__init__": [
            {
                "type": "method",
                "args": {
                    "table_keys": "str",
                    "table_name": "str",
                    "region_name": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AwsDynamoDBHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsDynamoDBHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsDynamoDBHook.write_batch_data": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ]
    },
    "contrib.hooks.cloudant_hook": {
        "CloudantHook.cloudant_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudantHook.__init__": [
            {
                "type": "method",
                "args": {
                    "cloudant_conn_id": "str"
                }
            }
        ],
        "CloudantHook._validate_connection": [
            {
                "type": "method",
                "args": {
                    "conn": "cloudant.Connection"
                }
            }
        ],
        "CloudantHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcp_mlengine_hook": {
        "MLEngineHook._mlengine": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "_poll_with_exponential_delay": [
            {
                "type": "func",
                "args": {
                    "request": "Callable",
                    "max_n": "int",
                    "is_done_func": "Callable",
                    "is_error_func": "Callable"
                }
            }
        ],
        "MLEngineHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MLEngineHook.delete_version": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model_name": "str",
                    "version_name": "str"
                }
            }
        ],
        "MLEngineHook._wait_for_job_done": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_id": "str",
                    "interval": "int"
                }
            }
        ]
    },
    "contrib.hooks.datadog_hook": {
        "DatadogHook.api_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogHook.app_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogHook.source_type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogHook.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogHook.__init__": [
            {
                "type": "method",
                "args": {
                    "datadog_conn_id": "str"
                }
            }
        ],
        "DatadogHook.validate_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "DatadogHook.post_event": [
            {
                "type": "method",
                "args": {
                    "title": "str",
                    "text": "str",
                    "aggregation_key": "str",
                    "alert_type": "str",
                    "date_happened": "str",
                    "handle": "str",
                    "priority": "int",
                    "related_event_id": "str",
                    "tags": "dict",
                    "device_name": "str"
                }
            }
        ],
        "DatadogHook.query_metric": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "from_seconds_ago": "int",
                    "to_seconds_ago": "int"
                }
            }
        ],
        "DatadogHook.send_metric": [
            {
                "type": "method",
                "args": {
                    "metric_name": "str",
                    "datapoint": "dict",
                    "tags": "dict",
                    "type_": "str",
                    "interval": "float"
                }
            }
        ]
    },
    "contrib.hooks.jenkins_hook": {
        "JenkinsHook.connection": [
            {
                "type": "attr",
                "anno": "jenkins.Connection"
            }
        ],
        "JenkinsHook.jenkins_server": [
            {
                "type": "attr",
                "anno": "jenkins.Jenkins"
            }
        ],
        "JenkinsHook.get_jenkins_server": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JenkinsHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.datastore_hook": {
        "DatastoreHook.connection": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreHook.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatastoreHook.commit": [
            {
                "type": "method",
                "args": {
                    "body": "dict"
                }
            }
        ],
        "DatastoreHook.lookup": [
            {
                "type": "method",
                "args": {
                    "keys": "str",
                    "read_consistency": "bool",
                    "transaction": "str"
                }
            }
        ],
        "DatastoreHook.run_query": [
            {
                "type": "method",
                "args": {
                    "body": "dict"
                }
            }
        ],
        "DatastoreHook.get_operation": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "DatastoreHook.poll_operation_until_done": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "polling_interval_in_seconds": "int"
                }
            }
        ],
        "DatastoreHook.import_from_storage_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "file": "str",
                    "namespace": "str",
                    "entity_filter": "dict",
                    "labels": "dict"
                }
            }
        ],
        "DatastoreHook.__init__": [
            {
                "type": "method",
                "args": {
                    "datastore_conn_id": "str",
                    "delegate_to": "str",
                    "api_version": "str"
                }
            }
        ],
        "DatastoreHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DatastoreHook.export_to_storage_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "namespace": "str",
                    "entity_filter": "dict",
                    "labels": "dict"
                }
            }
        ],
        "DatastoreHook.delete_operation": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "DatastoreHook.rollback": [
            {
                "type": "method",
                "args": {
                    "transaction": "str"
                }
            }
        ],
        "DatastoreHook.begin_transaction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DatastoreHook.allocate_ids": [
            {
                "type": "method",
                "args": {
                    "partial_keys": "dict"
                }
            }
        ]
    },
    "contrib.hooks.gcp_container_hook": {
        "OPERATIONAL_POLL_INTERVAL": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GKEClusterHook._client": [
            {
                "type": "attr",
                "anno": "Optional[container_v1.ClusterManagerClient]"
            }
        ],
        "GKEClusterHook.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterHook._dict_to_proto": [
            {
                "type": "method",
                "args": {
                    "py_dict": "Dict",
                    "proto": "Cluster"
                }
            }
        ]
    },
    "contrib.hooks.spark_submit_hook": {
        "SparkSubmitHook._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._files": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._py_files": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._archives": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._driver_class_path": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._jars": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._java_class": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._packages": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._exclude_packages": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._repositories": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._total_executor_cores": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._executor_cores": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._executor_memory": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._driver_memory": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._keytab": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._principal": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._num_executors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._application_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._env_vars": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitHook._submit_sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "SparkSubmitHook._yarn_application_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._kubernetes_driver_pod": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._spark_binary": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._connection": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._is_yarn": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitHook._is_kubernetes": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitHook._should_track_driver_status": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitHook._driver_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._driver_status": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._spark_exit_code": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSubmitHook._resolve_should_track_driver_status": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._get_spark_binary_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._env": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._resolve_connection": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conf": "dict",
                    "conn_id": "str",
                    "files": "dict",
                    "py_files": "dict",
                    "archives": "dict",
                    "driver_class_path": "dict",
                    "jars": "dict",
                    "java_class": "dict",
                    "packages": "dict",
                    "exclude_packages": "dict",
                    "repositories": "dict",
                    "total_executor_cores": "dict",
                    "executor_cores": "dict",
                    "executor_memory": "dict",
                    "driver_memory": "dict",
                    "keytab": "dict",
                    "principal": "dict",
                    "name": "str",
                    "num_executors": "dict",
                    "application_args": "dict",
                    "env_vars": "dict",
                    "verbose": "bool",
                    "spark_binary": "str"
                }
            }
        ],
        "SparkSubmitHook._build_spark_driver_kill_command": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._process_spark_status_log": [
            {
                "type": "method",
                "args": {
                    "itr": "list"
                }
            }
        ],
        "SparkSubmitHook._process_spark_submit_log": [
            {
                "type": "method",
                "args": {
                    "itr": "list"
                }
            }
        ],
        "SparkSubmitHook._build_track_driver_status_command": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._start_driver_status_tracking": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._build_spark_submit_command": [
            {
                "type": "method",
                "args": {
                    "application": "str"
                }
            }
        ],
        "SparkSubmitHook.submit": [
            {
                "type": "method",
                "args": {
                    "application": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkSubmitHook.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcp_vision_hook": {
        "ERR_DIFF_NAMES": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ERR_UNABLE_TO_CREATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "NameDeterminer.label": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NameDeterminer.id_label": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NameDeterminer.get_path": [
            {
                "type": "attr",
                "anno": "Callable[[str, str, str], str]"
            }
        ],
        "CloudVisionHook.product_name_determiner": [
            {
                "type": "attr",
                "anno": "NameDeterminer"
            }
        ],
        "CloudVisionHook.product_set_name_determiner": [
            {
                "type": "attr",
                "anno": "NameDeterminer"
            }
        ],
        "CloudVisionHook._client": [
            {
                "type": "attr",
                "anno": "ProductSearchClient"
            }
        ],
        "CloudVisionHook._get_autogenerated_id": [
            {
                "type": "method",
                "args": {
                    "response": "Product"
                }
            }
        ],
        "CloudVisionHook.safe_search_detection": [
            {
                "type": "method",
                "args": {
                    "image": "Union[Dict, Image]",
                    "max_results": "int",
                    "retry": "Retry",
                    "timeout": "float",
                    "additional_properties": "Dict"
                }
            }
        ],
        "CloudVisionHook.delete_product": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product_id": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]"
                }
            }
        ],
        "CloudVisionHook.update_product": [
            {
                "type": "method",
                "args": {
                    "product": "Union[dict, Product]",
                    "location": "str",
                    "product_id": "str",
                    "update_mask": "Dict[str, FieldMask]",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]"
                }
            }
        ],
        "CloudVisionHook.get_product": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product_id": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]"
                }
            }
        ],
        "CloudVisionHook.create_product": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product": "Union[dict, Product]",
                    "project_id": "str",
                    "product_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]"
                }
            }
        ],
        "CloudVisionHook.delete_product_set": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "product_set_id": "str",
                    "project_id": "str",
                    "retry": "Retry",
                    "timeout": "float",
                    "metadata": "Sequence[Tuple[str, str]]"
                }
            }
        ]
    },
    "contrib.hooks.gcp_compute_hook": {
        "TIME_TO_SLEEP_IN_SECONDS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GceOperationStatus.PENDING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceOperationStatus.RUNNING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceOperationStatus.DONE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceHook._conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceHook.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GceHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GceHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.fs_hook": {
        "FSHook.basepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FSHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "FSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FSHook.get_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FSHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.gcp_dataflow_hook": {
        "DEFAULT_DATAFLOW_LOCATION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DataflowJobStatus.JOB_STATE_DONE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowJobStatus.JOB_STATE_RUNNING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowJobStatus.JOB_TYPE_STREAMING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowJobStatus.JOB_STATE_FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowJobStatus.JOB_STATE_CANCELLED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowJobStatus.JOB_STATE_PENDING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowJobStatus.FAILED_END_STATES": [
            {
                "type": "attr",
                "anno": "Set[str]"
            }
        ],
        "DataflowJobStatus.SUCCEEDED_END_STATES": [
            {
                "type": "attr",
                "anno": "Set[str]"
            }
        ],
        "DataflowJobStatus.END_STATES": [
            {
                "type": "attr",
                "anno": "Set[str]"
            }
        ],
        "_DataflowJob._dataflow": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "_DataflowJob._project_number": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob._job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob._job_location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob._multiple_jobs": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "_DataflowJob._job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob._num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DataflowJob._poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DataflowJob._jobs": [
            {
                "type": "attr",
                "anno": "List[Dict[str, Any]]"
            }
        ],
        "_DataflowJob.is_job_running": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DataflowJob._job_state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob.get": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_Dataflow._proc": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "DataFlowHook.poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataFlowHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataFlowHook._set_variables": [
            {
                "type": "method",
                "args": {
                    "variables": "Dict"
                }
            }
        ],
        "_DataflowJob._get_dataflow_jobs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DataflowJob._get_jobs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DataflowJob.check_dataflow_job_state": [
            {
                "type": "method",
                "args": {
                    "job": "Dict[str, Any]"
                }
            }
        ],
        "DataFlowHook.start_template_dataflow": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "variables": "Dict",
                    "parameters": "Dict",
                    "dataflow_template": "str",
                    "append_job_name": "bool"
                }
            }
        ],
        "DataFlowHook.start_python_dataflow": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "variables": "Dict",
                    "dataflow": "str",
                    "py_options": "List[str]",
                    "append_job_name": "bool"
                }
            }
        ],
        "_Dataflow.__init__": [
            {
                "type": "method",
                "args": {
                    "cmd": "List[str]"
                }
            }
        ],
        "_Dataflow._line": [
            {
                "type": "method",
                "args": {
                    "fd": "int"
                }
            }
        ],
        "DataFlowHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.spark_sql_hook": {
        "SparkSqlHook._sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._conf": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SparkSqlHook._total_executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlHook._executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlHook._executor_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlHook._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._master": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._num_executors": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlHook._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSqlHook._yarn_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "SparkSqlHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSqlHook.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "conf": "str",
                    "conn_id": "str",
                    "total_executor_cores": "int",
                    "executor_cores": "int",
                    "executor_memory": "int",
                    "keytab": "str",
                    "principal": "str",
                    "master": "str",
                    "name": "str",
                    "num_executors": "int",
                    "verbose": "bool",
                    "yarn_queue": "str"
                }
            }
        ],
        "SparkSqlHook._prepare_command": [
            {
                "type": "method",
                "args": {
                    "cmd": "str"
                }
            }
        ],
        "SparkSqlHook.run_query": [
            {
                "type": "method",
                "args": {
                    "cmd": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkSqlHook.kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.aws_glue_catalog_hook": {
        "AwsGlueCatalogHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsGlueCatalogHook.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "region_name": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AwsGlueCatalogHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsGlueCatalogHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsGlueCatalogHook.get_table": [
            {
                "type": "method",
                "args": {
                    "database_name": "str",
                    "table_name": "str"
                }
            }
        ],
        "AwsGlueCatalogHook.get_table_location": [
            {
                "type": "method",
                "args": {
                    "database_name": "str",
                    "table_name": "str"
                }
            }
        ],
        "AwsGlueCatalogHook.get_partitions": [
            {
                "type": "method",
                "args": {
                    "database_name": "str",
                    "table_name": "str",
                    "expression": "str",
                    "page_size": "int",
                    "max_items": "int"
                }
            }
        ],
        "AwsGlueCatalogHook.check_for_partition": [
            {
                "type": "method",
                "args": {
                    "database_name": "str",
                    "table_name": "str",
                    "expression": "str"
                }
            }
        ]
    },
    "contrib.hooks.imap_hook": {
        "ImapHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "ImapHook.mail_client": [
            {
                "type": "attr",
                "anno": "imaplib.IMAP4_SSL"
            }
        ],
        "ImapHook.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "Any",
                    "exc_val": "Any",
                    "exc_tb": "Any"
                }
            }
        ],
        "ImapHook._list_mail_ids_desc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ImapHook._fetch_mail_body": [
            {
                "type": "method",
                "args": {
                    "mail_id": "str"
                }
            }
        ],
        "ImapHook._is_symlink": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "ImapHook._is_escaping_current_directory": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "ImapHook._correct_path": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "local_output_directory": "str"
                }
            }
        ],
        "Mail.mail": [
            {
                "type": "attr",
                "anno": "email.Message"
            }
        ],
        "Mail.__init__": [
            {
                "type": "method",
                "args": {
                    "mail_body": "str"
                }
            }
        ],
        "Mail.has_attachments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MailPart.part": [
            {
                "type": "attr",
                "anno": "Mail"
            }
        ],
        "MailPart.__init__": [
            {
                "type": "method",
                "args": {
                    "part": "Mail"
                }
            }
        ],
        "MailPart.has_matching_name": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "MailPart.has_equal_name": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "MailPart.get_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ImapHook.__init__": [
            {
                "type": "method",
                "args": {
                    "imap_conn_id": "str"
                }
            }
        ],
        "MailPart.is_attachment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ImapHook._create_file": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "payload": "str",
                    "local_output_directory": "str"
                }
            }
        ],
        "ImapHook.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Mail.get_attachments_by_name": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "check_regex": "bool",
                    "find_first": "bool"
                }
            }
        ],
        "ImapHook._check_mail_body": [
            {
                "type": "method",
                "args": {
                    "response_mail_body": "str",
                    "name": "str",
                    "check_regex": "bool",
                    "latest_only": "bool"
                }
            }
        ],
        "ImapHook._create_files": [
            {
                "type": "method",
                "args": {
                    "mail_attachments": "list",
                    "local_output_directory": "str"
                }
            }
        ],
        "ImapHook._handle_not_found_mode": [
            {
                "type": "method",
                "args": {
                    "not_found_mode": "str"
                }
            }
        ],
        "ImapHook._retrieve_mails_attachments_by_name": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "mail_folder": "str",
                    "check_regex": "bool",
                    "latest_only": "bool"
                }
            }
        ],
        "ImapHook.download_mail_attachments": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "local_output_directory": "str",
                    "mail_folder": "str",
                    "check_regex": "bool",
                    "latest_only": "bool",
                    "not_found_mode": "str"
                }
            }
        ],
        "ImapHook.retrieve_mail_attachments": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "mail_folder": "str",
                    "check_regex": "bool",
                    "latest_only": "bool",
                    "not_found_mode": "str"
                }
            }
        ],
        "ImapHook.has_mail_attachment": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "mail_folder": "str",
                    "check_regex": "bool"
                }
            }
        ]
    },
    "contrib.hooks.gcp_translate_hook": {
        "CloudTranslateHook._client": [
            {
                "type": "attr",
                "anno": "Optional[Client]"
            }
        ]
    },
    "contrib.hooks.spark_jdbc_script": {
        "parser": [
            {
                "type": "var",
                "anno": "argparse.ArgumentParser"
            }
        ],
        "arguments": [
            {
                "type": "var",
                "anno": "argparse.Namespace"
            }
        ],
        "spark": [
            {
                "type": "var",
                "anno": "SparkSession"
            }
        ],
        "set_common_options": [
            {
                "type": "func",
                "args": {
                    "spark_source": "SparkSession",
                    "url": "str",
                    "jdbc_table": "str",
                    "user": "str",
                    "password": "str",
                    "driver": "str"
                }
            }
        ],
        "spark_write_to_jdbc": [
            {
                "type": "func",
                "args": {
                    "spark": "SparkSession",
                    "url": "str",
                    "user": "str",
                    "password": "str",
                    "metastore_table": "str",
                    "jdbc_table": "str",
                    "driver": "str",
                    "truncate": "bool",
                    "save_mode": "str",
                    "batch_size": "int",
                    "num_partitions": "int",
                    "create_table_column_types": "bool"
                }
            }
        ],
        "spark_read_from_jdbc": [
            {
                "type": "func",
                "args": {
                    "spark": "SparkSession",
                    "url": "str",
                    "user": "str",
                    "password": "str",
                    "metastore_table": "str",
                    "jdbc_table": "str",
                    "driver": "str",
                    "save_mode": "str",
                    "save_format": "str",
                    "fetch_size": "int",
                    "num_partitions": "int",
                    "partition_column": "str",
                    "lower_bound": "int",
                    "upper_bound": "int"
                }
            }
        ]
    },
    "contrib.hooks.databricks_hook": {
        "RESTART_CLUSTER_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "START_CLUSTER_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "TERMINATE_CLUSTER_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "RUN_NOW_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "SUBMIT_RUN_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "GET_RUN_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "CANCEL_RUN_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "DatabricksHook.databricks_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksHook.databricks_conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "DatabricksHook.timeout_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksHook.retry_limit": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksHook.retry_delay": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "DatabricksHook._parse_host": [
            {
                "type": "method",
                "args": {
                    "host": "str"
                }
            }
        ],
        "_retryable_error": [
            {
                "type": "func",
                "args": {
                    "exception": "AirflowException"
                }
            }
        ],
        "RUN_LIFE_CYCLE_STATES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "RunState.life_cycle_state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunState.result_state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunState.state_message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunState.__init__": [
            {
                "type": "method",
                "args": {
                    "life_cycle_state": "str",
                    "result_state": "str",
                    "state_message": "str"
                }
            }
        ],
        "RunState.is_successful": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RunState.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "RunState"
                }
            }
        ],
        "RunState.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TokenAuth.token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_TokenAuth.__init__": [
            {
                "type": "method",
                "args": {
                    "token": "str"
                }
            }
        ],
        "_TokenAuth.__call__": [
            {
                "type": "method",
                "args": {
                    "r": "requests.Session"
                }
            }
        ],
        "DatabricksHook.__init__": [
            {
                "type": "method",
                "args": {
                    "databricks_conn_id": "str",
                    "timeout_seconds": "int",
                    "retry_limit": "int",
                    "retry_delay": "float"
                }
            }
        ],
        "RunState.is_terminal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "USER_AGENT_HEADER": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "DatabricksHook._log_request_error": [
            {
                "type": "method",
                "args": {
                    "attempt_num": "int",
                    "error": "AirflowException"
                }
            }
        ],
        "DatabricksHook._do_api_call": [
            {
                "type": "method",
                "args": {
                    "endpoint_info": "tuple",
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.terminate_cluster": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.start_cluster": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.restart_cluster": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.cancel_run": [
            {
                "type": "method",
                "args": {
                    "run_id": "str"
                }
            }
        ],
        "DatabricksHook.get_run_state": [
            {
                "type": "method",
                "args": {
                    "run_id": "str"
                }
            }
        ],
        "DatabricksHook.get_run_page_url": [
            {
                "type": "method",
                "args": {
                    "run_id": "str"
                }
            }
        ],
        "DatabricksHook.submit_run": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.run_now": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ]
    },
    "contrib.hooks.pinot_hook": {
        "PinotDbApiHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PinotDbApiHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PinotDbApiHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PinotDbApiHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PinotDbApiHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "connect.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "PinotDbApiHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "PinotDbApiHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ],
        "PinotDbApiHook.get_records": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "PinotDbApiHook.get_first": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "PinotDbApiHook.get_uri": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PinotDbApiHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.salesforce_hook": {
        "SalesforceHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceHook.conn": [
            {
                "type": "attr",
                "anno": "Salesforce"
            }
        ],
        "SalesforceHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str"
                }
            }
        ],
        "SalesforceHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceHook.describe_object": [
            {
                "type": "method",
                "args": {
                    "obj": "str"
                }
            }
        ],
        "SalesforceHook.get_available_fields": [
            {
                "type": "method",
                "args": {
                    "obj": "str"
                }
            }
        ],
        "SalesforceHook.make_query": [
            {
                "type": "method",
                "args": {
                    "query": "str"
                }
            }
        ],
        "SalesforceHook.get_object_from_salesforce": [
            {
                "type": "method",
                "args": {
                    "obj": "str",
                    "fields": "list"
                }
            }
        ],
        "SalesforceHook._to_timestamp": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "column": "pd.Series"
                }
            }
        ],
        "SalesforceHook.write_object_to_file": [
            {
                "type": "method",
                "args": {
                    "query_results": "dict",
                    "filename": "str",
                    "fmt": "str",
                    "coerce_to_timestamp": "bool",
                    "record_time_added": "bool"
                }
            }
        ]
    },
    "contrib.hooks.redis_hook": {
        "RedisHook.redis_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisHook.redis": [
            {
                "type": "attr",
                "anno": "Redis"
            }
        ],
        "RedisHook.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisHook.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RedisHook.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisHook.db": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisHook.__init__": [
            {
                "type": "method",
                "args": {
                    "redis_conn_id": "str"
                }
            }
        ],
        "RedisHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcp_speech_to_text_hook": {
        "GCPSpeechToTextHook._client": [
            {
                "type": "attr",
                "anno": "Union[SpeechClient, str]"
            }
        ],
        "GCPSpeechToTextHook.recognize_speech": [
            {
                "type": "method",
                "args": {
                    "config": "Union[Dict, RecognitionConfig]",
                    "audio": "Union[Dict, RecognitionAudio]",
                    "retry": "Retry",
                    "timeout": "float"
                }
            }
        ]
    },
    "contrib.hooks.winrm_hook": {
        "WinRMHook.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.remote_port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WinRMHook.transport": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.service": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.ca_trust_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.cert_pem": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.cert_key_pem": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.server_cert_validation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.kerberos_delegation": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WinRMHook.read_timeout_sec": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WinRMHook.operation_timeout_sec": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WinRMHook.kerberos_hostname_override": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.message_encryption": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.credssp_disable_tlsv1_2": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WinRMHook.send_cbt": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WinRMHook.client": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.winrm_protocol": [
            {
                "type": "attr",
                "anno": "Protocol"
            }
        ],
        "WinRMHook.__init__": [
            {
                "type": "method",
                "args": {
                    "ssh_conn_id": "str",
                    "endpoint": "str",
                    "remote_host": "str",
                    "remote_port": "int",
                    "transport": "str",
                    "username": "str",
                    "password": "str",
                    "service": "str",
                    "keytab": "str",
                    "ca_trust_path": "str",
                    "cert_pem": "str",
                    "cert_key_pem": "str",
                    "server_cert_validation": "str",
                    "kerberos_delegation": "bool",
                    "read_timeout_sec": "int",
                    "operation_timeout_sec": "int",
                    "kerberos_hostname_override": "str",
                    "message_encryption": "str",
                    "credssp_disable_tlsv1_2": "bool",
                    "send_cbt": "bool"
                }
            }
        ],
        "WinRMHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.sqoop_hook": {
        "SqoopHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SqoopHook.job_tracker": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.namenode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.libjars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.archives": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.password_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.hcatalog_database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.hcatalog_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopHook.num_mappers": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.properties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SqoopHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SqoopHook.sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "SqoopHook._get_export_format_argument": [
            {
                "type": "method",
                "args": {
                    "file_type": "str"
                }
            }
        ],
        "SqoopHook._prepare_command": [
            {
                "type": "method",
                "args": {
                    "export": "bool"
                }
            }
        ],
        "SqoopHook._export_cmd": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "export_dir": "str",
                    "input_null_string": "bool",
                    "input_null_non_string": "bool",
                    "staging_table": "bool",
                    "clear_staging_table": "bool",
                    "enclosed_by": "bool",
                    "escaped_by": "bool",
                    "input_fields_terminated_by": "bool",
                    "input_lines_terminated_by": "bool",
                    "input_optionally_enclosed_by": "bool",
                    "batch": "bool",
                    "relaxed_isolation": "bool",
                    "extra_export_options": "dict"
                }
            }
        ],
        "SqoopHook._import_cmd": [
            {
                "type": "method",
                "args": {
                    "target_dir": "str",
                    "append": "bool",
                    "file_type": "str",
                    "split_by": "str",
                    "direct": "bool",
                    "driver": "str",
                    "extra_import_options": "dict"
                }
            }
        ],
        "SqoopHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "verbose": "bool",
                    "num_mappers": "str",
                    "hcatalog_database": "str",
                    "hcatalog_table": "str",
                    "properties": "dict"
                }
            }
        ],
        "SqoopHook.cmd_mask_password": [
            {
                "type": "method",
                "args": {
                    "cmd_orig": "list"
                }
            }
        ],
        "SqoopHook.Popen": [
            {
                "type": "method",
                "args": {
                    "cmd": "list",
                    "kwargs": "str"
                }
            }
        ],
        "SqoopHook.export_table": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "export_dir": "str",
                    "input_null_string": "bool",
                    "input_null_non_string": "bool",
                    "staging_table": "bool",
                    "clear_staging_table": "bool",
                    "enclosed_by": "bool",
                    "escaped_by": "bool",
                    "input_fields_terminated_by": "bool",
                    "input_lines_terminated_by": "bool",
                    "input_optionally_enclosed_by": "bool",
                    "batch": "bool",
                    "relaxed_isolation": "bool",
                    "extra_export_options": "dict"
                }
            }
        ],
        "SqoopHook.import_query": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "target_dir": "str",
                    "append": "bool",
                    "file_type": "str",
                    "split_by": "str",
                    "direct": "bool",
                    "driver": "str",
                    "extra_import_options": "dict"
                }
            }
        ],
        "SqoopHook.import_table": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "target_dir": "str",
                    "append": "bool",
                    "file_type": "str",
                    "columns": "str",
                    "split_by": "str",
                    "where": "str",
                    "direct": "bool",
                    "driver": "str",
                    "extra_import_options": "dict"
                }
            }
        ]
    },
    "contrib.hooks.cassandra_hook": {
        "CassandraHook.cluster": [
            {
                "type": "attr",
                "anno": "Cluster"
            }
        ],
        "CassandraHook.keyspace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraHook.session": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "CassandraHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CassandraHook.get_cluster": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CassandraHook.shutdown_cluster": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CassandraHook.table_exists": [
            {
                "type": "method",
                "args": {
                    "table": "str"
                }
            }
        ],
        "CassandraHook.get_lb_policy": [
            {
                "type": "method",
                "args": {
                    "policy_name": "str",
                    "policy_args": "dict"
                }
            }
        ],
        "CassandraHook.__init__": [
            {
                "type": "method",
                "args": {
                    "cassandra_conn_id": "str"
                }
            }
        ],
        "CassandraHook.record_exists": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "keys": "dict"
                }
            }
        ]
    },
    "contrib.hooks.azure_container_instance_hook": {
        "AzureContainerInstanceHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerInstanceHook.connection": [
            {
                "type": "attr",
                "anno": "ContainerInstanceManagementClient"
            }
        ],
        "AzureContainerInstanceHook.create_or_update": [
            {
                "type": "method",
                "args": {
                    "resource_group": "str",
                    "name": "str",
                    "container_group": "ContainerGroup"
                }
            }
        ],
        "AzureContainerInstanceHook.get_logs": [
            {
                "type": "method",
                "args": {
                    "resource_group": "str",
                    "name": "str",
                    "tail": "int"
                }
            }
        ],
        "AzureContainerInstanceHook.exists": [
            {
                "type": "method",
                "args": {
                    "resource_group": "str",
                    "name": "str"
                }
            }
        ],
        "AzureContainerInstanceHook.get_state": [
            {
                "type": "method",
                "args": {
                    "resource_group": "str",
                    "name": "str"
                }
            }
        ],
        "AzureContainerInstanceHook.get_messages": [
            {
                "type": "method",
                "args": {
                    "resource_group": "str",
                    "name": "str"
                }
            }
        ],
        "AzureContainerInstanceHook.get_state_exitcode_details": [
            {
                "type": "method",
                "args": {
                    "resource_group": "str",
                    "name": "str"
                }
            }
        ],
        "AzureContainerInstanceHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureContainerInstanceHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str"
                }
            }
        ],
        "AzureContainerInstanceHook.delete": [
            {
                "type": "method",
                "args": {
                    "resource_group": "str",
                    "name": "str"
                }
            }
        ]
    },
    "contrib.hooks.slack_webhook_hook": {
        "SlackWebhookHook.webhook_token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.attachments": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.channel": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.icon_emoji": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.link_names": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlackWebhookHook.proxy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook._build_slack_message": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SlackWebhookHook._get_token": [
            {
                "type": "method",
                "args": {
                    "token": "str",
                    "http_conn_id": "str"
                }
            }
        ],
        "SlackWebhookHook.__init__": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_token": "str",
                    "message": "str",
                    "attachments": "str",
                    "channel": "str",
                    "username": "str",
                    "icon_emoji": "str",
                    "link_names": "bool",
                    "proxy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SlackWebhookHook.execute": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.vertica_hook": {
        "VerticaHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VerticaHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.segment_hook": {
        "SegmentHook.segment_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentHook.segment_debug_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SegmentHook._args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SegmentHook._kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SegmentHook.connection": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SegmentHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SegmentHook.write_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentHook.__init__": [
            {
                "type": "method",
                "args": {
                    "segment_conn_id": "str",
                    "segment_debug_mode": "bool",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "SegmentHook.on_error": [
            {
                "type": "method",
                "args": {
                    "error": "str",
                    "items": "list"
                }
            }
        ],
        "SegmentHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcp_transfer_hook": {
        "TIME_TO_SLEEP_IN_SECONDS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GcpTransferJobsStatus.ENABLED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferJobsStatus.DISABLED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferJobsStatus.DELETED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferOperationStatus.IN_PROGRESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferOperationStatus.PAUSED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferOperationStatus.SUCCESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferOperationStatus.FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GcpTransferOperationStatus.ABORTED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ACCESS_KEY_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ALREADY_EXISTING_IN_SINK": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AWS_ACCESS_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AWS_S3_DATA_SOURCE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BODY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BUCKET_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DAY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DESCRIPTION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FILTER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FILTER_JOB_NAMES": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FILTER_PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCS_DATA_SINK": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GCS_DATA_SOURCE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "HOURS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "HTTP_DATA_SOURCE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LIST_URL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "METADATA": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "MINUTES": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "MONTH": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "OBJECT_CONDITIONS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "OPERATIONS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PROJECT_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SCHEDULE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SCHEDULE_END_DATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SCHEDULE_START_DATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SECONDS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SECRET_ACCESS_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "START_TIME_OF_DAY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "STATUS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "STATUS1": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TRANSFER_JOB": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TRANSFER_JOB_FIELD_MASK": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TRANSFER_JOBS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TRANSFER_OPERATIONS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TRANSFER_OPTIONS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TRANSFER_SPEC": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "YEAR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "NEGATIVE_STATUSES": [
            {
                "type": "var",
                "anno": "Set[GcpTransferOperationStatus]"
            }
        ],
        "GCPTransferServiceHook.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCPTransferServiceHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GCPTransferServiceHook._conn": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "GCPTransferServiceHook.list_transfer_operations": [
            {
                "type": "method",
                "args": {
                    "request_filter": "Dict",
                    "kwargs": "dict"
                }
            }
        ],
        "GCPTransferServiceHook.pause_transfer_operation": [
            {
                "type": "method",
                "args": {
                    "operation_name": "str"
                }
            }
        ],
        "GCPTransferServiceHook.resume_transfer_operation": [
            {
                "type": "method",
                "args": {
                    "operation_name": "str"
                }
            }
        ],
        "GCPTransferServiceHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GCPTransferServiceHook.list_transfer_job": [
            {
                "type": "method",
                "args": {
                    "request_filter": "Dict",
                    "kwargs": "Union[Dict, str]"
                }
            }
        ]
    },
    "contrib.hooks.gcs_hook": {
        "GoogleCloudStorageHook._conn": [
            {
                "type": "attr",
                "anno": "storage.Client"
            }
        ],
        "GoogleCloudStorageHook.__init__": [
            {
                "type": "method",
                "args": {
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "storage.Storage"
                }
            }
        ],
        "_parse_gcs_url": [
            {
                "type": "func",
                "args": {
                    "gsurl": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.copy": [
            {
                "type": "method",
                "args": {
                    "source_bucket": "storage.Bucket",
                    "source_object": "storage.Bucket",
                    "destination_bucket": "storage.Bucket",
                    "destination_object": "storage.Bucket"
                }
            }
        ],
        "GoogleCloudStorageHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleCloudStorageHook.compose": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "source_objects": "list",
                    "destination_object": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.insert_object_acl": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str",
                    "entity": "str",
                    "role": "str",
                    "user_project": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.insert_bucket_acl": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "entity": "str",
                    "role": "str",
                    "user_project": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.create_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "resource": "dict",
                    "storage_class": "str",
                    "location": "str",
                    "project_id": "str",
                    "labels": "dict"
                }
            }
        ],
        "GoogleCloudStorageHook.get_md5hash": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.get_crc32c": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.get_size": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.list": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "versions": "str",
                    "max_results": "int",
                    "prefix": "str",
                    "delimiter": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.delete": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.is_updated_after": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str",
                    "ts": "datetime"
                }
            }
        ],
        "GoogleCloudStorageHook.exists": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.upload": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str",
                    "filename": "str",
                    "mime_type": "str",
                    "gzip": "bool"
                }
            }
        ],
        "GoogleCloudStorageHook.download": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "object_name": "str",
                    "filename": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.rewrite": [
            {
                "type": "method",
                "args": {
                    "source_bucket": "str",
                    "source_object": "str",
                    "destination_bucket": "str",
                    "destination_object": "str"
                }
            }
        ]
    },
    "contrib.hooks.sagemaker_hook": {
        "LogState.STARTING": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LogState.WAIT_IN_PROGRESS": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LogState.TAILING": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LogState.JOB_COMPLETE": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LogState.COMPLETE": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Position": [
            {
                "type": "var",
                "anno": "Position"
            }
        ],
        "argmin": [
            {
                "type": "func",
                "args": {
                    "arr": "list",
                    "f": "Callable[[int], int]"
                }
            }
        ],
        "SageMakerHook.non_terminal_states": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "SageMakerHook.endpoint_non_terminal_states": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "SageMakerHook.failed_states": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "SageMakerHook.s3_hook": [
            {
                "type": "attr",
                "anno": "S3Hook"
            }
        ],
        "SageMakerHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "secondary_training_status_changed": [
            {
                "type": "func",
                "args": {
                    "current_job_description": "dict",
                    "prev_job_description": "dict"
                }
            }
        ],
        "secondary_training_status_message": [
            {
                "type": "func",
                "args": {
                    "job_description": "dict",
                    "prev_description": "dict"
                }
            }
        ],
        "SageMakerHook.check_status": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "key": "str",
                    "describe_function": "dict",
                    "check_interval": "int",
                    "max_ingestion_time": "int",
                    "non_terminal_states": "set"
                }
            }
        ],
        "SageMakerHook.tar_and_s3_upload": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "key": "str",
                    "bucket": "str"
                }
            }
        ],
        "SageMakerHook.get_log_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerHook.log_stream": [
            {
                "type": "method",
                "args": {
                    "log_group": "str",
                    "stream_name": "str",
                    "start_time": "int",
                    "skip": "int"
                }
            }
        ],
        "SageMakerHook.multi_stream_iter": [
            {
                "type": "method",
                "args": {
                    "log_group": "str",
                    "streams": "list",
                    "positions": "dict"
                }
            }
        ],
        "SageMakerHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerHook.describe_endpoint": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "SageMakerHook.describe_endpoint_config": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "SageMakerHook.describe_transform_job": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "SageMakerHook.describe_model": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "SageMakerHook.describe_tuning_job": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "SageMakerHook.describe_training_job": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "SageMakerHook.describe_training_job_with_log": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "positions": "dict",
                    "stream_names": "list",
                    "instance_count": "int",
                    "state": "str",
                    "last_description": "dict",
                    "last_describe_job_call": "float"
                }
            }
        ],
        "SageMakerHook.check_training_status_with_log": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "non_terminal_states": "set",
                    "failed_states": "set",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int"
                }
            }
        ],
        "SageMakerHook.update_endpoint": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int"
                }
            }
        ],
        "SageMakerHook.create_endpoint": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int"
                }
            }
        ],
        "SageMakerHook.create_endpoint_config": [
            {
                "type": "method",
                "args": {
                    "config": "dict"
                }
            }
        ],
        "SageMakerHook.create_model": [
            {
                "type": "method",
                "args": {
                    "config": "dict"
                }
            }
        ],
        "SageMakerHook.configure_s3_resources": [
            {
                "type": "method",
                "args": {
                    "config": "dict"
                }
            }
        ],
        "SageMakerHook.check_s3_url": [
            {
                "type": "method",
                "args": {
                    "s3url": "str"
                }
            }
        ],
        "SageMakerHook.create_transform_job": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int"
                }
            }
        ],
        "SageMakerHook.check_tuning_config": [
            {
                "type": "method",
                "args": {
                    "tuning_config": "dict"
                }
            }
        ],
        "SageMakerHook.create_tuning_job": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int"
                }
            }
        ],
        "SageMakerHook.check_training_config": [
            {
                "type": "method",
                "args": {
                    "training_config": "dict"
                }
            }
        ],
        "SageMakerHook.create_training_job": [
            {
                "type": "method",
                "args": {
                    "config": "dict",
                    "wait_for_completion": "bool",
                    "print_log": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int"
                }
            }
        ]
    },
    "contrib.hooks.bigquery_hook": {
        "BigQueryHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryHook.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryHook.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ],
        "BigQueryPandasConnector.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryPandasConnector.reauth": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryPandasConnector.service": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryPandasConnector.verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryPandasConnector.dialect": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryPandasConnector.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "service": "str",
                    "reauth": "bool",
                    "verbose": "bool",
                    "dialect": "str"
                }
            }
        ],
        "BigQueryConnection._args": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryConnection._kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryConnection.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "BigQueryConnection.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryConnection.commit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryConnection.rollback": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryBaseCursor.service": [
            {
                "type": "attr",
                "anno": "bigquery.BigQuery"
            }
        ],
        "BigQueryBaseCursor.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryBaseCursor.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryBaseCursor.api_resource_configs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryBaseCursor.running_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryBaseCursor.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryBaseCursor.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryCursor.buffersize": [
            {
                "type": "attr",
                "anno": "int | None"
            }
        ],
        "BigQueryCursor.page_token": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BigQueryCursor.job_id": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BigQueryCursor.buffer": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "BigQueryCursor.all_pages_loaded": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryCursor.__init__": [
            {
                "type": "method",
                "args": {
                    "service": "str",
                    "project_id": "str",
                    "use_legacy_sql": "bool",
                    "location": "str",
                    "num_retries": "int"
                }
            }
        ],
        "BigQueryConnection.cursor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.description": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.rowcount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.get_arraysize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.set_arraysize": [
            {
                "type": "method",
                "args": {
                    "arraysize": "int"
                }
            }
        ],
        "BigQueryCursor.arraysize": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryCursor.setinputsizes": [
            {
                "type": "method",
                "args": {
                    "sizes": "list[int]"
                }
            }
        ],
        "BigQueryCursor.setoutputsize": [
            {
                "type": "method",
                "args": {
                    "size": "int",
                    "column": "str"
                }
            }
        ],
        "_cleanse_time_partitioning": [
            {
                "type": "func",
                "args": {
                    "destination_dataset_table": "str",
                    "time_partitioning_in": "dict"
                }
            }
        ],
        "_escape": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_bind_parameters": [
            {
                "type": "func",
                "args": {
                    "operation": "str",
                    "parameters": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.create_empty_table": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str",
                    "table_id": "str",
                    "schema_fields": "dict",
                    "time_partitioning": "bool",
                    "cluster_fields": "dict",
                    "labels": "dict",
                    "view": "str",
                    "encryption_configuration": "str",
                    "num_retries": "int"
                }
            }
        ],
        "BigQueryBaseCursor.create_external_table": [
            {
                "type": "method",
                "args": {
                    "external_project_dataset_table": "str",
                    "schema_fields": "dict",
                    "source_uris": "list",
                    "source_format": "str",
                    "autodetect": "bool",
                    "compression": "str",
                    "ignore_unknown_values": "bool",
                    "max_bad_records": "int",
                    "skip_leading_rows": "int",
                    "field_delimiter": "str",
                    "quote_character": "str",
                    "allow_quoted_newlines": "bool",
                    "allow_jagged_rows": "bool",
                    "src_fmt_configs": "dict",
                    "labels": "dict",
                    "encryption_configuration": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.run_with_configuration": [
            {
                "type": "method",
                "args": {
                    "configuration": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.run_query": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "destination_dataset_table": "str",
                    "write_disposition": "str",
                    "allow_large_results": "bool",
                    "flatten_results": "bool",
                    "udf_config": "dict",
                    "use_legacy_sql": "bool",
                    "maximum_billing_tier": "Optional[int]",
                    "maximum_bytes_billed": "Optional[int]",
                    "create_disposition": "str",
                    "query_params": "Optional[dict]",
                    "labels": "Optional[dict]",
                    "schema_update_options": "tuple",
                    "priority": "str",
                    "time_partitioning": "dict",
                    "api_resource_configs": "dict",
                    "cluster_fields": "dict",
                    "location": "str",
                    "encryption_configuration": "dict"
                }
            }
        ],
        "BigQueryCursor.execute": [
            {
                "type": "method",
                "args": {
                    "operation": "str",
                    "parameters": "dict"
                }
            }
        ],
        "BigQueryCursor.executemany": [
            {
                "type": "method",
                "args": {
                    "operation": "str",
                    "seq_of_parameters": "list"
                }
            }
        ],
        "BigQueryBaseCursor.get_tabledata": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str",
                    "max_results": "int",
                    "selected_fields": "str",
                    "page_token": "str",
                    "start_index": "int"
                }
            }
        ],
        "BigQueryBaseCursor.run_table_delete": [
            {
                "type": "method",
                "args": {
                    "deletion_dataset_table": "str",
                    "ignore_if_missing": "bool"
                }
            }
        ],
        "BigQueryBaseCursor.create_empty_dataset": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "project_id": "str",
                    "dataset_reference": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.delete_dataset": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str"
                }
            }
        ],
        "BigQueryCursor.next": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.fetchone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.fetchall": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_api_resource_configs_duplication_check": [
            {
                "type": "func",
                "args": {
                    "key": "str",
                    "value": "dict",
                    "config_dict": "dict",
                    "config_dict_name": "str"
                }
            }
        ],
        "_validate_value": [
            {
                "type": "func",
                "args": {
                    "key": "str",
                    "value": "dict",
                    "expected_type": "type"
                }
            }
        ],
        "BigQueryBaseCursor.__init__": [
            {
                "type": "method",
                "args": {
                    "service": "bigquery.BigQuery",
                    "project_id": "str",
                    "use_legacy_sql": "bool",
                    "api_resource_configs": "dict",
                    "location": "str",
                    "num_retries": "int"
                }
            }
        ],
        "_bq_cast": [
            {
                "type": "func",
                "args": {
                    "string_field": "str | None",
                    "bq_type": "str"
                }
            }
        ],
        "_split_tablename": [
            {
                "type": "func",
                "args": {
                    "table_input": "str",
                    "default_project_id": "str",
                    "var_name": "str"
                }
            }
        ],
        "BigQueryBaseCursor.run_copy": [
            {
                "type": "method",
                "args": {
                    "source_project_dataset_tables": "str",
                    "destination_project_dataset_table": "str",
                    "write_disposition": "str",
                    "create_disposition": "str",
                    "labels": "dict",
                    "encryption_configuration": "str"
                }
            }
        ],
        "BigQueryBaseCursor.run_extract": [
            {
                "type": "method",
                "args": {
                    "source_project_dataset_table": "str",
                    "destination_cloud_storage_uris": "str",
                    "compression": "str",
                    "export_format": "str",
                    "field_delimiter": "str",
                    "print_header": "bool",
                    "labels": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.run_load": [
            {
                "type": "method",
                "args": {
                    "destination_project_dataset_table": "dict",
                    "source_uris": "list[str]",
                    "schema_fields": "str",
                    "source_format": "str",
                    "create_disposition": "str",
                    "skip_leading_rows": "int",
                    "write_disposition": "str",
                    "field_delimiter": "str",
                    "max_bad_records": "int",
                    "quote_character": "str",
                    "ignore_unknown_values": "bool",
                    "allow_quoted_newlines": "bool",
                    "allow_jagged_rows": "bool",
                    "schema_update_options": "dict[str, str]",
                    "src_fmt_configs": "dict",
                    "time_partitioning": "dict[str, str]",
                    "cluster_fields": "str",
                    "autodetect": "bool",
                    "encryption_configuration": "str"
                }
            }
        ],
        "BigQueryHook.__init__": [
            {
                "type": "method",
                "args": {
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "use_legacy_sql": "bool",
                    "location": "str"
                }
            }
        ],
        "BigQueryHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict",
                    "dialect": "str"
                }
            }
        ],
        "BigQueryHook.get_service": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.fetchmany": [
            {
                "type": "method",
                "args": {
                    "size": "int"
                }
            }
        ],
        "BigQueryBaseCursor.insert_all": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str",
                    "table_id": "str",
                    "rows": "list",
                    "ignore_unknown_values": "bool",
                    "skip_invalid_rows": "bool",
                    "fail_on_error": "bool"
                }
            }
        ],
        "BigQueryBaseCursor.get_datasets_list": [
            {
                "type": "method",
                "args": {
                    "project_id": "str"
                }
            }
        ],
        "BigQueryBaseCursor.get_dataset": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "project_id": "str"
                }
            }
        ],
        "BigQueryBaseCursor.run_grant_dataset_view_access": [
            {
                "type": "method",
                "args": {
                    "source_dataset": "str",
                    "view_dataset": "str",
                    "view_table": "str",
                    "source_project": "str",
                    "view_project": "str"
                }
            }
        ],
        "BigQueryBaseCursor.run_table_upsert": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_resource": "dict",
                    "project_id": "str"
                }
            }
        ],
        "BigQueryBaseCursor.get_schema": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str"
                }
            }
        ],
        "BigQueryBaseCursor.poll_job_complete": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "BigQueryBaseCursor.cancel_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryBaseCursor._check_query_status": [
            {
                "type": "method",
                "args": {
                    "jobs": "dict",
                    "keep_polling_job": "bool",
                    "location": "str"
                }
            }
        ],
        "BigQueryBaseCursor.patch_table": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str",
                    "project_id": "str",
                    "description": "str",
                    "expiration_time": "float",
                    "external_data_configuration": "dict",
                    "friendly_name": "str",
                    "labels": "dict",
                    "schema": "dict",
                    "time_partitioning": "bool",
                    "view": "str",
                    "require_partition_filter": "str",
                    "encryption_configuration": "dict"
                }
            }
        ],
        "BigQueryHook.table_exists": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str",
                    "table_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.gcp_kms_hook": {
        "_b64encode": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_b64decode": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "GoogleCloudKMSHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudKMSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.jira_hook": {
        "JiraHook.jira_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraHook.proxies": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JiraHook.client": [
            {
                "type": "attr",
                "anno": "JIRA"
            }
        ],
        "JiraHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JiraHook.__init__": [
            {
                "type": "method",
                "args": {
                    "jira_conn_id": "str",
                    "proxies": "dict"
                }
            }
        ]
    },
    "contrib.hooks.azure_container_volume_hook": {
        "AzureContainerVolumeHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerVolumeHook.__init__": [
            {
                "type": "method",
                "args": {
                    "wasb_conn_id": "str"
                }
            }
        ],
        "AzureContainerVolumeHook.get_storagekey": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureContainerVolumeHook.get_file_volume": [
            {
                "type": "method",
                "args": {
                    "mount_name": "str",
                    "share_name": "str",
                    "storage_account_name": "str",
                    "read_only": "bool"
                }
            }
        ]
    },
    "contrib.hooks.grpc_hook": {
        "GrpcHook.grpc_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GrpcHook.conn": [
            {
                "type": "attr",
                "anno": "grpc.Connection"
            }
        ],
        "GrpcHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GrpcHook.interceptors": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "GrpcHook.custom_connection_func": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "GrpcHook.__init__": [
            {
                "type": "method",
                "args": {
                    "grpc_conn_id": "str",
                    "interceptors": "list",
                    "custom_connection_func": "Callable"
                }
            }
        ],
        "GrpcHook._get_field": [
            {
                "type": "method",
                "args": {
                    "field_name": "str",
                    "default": "str"
                }
            }
        ],
        "GrpcHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GrpcHook.run": [
            {
                "type": "method",
                "args": {
                    "stub_class": "type",
                    "call_func": "str",
                    "streaming": "bool",
                    "data": "dict"
                }
            }
        ]
    },
    "contrib.hooks.gcp_pubsub_hook": {
        "PubSubHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "PubSubHook.publish": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "messages": "dict"
                }
            }
        ],
        "PubSubHook.create_topic": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "fail_if_exists": "bool"
                }
            }
        ],
        "PubSubHook.delete_topic": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "fail_if_not_exists": "bool"
                }
            }
        ],
        "PubSubHook.create_subscription": [
            {
                "type": "method",
                "args": {
                    "topic_project": "str",
                    "topic": "str",
                    "subscription": "str",
                    "subscription_project": "str",
                    "ack_deadline_secs": "int",
                    "fail_if_exists": "bool"
                }
            }
        ],
        "PubSubHook.delete_subscription": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "fail_if_not_exists": "bool"
                }
            }
        ],
        "_format_topic": [
            {
                "type": "func",
                "args": {
                    "project": "str",
                    "topic": "str"
                }
            }
        ],
        "_format_subscription": [
            {
                "type": "func",
                "args": {
                    "project": "str",
                    "subscription": "str"
                }
            }
        ],
        "PubSubHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PubSubHook.acknowledge": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "ack_ids": "list"
                }
            }
        ],
        "PubSubHook.pull": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "max_messages": "int",
                    "return_immediately": "bool"
                }
            }
        ]
    },
    "contrib.hooks.gcp_dataproc_hook": {
        "UUID_LENGTH": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "DataprocJobStatus.ERROR": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocJobStatus.CANCELLED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocJobStatus.DONE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJob.dataproc_api": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "_DataProcJob.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJob.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJob.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DataProcJob.job_error_states": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "_DataProcJob.job": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "_DataProcJob.job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJob.raise_error": [
            {
                "type": "method",
                "args": {
                    "message": "Optional[str]"
                }
            }
        ],
        "_DataProcJobBuilder.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJobBuilder.job": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "_DataProcJobBuilder.add_labels": [
            {
                "type": "method",
                "args": {
                    "labels": "dict"
                }
            }
        ],
        "_DataProcOperation.dataproc_api": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "_DataProcOperation.operation": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "_DataProcOperation.operation_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcOperation.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DataProcOperation._raise_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcHook.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHook.num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataProcHook.get_cluster": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "region": "str",
                    "cluster_name": "str"
                }
            }
        ],
        "DataProcHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.opsgenie_alert_hook": {
        "OpsgenieAlertHook.__init__": [
            {
                "type": "method",
                "args": {
                    "opsgenie_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "OpsgenieAlertHook.base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpsgenieAlertHook.get_conn": [
            {
                "type": "method",
                "args": {
                    "headers": "dict"
                }
            }
        ],
        "OpsgenieAlertHook._get_api_key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OpsgenieAlertHook.execute": [
            {
                "type": "method",
                "args": {
                    "payload": "dict"
                }
            }
        ]
    },
    "contrib.hooks.emr_hook": {
        "EmrHook.emr_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrHook.__init__": [
            {
                "type": "method",
                "args": {
                    "emr_conn_id": "str",
                    "region_name": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "EmrHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "EmrHook.create_job_flow": [
            {
                "type": "method",
                "args": {
                    "job_flow_overrides": "dict"
                }
            }
        ]
    },
    "contrib.hooks.gcp_dlp_hook": {
        "DLP_JOB_PATH_PATTERN": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TIME_TO_SLEEP_IN_SECONDS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "CloudDLPHook._client": [
            {
                "type": "attr",
                "anno": "DlpServiceClient"
            }
        ],
        "CloudDLPHook.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "CloudDLPHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudDLPHook.update_stored_info_type": [
            {
                "type": "method",
                "args": {
                    "stored_info_type_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "config": "dict",
                    "update_mask": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.update_job_trigger": [
            {
                "type": "method",
                "args": {
                    "job_trigger_id": "str",
                    "project_id": "str",
                    "job_trigger": "str",
                    "update_mask": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.update_inspect_template": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "inspect_template": "str",
                    "update_mask": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.update_deidentify_template": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "deidentify_template": "str",
                    "update_mask": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.reidentify_content": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "reidentify_config": "str",
                    "inspect_config": "str",
                    "item": "str",
                    "inspect_template_name": "str",
                    "reidentify_template_name": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.redact_image": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "inspect_config": "str",
                    "image_redaction_configs": "str",
                    "include_findings": "str",
                    "byte_item": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.list_stored_info_types": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "page_size": "int",
                    "order_by": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.list_job_triggers": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "page_size": "int",
                    "order_by": "str",
                    "results_filter": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.list_inspect_templates": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "page_size": "int",
                    "order_by": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.list_info_types": [
            {
                "type": "method",
                "args": {
                    "language_code": "str",
                    "results_filter": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.list_dlp_jobs": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "results_filter": "str",
                    "page_size": "int",
                    "job_type": "str",
                    "order_by": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.list_deidentify_templates": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "page_size": "int",
                    "order_by": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.inspect_content": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "inspect_config": "str",
                    "item": "str",
                    "inspect_template_name": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.get_stored_info_type": [
            {
                "type": "method",
                "args": {
                    "stored_info_type_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.get_job_trigger": [
            {
                "type": "method",
                "args": {
                    "job_trigger_id": "str",
                    "project_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.get_inspect_template": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.get_dlp_job": [
            {
                "type": "method",
                "args": {
                    "dlp_job_id": "str",
                    "project_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.get_deidentify_template": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.delete_stored_info_type": [
            {
                "type": "method",
                "args": {
                    "stored_info_type_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.delete_job_trigger": [
            {
                "type": "method",
                "args": {
                    "job_trigger_id": "str",
                    "project_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.delete_inspect_template": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.delete_dlp_job": [
            {
                "type": "method",
                "args": {
                    "dlp_job_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.delete_deidentify_template": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "organization_id": "str",
                    "project_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.deidentify_content": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "deidentify_config": "str",
                    "inspect_config": "str",
                    "item": "str",
                    "inspect_template_name": "str",
                    "deidentify_template_name": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.create_stored_info_type": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "config": "dict",
                    "stored_info_type_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.create_job_trigger": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_trigger": "str",
                    "trigger_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ],
        "CloudDLPHook.create_inspect_template": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "inspect_template": "str",
                    "template_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.create_dlp_job": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "inspect_job": "str",
                    "risk_job": "str",
                    "job_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "dict",
                    "wait_until_finished": "bool"
                }
            }
        ],
        "CloudDLPHook.create_deidentify_template": [
            {
                "type": "method",
                "args": {
                    "organization_id": "str",
                    "project_id": "str",
                    "deidentify_template": "str",
                    "template_id": "str",
                    "retry": "int",
                    "timeout": "int",
                    "metadata": "dict"
                }
            }
        ],
        "CloudDLPHook.cancel_dlp_job": [
            {
                "type": "method",
                "args": {
                    "dlp_job_id": "str",
                    "project_id": "str",
                    "retry": "str",
                    "timeout": "str",
                    "metadata": "str"
                }
            }
        ]
    },
    "contrib.hooks.ssh_hook": {
        "SSHHook.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.key_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SSHHook.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SSHHook.keepalive_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SSHHook.compress": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SSHHook.no_host_key_check": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SSHHook.allow_host_key_change": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SSHHook.host_proxy": [
            {
                "type": "attr",
                "anno": "paramiko.ProxyCommand"
            }
        ],
        "SSHHook.client": [
            {
                "type": "attr",
                "anno": "paramiko.SSHClient"
            }
        ],
        "SSHHook.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SSHHook.__init__": [
            {
                "type": "method",
                "args": {
                    "ssh_conn_id": "str",
                    "remote_host": "str",
                    "username": "str",
                    "password": "str",
                    "key_file": "str",
                    "port": "int",
                    "timeout": "int",
                    "keepalive_interval": "int"
                }
            }
        ],
        "SSHHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SSHHook.get_tunnel": [
            {
                "type": "method",
                "args": {
                    "remote_port": "int",
                    "remote_host": "str",
                    "local_port": "int"
                }
            }
        ],
        "SSHHook.create_tunnel": [
            {
                "type": "method",
                "args": {
                    "local_port": "int",
                    "remote_port": "int",
                    "remote_host": "str"
                }
            }
        ],
        "SSHHook.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "str",
                    "exc_val": "str",
                    "exc_tb": "str"
                }
            }
        ]
    },
    "contrib.hooks.gcp_natural_language_hook": {
        "CloudNaturalLanguageHook._conn": [
            {
                "type": "attr",
                "anno": "LanguageServiceClient"
            }
        ]
    },
    "contrib.hooks.mongo_hook": {
        "MongoHook.conn_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoHook.mongo_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoHook.connection": [
            {
                "type": "attr",
                "anno": "MongoClient"
            }
        ],
        "MongoHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MongoHook.client": [
            {
                "type": "attr",
                "anno": "MongoClient"
            }
        ],
        "MongoHook.uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoHook.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MongoHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MongoHook.get_collection": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "mongo_db": "str"
                }
            }
        ],
        "MongoHook.delete_many": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "filter_doc": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.delete_one": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "filter_doc": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.replace_many": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "docs": "list",
                    "filter_docs": "list",
                    "mongo_db": "str",
                    "upsert": "bool",
                    "collation": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.replace_one": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "doc": "dict",
                    "filter_doc": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.update_many": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "filter_doc": "dict",
                    "update_doc": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.update_one": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "filter_doc": "dict",
                    "update_doc": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.insert_many": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "docs": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.insert_one": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "doc": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.find": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "query": "list",
                    "find_one": "bool",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.aggregate": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "aggregate_query": "list",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.close_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MongoHook.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "Any",
                    "exc_val": "Any",
                    "exc_tb": "Any"
                }
            }
        ],
        "MongoHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.hooks.openfaas_hook": {
        "OK_STATUS_CODE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "OpenFaasHook.GET_FUNCTION": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpenFaasHook.INVOKE_ASYNC_FUNCTION": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpenFaasHook.DEPLOY_FUNCTION": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpenFaasHook.UPDATE_FUNCTION": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpenFaasHook.function_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpenFaasHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OpenFaasHook.__init__": [
            {
                "type": "method",
                "args": {
                    "function_name": "str",
                    "conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "OpenFaasHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OpenFaasHook.does_function_exist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OpenFaasHook.update_function": [
            {
                "type": "method",
                "args": {
                    "body": "dict"
                }
            }
        ],
        "OpenFaasHook.invoke_async_function": [
            {
                "type": "method",
                "args": {
                    "body": "str"
                }
            }
        ],
        "OpenFaasHook.deploy_function": [
            {
                "type": "method",
                "args": {
                    "overwrite_function_if_exist": "bool",
                    "body": "dict"
                }
            }
        ]
    },
    "contrib.hooks.aws_hook": {
        "AwsHook.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsHook.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsHook.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "verify": "str"
                }
            }
        ],
        "_parse_s3_config": [
            {
                "type": "func",
                "args": {
                    "config_file_name": "str",
                    "config_format": "str",
                    "profile": "str"
                }
            }
        ],
        "AwsHook._get_credentials": [
            {
                "type": "method",
                "args": {
                    "region_name": "str"
                }
            }
        ],
        "AwsHook.get_credentials": [
            {
                "type": "method",
                "args": {
                    "region_name": "str"
                }
            }
        ],
        "AwsHook.get_session": [
            {
                "type": "method",
                "args": {
                    "region_name": "str"
                }
            }
        ],
        "AwsHook.get_resource_type": [
            {
                "type": "method",
                "args": {
                    "resource_type": "str",
                    "region_name": "str",
                    "config": "dict"
                }
            }
        ],
        "AwsHook.get_client_type": [
            {
                "type": "method",
                "args": {
                    "client_type": "str",
                    "region_name": "str",
                    "config": "str"
                }
            }
        ],
        "AwsHook.expand_role": [
            {
                "type": "method",
                "args": {
                    "role": "str"
                }
            }
        ]
    },
    "contrib.hooks.sftp_hook": {
        "SFTPHook.conn": [
            {
                "type": "attr",
                "anno": "pysftp.Connection"
            }
        ],
        "SFTPHook.private_key_pass": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPHook.no_host_key_check": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SFTPHook.key_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPHook.__init__": [
            {
                "type": "method",
                "args": {
                    "ftp_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SFTPHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SFTPHook.get_mod_time": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.delete_file": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.store_file": [
            {
                "type": "method",
                "args": {
                    "remote_full_path": "str",
                    "local_full_path": "str"
                }
            }
        ],
        "SFTPHook.delete_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.create_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "mode": "int"
                }
            }
        ],
        "SFTPHook.list_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.describe_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.retrieve_file": [
            {
                "type": "method",
                "args": {
                    "remote_full_path": "str",
                    "local_full_path": "str"
                }
            }
        ],
        "SFTPHook.close_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.azure_fileshare_hook": {
        "AzureFileShareHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureFileShareHook.connection": [
            {
                "type": "attr",
                "anno": "FileService"
            }
        ],
        "AzureFileShareHook.list_directories_and_files": [
            {
                "type": "method",
                "args": {
                    "share_name": "str",
                    "directory_name": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "AzureFileShareHook.get_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.get_file_to_stream": [
            {
                "type": "method",
                "args": {
                    "stream": "FileService",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.load_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.load_string": [
            {
                "type": "method",
                "args": {
                    "string_data": "str",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "AzureFileShareHook.load_stream": [
            {
                "type": "method",
                "args": {
                    "stream": "str",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "count": "int",
                    "kwargs": "dict"
                }
            }
        ],
        "AzureFileShareHook.create_directory": [
            {
                "type": "method",
                "args": {
                    "share_name": "str",
                    "directory_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureFileShareHook.__init__": [
            {
                "type": "method",
                "args": {
                    "wasb_conn_id": "str"
                }
            }
        ],
        "AzureFileShareHook.check_for_file": [
            {
                "type": "method",
                "args": {
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.check_for_directory": [
            {
                "type": "method",
                "args": {
                    "share_name": "str",
                    "directory_name": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.hooks.aws_sns_hook": {
        "AwsSnsHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "AwsSnsHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsSnsHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsSnsHook.publish_to_target": [
            {
                "type": "method",
                "args": {
                    "target_arn": "str",
                    "message": "str"
                }
            }
        ]
    },
    "contrib.hooks.azure_container_registry_hook": {
        "AzureContainerRegistryHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureContainerRegistryHook.connection": [
            {
                "type": "attr",
                "anno": "ImageRegistryCredential"
            }
        ],
        "AzureContainerRegistryHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureContainerRegistryHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.gcp_spanner_hook": {
        "CloudSpannerHook._client": [
            {
                "type": "attr",
                "anno": "Optional[Client]"
            }
        ],
        "CloudSpannerHook._execute_sql_in_transaction": [
            {
                "type": "method",
                "args": {
                    "transaction": "Transaction",
                    "queries": "List[str]"
                }
            }
        ],
        "CloudSpannerHook.delete_database": [
            {
                "type": "method",
                "args": {
                    "instance_id": "str",
                    "database_id": "str",
                    "project_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.aws_firehose_hook": {
        "AwsFirehoseHook.delivery_stream": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsFirehoseHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsFirehoseHook.__init__": [
            {
                "type": "method",
                "args": {
                    "delivery_stream": "str",
                    "region_name": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AwsFirehoseHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsFirehoseHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsFirehoseHook.put_records": [
            {
                "type": "method",
                "args": {
                    "records": "list"
                }
            }
        ]
    },
    "contrib.hooks.wasb_hook": {
        "WasbHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbHook.connection": [
            {
                "type": "attr",
                "anno": "BlockBlobService"
            }
        ],
        "WasbHook.check_for_prefix": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "prefix": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.load_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.load_string": [
            {
                "type": "method",
                "args": {
                    "string_data": "str",
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.get_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.read_file": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WasbHook.__init__": [
            {
                "type": "method",
                "args": {
                    "wasb_conn_id": "str"
                }
            }
        ],
        "WasbHook.check_for_blob": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.delete_file": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "blob_name": "str",
                    "is_prefix": "bool",
                    "ignore_if_missing": "bool",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.hooks.qubole_hook": {
        "COMMAND_CLASSES": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "POSITIONAL_ARGS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "flatten_list": [
            {
                "type": "func",
                "args": {
                    "list_of_lists": "list"
                }
            }
        ],
        "filter_options": [
            {
                "type": "func",
                "args": {
                    "options": "list"
                }
            }
        ],
        "get_options_list": [
            {
                "type": "func",
                "args": {
                    "command_class": "Command"
                }
            }
        ],
        "QuboleHook.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleHook.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleHook.kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "QuboleHook.cls": [
            {
                "type": "attr",
                "anno": "Type[BaseHook]"
            }
        ],
        "QuboleHook.cmd": [
            {
                "type": "attr",
                "anno": "Command"
            }
        ],
        "QuboleHook.task_instance": [
            {
                "type": "attr",
                "anno": "TaskInstance"
            }
        ],
        "QuboleHook.get_log": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleHook.get_jobs_id": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "build_command_args": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "QuboleHook.get_extra_links": [
            {
                "type": "method",
                "args": {
                    "operator": "Qubole",
                    "dttm": "str"
                }
            }
        ],
        "QuboleHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleHook.create_cmd_args": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleHook.handle_failure_retry": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleHook.kill": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleHook.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleHook.get_results": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "fp": "str",
                    "inline": "bool",
                    "delim": "str",
                    "fetch": "bool"
                }
            }
        ]
    },
    "contrib.hooks.aws_athena_hook": {
        "AWSAthenaHook.INTERMEDIATE_STATES": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AWSAthenaHook.FAILURE_STATES": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AWSAthenaHook.SUCCESS_STATES": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "AWSAthenaHook.sleep_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AWSAthenaHook.conn": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "AWSAthenaHook.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "sleep_time": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AWSAthenaHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSAthenaHook.stop_query": [
            {
                "type": "method",
                "args": {
                    "query_execution_id": "str"
                }
            }
        ],
        "AWSAthenaHook.get_state_change_reason": [
            {
                "type": "method",
                "args": {
                    "query_execution_id": "str"
                }
            }
        ],
        "AWSAthenaHook.check_query_status": [
            {
                "type": "method",
                "args": {
                    "query_execution_id": "str"
                }
            }
        ],
        "AWSAthenaHook.poll_query_status": [
            {
                "type": "method",
                "args": {
                    "query_execution_id": "str",
                    "max_tries": "int"
                }
            }
        ],
        "AWSAthenaHook.run_query": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "query_context": "dict",
                    "result_configuration": "dict",
                    "client_request_token": "str"
                }
            }
        ],
        "AWSAthenaHook.get_query_results": [
            {
                "type": "method",
                "args": {
                    "query_execution_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.gcp_text_to_speech_hook": {
        "GCPTextToSpeechHook._client": [
            {
                "type": "attr",
                "anno": "TextToSpeechClient"
            }
        ]
    },
    "contrib.hooks.aws_lambda_hook": {
        "AwsLambdaHook.function_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.log_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.invocation_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.qualifier": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.__init__": [
            {
                "type": "method",
                "args": {
                    "function_name": "str",
                    "region_name": "str",
                    "log_type": "str",
                    "qualifier": "str",
                    "invocation_type": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AwsLambdaHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsLambdaHook.invoke_lambda": [
            {
                "type": "method",
                "args": {
                    "payload": "dict"
                }
            }
        ]
    },
    "contrib.hooks.gcp_api_base_hook": {
        "_DEFAULT_SCOPES": [
            {
                "type": "var",
                "anno": "Sequence[str]"
            }
        ],
        "_G_APP_CRED_ENV_VAR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "RT": [
            {
                "type": "var",
                "anno": "Type[RT]"
            }
        ],
        "GoogleCloudBaseHook.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudBaseHook.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudBaseHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ]
    },
    "contrib.auth.backends.google_auth": {
        "get_config_param": [
            {
                "type": "func",
                "args": {
                    "param": "str"
                }
            }
        ],
        "GoogleUser.user": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "GoogleUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "logging.Logger"
                }
            }
        ],
        "GoogleUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleAuthBackend.login_manager": [
            {
                "type": "attr",
                "anno": "flask_login.LoginManager"
            }
        ],
        "GoogleAuthBackend.flask_app": [
            {
                "type": "attr",
                "anno": "flask_login.Flask"
            }
        ],
        "GoogleAuthBackend.google_oauth": [
            {
                "type": "attr",
                "anno": "OAuth"
            }
        ],
        "GoogleAuthBackend.api_rev": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleAuthBackend.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleAuthBackend.domain_check": [
            {
                "type": "method",
                "args": {
                    "email": "str"
                }
            }
        ],
        "login_manager": [
            {
                "type": "var",
                "anno": "GoogleAuthBackend"
            }
        ],
        "GoogleUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleAuthBackend.load_user": [
            {
                "type": "method",
                "args": {
                    "userid": "str",
                    "session": "logging.Session"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "GoogleAuthBackend.login": [
            {
                "type": "method",
                "args": {
                    "request": "request.Request"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "request.Request"
                }
            }
        ],
        "GoogleAuthBackend.get_google_user_profile_info": [
            {
                "type": "method",
                "args": {
                    "google_token": "str"
                }
            }
        ],
        "GoogleAuthBackend.oauth_callback": [
            {
                "type": "method",
                "args": {
                    "session": "logging.Session"
                }
            }
        ],
        "GoogleAuthBackend.init_app": [
            {
                "type": "method",
                "args": {
                    "flask_app": "flask_login.Flask"
                }
            }
        ]
    },
    "contrib.auth.backends.kerberos_auth": {
        "LOGIN_MANAGER": [
            {
                "type": "var",
                "anno": "flask_login.LoginManager"
            }
        ],
        "KerberosUser.user": [
            {
                "type": "attr",
                "anno": "kerberos.Kerberos"
            }
        ],
        "KerberosUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "kerberos.Kerberos"
                }
            }
        ],
        "KerberosUser.authenticate": [
            {
                "type": "method",
                "args": {
                    "username": "str",
                    "password": "str"
                }
            }
        ],
        "KerberosUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KerberosUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KerberosUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KerberosUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KerberosUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoginForm.username": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "LoginForm.password": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "KerberosUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "load_user": [
            {
                "type": "func",
                "args": {
                    "userid": "str",
                    "session": "models.Session"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "requests.Request",
                    "session": "models.Session"
                }
            }
        ]
    },
    "contrib.auth.backends.password_auth": {
        "LOGIN_MANAGER": [
            {
                "type": "var",
                "anno": "flask_login.LoginManager"
            }
        ],
        "CLIENT_AUTH": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PasswordUser._password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PasswordUser.user": [
            {
                "type": "attr",
                "anno": "LoggingMixin"
            }
        ],
        "PasswordUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "LoggingMixin"
                }
            }
        ],
        "PasswordUser.password": [
            {
                "type": "method",
                "args": {
                    "plaintext": "str"
                }
            }
        ],
        "PasswordUser.authenticate": [
            {
                "type": "method",
                "args": {
                    "plaintext": "str"
                }
            }
        ],
        "PasswordUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PasswordUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PasswordUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PasswordUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PasswordUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoginForm.username": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "LoginForm.password": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "_unauthorized": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_forbidden": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "init_app": [
            {
                "type": "func",
                "args": {
                    "_": "logging.Logger"
                }
            }
        ],
        "PasswordUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LOG": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "authenticate": [
            {
                "type": "func",
                "args": {
                    "session": "models.Session",
                    "username": "str",
                    "password": "str"
                }
            }
        ],
        "requires_authentication": [
            {
                "type": "func",
                "args": {
                    "function": "Callable"
                }
            }
        ],
        "load_user": [
            {
                "type": "func",
                "args": {
                    "userid": "str",
                    "session": "logging.Session"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "models.Request",
                    "session": "models.Session"
                }
            }
        ]
    },
    "contrib.auth.backends.ldap_auth": {
        "login_manager": [
            {
                "type": "var",
                "anno": "flask_login.LoginManager"
            }
        ],
        "LdapUser.user": [
            {
                "type": "attr",
                "anno": "LDAPUser"
            }
        ],
        "LdapUser.ldap_groups": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "LdapUser.superuser": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LdapUser.data_profiler": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LdapUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LdapUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LdapUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LdapUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LdapUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoginForm.username": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "LoginForm.password": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "LdapUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "groups_user": [
            {
                "type": "func",
                "args": {
                    "conn": "Connection",
                    "search_base": "str",
                    "user_filter": "str",
                    "user_name_att": "str",
                    "username": "str"
                }
            }
        ],
        "group_contains_user": [
            {
                "type": "func",
                "args": {
                    "conn": "Connection",
                    "search_base": "str",
                    "group_filter": "str",
                    "user_name_attr": "str",
                    "username": "str"
                }
            }
        ],
        "get_ldap_connection": [
            {
                "type": "func",
                "args": {
                    "dn": "str",
                    "password": "str"
                }
            }
        ],
        "LdapUser.try_login": [
            {
                "type": "method",
                "args": {
                    "username": "str",
                    "password": "str"
                }
            }
        ],
        "LdapUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "LDAPUser"
                }
            }
        ],
        "load_user": [
            {
                "type": "func",
                "args": {
                    "userid": "str",
                    "session": "models.Session"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "models.Request",
                    "session": "models.Session"
                }
            }
        ]
    },
    "contrib.auth.backends.github_enterprise_auth": {
        "get_config_param": [
            {
                "type": "func",
                "args": {
                    "param": "str"
                }
            }
        ],
        "GHEUser.user": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "GHEUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "logging.Logger"
                }
            }
        ],
        "GHEUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEAuthBackend.ghe_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GHEAuthBackend.login_manager": [
            {
                "type": "attr",
                "anno": "flask_login.LoginManager"
            }
        ],
        "GHEAuthBackend.flask_app": [
            {
                "type": "attr",
                "anno": "flask_login.Flask"
            }
        ],
        "GHEAuthBackend.ghe_oauth": [
            {
                "type": "attr",
                "anno": "OAuth"
            }
        ],
        "GHEAuthBackend.api_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GHEAuthBackend.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEAuthBackend.ghe_api_route": [
            {
                "type": "method",
                "args": {
                    "leaf": "str"
                }
            }
        ],
        "login_manager": [
            {
                "type": "var",
                "anno": "GHEAuthBackend"
            }
        ],
        "GHEAuthBackend.load_user": [
            {
                "type": "method",
                "args": {
                    "userid": "str",
                    "session": "logging.Session"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "GHEAuthBackend.login": [
            {
                "type": "method",
                "args": {
                    "request": "request.Request"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "request.Request"
                }
            }
        ],
        "GHEAuthBackend.ghe_team_check": [
            {
                "type": "method",
                "args": {
                    "username": "str",
                    "ghe_token": "str"
                }
            }
        ],
        "GHEAuthBackend.get_ghe_user_profile_info": [
            {
                "type": "method",
                "args": {
                    "ghe_token": "str"
                }
            }
        ],
        "GHEAuthBackend.oauth_callback": [
            {
                "type": "method",
                "args": {
                    "session": "logging.Session"
                }
            }
        ],
        "GHEAuthBackend.init_app": [
            {
                "type": "method",
                "args": {
                    "flask_app": "flask_login.Flask"
                }
            }
        ]
    },
    "example_dags.test_utils": {
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "task": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "example_dags.example_branch_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "run_this_first": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "options": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "branching": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "join": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "t": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "dummy_follow": [
            {
                "type": "var",
                "anno": "DummyOperator"
            }
        ]
    },
    "example_dags.example_passing_params_via_test_command": {
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "my_templated_command": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "also_run_this": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "my_py_command": [
            {
                "type": "func",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.subdags.subdag": {
        "subdag": [
            {
                "type": "func",
                "args": {
                    "parent_dag_name": "str",
                    "child_dag_name": "str",
                    "args": "dict"
                }
            }
        ]
    },
    "example_dags.example_short_circuit_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "cond_true": [
            {
                "type": "var",
                "anno": "ShortCircuitOperator"
            }
        ],
        "cond_false": [
            {
                "type": "var",
                "anno": "ShortCircuitOperator"
            }
        ],
        "ds_true": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "ds_false": [
            {
                "type": "var",
                "anno": "list"
            }
        ]
    },
    "example_dags.example_xcom": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "value_1": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "value_2": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "push_by_returning": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "puller": [
            {
                "type": "func",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "push2": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "pull": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "push": [
            {
                "type": "func",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "push1": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.example_python_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "print_context": [
            {
                "type": "func",
                "args": {
                    "ds": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "my_sleeping_function": [
            {
                "type": "func",
                "args": {
                    "random_base": "float"
                }
            }
        ],
        "task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.example_trigger_controller_dag": {
        "pp": [
            {
                "type": "var",
                "anno": "pprint.PrettyPrinter"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "conditionally_trigger": [
            {
                "type": "func",
                "args": {
                    "context": "dict",
                    "dag_run_obj": "DagRunOperator"
                }
            }
        ],
        "trigger": [
            {
                "type": "var",
                "anno": "TriggerDagRunOperator"
            }
        ]
    },
    "example_dags.example_latest_only_with_trigger": {
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "latest_only": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task1": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task2": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task3": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task4": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ]
    },
    "example_dags.example_branch_python_dop_operator_3": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "dummy_task_1": [
            {
                "type": "var",
                "anno": "DummyOperator"
            }
        ],
        "dummy_task_2": [
            {
                "type": "var",
                "anno": "DummyOperator"
            }
        ],
        "should_run": [
            {
                "type": "func",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "cond": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ]
    },
    "example_dags.example_pig_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "PigOperator"
            }
        ]
    },
    "example_dags.example_latest_only": {
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "latest_only": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task1": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ]
    },
    "example_dags.example_skip_dag": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "DummySkipOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DummySkipOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "create_test_pipeline": [
            {
                "type": "func",
                "args": {
                    "suffix": "str",
                    "trigger_rule": "str",
                    "dag_": "DAG"
                }
            }
        ]
    },
    "example_dags.example_bash_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "run_this_last": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "task": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "also_run_this": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "example_dags.example_trigger_target_dag": {
        "pp": [
            {
                "type": "var",
                "anno": "pprint.PrettyPrinter"
            }
        ],
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "bash_task": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "run_this_func": [
            {
                "type": "func",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.tutorial": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "templated_command": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "example_dags.example_http_operator": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "t5": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "t4": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "sensor": [
            {
                "type": "var",
                "anno": "HttpSensor"
            }
        ]
    },
    "example_dags.example_subdag_operator": {
        "DAG_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "start": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ],
        "section_1": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ],
        "some_other_task": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ],
        "section_2": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ],
        "end": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ]
    },
    "operators.slack_operator": {
        "SlackAPIOperator.token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIOperator.slack_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIOperator.api_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SlackAPIOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "slack_conn_id": "str",
                    "token": "str",
                    "method": "str",
                    "api_params": "Dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SlackAPIOperator.construct_api_call_params": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SlackAPIPostOperator.template_fields": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "SlackAPIPostOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.channel": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.text": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.icon_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.attachments": [
            {
                "type": "attr",
                "anno": "List"
            }
        ],
        "SlackAPIPostOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "channel": "str",
                    "username": "str",
                    "text": "str",
                    "icon_url": "str",
                    "attachments": "List",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SlackAPIPostOperator.api_params": [
            {
                "type": "attr",
                "anno": "Dict[str, str]"
            }
        ],
        "SlackAPIPostOperator.construct_api_call_params": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SlackAPIOperator.execute": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "operators.check_operator": {
        "CheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "CheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "CheckOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CheckOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "conn_id": "Optional[str]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "CheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_convert_to_float_if_possible": [
            {
                "type": "func",
                "args": {
                    "s": "Any"
                }
            }
        ],
        "ValueCheckOperator.__mapper_args__": [
            {
                "type": "attr",
                "anno": "Dict[str, str]"
            }
        ],
        "ValueCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "ValueCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "ValueCheckOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValueCheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValueCheckOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValueCheckOperator.pass_value": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "ValueCheckOperator.tol": [
            {
                "type": "attr",
                "anno": "Optional[float]"
            }
        ],
        "ValueCheckOperator.has_tolerance": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ValueCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "pass_value": "Any",
                    "tolerance": "Any",
                    "conn_id": "Optional[str]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "ValueCheckOperator._to_float": [
            {
                "type": "method",
                "args": {
                    "records": "Iterable[Any]"
                }
            }
        ],
        "ValueCheckOperator._get_string_matches": [
            {
                "type": "method",
                "args": {
                    "records": "Iterable[Any]",
                    "pass_value_conv": "Any"
                }
            }
        ],
        "ValueCheckOperator._get_numeric_matches": [
            {
                "type": "method",
                "args": {
                    "numeric_records": "Iterable[Any]",
                    "numeric_pass_value_conv": "Any"
                }
            }
        ],
        "ValueCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntervalCheckOperator.__mapper_args__": [
            {
                "type": "attr",
                "anno": "Dict[str, str]"
            }
        ],
        "IntervalCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "IntervalCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "IntervalCheckOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.ratio_formulas": [
            {
                "type": "attr",
                "anno": "Dict[str, Callable]"
            }
        ],
        "IntervalCheckOperator.ratio_formula": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.ignore_zero": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "IntervalCheckOperator.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.metrics_thresholds": [
            {
                "type": "attr",
                "anno": "Dict[str, int]"
            }
        ],
        "IntervalCheckOperator.metrics_sorted": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "IntervalCheckOperator.date_filter_column": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "IntervalCheckOperator.days_back": [
            {
                "type": "attr",
                "anno": "SupportsAbs[int]"
            }
        ],
        "IntervalCheckOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.sql1": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.sql2": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "ValueCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "IntervalCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "IntervalCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "metrics_thresholds": "Dict[str, int]",
                    "date_filter_column": "Optional[str]",
                    "days_back": "SupportsAbs[int]",
                    "ratio_formula": "Optional[str]",
                    "ignore_zero": "Optional[bool]",
                    "conn_id": "Optional[str]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ]
    },
    "operators.docker_operator": {
        "DockerOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "DockerOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "DockerOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.auto_remove": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DockerOperator.command": [
            {
                "type": "attr",
                "anno": "Union[str, List[str]]"
            }
        ],
        "DockerOperator.container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.cpus": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "DockerOperator.dns": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "DockerOperator.dns_search": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "DockerOperator.docker_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.environment": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "DockerOperator.force_pull": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DockerOperator.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.mem_limit": [
            {
                "type": "attr",
                "anno": "Union[float, str]"
            }
        ],
        "DockerOperator.host_tmp_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.network_mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_ca_cert": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_client_cert": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_client_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_hostname": [
            {
                "type": "attr",
                "anno": "Union[str, bool]"
            }
        ],
        "DockerOperator.tls_ssl_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tmp_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.user": [
            {
                "type": "attr",
                "anno": "Union[str, int]"
            }
        ],
        "DockerOperator.volumes": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "DockerOperator.working_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.xcom_all": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DockerOperator.docker_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.shm_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DockerOperator.cli": [
            {
                "type": "attr",
                "anno": "APIClient"
            }
        ],
        "DockerOperator.container": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "DockerOperator.__get_tls_config": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DockerOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DockerOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "str",
                    "api_version": "str",
                    "command": "Union[str, List[str]]",
                    "container_name": "str",
                    "cpus": "float",
                    "docker_url": "str",
                    "environment": "Dict",
                    "force_pull": "bool",
                    "mem_limit": "Union[float, str]",
                    "host_tmp_dir": "str",
                    "network_mode": "str",
                    "tls_ca_cert": "str",
                    "tls_client_cert": "str",
                    "tls_client_key": "str",
                    "tls_hostname": "Union[str, bool]",
                    "tls_ssl_version": "str",
                    "tmp_dir": "str",
                    "user": "Union[str, int]",
                    "volumes": "Iterable[str]",
                    "working_dir": "str",
                    "xcom_all": "bool",
                    "docker_conn_id": "str",
                    "dns": "List[str]",
                    "dns_search": "List[str]",
                    "auto_remove": "bool",
                    "shm_size": "int",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DockerOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DockerOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DockerOperator.get_command": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "operators.s3_file_transform_operator": {
        "S3FileTransformOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3FileTransformOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Union[str, tuple[str, ...]]"
            }
        ],
        "S3FileTransformOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.source_s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.source_aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.source_verify": [
            {
                "type": "attr",
                "anno": "Union[bool, str]"
            }
        ],
        "S3FileTransformOperator.dest_s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.dest_aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.dest_verify": [
            {
                "type": "attr",
                "anno": "Union[bool, str]"
            }
        ],
        "S3FileTransformOperator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3FileTransformOperator.transform_script": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.select_expression": [
            {
                "type": "attr",
                "anno": "Union[str, bool]"
            }
        ],
        "S3FileTransformOperator.output_encoding": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_s3_key": "str",
                    "dest_s3_key": "str",
                    "transform_script": "str",
                    "select_expression": "Union[str, bool]",
                    "source_aws_conn_id": "str",
                    "source_verify": "Union[bool, str]",
                    "dest_aws_conn_id": "str",
                    "dest_verify": "Union[bool, str]",
                    "replace": "bool",
                    "args": "Union[str, bool]",
                    "kwargs": "Union[str, bool]"
                }
            }
        ],
        "S3FileTransformOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.bash_operator": {
        "BashOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BashOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BashOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashOperator.bash_command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashOperator.env": [
            {
                "type": "attr",
                "anno": "Dict[str, str]"
            }
        ],
        "BashOperator.output_encoding": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashOperator.lineage_data": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashOperator.sub_process": [
            {
                "type": "attr",
                "anno": "Popen"
            }
        ],
        "BashOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bash_command": "str",
                    "env": "Dict[str, str]",
                    "output_encoding": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BashOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BashOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.http_operator": {
        "SimpleHttpOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SimpleHttpOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SimpleHttpOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleHttpOperator.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleHttpOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleHttpOperator.endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleHttpOperator.headers": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SimpleHttpOperator.data": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SimpleHttpOperator.response_check": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "SimpleHttpOperator.extra_options": [
            {
                "type": "attr",
                "anno": "Dict[str, Any]"
            }
        ],
        "SimpleHttpOperator.log_response": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SimpleHttpOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "endpoint": "str",
                    "method": "str",
                    "data": "Any",
                    "headers": "Dict[str, str]",
                    "response_check": "Callable",
                    "extra_options": "Dict[str, Any]",
                    "http_conn_id": "str",
                    "log_response": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SimpleHttpOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.dummy_operator": {
        "DummyOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DummyOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DummyOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.mssql_operator": {
        "MsSqlOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "MsSqlOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "MsSqlOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlOperator.mssql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlOperator.parameters": [
            {
                "type": "attr",
                "anno": "Union[Mapping, Iterable]"
            }
        ],
        "MsSqlOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MsSqlOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mssql_conn_id": "str",
                    "parameters": "Union[Mapping, Iterable]",
                    "autocommit": "bool",
                    "database": "str",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "MsSqlOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.email_operator": {
        "EmailOperator.template_fields": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "EmailOperator.template_ext": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "EmailOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.to": [
            {
                "type": "attr",
                "anno": "Union[List[str], str]"
            }
        ],
        "EmailOperator.subject": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.html_content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.files": [
            {
                "type": "attr",
                "anno": "List"
            }
        ],
        "EmailOperator.cc": [
            {
                "type": "attr",
                "anno": "Union[List[str], str]"
            }
        ],
        "EmailOperator.bcc": [
            {
                "type": "attr",
                "anno": "Union[List[str], str]"
            }
        ],
        "EmailOperator.mime_subtype": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.mime_charset": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "to": "Union[List[str], str]",
                    "subject": "str",
                    "html_content": "str",
                    "files": "List",
                    "cc": "Union[List[str], str]",
                    "bcc": "Union[List[str], str]",
                    "mime_subtype": "str",
                    "mime_charset": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "EmailOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.hive_stats_operator": {
        "HiveStatsCollectionOperator.template_fields": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "HiveStatsCollectionOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.partition": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveStatsCollectionOperator.extra_exprs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveStatsCollectionOperator.col_blacklist": [
            {
                "type": "attr",
                "anno": "List"
            }
        ],
        "HiveStatsCollectionOperator.metastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.assignment_func": [
            {
                "type": "attr",
                "anno": "Callable[[str, str], Optional[Dict]]"
            }
        ],
        "HiveStatsCollectionOperator.ds": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.dttm": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "partition": "str",
                    "extra_exprs": "Dict",
                    "col_blacklist": "List",
                    "assignment_func": "Callable[[str, str], Optional[Dict]]",
                    "metastore_conn_id": "str",
                    "presto_conn_id": "str",
                    "mysql_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "HiveStatsCollectionOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "HiveStatsCollectionOperator.get_default_exprs": [
            {
                "type": "method",
                "args": {
                    "col": "str",
                    "col_type": "str"
                }
            }
        ]
    },
    "operators.druid_check_operator": {
        "DruidCheckOperator.druid_broker_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidCheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "druid_broker_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DruidCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DruidCheckOperator.get_first": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "DruidCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.sqlite_operator": {
        "SqliteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "SqliteOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "SqliteOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteOperator.sqlite_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteOperator.parameters": [
            {
                "type": "attr",
                "anno": "Union[Mapping, Iterable]"
            }
        ],
        "SqliteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "sqlite_conn_id": "str",
                    "parameters": "Union[Mapping, Iterable]",
                    "args": "Union[Mapping, Iterable]",
                    "kwargs": "Union[Mapping, Iterable]"
                }
            }
        ],
        "SqliteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.mssql_to_hive": {
        "MsSqlToHiveTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MsSqlToHiveTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MsSqlToHiveTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.hive_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.partition": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "MsSqlToHiveTransfer.create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MsSqlToHiveTransfer.recreate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MsSqlToHiveTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.mssql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.tblproperties": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "MsSqlToHiveTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "hive_table": "str",
                    "create": "bool",
                    "recreate": "bool",
                    "partition": "Dict",
                    "delimiter": "str",
                    "mssql_conn_id": "str",
                    "hive_cli_conn_id": "str",
                    "tblproperties": "Dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MsSqlToHiveTransfer.type_map": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "mssql_type": "str"
                }
            }
        ],
        "MsSqlToHiveTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "pymssql.Context"
                }
            }
        ]
    },
    "operators.oracle_operator": {
        "OracleOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "OracleOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "OracleOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleOperator.oracle_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "OracleOperator.parameters": [
            {
                "type": "attr",
                "anno": "Union[Mapping, Iterable]"
            }
        ],
        "OracleOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "oracle_conn_id": "str",
                    "parameters": "Union[Mapping, Iterable]",
                    "autocommit": "bool",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "OracleOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.redshift_to_s3_operator": {
        "RedshiftToS3Transfer.template_fields": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "RedshiftToS3Transfer.template_ext": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "RedshiftToS3Transfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.redshift_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.verify": [
            {
                "type": "attr",
                "anno": "Union[bool, str]"
            }
        ],
        "RedshiftToS3Transfer.unload_options": [
            {
                "type": "attr",
                "anno": "List"
            }
        ],
        "RedshiftToS3Transfer.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RedshiftToS3Transfer.include_header": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RedshiftToS3Transfer.__init__": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table": "str",
                    "s3_bucket": "str",
                    "s3_key": "str",
                    "redshift_conn_id": "str",
                    "aws_conn_id": "str",
                    "verify": "Union[bool, str]",
                    "unload_options": "List",
                    "autocommit": "bool",
                    "include_header": "bool",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "RedshiftToS3Transfer.hook": [
            {
                "type": "attr",
                "anno": "PostgresHook"
            }
        ],
        "RedshiftToS3Transfer.s3": [
            {
                "type": "attr",
                "anno": "S3Hook"
            }
        ],
        "RedshiftToS3Transfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.mysql_operator": {
        "MySqlOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "MySqlOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "MySqlOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlOperator.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlOperator.parameters": [
            {
                "type": "attr",
                "anno": "Union[Mapping, Iterable]"
            }
        ],
        "MySqlOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mysql_conn_id": "str",
                    "parameters": "Union[Mapping, Iterable]",
                    "autocommit": "bool",
                    "database": "str",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "MySqlOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.dagrun_operator": {
        "DagRunOrder.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunOrder.payload": [
            {
                "type": "attr",
                "anno": "Dict[str, Union[str, int]]"
            }
        ],
        "DagRunOrder.__init__": [
            {
                "type": "method",
                "args": {
                    "run_id": "str",
                    "payload": "Dict[str, Union[str, int]]"
                }
            }
        ],
        "TriggerDagRunOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TriggerDagRunOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerDagRunOperator.python_callable": [
            {
                "type": "attr",
                "anno": "Callable[[Dict, DagRunOrder], DagRunOrder]"
            }
        ],
        "TriggerDagRunOperator.trigger_dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerDagRunOperator.execution_date": [
            {
                "type": "attr",
                "anno": "Optional[Union[str, datetime.datetime]]"
            }
        ],
        "TriggerDagRunOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "trigger_dag_id": "str",
                    "python_callable": "Callable[[Dict, DagRunOrder], DagRunOrder]",
                    "execution_date": "Optional[Union[str, datetime.datetime]]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TriggerDagRunOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.mysql_to_hive": {
        "MySqlToHiveTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MySqlToHiveTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MySqlToHiveTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.hive_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.partition": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "MySqlToHiveTransfer.create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlToHiveTransfer.recreate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlToHiveTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.quoting": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.quotechar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.escapechar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.tblproperties": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "MySqlToHiveTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "hive_table": "str",
                    "create": "bool",
                    "recreate": "bool",
                    "partition": "Dict",
                    "delimiter": "str",
                    "quoting": "str",
                    "quotechar": "str",
                    "escapechar": "str",
                    "mysql_conn_id": "str",
                    "hive_cli_conn_id": "str",
                    "tblproperties": "Dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MySqlToHiveTransfer.type_map": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "mysql_type": "str"
                }
            }
        ],
        "MySqlToHiveTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.presto_check_operator": {
        "PrestoCheckOperator.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoCheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "presto_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PrestoCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PrestoValueCheckOperator.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoValueCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "pass_value": "Any",
                    "tolerance": "Any",
                    "presto_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PrestoValueCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PrestoIntervalCheckOperator.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoIntervalCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "metrics_thresholds": "Dict",
                    "date_filter_column": "str",
                    "days_back": "int",
                    "presto_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PrestoIntervalCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "operators.hive_to_samba_operator": {
        "Hive2SambaOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Hive2SambaOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Hive2SambaOperator.hiveserver2_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hive2SambaOperator.samba_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hive2SambaOperator.destination_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hive2SambaOperator.hql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hive2SambaOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "destination_filepath": "str",
                    "samba_conn_id": "str",
                    "hiveserver2_conn_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "Hive2SambaOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.hive_to_mysql": {
        "HiveToMySqlTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveToMySqlTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveToMySqlTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.mysql_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.mysql_preoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.mysql_postoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.hiveserver2_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.bulk_load": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HiveToMySqlTransfer.hive_conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveToMySqlTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mysql_table": "str",
                    "hiveserver2_conn_id": "str",
                    "mysql_conn_id": "str",
                    "mysql_preoperator": "str",
                    "mysql_postoperator": "str",
                    "bulk_load": "bool",
                    "hive_conf": "Dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "HiveToMySqlTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.presto_to_mysql": {
        "PrestoToMySqlTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PrestoToMySqlTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PrestoToMySqlTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.mysql_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.mysql_preoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mysql_table": "str",
                    "presto_conn_id": "str",
                    "mysql_conn_id": "str",
                    "mysql_preoperator": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PrestoToMySqlTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.generic_transfer": {
        "GenericTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "GenericTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "GenericTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.destination_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.source_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.destination_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.preoperator": [
            {
                "type": "attr",
                "anno": "Union[str, List[str]]"
            }
        ],
        "GenericTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "destination_table": "str",
                    "source_conn_id": "str",
                    "destination_conn_id": "str",
                    "preoperator": "Union[str, List[str]]",
                    "args": "Union[str, List[str]]",
                    "kwargs": "Union[str, List[str]]"
                }
            }
        ],
        "GenericTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.python_operator": {
        "PythonOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "PythonOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PythonOperator.shallow_copy_attrs": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "PythonOperator.python_callable": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "PythonOperator.op_args": [
            {
                "type": "attr",
                "anno": "Iterable"
            }
        ],
        "PythonOperator.op_kwargs": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "PythonOperator.provide_context": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PythonOperator.templates_dict": [
            {
                "type": "attr",
                "anno": "Optional[Dict]"
            }
        ],
        "PythonOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "PythonOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "python_callable": "Callable",
                    "op_args": "Optional[Iterable]",
                    "op_kwargs": "Optional[Dict]",
                    "provide_context": "bool",
                    "templates_dict": "Optional[Dict]",
                    "templates_exts": "Optional[Iterable[str]]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PythonOperator.execute_callable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PythonVirtualenvOperator.requirements": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "PythonVirtualenvOperator.string_args": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "PythonVirtualenvOperator.python_version": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "PythonVirtualenvOperator.use_dill": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PythonVirtualenvOperator.system_site_packages": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PythonVirtualenvOperator._pass_op_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PythonVirtualenvOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "python_callable": "Callable",
                    "requirements": "Optional[Iterable[str]]",
                    "python_version": "Optional[str]",
                    "use_dill": "bool",
                    "system_site_packages": "bool",
                    "op_args": "Iterable",
                    "op_kwargs": "Dict",
                    "provide_context": "bool",
                    "string_args": "Optional[Iterable[str]]",
                    "templates_dict": "Optional[Dict]",
                    "templates_exts": "Optional[Iterable[str]]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PythonVirtualenvOperator._write_args": [
            {
                "type": "method",
                "args": {
                    "input_filename": "str"
                }
            }
        ],
        "BranchPythonOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "ShortCircuitOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PythonVirtualenvOperator._generate_python_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PythonVirtualenvOperator._generate_python_cmd": [
            {
                "type": "method",
                "args": {
                    "tmp_dir": "TemporaryDirectory",
                    "script_filename": "str",
                    "input_filename": "str",
                    "output_filename": "str",
                    "string_args_filename": "str"
                }
            }
        ],
        "PythonVirtualenvOperator._generate_pip_install_cmd": [
            {
                "type": "method",
                "args": {
                    "tmp_dir": "TemporaryDirectory"
                }
            }
        ],
        "PythonVirtualenvOperator._generate_virtualenv_cmd": [
            {
                "type": "method",
                "args": {
                    "tmp_dir": "TemporaryDirectory"
                }
            }
        ],
        "PythonVirtualenvOperator._write_string_args": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "PythonVirtualenvOperator._write_script": [
            {
                "type": "method",
                "args": {
                    "script_filename": "str"
                }
            }
        ],
        "PythonVirtualenvOperator._read_result": [
            {
                "type": "method",
                "args": {
                    "output_filename": "str"
                }
            }
        ],
        "PythonVirtualenvOperator._execute_in_subprocess": [
            {
                "type": "method",
                "args": {
                    "cmd": "Iterable[str]"
                }
            }
        ],
        "PythonVirtualenvOperator.execute_callable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PythonOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.papermill_operator": {
        "NoteBook.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NoteBook.attributes": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "PapermillOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "input_nb": "str",
                    "output_nb": "str",
                    "parameters": "Dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PapermillOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.subdag_operator": {
        "SubDagOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SubDagOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SubDagOperator.subdag": [
            {
                "type": "attr",
                "anno": "DAG"
            }
        ],
        "SubDagOperator.executor": [
            {
                "type": "attr",
                "anno": "BaseExecutor"
            }
        ],
        "SubDagOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "subdag": "DAG",
                    "executor": "BaseExecutor",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SubDagOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.postgres_operator": {
        "PostgresOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "PostgresOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "PostgresOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresOperator.postgres_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PostgresOperator.parameters": [
            {
                "type": "attr",
                "anno": "Union[Mapping, Iterable]"
            }
        ],
        "PostgresOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "postgres_conn_id": "str",
                    "autocommit": "bool",
                    "parameters": "Union[Mapping, Iterable]",
                    "database": "str",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "PostgresOperator.hook": [
            {
                "type": "attr",
                "anno": "PostgresHook"
            }
        ],
        "PostgresOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.jdbc_operator": {
        "JdbcOperator.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "JdbcOperator.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "JdbcOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcOperator.parameters": [
            {
                "type": "attr",
                "anno": "Union[Mapping, Iterable]"
            }
        ],
        "JdbcOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcOperator.jdbc_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "JdbcOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "jdbc_conn_id": "str",
                    "autocommit": "bool",
                    "parameters": "Union[Mapping, Iterable]",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "JdbcOperator.hook": [
            {
                "type": "attr",
                "anno": "JdbcHook"
            }
        ],
        "JdbcOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.s3_to_redshift_operator": {
        "S3ToRedshiftTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "S3ToRedshiftTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "S3ToRedshiftTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.redshift_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.verify": [
            {
                "type": "attr",
                "anno": "Union[bool, str]"
            }
        ],
        "S3ToRedshiftTransfer.copy_options": [
            {
                "type": "attr",
                "anno": "List"
            }
        ],
        "S3ToRedshiftTransfer.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToRedshiftTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table": "str",
                    "s3_bucket": "str",
                    "s3_key": "str",
                    "redshift_conn_id": "str",
                    "aws_conn_id": "str",
                    "verify": "Union[bool, str]",
                    "copy_options": "List",
                    "autocommit": "bool",
                    "args": "Union[str, int]",
                    "kwargs": "Union[str, int]"
                }
            }
        ],
        "S3ToRedshiftTransfer.hook": [
            {
                "type": "attr",
                "anno": "PostgresHook"
            }
        ],
        "S3ToRedshiftTransfer.s3": [
            {
                "type": "attr",
                "anno": "S3Hook"
            }
        ],
        "S3ToRedshiftTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.hive_to_druid": {
        "LOAD_CHECK_INTERVAL": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "DEFAULT_TARGET_PARTITION_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "HiveToDruidTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "HiveToDruidTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "HiveToDruidTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.druid_datasource": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.ts_dim": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.intervals": [
            {
                "type": "attr",
                "anno": "List"
            }
        ],
        "HiveToDruidTransfer.num_shards": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "HiveToDruidTransfer.target_partition_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HiveToDruidTransfer.query_granularity": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.segment_granularity": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.metric_spec": [
            {
                "type": "attr",
                "anno": "List"
            }
        ],
        "HiveToDruidTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.hadoop_dependency_coordinates": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "HiveToDruidTransfer.druid_ingest_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.metastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.hive_tblproperties": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "HiveToDruidTransfer.job_properties": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "HiveToDruidTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "druid_datasource": "str",
                    "ts_dim": "str",
                    "metric_spec": "List",
                    "hive_cli_conn_id": "str",
                    "druid_ingest_conn_id": "str",
                    "metastore_conn_id": "str",
                    "hadoop_dependency_coordinates": "List[str]",
                    "intervals": "List",
                    "num_shards": "float",
                    "target_partition_size": "int",
                    "query_granularity": "str",
                    "segment_granularity": "str",
                    "hive_tblproperties": "Dict",
                    "job_properties": "Dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HiveToDruidTransfer.construct_ingest_query": [
            {
                "type": "method",
                "args": {
                    "static_path": "str",
                    "columns": "List[str]"
                }
            }
        ],
        "HiveToDruidTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.latest_only_operator": {
        "LatestOnlyOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LatestOnlyOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.pig_operator": {
        "PigOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PigOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PigOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigOperator.pigparams_jinja_translate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PigOperator.pig": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigOperator.pig_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigOperator.pig_opts": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "pig": "str",
                    "pig_cli_conn_id": "str",
                    "pigparams_jinja_translate": "bool",
                    "pig_opts": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PigOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigOperator.prepare_template": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigOperator.hook": [
            {
                "type": "attr",
                "anno": "PigCliHook"
            }
        ],
        "PigOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PigOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "operators.s3_to_hive_operator": {
        "S3ToHiveTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3ToHiveTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3ToHiveTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.field_dict": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "S3ToHiveTransfer.hive_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.recreate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.partition": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "S3ToHiveTransfer.headers": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.check_headers": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.wildcard_match": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.verify": [
            {
                "type": "attr",
                "anno": "Union[bool, str]"
            }
        ],
        "S3ToHiveTransfer.input_compressed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.tblproperties": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "S3ToHiveTransfer.select_expression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "s3_key": "str",
                    "field_dict": "Dict",
                    "hive_table": "str",
                    "delimiter": "str",
                    "create": "bool",
                    "recreate": "bool",
                    "partition": "Dict",
                    "headers": "bool",
                    "check_headers": "bool",
                    "wildcard_match": "bool",
                    "aws_conn_id": "str",
                    "verify": "Union[bool, str]",
                    "hive_cli_conn_id": "str",
                    "input_compressed": "bool",
                    "tblproperties": "Dict",
                    "select_expression": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "S3ToHiveTransfer.s3": [
            {
                "type": "attr",
                "anno": "S3Hook"
            }
        ],
        "S3ToHiveTransfer.hive": [
            {
                "type": "attr",
                "anno": "HiveCliHook"
            }
        ],
        "S3ToHiveTransfer._get_top_row_as_list": [
            {
                "type": "method",
                "args": {
                    "file_name": "str"
                }
            }
        ],
        "S3ToHiveTransfer._delete_top_row_and_compress": [
            {
                "type": "method",
                "args": {
                    "input_file_name": "str",
                    "output_file_ext": "str",
                    "dest_dir": "str"
                }
            }
        ],
        "S3ToHiveTransfer._match_headers": [
            {
                "type": "method",
                "args": {
                    "header_list": "list"
                }
            }
        ],
        "S3ToHiveTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.hive_operator": {
        "HiveOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.hql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.hiveconfs": [
            {
                "type": "attr",
                "anno": "Dict"
            }
        ],
        "HiveOperator.hiveconf_jinja_translate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HiveOperator.script_begin_tag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.run_as": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.mapred_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.mapred_queue_priority": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.mapred_job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.mapred_job_name_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.hook": [
            {
                "type": "attr",
                "anno": "HiveCliHook"
            }
        ],
        "HiveOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "hive_cli_conn_id": "str",
                    "schema": "str",
                    "hiveconfs": "Dict",
                    "hiveconf_jinja_translate": "bool",
                    "script_begin_tag": "str",
                    "run_as_owner": "bool",
                    "mapred_queue": "str",
                    "mapred_queue_priority": "str",
                    "mapred_job_name": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HiveOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveOperator.prepare_template": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveOperator.dry_run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "HiveOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "kubernetes.volume_mount": {
        "VolumeMount.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VolumeMount.mount_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VolumeMount.sub_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VolumeMount.read_only": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VolumeMount.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "mount_path": "str",
                    "sub_path": "str",
                    "read_only": "bool"
                }
            }
        ]
    },
    "kubernetes.kube_client": {
        "has_kubernetes": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "ApiException": [
            {
                "type": "var",
                "anno": "ApiException"
            }
        ],
        "_import_err": [
            {
                "type": "var",
                "anno": "Exception"
            }
        ],
        "_load_kube_config": [
            {
                "type": "func",
                "args": {
                    "in_cluster": "bool",
                    "cluster_context": "str",
                    "config_file": "str"
                }
            }
        ],
        "get_kube_client": [
            {
                "type": "func",
                "args": {
                    "in_cluster": "bool",
                    "cluster_context": "str",
                    "config_file": "str"
                }
            }
        ]
    },
    "kubernetes.pod": {
        "Resources.request_memory": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.request_cpu": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.limit_memory": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.limit_cpu": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.limit_gpu": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.__init__": [
            {
                "type": "method",
                "args": {
                    "request_memory": "bool",
                    "request_cpu": "bool",
                    "limit_memory": "bool",
                    "limit_cpu": "bool",
                    "limit_gpu": "bool"
                }
            }
        ],
        "Resources.has_limits": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resources.has_requests": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resources.is_empty_resource_request": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Port.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Port.container_port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Port.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "container_port": "int"
                }
            }
        ],
        "Pod.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.envs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.cmds": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.secrets": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.result": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.ports": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.volumes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.volume_mounts": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.node_selectors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.image_pull_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.image_pull_secrets": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.init_containers": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Pod.service_account_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.resources": [
            {
                "type": "attr",
                "anno": "Resources"
            }
        ],
        "Pod.annotations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.affinity": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.hostnetwork": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Pod.tolerations": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.security_context": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.configmaps": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.pod_runtime_info_envs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.dnspolicy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "str",
                    "envs": "dict",
                    "cmds": "list",
                    "args": "list",
                    "secrets": "list",
                    "labels": "dict",
                    "node_selectors": "dict",
                    "name": "str",
                    "ports": "list",
                    "volumes": "list",
                    "volume_mounts": "list",
                    "namespace": "str",
                    "result": "str",
                    "image_pull_policy": "str",
                    "image_pull_secrets": "str",
                    "init_containers": "bool",
                    "service_account_name": "str",
                    "resources": "Resources",
                    "annotations": "dict",
                    "affinity": "dict",
                    "hostnetwork": "bool",
                    "tolerations": "list",
                    "security_context": "dict",
                    "configmaps": "list",
                    "pod_runtime_info_envs": "list",
                    "dnspolicy": "str"
                }
            }
        ]
    },
    "kubernetes.kubernetes_request_factory.kubernetes_request_factory": {
        "KubernetesRequestFactory.create": [
            {
                "type": "method",
                "args": {
                    "pod": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_image": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_image_pull_policy": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_cmds": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_resources": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_service_account_name": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_hostnetwork": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_dnspolicy": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_image_pull_secrets": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_tolerations": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_security_context": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_init_containers": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory._apply_env_from": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.add_secret_to_env": [
            {
                "type": "method",
                "args": {
                    "env": "list",
                    "secret": "Secret"
                }
            }
        ],
        "KubernetesRequestFactory.extract_name": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.add_runtime_info_env": [
            {
                "type": "method",
                "args": {
                    "env": "list",
                    "runtime_info": "RuntimeInfo"
                }
            }
        ],
        "KubernetesRequestFactory.extract_env_and_secrets": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_args": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_volume_secrets": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.attach_volume_mounts": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.attach_volumes": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.attach_ports": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_node_selector": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_affinity": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_annotations": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_labels": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "req": "dict"
                }
            }
        ]
    },
    "kubernetes.kubernetes_request_factory.pod_request_factory": {
        "SimplePodRequestFactory._yaml": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimplePodRequestFactory.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExtractXcomPodRequestFactory.XCOM_MOUNT_PATH": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExtractXcomPodRequestFactory.SIDECAR_CONTAINER_NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExtractXcomPodRequestFactory.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExtractXcomPodRequestFactory._yaml": [
            {
                "type": "attr",
                "anno": "str"
            }
        ]
    },
    "kubernetes.secret": {
        "Secret.deploy_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Secret.deploy_target": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Secret.secret": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Secret.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Secret.__init__": [
            {
                "type": "method",
                "args": {
                    "deploy_type": "str",
                    "deploy_target": "str",
                    "secret": "str",
                    "key": "str"
                }
            }
        ],
        "Secret.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "Secret"
                }
            }
        ],
        "Secret.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "kubernetes.volume": {
        "Volume.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Volume.configs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Volume.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "configs": "dict"
                }
            }
        ]
    },
    "kubernetes.pod_runtime_info_env": {
        "PodRuntimeInfoEnv.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodRuntimeInfoEnv.field_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodRuntimeInfoEnv.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "field_path": "str"
                }
            }
        ]
    },
    "kubernetes.pod_launcher": {
        "PodStatus.PENDING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodStatus.RUNNING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodStatus.FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodStatus.SUCCEEDED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodLauncher._client": [
            {
                "type": "attr",
                "anno": "client.CoreV1Api"
            }
        ],
        "PodLauncher._watch": [
            {
                "type": "attr",
                "anno": "watch.Watch"
            }
        ],
        "PodLauncher.extract_xcom": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PodLauncher.kube_req_factory": [
            {
                "type": "attr",
                "anno": "pod_factory.KubernetesRequestFactory"
            }
        ],
        "PodLauncher.__init__": [
            {
                "type": "method",
                "args": {
                    "kube_client": "client.CoreV1Api",
                    "in_cluster": "bool",
                    "cluster_context": "str",
                    "extract_xcom": "bool"
                }
            }
        ],
        "PodLauncher.delete_pod": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod"
                }
            }
        ],
        "PodLauncher.read_pod": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod"
                }
            }
        ],
        "PodLauncher.base_container_is_running": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod"
                }
            }
        ],
        "PodLauncher.read_pod_logs": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod"
                }
            }
        ],
        "PodLauncher.process_status": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "status": "str"
                }
            }
        ],
        "PodLauncher._exec_pod_command": [
            {
                "type": "method",
                "args": {
                    "resp": "kubernetes_stream",
                    "command": "str"
                }
            }
        ],
        "PodLauncher._task_status": [
            {
                "type": "method",
                "args": {
                    "event": "PodStatus"
                }
            }
        ],
        "PodLauncher.pod_is_running": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod"
                }
            }
        ],
        "PodLauncher.pod_not_started": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod"
                }
            }
        ],
        "PodLauncher.run_pod_async": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod",
                    "kwargs": "dict"
                }
            }
        ],
        "PodLauncher._extract_xcom": [
            {
                "type": "method",
                "args": {
                    "pod": "Pod"
                }
            }
        ]
    },
    "kubernetes.worker_configuration": {
        "WorkerConfiguration.dags_volume_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.logs_volume_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.git_sync_ssh_secret_volume_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.git_ssh_key_secret_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.git_sync_ssh_known_hosts_volume_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.git_ssh_known_hosts_configmap_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.kube_config": [
            {
                "type": "attr",
                "anno": "KubeConfig"
            }
        ],
        "WorkerConfiguration.worker_airflow_home": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.worker_airflow_dags": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.worker_airflow_logs": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration._get_init_containers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration._get_environment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration._get_configmaps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration._get_secrets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration._get_image_pull_secrets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration.generate_dag_volume_mount_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration.__init__": [
            {
                "type": "method",
                "args": {
                    "kube_config": "KubeConfig"
                }
            }
        ],
        "WorkerConfiguration._get_security_context": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration._get_volumes_and_mounts": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration._get_labels": [
            {
                "type": "method",
                "args": {
                    "kube_executor_labels": "dict",
                    "labels": "dict"
                }
            }
        ],
        "WorkerConfiguration.make_pod": [
            {
                "type": "method",
                "args": {
                    "namespace": "str",
                    "worker_uuid": "str",
                    "pod_id": "str",
                    "dag_id": "str",
                    "task_id": "str",
                    "execution_date": "str",
                    "try_number": "int",
                    "airflow_command": "str",
                    "kube_executor_config": "KubernetesExecutorConfig"
                }
            }
        ]
    },
    "kubernetes.pod_generator": {
        "PodGenerator.kube_config": [
            {
                "type": "attr",
                "anno": "KubeConfig"
            }
        ],
        "PodGenerator.ports": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "PodGenerator.volumes": [
            {
                "type": "attr",
                "anno": "list[Volume]"
            }
        ],
        "PodGenerator.volume_mounts": [
            {
                "type": "attr",
                "anno": "list[VolumeMount]"
            }
        ],
        "PodGenerator.init_containers": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "PodGenerator.__init__": [
            {
                "type": "method",
                "args": {
                    "kube_config": "KubeConfig"
                }
            }
        ],
        "PodGenerator.add_init_container": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "image": "str",
                    "security_context": "str",
                    "init_environment": "str",
                    "volume_mounts": "VolumeMount"
                }
            }
        ],
        "PodGenerator._get_init_containers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PodGenerator._add_volume": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "configs": "dict"
                }
            }
        ],
        "PodGenerator.add_volume_with_configmap": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "config_map": "dict"
                }
            }
        ],
        "PodGenerator._add_mount": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "mount_path": "str",
                    "sub_path": "str",
                    "read_only": "bool"
                }
            }
        ],
        "PodGenerator._get_volumes_and_mounts": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PodGenerator._get_image_pull_secrets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PodGenerator.make_pod": [
            {
                "type": "method",
                "args": {
                    "namespace": "str",
                    "image": "str",
                    "pod_id": "str",
                    "cmds": "list",
                    "arguments": "list",
                    "labels": "dict"
                }
            }
        ],
        "PodGenerator.add_mount": [
            {
                "type": "method",
                "args": {
                    "volume_mount": "VolumeMount"
                }
            }
        ],
        "PodGenerator.add_volume": [
            {
                "type": "method",
                "args": {
                    "volume": "Volume"
                }
            }
        ],
        "PodGenerator.add_port": [
            {
                "type": "method",
                "args": {
                    "port": "Port"
                }
            }
        ]
    },
    "utils.timezone": {
        "utc": [
            {
                "type": "var",
                "anno": "pendulum.Timezone"
            }
        ],
        "is_localized": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime"
                }
            }
        ],
        "is_naive": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime"
                }
            }
        ],
        "utcnow": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "utc_epoch": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "convert_to_utc": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime"
                }
            }
        ],
        "make_aware": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime",
                    "timezone": "dt.timezone"
                }
            }
        ],
        "make_naive": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime",
                    "timezone": "int"
                }
            }
        ],
        "datetime": [
            {
                "type": "func",
                "args": {
                    "args": "int",
                    "kwargs": "int"
                }
            }
        ],
        "parse": [
            {
                "type": "func",
                "args": {
                    "string": "str",
                    "timezone": "str"
                }
            }
        ]
    },
    "utils.helpers": {
        "DEFAULT_TIME_TO_WAIT_AFTER_SIGTERM": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "KEY_REGEX": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "ask_yesno": [
            {
                "type": "func",
                "args": {
                    "question": "str"
                }
            }
        ],
        "is_in": [
            {
                "type": "func",
                "args": {
                    "obj": "object",
                    "l": "Iterable"
                }
            }
        ],
        "is_container": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "as_tuple": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "chunks": [
            {
                "type": "func",
                "args": {
                    "items": "Iterable[str]",
                    "chunk_size": "int"
                }
            }
        ],
        "reduce_in_chunks": [
            {
                "type": "func",
                "args": {
                    "fn": "Callable[[str], str]",
                    "iterable": "Iterable[str]",
                    "initializer": "str",
                    "chunk_size": "int"
                }
            }
        ],
        "as_flattened_list": [
            {
                "type": "func",
                "args": {
                    "iterable": "Iterable[str]"
                }
            }
        ],
        "parse_template_string": [
            {
                "type": "func",
                "args": {
                    "template_string": "str"
                }
            }
        ],
        "alchemy_to_dict": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "reap_process_group": [
            {
                "type": "func",
                "args": {
                    "pid": "int",
                    "log": "logging.Logger",
                    "sig": "int",
                    "timeout": "int"
                }
            }
        ],
        "pprinttable": [
            {
                "type": "func",
                "args": {
                    "rows": "Iterable[dict]"
                }
            }
        ],
        "validate_key": [
            {
                "type": "func",
                "args": {
                    "k": "str",
                    "max_length": "int"
                }
            }
        ],
        "cross_downstream": [
            {
                "type": "func",
                "args": {
                    "from_tasks": "Iterable[DAG]",
                    "to_tasks": "Iterable[DAG]"
                }
            }
        ],
        "chain": [
            {
                "type": "func",
                "args": {
                    "tasks": "Union[BaseOperator, Iterable[BaseOperator]]"
                }
            }
        ],
        "render_log_filename": [
            {
                "type": "func",
                "args": {
                    "ti": "TaskInstance",
                    "try_number": "int",
                    "filename_template": "str"
                }
            }
        ]
    },
    "utils.dates": {
        "cron_presets": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "date_range": [
            {
                "type": "func",
                "args": {
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "num": "int",
                    "delta": "timedelta"
                }
            }
        ],
        "round_time": [
            {
                "type": "func",
                "args": {
                    "dt": "datetime",
                    "delta": "str",
                    "start_date": "datetime"
                }
            }
        ],
        "infer_time_unit": [
            {
                "type": "func",
                "args": {
                    "time_seconds_arr": "list"
                }
            }
        ],
        "scale_time_units": [
            {
                "type": "func",
                "args": {
                    "time_seconds_arr": "list",
                    "unit": "str"
                }
            }
        ],
        "days_ago": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "hour": "int",
                    "minute": "int",
                    "second": "int",
                    "microsecond": "int"
                }
            }
        ],
        "parse_execution_date": [
            {
                "type": "func",
                "args": {
                    "execution_date_str": "str"
                }
            }
        ]
    },
    "utils.cli_action_loggers": {
        "default_action_log": [
            {
                "type": "func",
                "args": {
                    "log": "str",
                    "_": "str"
                }
            }
        ],
        "__pre_exec_callbacks": [
            {
                "type": "var",
                "anno": "List[Callable]"
            }
        ],
        "on_pre_execution": [
            {
                "type": "func",
                "args": {
                    "kwargs": "Any"
                }
            }
        ],
        "register_pre_exec_callback": [
            {
                "type": "func",
                "args": {
                    "action_logger": "Callable"
                }
            }
        ],
        "__post_exec_callbacks": [
            {
                "type": "var",
                "anno": "List[Callable]"
            }
        ],
        "on_post_execution": [
            {
                "type": "func",
                "args": {
                    "kwargs": "Any"
                }
            }
        ],
        "register_post_exec_callback": [
            {
                "type": "func",
                "args": {
                    "action_logger": "Callable"
                }
            }
        ]
    },
    "utils.asciiart": {
        "bug": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nukular": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "utils.decorators": {
        "signature": [
            {
                "type": "var",
                "anno": "signature"
            }
        ],
        "apply_defaults": [
            {
                "type": "var",
                "anno": "decorator"
            }
        ]
    },
    "utils.json": {
        "AirflowJsonEncoder.default": [
            {
                "type": "method",
                "args": {
                    "obj": "object"
                }
            }
        ]
    },
    "utils.email": {
        "get_email_address_list": [
            {
                "type": "func",
                "args": {
                    "address_string": "str"
                }
            }
        ],
        "send_email": [
            {
                "type": "func",
                "args": {
                    "to": "str",
                    "subject": "str",
                    "html_content": "str",
                    "files": "str",
                    "dryrun": "bool",
                    "cc": "str",
                    "bcc": "str",
                    "mime_subtype": "str",
                    "mime_charset": "str",
                    "kwargs": "str"
                }
            }
        ],
        "send_MIME_email": [
            {
                "type": "func",
                "args": {
                    "e_from": "str",
                    "e_to": "str",
                    "mime_msg": "MIMEApplication",
                    "dryrun": "bool"
                }
            }
        ],
        "send_email_smtp": [
            {
                "type": "func",
                "args": {
                    "to": "str",
                    "subject": "str",
                    "html_content": "str",
                    "files": "list",
                    "dryrun": "bool",
                    "cc": "list",
                    "bcc": "list",
                    "mime_subtype": "str",
                    "mime_charset": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "utils.log.file_task_handler": {
        "FileTaskHandler.handler": [
            {
                "type": "attr",
                "anno": "logging.Handler"
            }
        ],
        "FileTaskHandler.local_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileTaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "filename_template": "str"
                }
            }
        ],
        "FileTaskHandler.emit": [
            {
                "type": "method",
                "args": {
                    "record": "dict"
                }
            }
        ],
        "FileTaskHandler.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileTaskHandler._render_filename": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int"
                }
            }
        ],
        "FileTaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ],
        "FileTaskHandler.read": [
            {
                "type": "method",
                "args": {
                    "task_instance": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ],
        "FileTaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileTaskHandler._init_file": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "FileTaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ]
    },
    "utils.log.json_formatter": {
        "JSONFormatter.json_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "JSONFormatter.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JSONFormatter.__init__": [
            {
                "type": "method",
                "args": {
                    "fmt": "str",
                    "datefmt": "str",
                    "style": "str",
                    "json_fields": "list",
                    "extras": "dict"
                }
            }
        ],
        "merge_dicts": [
            {
                "type": "func",
                "args": {
                    "dict1": "dict",
                    "dict2": "dict"
                }
            }
        ],
        "JSONFormatter.format": [
            {
                "type": "method",
                "args": {
                    "record": "dict"
                }
            }
        ]
    },
    "utils.log.es_task_handler": {
        "ElasticsearchTaskHandler.PAGE": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ElasticsearchTaskHandler.MAX_LINE_PER_PAGE": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ElasticsearchTaskHandler.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ElasticsearchTaskHandler.client": [
            {
                "type": "attr",
                "anno": "elasticsearch.Elasticsearch"
            }
        ],
        "ElasticsearchTaskHandler.mark_end_on_close": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ElasticsearchTaskHandler.end_of_log_mark": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTaskHandler.write_stdout": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ElasticsearchTaskHandler.json_format": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ElasticsearchTaskHandler.json_fields": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTaskHandler.handler": [
            {
                "type": "attr",
                "anno": "logging.Handler"
            }
        ],
        "ElasticsearchTaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "filename_template": "str",
                    "log_id_template": "str",
                    "end_of_log_mark": "str",
                    "write_stdout": "bool",
                    "json_format": "bool",
                    "json_fields": "str",
                    "host": "str"
                }
            }
        ],
        "ElasticsearchTaskHandler._clean_execution_date": [
            {
                "type": "method",
                "args": {
                    "execution_date": "datetime.datetime"
                }
            }
        ],
        "ElasticsearchTaskHandler.emit": [
            {
                "type": "method",
                "args": {
                    "record": "dict"
                }
            }
        ],
        "ElasticsearchTaskHandler.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ElasticsearchTaskHandler._render_log_id": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int"
                }
            }
        ],
        "ElasticsearchTaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ElasticsearchTaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "ElasticsearchTaskHandler.es_read": [
            {
                "type": "method",
                "args": {
                    "log_id": "str",
                    "offset": "int",
                    "metadata": "dict"
                }
            }
        ],
        "ElasticsearchTaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ]
    },
    "utils.log.s3_task_handler": {
        "S3TaskHandler.remote_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3TaskHandler.log_relative_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3TaskHandler._hook": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3TaskHandler.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3TaskHandler.upload_on_close": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3TaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "s3_log_folder": "str",
                    "filename_template": "str"
                }
            }
        ],
        "S3TaskHandler.hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3TaskHandler.s3_read": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str",
                    "return_error": "bool"
                }
            }
        ],
        "S3TaskHandler.s3_log_exists": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str"
                }
            }
        ],
        "S3TaskHandler.s3_write": [
            {
                "type": "method",
                "args": {
                    "log": "str",
                    "remote_log_location": "str",
                    "append": "bool"
                }
            }
        ],
        "S3TaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3TaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "S3TaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ]
    },
    "utils.log.wasb_task_handler": {
        "WasbTaskHandler.wasb_container": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbTaskHandler.remote_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbTaskHandler.log_relative_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbTaskHandler._hook": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbTaskHandler.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WasbTaskHandler.upload_on_close": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WasbTaskHandler.delete_local_copy": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WasbTaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "wasb_log_folder": "str",
                    "wasb_container": "str",
                    "filename_template": "str",
                    "delete_local_copy": "bool"
                }
            }
        ],
        "WasbTaskHandler.hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WasbTaskHandler.wasb_read": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str",
                    "return_error": "bool"
                }
            }
        ],
        "WasbTaskHandler.wasb_log_exists": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str"
                }
            }
        ],
        "WasbTaskHandler.wasb_write": [
            {
                "type": "method",
                "args": {
                    "log": "str",
                    "remote_log_location": "str",
                    "append": "bool"
                }
            }
        ],
        "WasbTaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WasbTaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "WasbTaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ]
    },
    "utils.log.gcs_task_handler": {
        "GCSTaskHandler.remote_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCSTaskHandler.log_relative_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCSTaskHandler._hook": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCSTaskHandler.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GCSTaskHandler.upload_on_close": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GCSTaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "gcs_log_folder": "str",
                    "filename_template": "str"
                }
            }
        ],
        "GCSTaskHandler.parse_gcs_url": [
            {
                "type": "method",
                "args": {
                    "gsurl": "str"
                }
            }
        ],
        "GCSTaskHandler.hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GCSTaskHandler.gcs_read": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str"
                }
            }
        ],
        "GCSTaskHandler.gcs_write": [
            {
                "type": "method",
                "args": {
                    "log": "str",
                    "remote_log_location": "str",
                    "append": "bool"
                }
            }
        ],
        "GCSTaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GCSTaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "GCSTaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ]
    },
    "utils.log.file_processor_handler": {
        "FileProcessorHandler.handler": [
            {
                "type": "attr",
                "anno": "logging.Handler"
            }
        ],
        "FileProcessorHandler.base_log_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileProcessorHandler.dag_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileProcessorHandler._cur_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "FileProcessorHandler._get_log_directory": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileProcessorHandler._symlink_latest_log_directory": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileProcessorHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "filename_template": "str"
                }
            }
        ],
        "FileProcessorHandler._render_filename": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "FileProcessorHandler.emit": [
            {
                "type": "method",
                "args": {
                    "record": "dict"
                }
            }
        ],
        "FileProcessorHandler.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileProcessorHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileProcessorHandler._init_file": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "FileProcessorHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ]
    },
    "utils.log.logging_mixin": {
        "LoggingMixin._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "LoggingMixin.log": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StreamLogWriter.encoding": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "StreamLogWriter.logger": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "StreamLogWriter.level": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "StreamLogWriter._buffer": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "StreamLogWriter.__init__": [
            {
                "type": "method",
                "args": {
                    "logger": "logging.Logger",
                    "level": "int"
                }
            }
        ],
        "StreamLogWriter.closed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StreamLogWriter.isatty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedirectStdHandler._use_stderr": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RedirectStdHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "stream": "str"
                }
            }
        ],
        "RedirectStdHandler.stream": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "redirect_stdout": [
            {
                "type": "func",
                "args": {
                    "logger": "logging.Logger",
                    "level": "int"
                }
            }
        ],
        "redirect_stderr": [
            {
                "type": "func",
                "args": {
                    "logger": "logging.Logger",
                    "level": "int"
                }
            }
        ],
        "LoggingMixin.logger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StreamLogWriter.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StreamLogWriter.write": [
            {
                "type": "method",
                "args": {
                    "message": "str"
                }
            }
        ],
        "set_context": [
            {
                "type": "func",
                "args": {
                    "logger": "logging.Logger",
                    "value": "str"
                }
            }
        ],
        "LoggingMixin._set_context": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "LoggingMixin.__init__": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "utils.log.colored_log": {
        "ARGS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "DEFAULT_COLORS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "CustomTTYColoredFormatter.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ]
    },
    "utils.tests": {
        "assertEqualIgnoreMultipleSpaces": [
            {
                "type": "func",
                "args": {
                    "case": "unittest.Case",
                    "first": "str",
                    "second": "str",
                    "msg": "str"
                }
            }
        ],
        "skipUnlessImported": [
            {
                "type": "func",
                "args": {
                    "module": "str",
                    "obj": "str"
                }
            }
        ]
    },
    "utils.sqlalchemy": {
        "utc": [
            {
                "type": "var",
                "anno": "pendulum.Timezone"
            }
        ],
        "UtcDateTime.impl": [
            {
                "type": "attr",
                "anno": "DateTime"
            }
        ],
        "UtcDateTime.process_bind_param": [
            {
                "type": "method",
                "args": {
                    "value": "DateTime",
                    "dialect": "Text"
                }
            }
        ],
        "UtcDateTime.process_result_value": [
            {
                "type": "method",
                "args": {
                    "value": "DateTime",
                    "dialect": "Text"
                }
            }
        ],
        "Interval.impl": [
            {
                "type": "attr",
                "anno": "Text"
            }
        ],
        "Interval.attr_keys": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Interval.process_result_value": [
            {
                "type": "method",
                "args": {
                    "value": "Text",
                    "dialect": "Text"
                }
            }
        ],
        "Interval.process_bind_param": [
            {
                "type": "method",
                "args": {
                    "value": "Text",
                    "dialect": "Text"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "setup_event_handlers": [
            {
                "type": "func",
                "args": {
                    "engine": "Text",
                    "reconnect_timeout_seconds": "int",
                    "initial_backoff_seconds": "float",
                    "max_backoff_seconds": "int"
                }
            }
        ]
    },
    "utils.operator_helpers": {
        "AIRFLOW_VAR_NAME_FORMAT_MAPPING": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "context_to_airflow_vars": [
            {
                "type": "func",
                "args": {
                    "context": "dict",
                    "in_env_var_format": "bool"
                }
            }
        ]
    },
    "utils.trigger_rule": {
        "TriggerRule.ALL_SUCCESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.ALL_FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.ALL_DONE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.ONE_SUCCESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.ONE_FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.NONE_FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.NONE_SKIPPED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.DUMMY": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule._ALL_TRIGGER_RULES": [
            {
                "type": "attr",
                "anno": "Set[str]"
            }
        ],
        "TriggerRule.all_triggers": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[TriggerRule]"
                }
            }
        ],
        "TriggerRule.is_valid": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[TriggerRule]",
                    "trigger_rule": "str"
                }
            }
        ]
    },
    "utils.file": {
        "TemporaryDirectory": [
            {
                "type": "func",
                "args": {
                    "suffix": "str",
                    "prefix": "str",
                    "dir": "str"
                }
            }
        ],
        "mkdirs": [
            {
                "type": "func",
                "args": {
                    "path": "str",
                    "mode": "int"
                }
            }
        ]
    },
    "utils.net": {
        "get_host_ip_address": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_hostname": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "utils.timeout": {
        "timeout.seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "timeout.error_message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "timeout.__init__": [
            {
                "type": "method",
                "args": {
                    "seconds": "int",
                    "error_message": "str"
                }
            }
        ],
        "timeout.__exit__": [
            {
                "type": "method",
                "args": {
                    "type": "str",
                    "value": "str",
                    "traceback": "str"
                }
            }
        ],
        "timeout.handle_timeout": [
            {
                "type": "method",
                "args": {
                    "signum": "int",
                    "frame": "str"
                }
            }
        ],
        "timeout.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "utils.state": {
        "State.NONE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.REMOVED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.SCHEDULED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.QUEUED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.RUNNING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.SUCCESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.SHUTDOWN": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.UP_FOR_RETRY": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.UP_FOR_RESCHEDULE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.UPSTREAM_FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.SKIPPED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.task_states": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "State.dag_states": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "State.state_color": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "State.finished": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[State]"
                }
            }
        ],
        "State.unfinished": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[State]"
                }
            }
        ],
        "State.color": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "state": "str"
                }
            }
        ],
        "State.color_fg": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "state": "str"
                }
            }
        ]
    },
    "utils.operator_resources": {
        "MB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "PB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "EB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "Resource._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Resource._units_str": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Resource._qty": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Resource.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "Resource.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resource.name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resource.units_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resource.qty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CpuResource.__init__": [
            {
                "type": "method",
                "args": {
                    "qty": "int"
                }
            }
        ],
        "RamResource.__init__": [
            {
                "type": "method",
                "args": {
                    "qty": "int"
                }
            }
        ],
        "DiskResource.__init__": [
            {
                "type": "method",
                "args": {
                    "qty": "int"
                }
            }
        ],
        "GpuResource.__init__": [
            {
                "type": "method",
                "args": {
                    "qty": "int"
                }
            }
        ],
        "Resources.cpus": [
            {
                "type": "attr",
                "anno": "CpuResource"
            }
        ],
        "Resources.ram": [
            {
                "type": "attr",
                "anno": "RamResource"
            }
        ],
        "Resources.disk": [
            {
                "type": "attr",
                "anno": "DiskResource"
            }
        ],
        "Resources.gpus": [
            {
                "type": "attr",
                "anno": "GpuResource"
            }
        ],
        "Resources.__init__": [
            {
                "type": "method",
                "args": {
                    "cpus": "int",
                    "ram": "int",
                    "disk": "int",
                    "gpus": "int"
                }
            }
        ],
        "Resources.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "Resources.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resource.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "units_str": "str",
                    "qty": "int"
                }
            }
        ]
    },
    "operators": {
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "utils.dag_processing": {
        "SimpleDag._dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleDag._task_ids": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SimpleDag._full_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleDag._is_paused": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SimpleDag._concurrency": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SimpleDag._pickle_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleDag._task_special_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SimpleDag.dag_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.full_filepath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.concurrency": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.is_paused": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.pickle_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.task_special_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.get_task_special_arg": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "special_arg_name": "str"
                }
            }
        ],
        "SimpleTaskInstance._dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleTaskInstance._task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleTaskInstance._execution_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleTaskInstance._start_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleTaskInstance._end_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleTaskInstance._try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SimpleTaskInstance._state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleTaskInstance._executor_config": [
            {
                "type": "attr",
                "anno": "conf.ExecutorConfig"
            }
        ],
        "SimpleTaskInstance._run_as_user": [
            {
                "type": "attr",
                "anno": "Optional[conf.User]"
            }
        ],
        "SimpleTaskInstance._pool": [
            {
                "type": "attr",
                "anno": "Optional[conf.Pool]"
            }
        ],
        "SimpleTaskInstance._priority_weight": [
            {
                "type": "attr",
                "anno": "Optional[float]"
            }
        ],
        "SimpleTaskInstance._queue": [
            {
                "type": "attr",
                "anno": "conf.Queue"
            }
        ],
        "SimpleTaskInstance._key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleTaskInstance.dag_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.task_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.execution_date": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.start_date": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.end_date": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.try_number": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.state": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.pool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.priority_weight": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.queue": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleTaskInstance.executor_config": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDagBag.simple_dags": [
            {
                "type": "attr",
                "anno": "list[SimpleDag]"
            }
        ],
        "SimpleDagBag.dag_id_to_simple_dag": [
            {
                "type": "attr",
                "anno": "dict[str, SimpleDag]"
            }
        ],
        "SimpleDagBag.dag_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "COMMENT_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "AbstractDagFileProcessor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.terminate": [
            {
                "type": "method",
                "args": {
                    "sigkill": "bool"
                }
            }
        ],
        "AbstractDagFileProcessor.pid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.exit_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.result": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.start_time": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.file_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagParsingStat": [
            {
                "type": "var",
                "anno": "namedtuple"
            }
        ],
        "DagParsingSignal.AGENT_HEARTBEAT": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagParsingSignal.TERMINATE_MANAGER": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagParsingSignal.END_MANAGER": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessorAgent._file_paths": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DagFileProcessorAgent._file_path_queue": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagFileProcessorAgent._dag_directory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessorAgent._max_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorAgent._processor_factory": [
            {
                "type": "attr",
                "anno": "AbstractDagFileProcessor"
            }
        ],
        "DagFileProcessorAgent._processor_timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "DagFileProcessorAgent._async_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagFileProcessorAgent._processors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorAgent._last_runtime": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorAgent._last_finish_time": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorAgent._run_count": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorAgent._process": [
            {
                "type": "attr",
                "anno": "Optional[multiprocessing.Process]"
            }
        ],
        "DagFileProcessorAgent._done": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagFileProcessorAgent._all_files_processed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagFileProcessorAgent._parent_signal_conn": [
            {
                "type": "attr",
                "anno": "signal.Signals"
            }
        ],
        "DagFileProcessorAgent._collected_dag_buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagFileProcessorAgent.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_directory": "str",
                    "file_paths": "list[str]",
                    "max_runs": "int",
                    "processor_factory": "AbstractDagFileProcessor",
                    "processor_timeout": "float",
                    "async_mode": "bool"
                }
            }
        ],
        "DagFileProcessorAgent.file_paths": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorAgent.done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorAgent.all_files_processed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager._file_paths": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DagFileProcessorManager._file_path_queue": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DagFileProcessorManager._dag_directory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessorManager._max_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager._processor_factory": [
            {
                "type": "attr",
                "anno": "AbstractDagFileProcessor"
            }
        ],
        "DagFileProcessorManager._signal_conn": [
            {
                "type": "attr",
                "anno": "signal.Signals"
            }
        ],
        "DagFileProcessorManager._async_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagFileProcessorManager._parallelism": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager._file_process_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager.print_stats_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager._processors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorManager._last_runtime": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorManager._last_finish_time": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorManager._last_zombie_query_time": [
            {
                "type": "attr",
                "anno": "timezone.datetime"
            }
        ],
        "DagFileProcessorManager.last_dag_dir_refresh_time": [
            {
                "type": "attr",
                "anno": "timezone.datetime"
            }
        ],
        "DagFileProcessorManager.last_stat_print_time": [
            {
                "type": "attr",
                "anno": "timezone.datetime"
            }
        ],
        "DagFileProcessorManager._zombie_query_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager._run_count": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorManager._heart_beat_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessorManager._processor_timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "DagFileProcessorManager.dag_dir_list_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "DagFileProcessorManager.file_paths": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.get_pid": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "DagFileProcessorManager.get_all_pids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.get_runtime": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "DagFileProcessorManager.get_start_time": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "DagFileProcessorManager.max_runs_reached": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDagBag.__init__": [
            {
                "type": "method",
                "args": {
                    "simple_dags": "list[SimpleDag]"
                }
            }
        ],
        "SimpleTaskInstance.__init__": [
            {
                "type": "method",
                "args": {
                    "ti": "conf.TaskInstance"
                }
            }
        ],
        "DagFileProcessorManager.get_last_finish_time": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "DagFileProcessorManager.get_last_runtime": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "SimpleTaskInstance.construct_task_instance": [
            {
                "type": "method",
                "args": {
                    "session": "session",
                    "lock_for_update": "bool"
                }
            }
        ],
        "DagFileProcessorAgent.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.heartbeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "correct_maybe_zipped": [
            {
                "type": "func",
                "args": {
                    "fileloc": "str"
                }
            }
        ],
        "SimpleDagBag.get_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "SimpleDag.__init__": [
            {
                "type": "method",
                "args": {
                    "dag": "SimpleTaskInstance",
                    "pickle_id": "Optional[str]"
                }
            }
        ],
        "list_py_file_paths": [
            {
                "type": "func",
                "args": {
                    "directory": "str",
                    "safe_mode": "bool",
                    "include_examples": "bool"
                }
            }
        ],
        "DagFileProcessorManager.clear_nonexistent_import_errors": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "DagFileProcessorAgent.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.wait_until_finished": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorAgent._sync_metadata": [
            {
                "type": "method",
                "args": {
                    "stat": "DagParsingStat"
                }
            }
        ],
        "DagFileProcessorAgent._process_message": [
            {
                "type": "method",
                "args": {
                    "message": "DagParsingStat"
                }
            }
        ],
        "DagFileProcessorAgent.wait_until_finished": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorAgent.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorAgent.heartbeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager._exit_gracefully": [
            {
                "type": "method",
                "args": {
                    "signum": "int",
                    "frame": "str"
                }
            }
        ],
        "DagFileProcessorManager.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_directory": "str",
                    "file_paths": "list[str]",
                    "max_runs": "int",
                    "processor_factory": "AbstractDagFileProcessor",
                    "processor_timeout": "float",
                    "signal_conn": "signal.Signals",
                    "async_mode": "bool"
                }
            }
        ],
        "DagFileProcessorManager.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager._kill_timed_out_processors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.collect_results": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager._log_file_processing_stats": [
            {
                "type": "method",
                "args": {
                    "known_file_paths": "list[str]"
                }
            }
        ],
        "DagFileProcessorManager._print_stat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.set_file_paths": [
            {
                "type": "method",
                "args": {
                    "new_file_paths": "list[str]"
                }
            }
        ],
        "DagFileProcessorManager._refresh_dag_dir": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorAgent._heartbeat_manager": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorAgent.harvest_simple_dags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorAgent._run_processor_manager": [
            {
                "type": "method",
                "args": {
                    "dag_directory": "str",
                    "file_paths": "list[str]",
                    "max_runs": "int",
                    "processor_factory": "AbstractDagFileProcessor",
                    "processor_timeout": "float",
                    "signal_conn": "signal.Signals",
                    "async_mode": "bool"
                }
            }
        ]
    },
    "api.common.experimental.mark_tasks": {
        "find_task_relatives": [
            {
                "type": "func",
                "args": {
                    "tasks": "Iterable[BaseOperator]",
                    "downstream": "bool",
                    "upstream": "bool"
                }
            }
        ],
        "_set_dag_run_state": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "execution_date": "datetime.datetime",
                    "state": "State",
                    "session": "Session"
                }
            }
        ],
        "set_dag_run_state_to_running": [
            {
                "type": "func",
                "args": {
                    "dag": "DagRun",
                    "execution_date": "str",
                    "commit": "bool",
                    "session": "Session"
                }
            }
        ],
        "get_all_dag_task_query": [
            {
                "type": "func",
                "args": {
                    "dag": "DagModel",
                    "session": "Session",
                    "state": "State",
                    "task_ids": "Iterable[str]",
                    "confirmed_dates": "Iterable[str]"
                }
            }
        ],
        "all_subdag_tasks_query": [
            {
                "type": "func",
                "args": {
                    "sub_dag_run_ids": "Iterable[str]",
                    "session": "Session",
                    "state": "State",
                    "confirmed_dates": "Iterable[str]"
                }
            }
        ],
        "get_execution_dates": [
            {
                "type": "func",
                "args": {
                    "dag": "DagModel",
                    "execution_date": "datetime.datetime",
                    "future": "bool",
                    "past": "bool"
                }
            }
        ],
        "verify_dag_run_integrity": [
            {
                "type": "func",
                "args": {
                    "dag": "DagModel",
                    "dates": "Iterable[str]"
                }
            }
        ],
        "verify_dagruns": [
            {
                "type": "func",
                "args": {
                    "dag_runs": "Iterable[DagRun]",
                    "commit": "bool",
                    "state": "State",
                    "session": "Session",
                    "current_task": "SubDagOperator"
                }
            }
        ],
        "_create_dagruns": [
            {
                "type": "func",
                "args": {
                    "dag": "DagModel",
                    "execution_dates": "Iterable[str]",
                    "state": "State",
                    "run_id_template": "str"
                }
            }
        ],
        "get_subdag_runs": [
            {
                "type": "func",
                "args": {
                    "dag": "DagModel",
                    "session": "Session",
                    "state": "State",
                    "task_ids": "Iterable[str]",
                    "commit": "bool",
                    "confirmed_dates": "Iterable[str]"
                }
            }
        ],
        "set_state": [
            {
                "type": "func",
                "args": {
                    "tasks": "Iterable[BaseOperator]",
                    "execution_date": "datetime.datetime",
                    "upstream": "bool",
                    "downstream": "bool",
                    "future": "bool",
                    "past": "bool",
                    "state": "str",
                    "commit": "bool",
                    "session": "Session"
                }
            }
        ],
        "set_dag_run_state_to_failed": [
            {
                "type": "func",
                "args": {
                    "dag": "DAG",
                    "execution_date": "datetime.datetime",
                    "commit": "bool",
                    "session": "Session"
                }
            }
        ],
        "set_dag_run_state_to_success": [
            {
                "type": "func",
                "args": {
                    "dag": "DagModel",
                    "execution_date": "datetime.datetime",
                    "commit": "bool",
                    "session": "Session"
                }
            }
        ]
    },
    "api.client.local_client": {
        "Client.delete_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.create_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "slots": "int",
                    "description": "str"
                }
            }
        ],
        "Client.get_pools": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Client.get_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.delete_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "Client.trigger_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "conf": "dict",
                    "execution_date": "str"
                }
            }
        ]
    },
    "utils.weight_rule": {
        "WeightRule.DOWNSTREAM": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WeightRule.UPSTREAM": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WeightRule.ABSOLUTE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WeightRule._ALL_WEIGHT_RULES": [
            {
                "type": "attr",
                "anno": "Set[str]"
            }
        ],
        "WeightRule.all_weight_rules": [
            {
                "type": "method",
                "args": {
                    "cls": "WeightRule"
                }
            }
        ],
        "WeightRule.is_valid": [
            {
                "type": "method",
                "args": {
                    "cls": "WeightRule",
                    "weight_rule": "str"
                }
            }
        ]
    },
    "utils.configuration": {
        "tmp_configuration_copy": [
            {
                "type": "func",
                "args": {
                    "chmod": "int",
                    "include_env": "bool",
                    "include_cmds": "bool"
                }
            }
        ]
    },
    "task.task_runner.standard_task_runner": {
        "StandardTaskRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "local_task_job": "psutil.Popen"
                }
            }
        ],
        "StandardTaskRunner.process": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "StandardTaskRunner.return_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StandardTaskRunner.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StandardTaskRunner.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StandardTaskRunner.on_finish": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "task.task_runner.base_task_runner": {
        "PYTHONPATH_VAR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BaseTaskRunner._task_instance": [
            {
                "type": "attr",
                "anno": "TaskInstance"
            }
        ],
        "BaseTaskRunner.run_as_user": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "BaseTaskRunner._cfg_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseTaskRunner._command": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BaseTaskRunner.process": [
            {
                "type": "attr",
                "anno": "subprocess.CompletedProcess"
            }
        ],
        "BaseTaskRunner.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTaskRunner.return_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTaskRunner.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTaskRunner.on_finish": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTaskRunner.run_command": [
            {
                "type": "method",
                "args": {
                    "run_with": "list"
                }
            }
        ],
        "BaseTaskRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "local_task_job": "LocalTaskJob"
                }
            }
        ],
        "BaseTaskRunner._read_task_logs": [
            {
                "type": "method",
                "args": {
                    "stream": "subprocess.Popen"
                }
            }
        ]
    },
    "task.task_runner": {
        "_TASK_RUNNER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_task_runner": [
            {
                "type": "func",
                "args": {
                    "local_task_job": "LocalTaskJob"
                }
            }
        ]
    },
    "config_templates.default_webserver_config": {
        "basedir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SQLALCHEMY_DATABASE_URI": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CSRF_ENABLED": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "AUTH_TYPE": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "config_templates.default_celery": {
        "_broker_supports_visibility_timeout": [
            {
                "type": "func",
                "args": {
                    "url": "str"
                }
            }
        ],
        "broker_url": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "broker_transport_options": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEFAULT_CELERY_CONFIG": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "celery_ssl_active": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "broker_use_ssl": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "result_backend": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ]
    },
    "config_templates.airflow_local_settings": {
        "LOG_LEVEL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FAB_LOG_LEVEL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LOG_FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "COLORED_LOG_FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "COLORED_LOG": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "COLORED_FORMATTER_CLASS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BASE_LOG_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PROCESSOR_LOG_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DAG_PROCESSOR_MANAGER_LOG_LOCATION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FILENAME_TEMPLATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PROCESSOR_FILENAME_TEMPLATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "REMOTE_BASE_LOG_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ELASTICSEARCH_HOST": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ELASTICSEARCH_LOG_ID_TEMPLATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ELASTICSEARCH_END_OF_LOG_MARK": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ELASTICSEARCH_WRITE_STDOUT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ELASTICSEARCH_JSON_FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ELASTICSEARCH_JSON_FIELDS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEFAULT_LOGGING_CONFIG": [
            {
                "type": "var",
                "anno": "Dict[str, Any]"
            }
        ],
        "DEFAULT_DAG_PARSING_LOGGING_CONFIG": [
            {
                "type": "var",
                "anno": "Dict[str, Any]"
            }
        ],
        "REMOTE_HANDLERS": [
            {
                "type": "var",
                "anno": "Dict[str, Any]"
            }
        ],
        "REMOTE_LOGGING": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "processor_manager_handler_config": [
            {
                "type": "var",
                "anno": "Dict[str, Any]"
            }
        ],
        "directory": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "sensors.http_sensor": {
        "HttpSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HttpSensor.endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpSensor.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpSensor.request_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HttpSensor.headers": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HttpSensor.extra_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HttpSensor.response_check": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "HttpSensor.provide_context": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HttpSensor.hook": [
            {
                "type": "attr",
                "anno": "HttpHook"
            }
        ],
        "HttpSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "endpoint": "str",
                    "http_conn_id": "str",
                    "method": "str",
                    "request_params": "dict",
                    "headers": "dict",
                    "response_check": "Callable",
                    "provide_context": "bool",
                    "extra_options": "dict",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "HttpSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.sql_sensor": {
        "SqlSensor.template_fields": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "SqlSensor.template_ext": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "SqlSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqlSensor.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqlSensor.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqlSensor.parameters": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "SqlSensor.success": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "SqlSensor.failure": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "SqlSensor.fail_on_empty": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqlSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "sql": "str",
                    "parameters": "Iterable[str]",
                    "success": "Callable",
                    "failure": "Callable",
                    "fail_on_empty": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SqlSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.base_sensor_operator": {
        "BaseSensorOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSensorOperator.valid_modes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BaseSensorOperator.poke_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseSensorOperator.soft_fail": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseSensorOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseSensorOperator.mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSensorOperator.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BaseSensorOperator.reschedule": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseSensorOperator.deps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseSensorOperator._validate_input_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseSensorOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "poke_interval": "int",
                    "timeout": "int",
                    "soft_fail": "bool",
                    "mode": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BaseSensorOperator._do_skip_downstream_tasks": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BaseSensorOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.named_hive_partition_sensor": {
        "NamedHivePartitionSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "NamedHivePartitionSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NamedHivePartitionSensor.metastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NamedHivePartitionSensor.partition_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "NamedHivePartitionSensor.hook": [
            {
                "type": "attr",
                "anno": "HiveMetastoreHook"
            }
        ],
        "NamedHivePartitionSensor.parse_partition_name": [
            {
                "type": "method",
                "args": {
                    "partition": "str"
                }
            }
        ],
        "NamedHivePartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "partition_names": "list",
                    "metastore_conn_id": "str",
                    "poke_interval": "int",
                    "hook": "HiveMetastoreHook",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "NamedHivePartitionSensor.poke_partition": [
            {
                "type": "method",
                "args": {
                    "partition": "str"
                }
            }
        ],
        "NamedHivePartitionSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.external_task_sensor": {
        "ExternalTaskSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ExternalTaskSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalTaskSensor.allowed_states": [
            {
                "type": "attr",
                "anno": "list[State]"
            }
        ],
        "ExternalTaskSensor.execution_delta": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "ExternalTaskSensor.execution_date_fn": [
            {
                "type": "attr",
                "anno": "Callable[[str], str]"
            }
        ],
        "ExternalTaskSensor.external_dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalTaskSensor.external_task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalTaskSensor.check_existence": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ExternalTaskSensor.has_checked_existence": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ExternalTaskSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "external_dag_id": "str",
                    "external_task_id": "str",
                    "allowed_states": "list[State]",
                    "execution_delta": "float",
                    "execution_date_fn": "Callable[[str], str]",
                    "check_existence": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "ExternalTaskSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "session": "Session"
                }
            }
        ]
    },
    "sensors.hdfs_sensor": {
        "HdfsSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HdfsSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsSensor.filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsSensor.hdfs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsSensor.file_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HdfsSensor.ignored_ext": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HdfsSensor.ignore_copying": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HdfsSensor.hook": [
            {
                "type": "attr",
                "anno": "HDFSHook"
            }
        ],
        "HdfsSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "hdfs_conn_id": "str",
                    "ignored_ext": "list",
                    "ignore_copying": "bool",
                    "file_size": "int",
                    "hook": "HDFSHook",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "HdfsSensor.filter_for_ignored_ext": [
            {
                "type": "method",
                "args": {
                    "result": "list",
                    "ignored_ext": "list",
                    "ignore_copying": "bool"
                }
            }
        ],
        "HdfsSensor.filter_for_filesize": [
            {
                "type": "method",
                "args": {
                    "result": "list",
                    "size": "int"
                }
            }
        ],
        "HdfsSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.s3_prefix_sensor": {
        "S3PrefixSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3PrefixSensor.bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.full_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3PrefixSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.time_sensor": {
        "TimeSensor.target_time": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TimeSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "target_time": "float",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TimeSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.hive_partition_sensor": {
        "HivePartitionSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HivePartitionSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.metastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.partition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "partition": "str",
                    "metastore_conn_id": "str",
                    "schema": "str",
                    "poke_interval": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HivePartitionSensor.hook": [
            {
                "type": "attr",
                "anno": "HiveMetastoreHook"
            }
        ],
        "HivePartitionSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.time_delta_sensor": {
        "TimeDeltaSensor.delta": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TimeDeltaSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "delta": "float",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TimeDeltaSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.metastore_partition_sensor": {
        "MetastorePartitionSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MetastorePartitionSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.partition_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.first_poke": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MetastorePartitionSensor.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "partition_name": "str",
                    "schema": "str",
                    "mysql_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MetastorePartitionSensor.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors": {
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "sensors.web_hdfs_sensor": {
        "WebHdfsSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "WebHdfsSensor.filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHdfsSensor.webhdfs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHdfsSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "webhdfs_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WebHdfsSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.s3_key_sensor": {
        "S3KeySensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3KeySensor.bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3KeySensor.bucket_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3KeySensor.wildcard_match": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3KeySensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3KeySensor.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3KeySensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket_key": "str",
                    "bucket_name": "str",
                    "wildcard_match": "bool",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3KeySensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "hooks.mssql_hook": {
        "MsSqlHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MsSqlHook.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MsSqlHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "pymssql.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "MsSqlHook.get_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "pymssql.Connection"
                }
            }
        ],
        "MsSqlHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.http_hook": {
        "HttpHook.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpHook.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpHook.base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpHook._retry_obj": [
            {
                "type": "attr",
                "anno": "tenacity.Retrying"
            }
        ],
        "HttpHook.__init__": [
            {
                "type": "method",
                "args": {
                    "method": "str",
                    "http_conn_id": "str"
                }
            }
        ],
        "HttpHook.check_response": [
            {
                "type": "method",
                "args": {
                    "response": "requests.Response"
                }
            }
        ],
        "HttpHook.get_conn": [
            {
                "type": "method",
                "args": {
                    "headers": "dict"
                }
            }
        ],
        "HttpHook.run_and_check": [
            {
                "type": "method",
                "args": {
                    "session": "requests.Session",
                    "prepped_request": "requests.Request",
                    "extra_options": "dict"
                }
            }
        ],
        "HttpHook.run": [
            {
                "type": "method",
                "args": {
                    "endpoint": "str",
                    "data": "dict",
                    "headers": "dict",
                    "extra_options": "dict"
                }
            }
        ],
        "HttpHook.run_with_advanced_retry": [
            {
                "type": "method",
                "args": {
                    "_retry_args": "dict",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ]
    },
    "hooks.docker_hook": {
        "DockerHook.__base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__tls": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__registry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__email": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__reauth": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DockerHook.__init__": [
            {
                "type": "method",
                "args": {
                    "docker_conn_id": "str",
                    "base_url": "str",
                    "version": "str",
                    "tls": "str"
                }
            }
        ],
        "DockerHook.__login": [
            {
                "type": "method",
                "args": {
                    "client": "APIClient"
                }
            }
        ],
        "DockerHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.dbapi_hook": {
        "DbApiHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "Optional[str]"
            }
        ],
        "DbApiHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DbApiHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DbApiHook.connector": [
            {
                "type": "attr",
                "anno": "Optional[sqlalchemy.Connector]"
            }
        ],
        "DbApiHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DbApiHook.get_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "sqlalchemy.Connection"
                }
            }
        ],
        "DbApiHook._serialize_cell": [
            {
                "type": "method",
                "args": {
                    "cell": "Optional[dict]",
                    "conn": "Optional[sqlalchemy.Connection]"
                }
            }
        ],
        "DbApiHook.bulk_dump": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ],
        "DbApiHook.bulk_load": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ],
        "DbApiHook.get_records": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "Optional[dict]"
                }
            }
        ],
        "DbApiHook.run": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "autocommit": "bool",
                    "parameters": "Optional[dict]"
                }
            }
        ],
        "DbApiHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list[dict]",
                    "target_fields": "Optional[list[str]]",
                    "commit_every": "int",
                    "replace": "bool"
                }
            }
        ],
        "DbApiHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "sqlalchemy.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "DbApiHook.get_uri": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DbApiHook.get_sqlalchemy_engine": [
            {
                "type": "method",
                "args": {
                    "engine_kwargs": "Optional[dict]"
                }
            }
        ],
        "DbApiHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DbApiHook.get_cursor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DbApiHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "Optional[dict]"
                }
            }
        ],
        "DbApiHook.get_first": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "Optional[dict]"
                }
            }
        ]
    },
    "hooks.druid_hook": {
        "DruidHook.druid_ingest_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidHook.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DruidHook.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DruidHook.header": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DruidHook.__init__": [
            {
                "type": "method",
                "args": {
                    "druid_ingest_conn_id": "str",
                    "timeout": "int",
                    "max_ingestion_time": "int"
                }
            }
        ],
        "DruidDbApiHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidDbApiHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidDbApiHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DruidDbApiHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DruidDbApiHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "connect.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "DruidDbApiHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "DruidDbApiHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ],
        "DruidDbApiHook.get_uri": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DruidHook.get_conn_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DruidDbApiHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DruidHook.submit_indexing_job": [
            {
                "type": "method",
                "args": {
                    "json_index_spec": "dict"
                }
            }
        ]
    },
    "hooks.slack_hook": {
        "SlackHook.token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackHook.__get_token": [
            {
                "type": "method",
                "args": {
                    "token": "str",
                    "slack_conn_id": "str"
                }
            }
        ],
        "SlackHook.__init__": [
            {
                "type": "method",
                "args": {
                    "token": "str",
                    "slack_conn_id": "str"
                }
            }
        ],
        "SlackHook.call": [
            {
                "type": "method",
                "args": {
                    "method": "str",
                    "api_params": "dict"
                }
            }
        ]
    },
    "hooks.pig_hook": {
        "PigCliHook.pig_properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigCliHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "PigCliHook.sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "PigCliHook.__init__": [
            {
                "type": "method",
                "args": {
                    "pig_cli_conn_id": "str"
                }
            }
        ],
        "PigCliHook.run_cli": [
            {
                "type": "method",
                "args": {
                    "pig": "str",
                    "pig_opts": "str",
                    "verbose": "bool"
                }
            }
        ],
        "PigCliHook.kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.sqlite_hook": {
        "SqliteHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqliteHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.webhdfs_hook": {
        "_kerberos_security_mode": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "WebHDFSHook.webhdfs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHDFSHook.proxy_user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHDFSHook.__init__": [
            {
                "type": "method",
                "args": {
                    "webhdfs_conn_id": "str",
                    "proxy_user": "str"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "WebHDFSHook._get_client": [
            {
                "type": "method",
                "args": {
                    "connection": "Connection"
                }
            }
        ],
        "WebHDFSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WebHDFSHook.check_for_path": [
            {
                "type": "method",
                "args": {
                    "hdfs_path": "str"
                }
            }
        ],
        "WebHDFSHook.load_file": [
            {
                "type": "method",
                "args": {
                    "source": "str",
                    "destination": "str",
                    "overwrite": "bool",
                    "parallelism": "int",
                    "kwargs": "str"
                }
            }
        ]
    },
    "hooks.zendesk_hook": {
        "ZendeskHook.__zendesk_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ZendeskHook.__url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ZendeskHook.__init__": [
            {
                "type": "method",
                "args": {
                    "zendesk_conn_id": "str"
                }
            }
        ],
        "ZendeskHook.__handle_rate_limit_exception": [
            {
                "type": "method",
                "args": {
                    "rate_limit_exception": "RateLimitError"
                }
            }
        ],
        "ZendeskHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ZendeskHook.call": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "query": "dict",
                    "get_all_pages": "bool",
                    "side_loading": "bool"
                }
            }
        ]
    },
    "hooks.jdbc_hook": {
        "JdbcHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "JdbcHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "jaydebeapi.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "JdbcHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.samba_hook": {
        "SambaHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SambaHook.__init__": [
            {
                "type": "method",
                "args": {
                    "samba_conn_id": "str"
                }
            }
        ],
        "SambaHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SambaHook.push_from_local": [
            {
                "type": "method",
                "args": {
                    "destination_filepath": "str",
                    "local_filepath": "str"
                }
            }
        ]
    },
    "hooks": {
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "hooks.postgres_hook": {
        "PostgresHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PostgresHook.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PostgresHook.conn": [
            {
                "type": "attr",
                "anno": "psycopg2.Connection"
            }
        ],
        "PostgresHook._serialize_cell": [
            {
                "type": "method",
                "args": {
                    "cell": "psycopg2.extensions.Cell",
                    "conn": "psycopg2.extensions.Connection"
                }
            }
        ],
        "PostgresHook.get_iam_token": [
            {
                "type": "method",
                "args": {
                    "conn": "psycopg2.Connection"
                }
            }
        ],
        "PostgresHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PostgresHook.copy_expert": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "filename": "str",
                    "open": "typing.Callable"
                }
            }
        ],
        "PostgresHook.bulk_dump": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ],
        "PostgresHook.bulk_load": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ]
    },
    "hooks.hdfs_hook": {
        "snakebite_loaded": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "HDFSHook.hdfs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HDFSHook.proxy_user": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "HDFSHook.autoconfig": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HDFSHook.__init__": [
            {
                "type": "method",
                "args": {
                    "hdfs_conn_id": "str",
                    "proxy_user": "str | None",
                    "autoconfig": "bool"
                }
            }
        ],
        "HDFSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.hive_hooks": {
        "HIVE_QUEUE_PRIORITIES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "get_context_from_env_var": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "HiveCliHook.hive_cli_params": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.use_beeline": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HiveCliHook.auth": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "HiveCliHook.run_as": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.mapred_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.mapred_queue_priority": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.mapred_job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "HiveMetastoreHook.MAX_PART_COUNT": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HiveMetastoreHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveMetastoreHook.metastore": [
            {
                "type": "attr",
                "anno": "HMSCliHook"
            }
        ],
        "HiveMetastoreHook.__getstate__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveMetastoreHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveMetastoreHook.check_for_partition": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table": "str",
                    "partition": "str"
                }
            }
        ],
        "HiveMetastoreHook.check_for_named_partition": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table": "str",
                    "partition_name": "str"
                }
            }
        ],
        "HiveMetastoreHook.get_tables": [
            {
                "type": "method",
                "args": {
                    "db": "str",
                    "pattern": "str"
                }
            }
        ],
        "HiveMetastoreHook.get_databases": [
            {
                "type": "method",
                "args": {
                    "pattern": "str"
                }
            }
        ],
        "HiveServer2Hook.hiveserver2_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveServer2Hook.__init__": [
            {
                "type": "method",
                "args": {
                    "hiveserver2_conn_id": "str"
                }
            }
        ],
        "HiveServer2Hook._get_results": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str",
                    "fetch_size": "int",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveServer2Hook.get_results": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str",
                    "fetch_size": "int",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveServer2Hook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str"
                }
            }
        ],
        "HiveServer2Hook.get_records": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveMetastoreHook._get_max_partition_from_part_specs": [
            {
                "type": "method",
                "args": {
                    "part_specs": "list",
                    "partition_key": "str",
                    "filter_map": "dict"
                }
            }
        ],
        "HiveCliHook._prepare_hiveconf": [
            {
                "type": "method",
                "args": {
                    "d": "dict"
                }
            }
        ],
        "HiveCliHook.__init__": [
            {
                "type": "method",
                "args": {
                    "hive_cli_conn_id": "str",
                    "run_as": "str",
                    "mapred_queue": "str",
                    "mapred_queue_priority": "str",
                    "mapred_job_name": "str"
                }
            }
        ],
        "HiveServer2Hook.to_csv": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "csv_filepath": "str",
                    "schema": "str",
                    "delimiter": "str",
                    "lineterminator": "str",
                    "output_header": "bool",
                    "fetch_size": "int",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveServer2Hook.get_conn": [
            {
                "type": "method",
                "args": {
                    "schema": "str"
                }
            }
        ],
        "HiveCliHook._get_proxy_user": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveCliHook._prepare_cli_cmd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveCliHook.run_cli": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str",
                    "verbose": "bool",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveCliHook.load_file": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "table": "str",
                    "delimiter": "str",
                    "field_dict": "dict",
                    "create": "bool",
                    "overwrite": "bool",
                    "partition": "dict",
                    "recreate": "bool",
                    "tblproperties": "dict"
                }
            }
        ],
        "HiveCliHook.load_df": [
            {
                "type": "method",
                "args": {
                    "df": "pd.DataFrame",
                    "table": "str",
                    "field_dict": "dict",
                    "delimiter": "str",
                    "encoding": "str",
                    "pandas_kwargs": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "HiveCliHook.test_hql": [
            {
                "type": "method",
                "args": {
                    "hql": "str"
                }
            }
        ],
        "HiveMetastoreHook.get_table": [
            {
                "type": "method",
                "args": {
                    "table_name": "str",
                    "db": "str"
                }
            }
        ],
        "HiveMetastoreHook.table_exists": [
            {
                "type": "method",
                "args": {
                    "table_name": "str",
                    "db": "str"
                }
            }
        ],
        "HiveMetastoreHook.max_partition": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table_name": "str",
                    "field": "str",
                    "filter_map": "dict"
                }
            }
        ],
        "HiveMetastoreHook.get_partitions": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table_name": "str",
                    "filter": "str"
                }
            }
        ],
        "HiveMetastoreHook._find_valid_server": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveMetastoreHook.get_metastore_client": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveMetastoreHook.__init__": [
            {
                "type": "method",
                "args": {
                    "metastore_conn_id": "str"
                }
            }
        ],
        "HiveMetastoreHook.__setstate__": [
            {
                "type": "method",
                "args": {
                    "d": "dict"
                }
            }
        ],
        "HiveCliHook.kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.base_hook": {
        "CONN_ENV_PREFIX": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BaseHook.__init__": [
            {
                "type": "method",
                "args": {
                    "source": "str"
                }
            }
        ],
        "BaseHook._get_connection_from_env": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str"
                }
            }
        ],
        "BaseHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHook.get_records": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "BaseHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "BaseHook.run": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "BaseHook.get_connection": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str"
                }
            }
        ],
        "BaseHook._get_connections_from_db": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str",
                    "session": "provide_session"
                }
            }
        ],
        "BaseHook.get_connections": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str"
                }
            }
        ],
        "BaseHook.get_hook": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[Hook]",
                    "conn_id": "str"
                }
            }
        ]
    },
    "hooks.presto_hook": {
        "PrestoHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoHook._strip_sql": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "PrestoHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "PrestoHook._get_pretty_exception_message": [
            {
                "type": "method",
                "args": {
                    "e": "DatabaseError"
                }
            }
        ],
        "PrestoHook.get_records": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "PrestoHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PrestoHook.run": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "PrestoHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list"
                }
            }
        ],
        "PrestoHook.get_first": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "parameters": "dict"
                }
            }
        ]
    },
    "hooks.oracle_hook": {
        "OracleHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "OracleHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OracleHook.bulk_insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ],
        "OracleHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ]
    },
    "hooks.mysql_hook": {
        "MySqlHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlHook.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MySqlHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "MySQLdb.cursors.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "MySqlHook.get_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "MySQLdb.Connection"
                }
            }
        ],
        "MySqlHook._serialize_cell": [
            {
                "type": "method",
                "args": {
                    "cell": "MySQLdb.Cursor",
                    "conn": "MySQLdb.Connection"
                }
            }
        ],
        "MySqlHook.get_iam_token": [
            {
                "type": "method",
                "args": {
                    "conn": "MySQLdb.Connection"
                }
            }
        ],
        "MySqlHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MySqlHook.bulk_dump": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ],
        "MySqlHook.bulk_load": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ]
    },
    "settings": {
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "tz": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TIMEZONE": [
            {
                "type": "var",
                "anno": "pendulum.Timezone"
            }
        ],
        "HEADER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LOGGING_LEVEL": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GUNICORN_WORKER_READY_PREFIX": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LOG_FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SIMPLE_LOG_FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SQL_ALCHEMY_CONN": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DAGS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PLUGINS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LOGGING_CLASS_PATH": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "engine": [
            {
                "type": "var",
                "anno": "scoped_engine"
            }
        ],
        "Session": [
            {
                "type": "var",
                "anno": "scoped_session"
            }
        ],
        "policy": [
            {
                "type": "func",
                "args": {
                    "task_instance": "pdulum.Task"
                }
            }
        ],
        "pod_mutation_hook": [
            {
                "type": "func",
                "args": {
                    "pod": "Pod"
                }
            }
        ],
        "configure_vars": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "dispose_orm": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "configure_adapters": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "configure_action_logging": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "prepare_syspath": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "import_local_settings": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "KILOBYTE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "MEGABYTE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "WEB_COLORS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "CONTEXT_MANAGER_DAG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "configure_orm": [
            {
                "type": "func",
                "args": {
                    "disable_connection_pool": "bool"
                }
            }
        ],
        "initialize": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "validate_session": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "stats": {
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "DummyStatsLogger.incr": [
            {
                "type": "method",
                "args": {
                    "cls": "Stats",
                    "stat": "str",
                    "count": "int",
                    "rate": "int"
                }
            }
        ],
        "DummyStatsLogger.decr": [
            {
                "type": "method",
                "args": {
                    "cls": "Stats",
                    "stat": "str",
                    "count": "int",
                    "rate": "int"
                }
            }
        ],
        "DummyStatsLogger.gauge": [
            {
                "type": "method",
                "args": {
                    "cls": "Stats",
                    "stat": "str",
                    "value": "float",
                    "rate": "float",
                    "delta": "bool"
                }
            }
        ],
        "DummyStatsLogger.timing": [
            {
                "type": "method",
                "args": {
                    "cls": "Stats",
                    "stat": "str",
                    "dt": "float"
                }
            }
        ],
        "ALLOWED_CHARACTERS": [
            {
                "type": "var",
                "anno": "set"
            }
        ],
        "SafeStatsdLogger.statsd": [
            {
                "type": "attr",
                "anno": "StatsClient"
            }
        ],
        "SafeStatsdLogger.__init__": [
            {
                "type": "method",
                "args": {
                    "statsd_client": "StatsClient"
                }
            }
        ],
        "statsd": [
            {
                "type": "var",
                "anno": "StatsClient"
            }
        ],
        "Stats": [
            {
                "type": "var",
                "anno": "Stats"
            }
        ],
        "stat_name_default_handler": [
            {
                "type": "func",
                "args": {
                    "stat_name": "str",
                    "max_length": "int"
                }
            }
        ],
        "validate_stat": [
            {
                "type": "func",
                "args": {
                    "f": "Any"
                }
            }
        ],
        "SafeStatsdLogger.timing": [
            {
                "type": "method",
                "args": {
                    "stat": "str",
                    "dt": "float"
                }
            }
        ],
        "SafeStatsdLogger.gauge": [
            {
                "type": "method",
                "args": {
                    "stat": "str",
                    "value": "float",
                    "rate": "float",
                    "delta": "bool"
                }
            }
        ],
        "SafeStatsdLogger.decr": [
            {
                "type": "method",
                "args": {
                    "stat": "str",
                    "count": "int",
                    "rate": "int"
                }
            }
        ],
        "SafeStatsdLogger.incr": [
            {
                "type": "method",
                "args": {
                    "stat": "str",
                    "count": "int",
                    "rate": "int"
                }
            }
        ]
    },
    "www.utils": {
        "DEFAULT_SENSITIVE_VARIABLE_FIELDS": [
            {
                "type": "var",
                "anno": "tuple[str, ...]"
            }
        ],
        "should_hide_value_for_key": [
            {
                "type": "func",
                "args": {
                    "key_name": "str"
                }
            }
        ],
        "get_params": [
            {
                "type": "func",
                "args": {
                    "kwargs": "str"
                }
            }
        ],
        "epoch": [
            {
                "type": "func",
                "args": {
                    "dttm": "datetime.datetime"
                }
            }
        ],
        "json_response": [
            {
                "type": "func",
                "args": {
                    "obj": "dict"
                }
            }
        ],
        "make_cache_key": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "pygment_html_render": [
            {
                "type": "func",
                "args": {
                    "s": "str",
                    "lexer": "lexers.TextLexer"
                }
            }
        ],
        "wrapped_markdown": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "get_chart_height": [
            {
                "type": "func",
                "args": {
                    "dag": "sqla.DAG"
                }
            }
        ],
        "UtcAwareFilterConverter.conversion_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CustomSQLAInterface.filter_converter_class": [
            {
                "type": "attr",
                "anno": "type[fab_sqlafilters.SQLAFilterConverter]"
            }
        ],
        "CustomSQLAInterface.__init__": [
            {
                "type": "method",
                "args": {
                    "obj": "sqla.SQLA"
                }
            }
        ],
        "UtcAwareFilterMixin.apply": [
            {
                "type": "method",
                "args": {
                    "query": "sqla.Query",
                    "value": "str"
                }
            }
        ],
        "recurse_tasks": [
            {
                "type": "func",
                "args": {
                    "tasks": "Union[SubDagOperator, list]",
                    "task_ids": "list",
                    "dag_ids": "list",
                    "task_id_to_dag": "dict"
                }
            }
        ],
        "CustomSQLAInterface.is_utcdatetime": [
            {
                "type": "method",
                "args": {
                    "col_name": "str"
                }
            }
        ],
        "render": [
            {
                "type": "func",
                "args": {
                    "obj": "Union[str, list, dict]",
                    "lexer": "lexers.TextLexer"
                }
            }
        ],
        "get_attr_renderer": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "dag_run_link": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "dag_link": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "datetime_f": [
            {
                "type": "func",
                "args": {
                    "attr_name": "str"
                }
            }
        ],
        "nobr_f": [
            {
                "type": "func",
                "args": {
                    "attr_name": "str"
                }
            }
        ],
        "state_token": [
            {
                "type": "func",
                "args": {
                    "state": "str"
                }
            }
        ],
        "state_f": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "task_instance_link": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "ZIP_REGEX": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "open_maybe_zipped": [
            {
                "type": "func",
                "args": {
                    "f": "str",
                    "mode": "str"
                }
            }
        ],
        "generate_pages": [
            {
                "type": "func",
                "args": {
                    "current_page": "int",
                    "num_of_pages": "int",
                    "search": "str",
                    "showPaused": "bool",
                    "window": "int"
                }
            }
        ]
    },
    "www.api.experimental.endpoints": {
        "requires_authentication": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "api_experimental": [
            {
                "type": "var",
                "anno": "Blueprint"
            }
        ],
        "test": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "latest_dag_runs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "delete_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "create_pool": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_pools": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "dag_run_status": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str"
                }
            }
        ],
        "task_instance_info": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "task_id": "str"
                }
            }
        ],
        "task_info": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "task_id": "str"
                }
            }
        ],
        "get_dag_code": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "dag_runs": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "delete_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "trigger_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "dag_paused": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "paused": "str"
                }
            }
        ]
    },
    "www.security": {
        "EXISTING_ROLES": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.VIEWER_VMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.USER_VMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.OP_VMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.VIEWER_PERMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.USER_PERMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.OP_PERMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.DAG_VMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.WRITE_DAG_PERMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.READ_DAG_PERMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.DAG_PERMS": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.ROLE_CONFIGS": [
            {
                "type": "attr",
                "anno": "list[dict[str, str]]"
            }
        ],
        "AirflowSecurityManager.get_user_roles": [
            {
                "type": "method",
                "args": {
                    "user": "models.User"
                }
            }
        ],
        "AirflowSecurityManager.perms": [
            {
                "type": "attr",
                "anno": "set[tuple[str, str]]"
            }
        ],
        "AirflowSecurityManager.has_access": [
            {
                "type": "method",
                "args": {
                    "permission": "str",
                    "view_name": "str",
                    "user": "models.User"
                }
            }
        ],
        "AirflowSecurityManager._has_role": [
            {
                "type": "method",
                "args": {
                    "role_name_or_list": "str"
                }
            }
        ],
        "AirflowSecurityManager.get_all_permissions_views": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager._get_and_cache_perms": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager._has_perm": [
            {
                "type": "method",
                "args": {
                    "permission_name": "str",
                    "view_menu_name": "str"
                }
            }
        ],
        "AirflowSecurityManager.has_all_dags_access": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager.get_accessible_dag_ids": [
            {
                "type": "method",
                "args": {
                    "username": "models.User"
                }
            }
        ],
        "AirflowSecurityManager._sync_dag_view_permissions": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "access_control": "dict"
                }
            }
        ],
        "AirflowSecurityManager.sync_perm_for_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "access_control": "dict"
                }
            }
        ],
        "AirflowSecurityManager.update_admin_perm_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager._merge_perm": [
            {
                "type": "method",
                "args": {
                    "permission_name": "str",
                    "view_menu_name": "str"
                }
            }
        ],
        "AirflowSecurityManager.create_perm_vm_for_all_dag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager.init_role": [
            {
                "type": "method",
                "args": {
                    "role_name": "str",
                    "role_vms": "set[str]",
                    "role_perms": "set[str]"
                }
            }
        ],
        "AirflowSecurityManager.clean_perms": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager.delete_role": [
            {
                "type": "method",
                "args": {
                    "role_name": "str"
                }
            }
        ],
        "AirflowSecurityManager.create_custom_dag_permission_view": [
            {
                "type": "method",
                "args": {
                    "session": "sqla_models.Session"
                }
            }
        ],
        "AirflowSecurityManager.sync_roles": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "www.widgets": {
        "AirflowModelListWidget.template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ]
    },
    "www.static_config": {
        "manifest": [
            {
                "type": "var",
                "anno": "Dict"
            }
        ],
        "configure_manifest_files": [
            {
                "type": "func",
                "args": {
                    "app": "Any"
                }
            }
        ]
    },
    "www.app": {
        "app": [
            {
                "type": "var",
                "anno": "Flask"
            }
        ],
        "appbuilder": [
            {
                "type": "var",
                "anno": "AppBuilder"
            }
        ],
        "csrf": [
            {
                "type": "var",
                "anno": "CSRFProtect"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "root_app": [
            {
                "type": "func",
                "args": {
                    "env": "dict",
                    "resp": "Any"
                }
            }
        ],
        "create_app": [
            {
                "type": "func",
                "args": {
                    "config": "dict",
                    "session": "str",
                    "testing": "bool",
                    "app_name": "str"
                }
            }
        ],
        "cached_app": [
            {
                "type": "func",
                "args": {
                    "config": "dict",
                    "session": "str",
                    "testing": "bool"
                }
            }
        ],
        "cached_appbuilder": [
            {
                "type": "func",
                "args": {
                    "config": "dict",
                    "testing": "bool"
                }
            }
        ]
    },
    "www.gunicorn_config": {
        "post_worker_init": [
            {
                "type": "func",
                "args": {
                    "dummy_worker": "settings.Worker"
                }
            }
        ]
    },
    "www.forms": {
        "DateTimeForm.execution_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DateTimeWithNumRunsForm.base_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DateTimeWithNumRunsForm.num_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DateTimeWithNumRunsWithDagRunsForm.execution_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunForm.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunForm.start_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DagRunForm.end_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DagRunForm.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunForm.state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunForm.execution_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DagRunForm.external_trigger": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagRunForm.populate_obj": [
            {
                "type": "method",
                "args": {
                    "item": "DagRun"
                }
            }
        ],
        "ConnectionForm.conn_id": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.conn_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionForm.host": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.schema": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.login": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.password": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "ConnectionForm.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ConnectionForm.extra": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionForm.extra__jdbc__drv_path": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.extra__jdbc__drv_clsname": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__project": [
            {
                "type": "attr",
                "anno": "TextAreaField"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__key_path": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__keyfile_dict": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__scope": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__num_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ConnectionForm.extra__grpc__auth_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionForm.extra__grpc__credential_pem_file": [
            {
                "type": "attr",
                "anno": "TextAreaField"
            }
        ],
        "ConnectionForm.extra__grpc__scopes": [
            {
                "type": "attr",
                "anno": "str"
            }
        ]
    },
    "www.decorators": {
        "action_logging": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "has_dag_access": [
            {
                "type": "func",
                "args": {
                    "dag_kwargs": "str"
                }
            }
        ],
        "gzipped": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ]
    },
    "www.views": {
        "PAGE_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "dagbag": [
            {
                "type": "var",
                "anno": "models.DagBag"
            }
        ],
        "circles": [
            {
                "type": "func",
                "args": {
                    "error": "int"
                }
            }
        ],
        "show_traceback": [
            {
                "type": "func",
                "args": {
                    "error": "int"
                }
            }
        ],
        "AirflowBaseView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowBaseView.extra_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Airflow.health": [
            {
                "type": "method",
                "args": {
                    "session": "dict"
                }
            }
        ],
        "Airflow.GraphForm.arrange": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowModelView.list_widget": [
            {
                "type": "attr",
                "anno": "AirflowModelListWidget"
            }
        ],
        "AirflowModelView.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowModelView.CustomSQLAInterface": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "SlaMissModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMissModelView.datamodel": [
            {
                "type": "attr",
                "anno": "wwwutils.CustomSQLAInterface"
            }
        ],
        "SlaMissModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SlaMissModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list[BaseFilter]"
            }
        ],
        "SlaMissModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "XComModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XComModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "XComModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "XComModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "XComModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "ConnectionModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "ConnectionModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.extra_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.add_form": [
            {
                "type": "attr",
                "anno": "add_form"
            }
        ],
        "ConnectionModelView.edit_form": [
            {
                "type": "attr",
                "anno": "edit_form"
            }
        ],
        "ConnectionModelView.add_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.edit_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "ConnectionModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "PoolModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PoolModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "PoolModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PoolModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PoolModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PoolModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PoolModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PoolModelView.validators_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VariableModelView.list_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VariableModelView.edit_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VariableModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "VariableModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VariableModelView.validators_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JobModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JobModelView.datamodel": [
            {
                "type": "attr",
                "anno": "wwwutils.CustomSQLAInterface"
            }
        ],
        "JobModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "JobModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "JobModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "JobModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple[str, str]"
            }
        ],
        "JobModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list[BaseFilter]"
            }
        ],
        "JobModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "DagRunModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "DagRunModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DagRunModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.add_form": [
            {
                "type": "attr",
                "anno": "edit_form"
            }
        ],
        "DagRunModelView.edit_form": [
            {
                "type": "attr",
                "anno": "add_form"
            }
        ],
        "DagRunModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "LogModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LogModelView.datamodel": [
            {
                "type": "attr",
                "anno": "wwwutils.CustomSQLAInterface"
            }
        ],
        "LogModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "LogModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "LogModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "LogModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "LogModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list[BaseFilter]"
            }
        ],
        "LogModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "TaskInstanceModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstanceModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "TaskInstanceModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TaskInstanceModelView.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstanceModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TaskInstanceModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TaskInstanceModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TaskInstanceModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "DagModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DagModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DagModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "DagModelView.base_filters": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "DagModelView.get_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModelView.get_count_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "XComModelView.pre_update": [
            {
                "type": "method",
                "args": {
                    "item": "airflow.AirflowModel"
                }
            }
        ],
        "XComModelView.pre_add": [
            {
                "type": "method",
                "args": {
                    "item": "airflow.AirflowItem"
                }
            }
        ],
        "DagRunModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list",
                    "session": "session"
                }
            }
        ],
        "DagFilter.apply": [
            {
                "type": "method",
                "args": {
                    "query": "sqla.Query",
                    "func": "func"
                }
            }
        ],
        "TaskInstanceModelView.duration_f": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "VariableModelView.hidden_field_formatter": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "VariableModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "Airflow.blocked": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.last_dagruns": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.dag_stats": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "get_date_time_num_runs_dag_runs_form_data": [
            {
                "type": "func",
                "args": {
                    "request": "sqla.Request",
                    "session": "sqla.Session",
                    "dag": "sqla.Dag"
                }
            }
        ],
        "Airflow.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.task_stats": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstanceModelView.set_task_instance_state": [
            {
                "type": "method",
                "args": {
                    "tis": "list",
                    "target_state": "State",
                    "session": "Session"
                }
            }
        ],
        "TaskInstanceModelView.log_url_formatter": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "TaskInstanceModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TaskInstanceModelView.action_set_retry": [
            {
                "type": "method",
                "args": {
                    "tis": "list"
                }
            }
        ],
        "TaskInstanceModelView.action_set_success": [
            {
                "type": "method",
                "args": {
                    "tis": "list"
                }
            }
        ],
        "TaskInstanceModelView.action_set_failed": [
            {
                "type": "method",
                "args": {
                    "tis": "list"
                }
            }
        ],
        "TaskInstanceModelView.action_set_running": [
            {
                "type": "method",
                "args": {
                    "tis": "list"
                }
            }
        ],
        "DagRunModelView.action_set_running": [
            {
                "type": "method",
                "args": {
                    "drs": "list",
                    "session": "sqla.Session"
                }
            }
        ],
        "PoolModelView.fqueued_slots": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "PoolModelView.fused_slots": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "PoolModelView.pool_link": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "PoolModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PoolModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "Airflow.delete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.elasticsearch": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "AirflowBaseView.render_template": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "VersionView.version": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.xcom": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.log": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "ConnectionModelView.prefill_form": [
            {
                "type": "method",
                "args": {
                    "form": "ConnectionForm",
                    "pk": "str"
                }
            }
        ],
        "ConnectionModelView.process_form": [
            {
                "type": "method",
                "args": {
                    "form": "ConnectionForm",
                    "is_created": "bool"
                }
            }
        ],
        "Airflow.index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRunModelView.action_set_success": [
            {
                "type": "method",
                "args": {
                    "drs": "list",
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRunModelView.action_set_failed": [
            {
                "type": "method",
                "args": {
                    "drs": "list",
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.task_instances": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "Airflow.refresh": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.landing_times": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "Airflow.tries": [
            {
                "type": "method",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "Airflow.duration": [
            {
                "type": "method",
                "args": {
                    "session": "session"
                }
            }
        ],
        "Airflow._mark_dagrun_state_as_success": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "origin": "str"
                }
            }
        ],
        "Airflow.dagrun_success": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow._mark_dagrun_state_as_failed": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "origin": "str"
                }
            }
        ],
        "Airflow.dagrun_failed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.dag_details": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow._mark_task_instance_state": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_id": "str",
                    "origin": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "upstream": "bool",
                    "downstream": "bool",
                    "future": "bool",
                    "past": "bool",
                    "state": "State"
                }
            }
        ],
        "Airflow.success": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.failed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.task": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.trigger": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow._clear_dag_tis": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "start_date": "str",
                    "end_date": "str",
                    "origin": "str",
                    "recursive": "bool",
                    "confirmed": "bool",
                    "only_failed": "bool"
                }
            }
        ],
        "Airflow.dagrun_clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VariableModelView.varimport": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ConfigurationView.conf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.get_logs_with_metadata": [
            {
                "type": "method",
                "args": {
                    "session": "models.Session"
                }
            }
        ],
        "Airflow.code": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.rendered": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.extra_links": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.gantt": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.graph": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.tree": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.paused": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VariableModelView.action_varexport": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "VariableModelView.prefill_form": [
            {
                "type": "method",
                "args": {
                    "form": "sqla.Variable",
                    "id": "str"
                }
            }
        ],
        "Airflow.refresh_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstanceModelView.action_clear": [
            {
                "type": "method",
                "args": {
                    "tis": "list",
                    "session": "sqla.Session"
                }
            }
        ]
    },
    "www.blueprints": {
        "routes": [
            {
                "type": "var",
                "anno": "Blueprint"
            }
        ],
        "index": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "version": {
        "version": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "plugins_manager": {
        "import_errors": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "AirflowPlugin.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowPlugin.operators": [
            {
                "type": "attr",
                "anno": "List[BaseOperatorLink]"
            }
        ],
        "AirflowPlugin.sensors": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "AirflowPlugin.hooks": [
            {
                "type": "attr",
                "anno": "List[Any]"
            }
        ],
        "AirflowPlugin.executors": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "AirflowPlugin.macros": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "AirflowPlugin.admin_views": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "AirflowPlugin.flask_blueprints": [
            {
                "type": "attr",
                "anno": "List[dict]"
            }
        ],
        "AirflowPlugin.menu_links": [
            {
                "type": "attr",
                "anno": "List[BaseOperatorLink]"
            }
        ],
        "AirflowPlugin.appbuilder_views": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "AirflowPlugin.appbuilder_menu_items": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "AirflowPlugin.stat_name_handler": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowPlugin.global_operator_extra_links": [
            {
                "type": "attr",
                "anno": "List[BaseOperatorLink]"
            }
        ],
        "AirflowPlugin.on_load": [
            {
                "type": "method",
                "args": {
                    "cls": "Any",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "norm_pattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "filepath": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "namespace": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "m": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "operators_modules": [
            {
                "type": "var",
                "anno": "List[imp.Module]"
            }
        ],
        "sensors_modules": [
            {
                "type": "var",
                "anno": "List[Any]"
            }
        ],
        "hooks_modules": [
            {
                "type": "var",
                "anno": "List[imp.Module]"
            }
        ],
        "executors_modules": [
            {
                "type": "var",
                "anno": "List[imp.Module]"
            }
        ],
        "macros_modules": [
            {
                "type": "var",
                "anno": "List[Any]"
            }
        ],
        "admin_views": [
            {
                "type": "var",
                "anno": "List[str]"
            }
        ],
        "flask_blueprints": [
            {
                "type": "var",
                "anno": "List[dict]"
            }
        ],
        "menu_links": [
            {
                "type": "var",
                "anno": "List[BaseOperatorLink]"
            }
        ],
        "flask_appbuilder_views": [
            {
                "type": "var",
                "anno": "List[dict]"
            }
        ],
        "flask_appbuilder_menu_links": [
            {
                "type": "var",
                "anno": "List[BaseOperatorLink]"
            }
        ],
        "global_operator_extra_links": [
            {
                "type": "var",
                "anno": "List[BaseOperatorLink]"
            }
        ],
        "stat_name_handlers": [
            {
                "type": "var",
                "anno": "List[str]"
            }
        ],
        "stat_name_handler": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowPlugin.validate": [
            {
                "type": "method",
                "args": {
                    "cls": "Any"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "make_module": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "objects": "List[Any]"
                }
            }
        ],
        "is_valid_plugin": [
            {
                "type": "func",
                "args": {
                    "plugin_obj": "Any",
                    "existing_plugins": "List"
                }
            }
        ],
        "load_entrypoint_plugins": [
            {
                "type": "func",
                "args": {
                    "entry_points": "pkg_resources.EntryPoint",
                    "airflow_plugins": "List"
                }
            }
        ],
        "plugins": [
            {
                "type": "var",
                "anno": "List"
            }
        ]
    },
    "_vendor.slugify": {
        "__author__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__description__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "_vendor.slugify.slugify": {
        "_unicode": [
            {
                "type": "var",
                "anno": "type[str]"
            }
        ],
        "_unicode_type": [
            {
                "type": "var",
                "anno": "type[str]"
            }
        ],
        "unichr": [
            {
                "type": "var",
                "anno": "type[str]"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "types.List[str]"
            }
        ],
        "CHAR_ENTITY_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "DECIMAL_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "HEX_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "QUOTE_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "ALLOWED_CHARS_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "ALLOWED_CHARS_PATTERN_WITH_UPPERCASE": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "DUPLICATE_DASH_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "NUMBERS_PATTERN": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "DEFAULT_SEPARATOR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "smart_truncate": [
            {
                "type": "func",
                "args": {
                    "string": "str",
                    "max_length": "int",
                    "word_boundary": "bool",
                    "separator": "str",
                    "save_order": "bool"
                }
            }
        ],
        "slugify": [
            {
                "type": "func",
                "args": {
                    "text": "str",
                    "entities": "bool",
                    "decimal": "bool",
                    "hexadecimal": "bool",
                    "max_length": "int",
                    "word_boundary": "bool",
                    "separator": "str",
                    "save_order": "bool",
                    "stopwords": "list",
                    "regex_pattern": "str",
                    "lowercase": "bool",
                    "replacements": "list"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "_vendor.nvd3.NVD3Chart": {
        "CONTENT_FILENAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PAGE_FILENAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "pl": [
            {
                "type": "var",
                "anno": "PackageLoader"
            }
        ],
        "jinja2_env": [
            {
                "type": "var",
                "anno": "Environment"
            }
        ],
        "template_content": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "template_page": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "stab": [
            {
                "type": "func",
                "args": {
                    "tab": "int"
                }
            }
        ],
        "NVD3Chart.count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NVD3Chart.assets_directory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "NVD3Chart.template_environment": [
            {
                "type": "attr",
                "anno": "Environment"
            }
        ],
        "NVD3Chart.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.template_page_nvd3": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.template_content_nvd3": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.series": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "NVD3Chart.axislist": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "NVD3Chart.display_container": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.charttooltip_dateformat": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.jquery_on_ready": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.color_category": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.color_list": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "NVD3Chart.margin_bottom": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NVD3Chart.margin_left": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NVD3Chart.margin_right": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NVD3Chart.margin_top": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NVD3Chart.height": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.width": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.stacked": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.focus_enable": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.resize": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.show_legend": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.show_labels": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.tag_script_js": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.use_interactive_guideline": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.chart_attr": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "NVD3Chart.extras": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.style": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.date_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.x_axis_date": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.date_flag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.x_axis_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.remote_js_assets": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.htmlcontent": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.htmlheader": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.container": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.containerheader": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.header_css": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "NVD3Chart.header_js": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "NVD3Chart.jschart": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.custom_tooltip_flag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NVD3Chart.tooltip_condition_string": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.charttooltip": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.serie_no": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NVD3Chart.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart._slugify_name": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "NVD3Chart.add_chart_extras": [
            {
                "type": "method",
                "args": {
                    "extras": "str"
                }
            }
        ],
        "NVD3Chart.set_graph_height": [
            {
                "type": "method",
                "args": {
                    "height": "int"
                }
            }
        ],
        "NVD3Chart.set_graph_width": [
            {
                "type": "method",
                "args": {
                    "width": "int"
                }
            }
        ],
        "NVD3Chart.set_containerheader": [
            {
                "type": "method",
                "args": {
                    "containerheader": "str"
                }
            }
        ],
        "NVD3Chart.set_date_flag": [
            {
                "type": "method",
                "args": {
                    "date_flag": "bool"
                }
            }
        ],
        "NVD3Chart.set_custom_tooltip_flag": [
            {
                "type": "method",
                "args": {
                    "custom_tooltip_flag": "bool"
                }
            }
        ],
        "NVD3Chart.content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.buildhtmlheader": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NVD3Chart.buildcontainer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NVD3Chart.series_js": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.buildjschart": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NVD3Chart.buildcontent": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NVD3Chart.buildhtml": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NVD3Chart.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NVD3Chart.dateformat": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NVD3Chart.create_x_axis": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "label": "str",
                    "format": "str",
                    "date": "bool",
                    "custom_format": "bool"
                }
            }
        ],
        "NVD3Chart.create_y_axis": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "label": "str",
                    "format": "str",
                    "custom_format": "bool"
                }
            }
        ],
        "TemplateMixin.htmlcontent": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_main": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TemplateMixin.buildcontent": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NVD3Chart.add_serie": [
            {
                "type": "method",
                "args": {
                    "y": "list",
                    "x": "list",
                    "name": "str",
                    "extra": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "NVD3Chart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.linePlusBarChart": {
        "linePlusBarChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "linePlusBarChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "linePlusBarChart.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "linePlusBarChart.yaxis1_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "linePlusBarChart.yaxis2_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "linePlusBarChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.discreteBarChart": {
        "discreteBarChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "discreteBarChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "discreteBarChart.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "discreteBarChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.multiBarHorizontalChart": {
        "multiBarHorizontalChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "multiBarHorizontalChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "multiBarHorizontalChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.cumulativeLineChart": {
        "cumulativeLineChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "cumulativeLineChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "cumulativeLineChart.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "cumulativeLineChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.multiBarChart": {
        "multiBarChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "multiBarChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "multiBarChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.lineChart": {
        "lineChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lineChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "lineChart.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lineChart.x_axis_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lineChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.lineWithFocusChart": {
        "lineWithFocusChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lineWithFocusChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "lineWithFocusChart.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lineWithFocusChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.pieChart": {
        "pieChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "pieChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "pieChart.donut": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "pieChart.donutRatio": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "pieChart.color_list": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "pieChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.translator": {
        "Tag.content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Tag.attrs": [
            {
                "type": "attr",
                "anno": "list[tuple[str, str]]"
            }
        ],
        "ScriptTag.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ScriptTag.attrs": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "AnonymousFunction.arguments": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AnonymousFunction.content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AnonymousFunction.__init__": [
            {
                "type": "method",
                "args": {
                    "arguments": "str",
                    "content": "str"
                }
            }
        ],
        "AnonymousFunction.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Function.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Function._calls": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Function.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Function.__getattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "Function.__call__": [
            {
                "type": "method",
                "args": {
                    "args": "object"
                }
            }
        ],
        "Assignment.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Assignment.value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Tag.__init__": [
            {
                "type": "method",
                "args": {
                    "content": "str"
                }
            }
        ],
        "Assignment.scoped": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Assignment.__init__": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "value": "str",
                    "scoped": "bool"
                }
            }
        ],
        "Assignment.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "indent": [
            {
                "type": "func",
                "args": {
                    "func": "Function"
                }
            }
        ],
        "Tag.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Function.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "_vendor.nvd3.scatterChart": {
        "scatterChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "scatterChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "scatterChart.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "scatterChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "_vendor.nvd3.ipynb": {
        "_ip": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "_js_initialized": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "initialize_javascript": [
            {
                "type": "func",
                "args": {
                    "d3_js_url": "str",
                    "nvd3_js_url": "str",
                    "nvd3_css_url": "str",
                    "use_remote": "bool"
                }
            }
        ],
        "_print_html": [
            {
                "type": "func",
                "args": {
                    "chart": "NVD3Chart"
                }
            }
        ],
        "_setup_ipython_formatter": [
            {
                "type": "func",
                "args": {
                    "ip": "IPython"
                }
            }
        ]
    },
    "_vendor.nvd3": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ]
    },
    "_vendor.nvd3.stackedAreaChart": {
        "stackedAreaChart.CHART_FILENAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "stackedAreaChart.template_chart_nvd3": [
            {
                "type": "attr",
                "anno": "Template"
            }
        ],
        "stackedAreaChart.model": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "stackedAreaChart.__init__": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "dag.base_dag": {
        "BaseDag.dag_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.full_filepath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.concurrency": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.is_paused": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.pickle_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDagBag.dag_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDagBag.get_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ]
    },
    "": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "login": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowMacroPlugin.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowMacroPlugin.__init__": [
            {
                "type": "method",
                "args": {
                    "namespace": "str"
                }
            }
        ]
    },
    "ti_deps.dep_context": {
        "DepContext.deps": [
            {
                "type": "attr",
                "anno": "set[DagRunningDep]"
            }
        ],
        "DepContext.flag_upstream_failed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_all_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_depends_on_past": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_in_retry_period": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_in_reschedule_period": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_task_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_ti_state": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.__init__": [
            {
                "type": "method",
                "args": {
                    "deps": "set[DagRunningDep]",
                    "flag_upstream_failed": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_in_retry_period": "bool",
                    "ignore_in_reschedule_period": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool"
                }
            }
        ],
        "QUEUEABLE_STATES": [
            {
                "type": "var",
                "anno": "set[State]"
            }
        ],
        "QUEUE_DEPS": [
            {
                "type": "var",
                "anno": "set[State]"
            }
        ],
        "RUN_DEPS": [
            {
                "type": "var",
                "anno": "set[State]"
            }
        ],
        "SCHEDULER_DEPS": [
            {
                "type": "var",
                "anno": "set[State]"
            }
        ]
    },
    "ti_deps.deps.not_in_retry_period_dep": {
        "NotInRetryPeriodDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NotInRetryPeriodDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NotInRetryPeriodDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NotInRetryPeriodDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "session",
                    "dep_context": "DepContext"
                }
            }
        ]
    },
    "ti_deps.deps.dag_unpaused_dep": {
        "DagUnpausedDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagUnpausedDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagUnpausedDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.valid_state_dep": {
        "ValidStateDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValidStateDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ValidStateDep._valid_states": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "ValidStateDep.__init__": [
            {
                "type": "method",
                "args": {
                    "valid_states": "set"
                }
            }
        ],
        "ValidStateDep.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ValidStateDep.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ValidStateDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "session",
                    "dep_context": "DepContext"
                }
            }
        ]
    },
    "ti_deps.deps.not_skipped_dep": {
        "NotSkippedDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NotSkippedDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NotSkippedDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "NotSkippedDep",
                    "session": "provide_session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.task_concurrency_dep": {
        "TaskConcurrencyDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskConcurrencyDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskConcurrencyDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskConcurrencyDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.exec_date_after_start_date_dep": {
        "ExecDateAfterStartDateDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExecDateAfterStartDateDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ExecDateAfterStartDateDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.base_ti_dep": {
        "BaseTIDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseTIDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseTIDep.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTIDep.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "BaseTIDep.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTIDep.name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTIDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ],
        "TIDepStatus": [
            {
                "type": "var",
                "anno": "TIDepStatus"
            }
        ],
        "BaseTIDep._passing_status": [
            {
                "type": "method",
                "args": {
                    "reason": "str"
                }
            }
        ],
        "BaseTIDep.get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ],
        "BaseTIDep.get_failure_reasons": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ],
        "BaseTIDep.is_met": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ],
        "BaseTIDep._failing_status": [
            {
                "type": "method",
                "args": {
                    "reason": "str"
                }
            }
        ],
        "BaseTIDep.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ti_deps.deps.dag_ti_slots_available_dep": {
        "DagTISlotsAvailableDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagTISlotsAvailableDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagTISlotsAvailableDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "DagTISlotsAvailableDep",
                    "session": "Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.trigger_rule_dep": {
        "TriggerRuleDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRuleDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TriggerRuleDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TriggerRuleDep._evaluate_trigger_rule": [
            {
                "type": "method",
                "args": {
                    "ti": "airflow.models.TaskInstance",
                    "successes": "int",
                    "skipped": "int",
                    "failed": "int",
                    "upstream_failed": "int",
                    "done": "int",
                    "flag_upstream_failed": "bool",
                    "session": "Session"
                }
            }
        ],
        "TriggerRuleDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "airflow.models.TaskInstance",
                    "session": "Session",
                    "dep_context": "airflow.utils.TriggerRule"
                }
            }
        ]
    },
    "ti_deps.deps.prev_dagrun_dep": {
        "PrevDagrunDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrevDagrunDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PrevDagrunDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PrevDagrunDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance",
                    "session": "Session",
                    "dep_context": "DepContext"
                }
            }
        ]
    },
    "ti_deps.deps.not_running_dep": {
        "NotRunningDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NotRunningDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NotRunningDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "NotRunningDep",
                    "session": "Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.ready_to_reschedule": {
        "ReadyToRescheduleDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ReadyToRescheduleDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ReadyToRescheduleDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ReadyToRescheduleDep.RESCHEDULEABLE_STATES": [
            {
                "type": "attr",
                "anno": "set[State]"
            }
        ],
        "ReadyToRescheduleDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance",
                    "session": "Session",
                    "dep_context": "DepContext"
                }
            }
        ]
    },
    "ti_deps.deps.runnable_exec_date_dep": {
        "RunnableExecDateDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunnableExecDateDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RunnableExecDateDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.dagrun_exists_dep": {
        "DagrunRunningDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagrunRunningDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagrunRunningDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "DagrunRunningDep",
                    "session": "Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "bin.cli": {
        "api_module": [
            {
                "type": "var",
                "anno": "api.API_AUTH"
            }
        ],
        "api_client": [
            {
                "type": "var",
                "anno": "api.Client"
            }
        ],
        "DAGS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "sigint_handler": [
            {
                "type": "func",
                "args": {
                    "sig": "int",
                    "frame": "str"
                }
            }
        ],
        "setup_logging": [
            {
                "type": "func",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "process_subdir": [
            {
                "type": "func",
                "args": {
                    "subdir": "str"
                }
            }
        ],
        "_tabulate_pools": [
            {
                "type": "func",
                "args": {
                    "pools": "list[str]"
                }
            }
        ],
        "variables_set": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "variables_delete": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "get_num_ready_workers_running": [
            {
                "type": "func",
                "args": {
                    "gunicorn_master_proc": "psutil.Process"
                }
            }
        ],
        "get_num_workers_running": [
            {
                "type": "func",
                "args": {
                    "gunicorn_master_proc": "psutil.Process"
                }
            }
        ],
        "initdb": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "resetdb": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "upgradedb": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "version": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "alternative_conn_specs": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "users_list": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "roles_list": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "roles_create": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "Arg.flags": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Arg.help": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Arg.action": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Arg.default": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "variables_get": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "Arg.nargs": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Arg.type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Arg.choices": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Arg.required": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Arg.metavar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Arg.__init__": [
            {
                "type": "method",
                "args": {
                    "flags": "str",
                    "help": "str",
                    "action": "str",
                    "default": "Any",
                    "nargs": "str",
                    "type": "str",
                    "choices": "str",
                    "required": "bool",
                    "metavar": "str"
                }
            }
        ],
        "CLIFactory.args": [
            {
                "type": "attr",
                "anno": "dict[str, Arg]"
            }
        ],
        "CLIFactory.dag_subparsers": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "CLIFactory._add_subcommand": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "subparsers": "argparse._SubParsersAction",
                    "sub": "dict"
                }
            }
        ],
        "connections_list": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "rotate_fernet_key": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "variables_list": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "list_dag_runs": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "_import_users": [
            {
                "type": "func",
                "args": {
                    "users_list": "dict"
                }
            }
        ],
        "users_manage_role": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "remove": "bool"
                }
            }
        ],
        "users_delete": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "users_create": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "connections_add": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "list_jobs": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "get_dag": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "next_execution": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "dag_state": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "get_dags": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "clear": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "setup_locations": [
            {
                "type": "func",
                "args": {
                    "process": "str",
                    "pid": "int",
                    "stdout": "str",
                    "stderr": "str",
                    "log": "str"
                }
            }
        ],
        "sigquit_handler": [
            {
                "type": "func",
                "args": {
                    "sig": "int",
                    "frame": "str"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "users_export": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "task_state": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "task_failed_deps": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "users_import": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "import_helper": [
            {
                "type": "func",
                "args": {
                    "filepath": "str"
                }
            }
        ],
        "variables_import": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "connections_delete": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "kerberos": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "flower": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "serve_logs": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "scheduler": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "render": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "test": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "backfill": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "list_tasks": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "list_dags": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "restart_workers": [
            {
                "type": "func",
                "args": {
                    "gunicorn_master_proc": "psutil.Process",
                    "num_workers_expected": "int",
                    "master_timeout": "int"
                }
            }
        ],
        "webserver": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "worker": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "sync_perm": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "set_is_paused": [
            {
                "type": "func",
                "args": {
                    "is_paused": "bool",
                    "args": "argparse.Namespace"
                }
            }
        ],
        "unpause": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "pause": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "variable_export_helper": [
            {
                "type": "func",
                "args": {
                    "filepath": "str"
                }
            }
        ],
        "variables_export": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "_run": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG",
                    "ti": "TaskInstance"
                }
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "pool_delete": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "pool_import_helper": [
            {
                "type": "func",
                "args": {
                    "filepath": "str"
                }
            }
        ],
        "pool_set": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "pool_export_helper": [
            {
                "type": "func",
                "args": {
                    "filepath": "str"
                }
            }
        ],
        "pool_export": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "pool_import": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "pool_list": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "delete_dag": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "trigger_dag": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "pool_get": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "CLIFactory.subparsers": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "CLIFactory.subparsers_dict": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "CLIFactory.get_parser": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "dag_parser": "bool"
                }
            }
        ],
        "get_parser": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "configuration": {
        "generate_fernet_key": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "expand_env_var": [
            {
                "type": "func",
                "args": {
                    "env_var": "str"
                }
            }
        ],
        "AirflowConfigParser.as_command_stdout": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "AirflowConfigParser.deprecated_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AirflowConfigParser.deprecated_values": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AirflowConfigParser.airflow_defaults": [
            {
                "type": "attr",
                "anno": "ConfigParser"
            }
        ],
        "AirflowConfigParser.is_validated": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "AirflowConfigParser.__init__": [
            {
                "type": "method",
                "args": {
                    "default_config": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "get_airflow_home": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_airflow_config": [
            {
                "type": "func",
                "args": {
                    "airflow_home": "str"
                }
            }
        ],
        "_TEST_DAGS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_TEST_PLUGINS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_airflow_test_config": [
            {
                "type": "func",
                "args": {
                    "airflow_home": "str"
                }
            }
        ],
        "FERNET_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SECRET_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEMPLATE_START": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "msg": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "has_option": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowConfigParser._get_cmd_option": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "AirflowConfigParser.get": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AirflowConfigParser.has_option": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str"
                }
            }
        ],
        "AirflowConfigParser.getfloat": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AirflowConfigParser.getint": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AirflowConfigParser._validate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowConfigParser.read_dict": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AirflowConfigParser.read": [
            {
                "type": "method",
                "args": {
                    "filenames": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "parameterized_config": [
            {
                "type": "func",
                "args": {
                    "template": "str"
                }
            }
        ],
        "AirflowConfigParser._warn_deprecate": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str",
                    "deprecated_name": "str"
                }
            }
        ],
        "AirflowConfigParser.getboolean": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AirflowConfigParser._env_var_name": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "AirflowConfigParser._get_env_var_option": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "AirflowConfigParser.getsection": [
            {
                "type": "method",
                "args": {
                    "section": "str"
                }
            }
        ],
        "run_command": [
            {
                "type": "func",
                "args": {
                    "command": "str"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "_read_default_config_file": [
            {
                "type": "func",
                "args": {
                    "file_name": "str"
                }
            }
        ],
        "DEFAULT_WEBSERVER_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEST_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEFAULT_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "conf": [
            {
                "type": "var",
                "anno": "AirflowConfigParser"
            }
        ],
        "getsection": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "getint": [
            {
                "type": "var",
                "anno": "Callable[[str, str], int]"
            }
        ],
        "getfloat": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "getboolean": [
            {
                "type": "var",
                "anno": "Callable[[str, str], bool]"
            }
        ],
        "get": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AIRFLOW_HOME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "WEBSERVER_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEST_CONFIG_FILE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEST_PLUGINS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEST_DAGS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AIRFLOW_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "cfg": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowConfigParser.load_test_config": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "load_test_config": [
            {
                "type": "var",
                "anno": "Callable[[], None]"
            }
        ],
        "AirflowConfigParser.as_dict": [
            {
                "type": "method",
                "args": {
                    "display_source": "bool",
                    "display_sensitive": "bool",
                    "raw": "bool",
                    "include_env": "bool",
                    "include_cmds": "bool"
                }
            }
        ],
        "remove_option": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowConfigParser.remove_option": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str",
                    "remove_default": "bool"
                }
            }
        ],
        "as_dict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "set": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ]
    },
    "api.common.experimental.pool": {
        "get_pools": [
            {
                "type": "func",
                "args": {
                    "session": "Session"
                }
            }
        ],
        "get_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "session": "Session"
                }
            }
        ],
        "create_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "slots": "int",
                    "description": "str",
                    "session": "Session"
                }
            }
        ],
        "delete_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "session": "Any"
                }
            }
        ]
    },
    "hooks.S3_hook": {
        "provide_bucket_name": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "S3Hook.get_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.parse_s3_url": [
            {
                "type": "method",
                "args": {
                    "s3url": "str"
                }
            }
        ],
        "S3Hook.get_key": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.read_key": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3Hook.delete_objects": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "keys": "list"
                }
            }
        ],
        "S3Hook.copy_object": [
            {
                "type": "method",
                "args": {
                    "source_bucket_key": "str",
                    "dest_bucket_key": "str",
                    "source_bucket_name": "str",
                    "dest_bucket_name": "str",
                    "source_version_id": "str"
                }
            }
        ],
        "S3Hook.select_key": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "bucket_name": "str",
                    "expression": "str",
                    "expression_type": "str",
                    "input_serialization": "dict",
                    "output_serialization": "dict"
                }
            }
        ],
        "S3Hook.check_for_key": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.load_file_obj": [
            {
                "type": "method",
                "args": {
                    "file_obj": "BytesIO",
                    "key": "str",
                    "bucket_name": "str",
                    "replace": "bool",
                    "encrypt": "bool"
                }
            }
        ],
        "S3Hook.load_bytes": [
            {
                "type": "method",
                "args": {
                    "bytes_data": "bytes",
                    "key": "str",
                    "bucket_name": "str",
                    "replace": "bool",
                    "encrypt": "bool"
                }
            }
        ],
        "S3Hook.load_string": [
            {
                "type": "method",
                "args": {
                    "string_data": "str",
                    "key": "str",
                    "bucket_name": "str",
                    "replace": "bool",
                    "encrypt": "bool",
                    "encoding": "str"
                }
            }
        ],
        "S3Hook.load_file": [
            {
                "type": "method",
                "args": {
                    "filename": "str",
                    "key": "str",
                    "bucket_name": "str",
                    "replace": "bool",
                    "encrypt": "bool"
                }
            }
        ],
        "S3Hook.list_keys": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "page_size": "int",
                    "max_items": "int"
                }
            }
        ],
        "S3Hook.get_wildcard_key": [
            {
                "type": "method",
                "args": {
                    "wildcard_key": "str",
                    "bucket_name": "str",
                    "delimiter": "str"
                }
            }
        ],
        "S3Hook.check_for_wildcard_key": [
            {
                "type": "method",
                "args": {
                    "wildcard_key": "str",
                    "bucket_name": "str",
                    "delimiter": "str"
                }
            }
        ],
        "S3Hook.list_prefixes": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "page_size": "int",
                    "max_items": "int"
                }
            }
        ],
        "S3Hook.check_for_prefix": [
            {
                "type": "method",
                "args": {
                    "prefix": "str",
                    "delimiter": "str",
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.create_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "region_name": "str"
                }
            }
        ],
        "S3Hook.check_for_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str"
                }
            }
        ]
    },
    "utils.cli": {
        "_build_metrics": [
            {
                "type": "func",
                "args": {
                    "func_name": "str",
                    "namespace": "Namespace"
                }
            }
        ],
        "action_logging": [
            {
                "type": "func",
                "args": {
                    "f": "Log"
                }
            }
        ]
    },
    "utils.compression": {
        "uncompress_file": [
            {
                "type": "func",
                "args": {
                    "input_file_name": "str",
                    "file_extension": "str",
                    "dest_dir": "str"
                }
            }
        ]
    },
    "utils.module_loading": {
        "import_string": [
            {
                "type": "func",
                "args": {
                    "dotted_path": "str"
                }
            }
        ]
    },
    "utils.db": {
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "create_session": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "provide_session": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "add_default_pool_if_not_exists": [
            {
                "type": "func",
                "args": {
                    "session": "conf.Session"
                }
            }
        ],
        "upgradedb": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "merge_conn": [
            {
                "type": "func",
                "args": {
                    "conn": "Connection",
                    "session": "models.Session"
                }
            }
        ],
        "initdb": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "resetdb": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "www.validators": {
        "GreaterEqualThan.__call__": [
            {
                "type": "method",
                "args": {
                    "form": "dict",
                    "field": "Field"
                }
            }
        ]
    },
    "models.skipmixin": {
        "SkipMixin.skip": [
            {
                "type": "method",
                "args": {
                    "dag_run": "DagRun",
                    "execution_date": "str",
                    "tasks": "Iterable[TaskInstance]",
                    "session": "Session"
                }
            }
        ],
        "SkipMixin.skip_all_except": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance",
                    "branch_task_ids": "Union[str, Iterable[str]]"
                }
            }
        ]
    },
    "operators.branch_operator": {
        "BaseBranchOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "Dict"
                }
            }
        ]
    },
    "contrib.hooks.aws_sqs_hook": {
        "SQSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SQSHook.send_message": [
            {
                "type": "method",
                "args": {
                    "queue_url": "str",
                    "message_body": "str",
                    "delay_seconds": "int",
                    "message_attributes": "dict"
                }
            }
        ],
        "SQSHook.create_queue": [
            {
                "type": "method",
                "args": {
                    "queue_name": "str",
                    "attributes": "dict"
                }
            }
        ]
    },
    "contrib.hooks.redshift_hook": {
        "RedshiftHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftHook.create_cluster_snapshot": [
            {
                "type": "method",
                "args": {
                    "snapshot_identifier": "str",
                    "cluster_identifier": "str"
                }
            }
        ],
        "RedshiftHook.restore_from_cluster_snapshot": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str",
                    "snapshot_identifier": "str"
                }
            }
        ],
        "RedshiftHook.describe_cluster_snapshots": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str"
                }
            }
        ],
        "RedshiftHook.cluster_status": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str"
                }
            }
        ],
        "RedshiftHook.delete_cluster": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str",
                    "skip_final_cluster_snapshot": "bool",
                    "final_cluster_snapshot_identifier": "str"
                }
            }
        ]
    },
    "api.common.experimental.delete_dag": {
        "delete_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "keep_records_in_log": "bool",
                    "session": "models.Session"
                }
            }
        ]
    },
    "contrib.utils.mlengine_operator_utils": {
        "create_evaluate_ops": [
            {
                "type": "func",
                "args": {
                    "task_prefix": "str",
                    "data_format": "str",
                    "input_paths": "str",
                    "prediction_path": "str",
                    "metric_fn_and_keys": "tuple[Callable, str]",
                    "validate_fn": "Callable",
                    "batch_prediction_job_id": "str",
                    "project_id": "str",
                    "region": "str",
                    "dataflow_options": "str",
                    "model_uri": "str",
                    "model_name": "str",
                    "version_name": "str",
                    "dag": "DataFlowPythonOperator"
                }
            }
        ]
    },
    "contrib.utils.sendgrid": {
        "_post_sendgrid_mail": [
            {
                "type": "func",
                "args": {
                    "mail_data": "dict"
                }
            }
        ],
        "send_email": [
            {
                "type": "func",
                "args": {
                    "to": "str",
                    "subject": "str",
                    "html_content": "str",
                    "files": "list",
                    "dryrun": "bool",
                    "cc": "list",
                    "bcc": "list",
                    "mime_subtype": "str",
                    "sandbox_mode": "bool",
                    "kwargs": "dict"
                }
            }
        ]
    },
    "api.client.json_client": {
        "Client._request": [
            {
                "type": "method",
                "args": {
                    "url": "str",
                    "method": "str",
                    "json": "dict"
                }
            }
        ],
        "Client.delete_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.create_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "slots": "int",
                    "description": "str"
                }
            }
        ],
        "Client.get_pools": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Client.get_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.delete_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "Client.trigger_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "conf": "dict",
                    "execution_date": "str"
                }
            }
        ]
    }
}