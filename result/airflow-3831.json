{
    "lineage.backend.atlas": {
        "SERIALIZED_DATE_FORMAT_STR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_username": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_password": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_port": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_host": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AtlasBackend.send_lineage": [
            {
                "type": "method",
                "args": {
                    "operator": "datasets.Operator",
                    "inlets": "list[datasets.Operator]",
                    "outlets": "list[datasets.Operator]",
                    "context": "dict"
                }
            }
        ]
    },
    "lineage.backend.atlas.typedefs": {
        "operator_typedef": [
            {
                "type": "var",
                "anno": "dict"
            }
        ]
    },
    "lineage.backend": {
        "LineageBackend.send_lineage": [
            {
                "type": "method",
                "args": {
                    "operator": "Callable",
                    "inlets": "list",
                    "outlets": "list",
                    "context": "dict"
                }
            }
        ]
    },
    "lineage": {
        "PIPELINE_OUTLETS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PIPELINE_INLETS": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "_get_backend": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "prepare_lineage": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "apply_lineage": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ]
    },
    "lineage.datasets": {
        "_inherited": [
            {
                "type": "func",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "DataSet.attributes": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataSet.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataSet._qualified_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataSet.context": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "DataSet._data": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataSet.set_context": [
            {
                "type": "method",
                "args": {
                    "context": "dict[str, str]"
                }
            }
        ],
        "DataSet.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataBase.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataBase.attributes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "File.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "File.attributes": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "File._qualified_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopFile.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopFile.attributes": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "HadoopFile.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HadoopFile._qualified_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Operator.type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataSet.map_type": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Operator.attributes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HadoopFile.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str | None",
                    "data": "DataBase"
                }
            }
        ],
        "File.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str | None",
                    "data": "DataBase"
                }
            }
        ],
        "DataSet.qualified_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataSet.as_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataSet.__init__": [
            {
                "type": "method",
                "args": {
                    "qualified_name": "str",
                    "data": "dict",
                    "kwargs": "str"
                }
            }
        ],
        "DataSet.__getattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "DataSet.__getitem__": [
            {
                "type": "method",
                "args": {
                    "item": "str"
                }
            }
        ]
    },
    "logging_config": {
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "configure_logging": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.env": {
        "config": [
            {
                "type": "var",
                "anno": "settings.Config"
            }
        ],
        "target_metadata": [
            {
                "type": "var",
                "anno": "models.Base.metadata"
            }
        ],
        "COMPARE_TYPE": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "run_migrations_offline": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "run_migrations_online": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.86770d1215c0_add_kubernetes_scheduler_uniqueness": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "RESOURCE_TABLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.8504051e801b_xcom_dag_task_indices": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.1507a7289a2f_create_is_encrypted": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "connectionhelper": [
            {
                "type": "var",
                "anno": "sa.Table"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.9635ae0956e7_index_faskfail": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.bba5a7cfc896_add_a_column_to_track_the_encryption_": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.856955da8476_fix_sqlite_foreign_key": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.e3a246e0dc1_current_schema": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.502898887f84_adding_extra_to_log": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.5e7d17757c7a_add_pid_field_to_taskinstance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.2e541a1dcfed_task_duration": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.127d2bf2dfa7_add_dag_id_state_index_on_dag_run_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.Parameter"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.bdaa763e6c56_make_xcom_value_column_a_large_binary": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.0e2a74e0fc9f_add_time_zone_awareness": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Dict[str, sa.Any]]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.dd25f486b8ea_add_idx_log_dag": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.64de9cddf6c9_add_task_fails_journal_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Column]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.4addfa1236f1_add_fractional_seconds_to_mysql_tables": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.BranchLabel]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.ForeignKey]"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.52d714495f0_job_id_indices": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.4446e08588_dagrun_start_end": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.05f30312d566_merge_heads": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "tuple[str, str]"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.33ae817a1ff4_add_kubernetes_resource_checkpointing": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "RESOURCE_TABLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.13eb55f81627_for_compatibility": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.bbc73705a13e_add_notification_sent_column_to_sla_miss": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.d2ae31099d61_increase_text_size_for_mysql": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.BranchLabel]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.Column]"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.947454bf1dff_add_ti_job_id_index": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Parameter"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.211e584da130_add_ti_state_index": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Label"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.561833c1c74b_add_password_column_to_user": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.1b38cef5b76e_add_dagrun": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.40e67319e3a9_dagrun_config": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.338e90f54d61_more_logging_into_task_isntance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.2e82aab8ef20_rename_user_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Parameter"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.DependsOn"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.f23433877c24_fix_mysql_not_null_constraint": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.BranchLabel]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "op.Optional[mysql.ForeignKey]"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.cc1e65623dc7_add_max_tries_column_to_task_instance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Optional[Column]"
            }
        ],
        "Base": [
            {
                "type": "var",
                "anno": "sa.Type[TaskInstance]"
            }
        ],
        "BATCH_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "ID_LEN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TaskInstance.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.execution_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TaskInstance.max_tries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.f2ca10b85618_add_dag_stats_table": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Column]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.1968acfc09e3_add_is_encrypted_column_to_variable_": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "migrations.versions.27c6a30d7c24_add_executor_config_to_task_instance": {
        "revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "down_revision": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "branch_labels": [
            {
                "type": "var",
                "anno": "sa.Optional[sa.Label]"
            }
        ],
        "depends_on": [
            {
                "type": "var",
                "anno": "sa.Column"
            }
        ],
        "TASK_INSTANCE_TABLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "NEW_COLUMN": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "upgrade": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "downgrade": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "api.auth.backend.default": {
        "client_auth": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "init_app": [
            {
                "type": "func",
                "args": {
                    "app": "web.Application"
                }
            }
        ],
        "requires_authentication": [
            {
                "type": "func",
                "args": {
                    "function": "Callable"
                }
            }
        ]
    },
    "api.auth.backend.deny_all": {
        "client_auth": [
            {
                "type": "var",
                "anno": "Response"
            }
        ],
        "init_app": [
            {
                "type": "func",
                "args": {
                    "app": "Response"
                }
            }
        ],
        "requires_authentication": [
            {
                "type": "func",
                "args": {
                    "function": "Callable"
                }
            }
        ]
    },
    "api.auth.backend.kerberos_auth": {
        "client_auth": [
            {
                "type": "var",
                "anno": "HTTPKerberosAuth"
            }
        ],
        "_SERVICE_NAME": [
            {
                "type": "var",
                "anno": "object"
            }
        ],
        "_unauthorized": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_forbidden": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_gssapi_authenticate": [
            {
                "type": "func",
                "args": {
                    "token": "str"
                }
            }
        ],
        "requires_authentication": [
            {
                "type": "func",
                "args": {
                    "function": "Response"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "init_app": [
            {
                "type": "func",
                "args": {
                    "app": "HTTPKerberosAuth"
                }
            }
        ]
    },
    "api": {
        "api_auth": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "load_auth": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "api.client.api_client": {
        "Client._api_base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Client._auth": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Client.__init__": [
            {
                "type": "method",
                "args": {
                    "api_base_url": "str",
                    "auth": "str"
                }
            }
        ],
        "Client.trigger_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "conf": "dict",
                    "execution_date": "str"
                }
            }
        ],
        "Client.delete_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "Client.get_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.get_pools": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Client.create_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "slots": "int",
                    "description": "str"
                }
            }
        ],
        "Client.delete_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ]
    },
    "api.client.local_client": {
        "Client.trigger_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "conf": "dict",
                    "execution_date": "str"
                }
            }
        ],
        "Client.delete_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "Client.delete_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.create_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "slots": "int",
                    "description": "str"
                }
            }
        ],
        "Client.get_pools": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Client.get_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ]
    },
    "executors.base_executor": {
        "PARALLELISM": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "BaseExecutor.parallelism": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseExecutor.queued_tasks": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseExecutor.running": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseExecutor.event_buffer": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseExecutor.__init__": [
            {
                "type": "method",
                "args": {
                    "parallelism": "int"
                }
            }
        ],
        "BaseExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ],
        "BaseExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseExecutor.get_event_buffer": [
            {
                "type": "method",
                "args": {
                    "dag_ids": "list[str] | None"
                }
            }
        ],
        "BaseExecutor.has_task": [
            {
                "type": "method",
                "args": {
                    "task_instance": "str"
                }
            }
        ],
        "BaseExecutor.change_state": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "state": "State"
                }
            }
        ],
        "BaseExecutor.success": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "BaseExecutor.fail": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "BaseExecutor.queue_command": [
            {
                "type": "method",
                "args": {
                    "task_instance": "settings.TaskInstance",
                    "command": "str",
                    "priority": "int",
                    "queue": "str"
                }
            }
        ],
        "BaseExecutor.queue_task_instance": [
            {
                "type": "method",
                "args": {
                    "task_instance": "settings.TaskInstance",
                    "mark_success": "bool",
                    "pickle_id": "str",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "pool": "str",
                    "cfg_path": "str"
                }
            }
        ],
        "BaseExecutor.heartbeat": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "executors.celery_executor": {
        "celery_configuration": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "app": [
            {
                "type": "var",
                "anno": "Celery"
            }
        ],
        "CeleryExecutor.tasks": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CeleryExecutor.last_state": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CeleryExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CeleryExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CeleryExecutor.end": [
            {
                "type": "method",
                "args": {
                    "synchronous": "bool"
                }
            }
        ],
        "execute_command": [
            {
                "type": "func",
                "args": {
                    "command": "str"
                }
            }
        ],
        "CeleryExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ]
    },
    "executors.sequential_executor": {
        "SequentialExecutor.commands_to_run": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SequentialExecutor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SequentialExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ],
        "SequentialExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SequentialExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "executors.local_executor": {
        "LocalWorker.daemon": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalWorker.result_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.JoinableQueue"
            }
        ],
        "LocalWorker.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalWorker.command": [
            {
                "type": "attr",
                "anno": "multiprocessing.CommandInfo"
            }
        ],
        "LocalWorker.__init__": [
            {
                "type": "method",
                "args": {
                    "result_queue": "multiprocessing.JoinableQueue"
                }
            }
        ],
        "QueuedLocalWorker.task_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Process"
            }
        ],
        "QueuedLocalWorker.__init__": [
            {
                "type": "method",
                "args": {
                    "task_queue": "multiprocessing.Process",
                    "result_queue": "multiprocessing.Process"
                }
            }
        ],
        "LocalExecutor._UnlimitedParallelism.executor": [
            {
                "type": "attr",
                "anno": "BaseExecutor"
            }
        ],
        "LocalExecutor._UnlimitedParallelism.__init__": [
            {
                "type": "method",
                "args": {
                    "executor": "BaseExecutor"
                }
            }
        ],
        "LocalExecutor._LimitedParallelism.executor": [
            {
                "type": "attr",
                "anno": "BaseExecutor"
            }
        ],
        "LocalExecutor._LimitedParallelism.__init__": [
            {
                "type": "method",
                "args": {
                    "executor": "BaseExecutor"
                }
            }
        ],
        "LocalExecutor.result_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.JoinableQueue"
            }
        ],
        "LocalExecutor.queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.JoinableQueue"
            }
        ],
        "LocalExecutor.workers": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "LocalExecutor.workers_used": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LocalExecutor.workers_active": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LocalExecutor._UnlimitedParallelism.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor.impl": [
            {
                "type": "attr",
                "anno": "BaseExecutor"
            }
        ],
        "LocalExecutor._LimitedParallelism.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str"
                }
            }
        ],
        "QueuedLocalWorker.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._LimitedParallelism.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._UnlimitedParallelism.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalWorker.execute_work": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "multiprocessing.CommandInfo"
                }
            }
        ],
        "LocalWorker.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._LimitedParallelism.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._UnlimitedParallelism.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._LimitedParallelism.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LocalExecutor._UnlimitedParallelism.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str"
                }
            }
        ],
        "LocalExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ]
    },
    "executors": {
        "DEFAULT_EXECUTOR": [
            {
                "type": "var",
                "anno": "BaseExecutor"
            }
        ],
        "Executors.LocalExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.SequentialExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.CeleryExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.DaskExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.MesosExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Executors.KubernetesExecutor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_get_executor": [
            {
                "type": "func",
                "args": {
                    "executor_name": "str"
                }
            }
        ],
        "GetDefaultExecutor": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "executors.dask_executor": {
        "DaskExecutor.cluster_address": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DaskExecutor.tls_ca": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DaskExecutor.tls_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DaskExecutor.tls_cert": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DaskExecutor.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_address": "str"
                }
            }
        ],
        "DaskExecutor.client": [
            {
                "type": "attr",
                "anno": "distributed.Client"
            }
        ],
        "DaskExecutor.futures": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DaskExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DaskExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DaskExecutor.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DaskExecutor._process_future": [
            {
                "type": "method",
                "args": {
                    "future": "distributed.Future"
                }
            }
        ],
        "DaskExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ],
        "DaskExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "macros.hive": {
        "_closest_date": [
            {
                "type": "func",
                "args": {
                    "target_dt": "datetime.datetime",
                    "date_list": "list",
                    "before_target": "bool"
                }
            }
        ],
        "max_partition": [
            {
                "type": "func",
                "args": {
                    "table": "str",
                    "schema": "str",
                    "field": "str",
                    "filter_map": "dict",
                    "metastore_conn_id": "str"
                }
            }
        ],
        "closest_ds_partition": [
            {
                "type": "func",
                "args": {
                    "table": "str",
                    "ds": "str",
                    "before": "bool",
                    "schema": "str",
                    "metastore_conn_id": "str"
                }
            }
        ]
    },
    "macros": {
        "ds_add": [
            {
                "type": "func",
                "args": {
                    "ds": "str",
                    "days": "int"
                }
            }
        ],
        "ds_format": [
            {
                "type": "func",
                "args": {
                    "ds": "str",
                    "input_format": "str",
                    "output_format": "str"
                }
            }
        ],
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "exceptions": {
        "AirflowException.status_code": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowBadRequest.status_code": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowNotFoundException.status_code": [
            {
                "type": "attr",
                "anno": "int"
            }
        ]
    },
    "security.utils": {
        "HOSTNAME_PATTERN": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_components": [
            {
                "type": "func",
                "args": {
                    "principal": "str"
                }
            }
        ],
        "get_localhost_name": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "replace_hostname_pattern": [
            {
                "type": "func",
                "args": {
                    "components": "str",
                    "host": "str"
                }
            }
        ],
        "get_kerberos_principal": [
            {
                "type": "func",
                "args": {
                    "principal": "str",
                    "host": "str"
                }
            }
        ],
        "get_fqdn": [
            {
                "type": "func",
                "args": {
                    "hostname_or_ip": "str"
                }
            }
        ],
        "principal_from_username": [
            {
                "type": "func",
                "args": {
                    "username": "str"
                }
            }
        ]
    },
    "security.kerberos": {
        "NEED_KRB181_WORKAROUND": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "perform_krb181_workaround": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "detect_conf_var": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "renew_from_kt": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "contrib.executors.kubernetes_executor": {
        "KubernetesExecutorConfig.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.image_pull_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.request_memory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.request_cpu": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.limit_memory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.limit_cpu": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.gcp_service_account_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesExecutorConfig.node_selectors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesExecutorConfig.affinity": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesExecutorConfig.annotations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesExecutorConfig.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "str",
                    "image_pull_policy": "str",
                    "request_memory": "str",
                    "request_cpu": "str",
                    "limit_memory": "str",
                    "limit_cpu": "str",
                    "gcp_service_account_key": "str",
                    "node_selectors": "dict",
                    "affinity": "dict",
                    "annotations": "dict"
                }
            }
        ],
        "KubernetesExecutorConfig.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutorConfig.as_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubeConfig.core_section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kubernetes_section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.core_configuration": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_secrets": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.airflow_home": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.dags_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.parallelism": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KubeConfig.worker_container_repository": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.worker_container_tag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.worker_dags_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_image_pull_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_node_selectors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubeConfig.delete_worker_pods": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeConfig.worker_service_account_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.image_pull_secrets": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_repo": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_branch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_subpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.dags_volume_claim": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeConfig.logs_volume_claim": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeConfig.dags_volume_subpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.logs_volume_subpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.base_log_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.kube_namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.executor_namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.gcp_service_account_keys": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_container_repository": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_container_tag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_container": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.git_sync_init_container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeConfig.airflow_configmap": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeConfig._validate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesJobWatcher.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesJobWatcher.worker_uuid": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesJobWatcher.watcher_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "KubernetesJobWatcher.resource_version": [
            {
                "type": "attr",
                "anno": "KubeResourceVersion"
            }
        ],
        "KubernetesJobWatcher.__init__": [
            {
                "type": "method",
                "args": {
                    "namespace": "str",
                    "watcher_queue": "Queue",
                    "resource_version": "KubeResourceVersion",
                    "worker_uuid": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler.kube_config": [
            {
                "type": "attr",
                "anno": "KubernetesConfig"
            }
        ],
        "AirflowKubernetesScheduler.task_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "AirflowKubernetesScheduler.result_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "AirflowKubernetesScheduler.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowKubernetesScheduler.kube_client": [
            {
                "type": "attr",
                "anno": "KubernetesClient"
            }
        ],
        "AirflowKubernetesScheduler.launcher": [
            {
                "type": "attr",
                "anno": "PodLauncher"
            }
        ],
        "AirflowKubernetesScheduler.worker_configuration": [
            {
                "type": "attr",
                "anno": "WorkerConfiguration"
            }
        ],
        "AirflowKubernetesScheduler.watcher_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "AirflowKubernetesScheduler._session": [
            {
                "type": "attr",
                "anno": "settings.Session"
            }
        ],
        "AirflowKubernetesScheduler.worker_uuid": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowKubernetesScheduler.kube_watcher": [
            {
                "type": "attr",
                "anno": "KubernetesJobWatcher"
            }
        ],
        "AirflowKubernetesScheduler.delete_pod": [
            {
                "type": "method",
                "args": {
                    "pod_id": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._strip_unsafe_kubernetes_special_chars": [
            {
                "type": "method",
                "args": {
                    "string": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._make_safe_pod_id": [
            {
                "type": "method",
                "args": {
                    "safe_dag_id": "str",
                    "safe_task_id": "str",
                    "safe_uuid": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._create_pod_id": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_id": "str"
                }
            }
        ],
        "KubernetesExecutor.kube_config": [
            {
                "type": "attr",
                "anno": "KubernetesConfig"
            }
        ],
        "KubernetesExecutor.task_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "KubernetesExecutor._session": [
            {
                "type": "attr",
                "anno": "settings.Session"
            }
        ],
        "KubernetesExecutor.result_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "KubernetesExecutor.kube_scheduler": [
            {
                "type": "attr",
                "anno": "AirflowKubernetesScheduler"
            }
        ],
        "KubernetesExecutor.kube_client": [
            {
                "type": "attr",
                "anno": "KubernetesClient"
            }
        ],
        "KubernetesExecutor.worker_uuid": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowKubernetesScheduler._datetime_to_label_safe_datestring": [
            {
                "type": "method",
                "args": {
                    "datetime_obj": "datetime"
                }
            }
        ],
        "AirflowKubernetesScheduler._label_safe_datestring_to_datetime": [
            {
                "type": "method",
                "args": {
                    "string": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._make_kube_watcher": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowKubernetesScheduler.__init__": [
            {
                "type": "method",
                "args": {
                    "kube_config": "KubernetesConfig",
                    "task_queue": "Queue",
                    "result_queue": "Queue",
                    "session": "settings.Session",
                    "kube_client": "KubernetesClient",
                    "worker_uuid": "str"
                }
            }
        ],
        "AirflowKubernetesScheduler._health_check_kube_watcher": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowKubernetesScheduler.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor.clear_not_launched_queued_tasks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubeConfig.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutorConfig.from_dict": [
            {
                "type": "method",
                "args": {
                    "obj": "dict"
                }
            }
        ],
        "KubernetesExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ],
        "AirflowKubernetesScheduler._labels_to_key": [
            {
                "type": "method",
                "args": {
                    "labels": "dict"
                }
            }
        ],
        "AirflowKubernetesScheduler.process_watcher_task": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowKubernetesScheduler.run_next": [
            {
                "type": "method",
                "args": {
                    "next_job": "tuple"
                }
            }
        ],
        "KubernetesJobWatcher.process_status": [
            {
                "type": "method",
                "args": {
                    "pod_id": "str",
                    "status": "str",
                    "labels": "dict",
                    "resource_version": "KubeResourceVersion"
                }
            }
        ],
        "KubernetesJobWatcher.process_error": [
            {
                "type": "method",
                "args": {
                    "event": "dict"
                }
            }
        ],
        "KubernetesJobWatcher._run": [
            {
                "type": "method",
                "args": {
                    "kube_client": "client.KubernetesClient",
                    "resource_version": "KubeResourceVersion",
                    "worker_uuid": "str"
                }
            }
        ],
        "KubernetesJobWatcher.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor._inject_secrets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KubernetesExecutor._change_state": [
            {
                "type": "method",
                "args": {
                    "key": "tuple",
                    "state": "State",
                    "pod_id": "str"
                }
            }
        ],
        "KubernetesExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.executors.mesos_executor": {
        "DEFAULT_FRAMEWORK_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FRAMEWORK_CONNID_PREFIX": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_framework_name": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "AirflowMesosScheduler.task_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "AirflowMesosScheduler.result_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "AirflowMesosScheduler.task_cpu": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowMesosScheduler.task_mem": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowMesosScheduler.task_counter": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowMesosScheduler.task_key_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AirflowMesosScheduler.mesos_slave_docker_image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowMesosScheduler.__init__": [
            {
                "type": "method",
                "args": {
                    "task_queue": "Queue",
                    "result_queue": "Queue",
                    "task_cpu": "int",
                    "task_mem": "int"
                }
            }
        ],
        "MesosExecutor.task_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "MesosExecutor.result_queue": [
            {
                "type": "attr",
                "anno": "Queue"
            }
        ],
        "MesosExecutor.mesos_driver": [
            {
                "type": "attr",
                "anno": "mesos.native.MesosSchedulerDriver"
            }
        ],
        "MesosExecutor.execute_async": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "command": "str",
                    "queue": "str",
                    "executor_config": "dict"
                }
            }
        ],
        "MesosExecutor.end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MesosExecutor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowMesosScheduler.error": [
            {
                "type": "method",
                "args": {
                    "driver": "mesos.native.MesosSchedulerDriver",
                    "message": "str"
                }
            }
        ],
        "AirflowMesosScheduler.resourceOffers": [
            {
                "type": "method",
                "args": {
                    "driver": "mesos.native.Driver",
                    "offers": "mesos.native.Offer"
                }
            }
        ],
        "AirflowMesosScheduler.slaveLost": [
            {
                "type": "method",
                "args": {
                    "driver": "mesos.native.Driver",
                    "slaveId": "str"
                }
            }
        ],
        "AirflowMesosScheduler.executorLost": [
            {
                "type": "method",
                "args": {
                    "driver": "mesos.driver.Driver",
                    "executorId": "str",
                    "slaveId": "str",
                    "status": "State"
                }
            }
        ],
        "AirflowMesosScheduler.frameworkMessage": [
            {
                "type": "method",
                "args": {
                    "driver": "str",
                    "executorId": "str",
                    "slaveId": "str",
                    "message": "str"
                }
            }
        ],
        "AirflowMesosScheduler.offerRescinded": [
            {
                "type": "method",
                "args": {
                    "driver": "mesos.native.Driver",
                    "offerId": "str"
                }
            }
        ],
        "AirflowMesosScheduler.disconnected": [
            {
                "type": "method",
                "args": {
                    "driver": "mesos.native.Driver"
                }
            }
        ],
        "AirflowMesosScheduler.reregistered": [
            {
                "type": "method",
                "args": {
                    "driver": "str",
                    "masterInfo": "dict"
                }
            }
        ],
        "MesosExecutor.sync": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowMesosScheduler.statusUpdate": [
            {
                "type": "method",
                "args": {
                    "driver": "mesos.native.Driver",
                    "update": "mesos.native.TaskState"
                }
            }
        ],
        "AirflowMesosScheduler.registered": [
            {
                "type": "method",
                "args": {
                    "driver": "mesos.native.Driver",
                    "frameworkId": "mesos.framework.FrameworkId",
                    "masterInfo": "mesos.native.MasterInfo"
                }
            }
        ]
    },
    "contrib.task_runner.cgroup_task_runner": {
        "CgroupTaskRunner.process": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "CgroupTaskRunner._finished_running": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CgroupTaskRunner._cpu_shares": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CgroupTaskRunner._mem_mb_limit": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CgroupTaskRunner._created_cpu_cgroup": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CgroupTaskRunner._created_mem_cgroup": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "CgroupTaskRunner._cur_user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CgroupTaskRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "local_task_job": "dict"
                }
            }
        ],
        "CgroupTaskRunner.mem_cgroup_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CgroupTaskRunner.cpu_cgroup_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CgroupTaskRunner._get_cgroup_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner.return_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner._delete_cgroup": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "CgroupTaskRunner.on_finish": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CgroupTaskRunner._create_cgroup": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ]
    },
    "contrib.example_dags.example_qubole_operator": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "options": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "branching": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "join": [
            {
                "type": "var",
                "anno": "DummyOperator"
            }
        ],
        "t4": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t5": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t6": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t7": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t8": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t9": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "t10": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "prog": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "t11": [
            {
                "type": "var",
                "anno": "QuboleOperator"
            }
        ],
        "compare_result": [
            {
                "type": "func",
                "args": {
                    "ds": "str",
                    "kwargs": "str"
                }
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "contrib.example_dags.example_emr_job_flow_manual_steps": {
        "DEFAULT_ARGS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "SPARK_TEST_STEPS": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "JOB_FLOW_OVERRIDES": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "cluster_creator": [
            {
                "type": "var",
                "anno": "EmrCreateJobFlowOperator"
            }
        ],
        "step_adder": [
            {
                "type": "var",
                "anno": "EmrAddStepsOperator"
            }
        ],
        "step_checker": [
            {
                "type": "var",
                "anno": "EmrStepSensor"
            }
        ],
        "cluster_remover": [
            {
                "type": "var",
                "anno": "EmrTerminateJobFlowOperator"
            }
        ]
    },
    "contrib.example_dags.example_gcs_to_bq_operator": {
        "gcs_to_bq": [
            {
                "type": "var",
                "anno": "models.BigQueryOperator"
            }
        ],
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "models.DAG"
            }
        ],
        "create_test_dataset": [
            {
                "type": "var",
                "anno": "bash_operator.BashOperator"
            }
        ],
        "load_csv": [
            {
                "type": "var",
                "anno": "gcs_to_bq.GoogleCloudStorageToBigQueryOperator"
            }
        ],
        "delete_test_dataset": [
            {
                "type": "var",
                "anno": "bash_operator.BashOperator"
            }
        ]
    },
    "contrib.example_dags.example_emr_job_flow_automatic_steps": {
        "DEFAULT_ARGS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "SPARK_TEST_STEPS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "JOB_FLOW_OVERRIDES": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "job_flow_creator": [
            {
                "type": "var",
                "anno": "EmrCreateJobFlowOperator"
            }
        ],
        "job_sensor": [
            {
                "type": "var",
                "anno": "EmrJobFlowSensor"
            }
        ]
    },
    "contrib.example_dags.example_databricks_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "new_cluster": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "notebook_task_params": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "notebook_task": [
            {
                "type": "var",
                "anno": "DatabricksSubmitRunOperator"
            }
        ],
        "spark_jar_task": [
            {
                "type": "var",
                "anno": "DatabricksSubmitRunOperator"
            }
        ]
    },
    "contrib.example_dags.example_winrm_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "cmd": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "run_this_last": [
            {
                "type": "var",
                "anno": "DummyOperator"
            }
        ],
        "winRMHook": [
            {
                "type": "var",
                "anno": "WinRMHook"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "WinRMOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "WinRMOperator"
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "WinRMOperator"
            }
        ]
    },
    "contrib.example_dags.example_twitter_dag": {
        "fetchtweets": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "cleantweets": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "analyzetweets": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "transfertodb": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "fetch_tweets": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "clean_tweets": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "analyze_tweets": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "hive_to_mysql": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "from_channels": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "to_channels": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "yesterday": [
            {
                "type": "var",
                "anno": "date"
            }
        ],
        "dt": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "local_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "hdfs_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "file_name": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "load_to_hdfs": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "load_to_hive": [
            {
                "type": "var",
                "anno": "HiveOperator"
            }
        ]
    },
    "contrib.example_dags.example_pubsub_flow": {
        "project": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "topic": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "subscription": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "messages": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "echo_template": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "PubSubTopicCreateOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "PubSubSubscriptionCreateOperator"
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "PubSubPublishOperator"
            }
        ],
        "t4": [
            {
                "type": "var",
                "anno": "PubSubPullSensor"
            }
        ],
        "t5": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "t6": [
            {
                "type": "var",
                "anno": "PubSubSubscriptionDeleteOperator"
            }
        ],
        "t7": [
            {
                "type": "var",
                "anno": "PubSubTopicDeleteOperator"
            }
        ]
    },
    "contrib.example_dags.example_qubole_sensor": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "QuboleFileSensor"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "QubolePartitionSensor"
            }
        ]
    },
    "contrib.plugins.metastore_browser.main": {
        "METASTORE_CONN_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "METASTORE_MYSQL_CONN_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PRESTO_CONN_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "HIVE_CLI_CONN_ID": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEFAULT_DB": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DB_WHITELIST": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "DB_BLACKLIST": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "TABLE_SELECTOR_LIMIT": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "v": [
            {
                "type": "var",
                "anno": "BaseView"
            }
        ],
        "bp": [
            {
                "type": "var",
                "anno": "Blueprint"
            }
        ],
        "MetastoreBrowserPlugin.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastoreBrowserPlugin.flask_blueprints": [
            {
                "type": "attr",
                "anno": "list[Blueprint]"
            }
        ],
        "MetastoreBrowserPlugin.admin_views": [
            {
                "type": "attr",
                "anno": "list[BaseView]"
            }
        ],
        "MetastoreBrowserView.db": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.table": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.objects": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.ddl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.partitions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MetastoreBrowserView.index": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.gcs_to_s3": {
        "GoogleCloudStorageToS3Operator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStorageToS3Operator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToS3Operator.dest_aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToS3Operator.dest_s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToS3Operator.dest_verify": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToS3Operator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToS3Operator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "dest_aws_conn_id": "str",
                    "dest_s3_key": "str",
                    "dest_verify": "bool",
                    "replace": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageToS3Operator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_create_training_job_operator": {
        "SageMakerCreateTrainingJobOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerCreateTrainingJobOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SageMakerCreateTrainingJobOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerCreateTrainingJobOperator.sagemaker_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerCreateTrainingJobOperator.training_job_config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerCreateTrainingJobOperator.use_db_config": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerCreateTrainingJobOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerCreateTrainingJobOperator.wait_for_completion": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerCreateTrainingJobOperator.check_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerCreateTrainingJobOperator.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerCreateTrainingJobOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "training_job_config": "dict",
                    "region_name": "str",
                    "sagemaker_conn_id": "str",
                    "use_db_config": "bool",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerCreateTrainingJobOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.spark_jdbc_operator": {
        "SparkJDBCOperator._spark_app_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_conf": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_py_files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._spark_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._num_executors": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._executor_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._driver_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCOperator._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._cmd_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._jdbc_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._jdbc_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._jdbc_driver": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._metastore_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._jdbc_truncate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCOperator._save_mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._save_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._batch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._fetch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._num_partitions": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCOperator._partition_column": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._lower_bound": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._upper_bound": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator._create_table_column_types": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "spark_app_name": "str",
                    "spark_conn_id": "str",
                    "spark_conf": "str",
                    "spark_py_files": "str",
                    "spark_files": "str",
                    "spark_jars": "str",
                    "num_executors": "int",
                    "executor_cores": "int",
                    "executor_memory": "int",
                    "driver_memory": "int",
                    "verbose": "bool",
                    "keytab": "str",
                    "principal": "str",
                    "cmd_type": "str",
                    "jdbc_table": "str",
                    "jdbc_conn_id": "str",
                    "jdbc_driver": "str",
                    "metastore_table": "str",
                    "jdbc_truncate": "bool",
                    "save_mode": "str",
                    "save_format": "str",
                    "batch_size": "int",
                    "fetch_size": "int",
                    "num_partitions": "int",
                    "partition_column": "str",
                    "lower_bound": "str",
                    "upper_bound": "str",
                    "create_table_column_types": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkJDBCOperator._hook": [
            {
                "type": "attr",
                "anno": "SparkJDBCHook"
            }
        ],
        "SparkJDBCOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkJDBCOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.databricks_operator": {
        "XCOM_RUN_ID_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "XCOM_RUN_PAGE_URL_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DatabricksSubmitRunOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.json": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatabricksSubmitRunOperator.databricks_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.polling_period_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksSubmitRunOperator.databricks_retry_limit": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksSubmitRunOperator.databricks_retry_delay": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksSubmitRunOperator.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksSubmitRunOperator.do_xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DatabricksSubmitRunOperator._deep_string_coerce": [
            {
                "type": "method",
                "args": {
                    "content": "dict",
                    "json_path": "str"
                }
            }
        ],
        "DatabricksSubmitRunOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "json": "dict",
                    "spark_jar_task": "str",
                    "notebook_task": "str",
                    "new_cluster": "str",
                    "existing_cluster_id": "str",
                    "libraries": "dict",
                    "run_name": "str",
                    "timeout_seconds": "int",
                    "databricks_conn_id": "str",
                    "polling_period_seconds": "int",
                    "databricks_retry_limit": "int",
                    "databricks_retry_delay": "int",
                    "do_xcom_push": "bool",
                    "kwargs": "dict"
                }
            }
        ],
        "DatabricksSubmitRunOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DatabricksSubmitRunOperator._log_run_page_url": [
            {
                "type": "method",
                "args": {
                    "url": "str"
                }
            }
        ],
        "DatabricksSubmitRunOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DatabricksSubmitRunOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.ecs_operator": {
        "ECSOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.client": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.arn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ECSOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.task_definition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.cluster": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.overrides": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.launch_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ECSOperator.hook": [
            {
                "type": "attr",
                "anno": "AwsHook"
            }
        ],
        "ECSOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ECSOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "task_definition": "str",
                    "cluster": "str",
                    "overrides": "str",
                    "aws_conn_id": "str",
                    "region_name": "str",
                    "launch_type": "str",
                    "kwargs": "str"
                }
            }
        ],
        "ECSOperator._wait_for_task_ended": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ECSOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "ECSOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ECSOperator._check_success_task": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.sqoop_operator": {
        "SqoopOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SqoopOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.cmd_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.target_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.append": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.file_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.columns": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.num_mappers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SqoopOperator.split_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.where": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.export_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_null_string": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_null_non_string": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.staging_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.clear_staging_table": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.enclosed_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.escaped_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_fields_terminated_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_lines_terminated_by": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.input_optionally_enclosed_by": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.batch": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.direct": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.driver": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.relaxed_isolation": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.hcatalog_database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.hcatalog_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.create_hcatalog_table": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopOperator.properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopOperator.extra_import_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SqoopOperator.extra_export_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SqoopOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "cmd_type": "str",
                    "table": "str",
                    "query": "str",
                    "target_dir": "str",
                    "append": "bool",
                    "file_type": "str",
                    "columns": "str",
                    "num_mappers": "int",
                    "split_by": "str",
                    "where": "str",
                    "export_dir": "str",
                    "input_null_string": "str",
                    "input_null_non_string": "str",
                    "staging_table": "str",
                    "clear_staging_table": "bool",
                    "enclosed_by": "str",
                    "escaped_by": "str",
                    "input_fields_terminated_by": "str",
                    "input_lines_terminated_by": "str",
                    "input_optionally_enclosed_by": "str",
                    "batch": "bool",
                    "direct": "bool",
                    "driver": "str",
                    "verbose": "bool",
                    "relaxed_isolation": "bool",
                    "properties": "str",
                    "hcatalog_database": "str",
                    "hcatalog_table": "str",
                    "create_hcatalog_table": "bool",
                    "extra_import_options": "dict",
                    "extra_export_options": "dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SqoopOperator.hook": [
            {
                "type": "attr",
                "anno": "SqoopHook"
            }
        ],
        "SqoopOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SqoopOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.sftp_operator": {
        "SFTPOperation.PUT": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperation.GET": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SFTPOperator.ssh_hook": [
            {
                "type": "attr",
                "anno": "SSHHook"
            }
        ],
        "SFTPOperator.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.local_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.remote_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.operation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPOperator.confirm": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SFTPOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "ssh_hook": "SSHHook",
                    "ssh_conn_id": "str",
                    "remote_host": "str",
                    "local_filepath": "str",
                    "remote_filepath": "str",
                    "operation": "str",
                    "confirm": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SFTPOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.qubole_operator": {
        "QuboleOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "QuboleOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "QuboleOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleOperator.args": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "QuboleOperator.kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "QuboleOperator.on_failure_callback": [
            {
                "type": "attr",
                "anno": "QuboleHook"
            }
        ],
        "QuboleOperator.on_retry_callback": [
            {
                "type": "attr",
                "anno": "QuboleHook"
            }
        ],
        "QuboleOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "qubole_conn_id": "str",
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "QuboleOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuboleOperator.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "QuboleOperator.__setattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "str"
                }
            }
        ],
        "QuboleOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleOperator.get_jobs_id": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleOperator.get_log": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleOperator.on_kill": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleOperator.get_results": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "fp": "str",
                    "inline": "bool",
                    "delim": "str",
                    "fetch": "bool"
                }
            }
        ]
    },
    "contrib.operators.s3_to_gcs_operator": {
        "S3ToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "S3ToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator.dest_gcs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator.dest_gcs": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToGoogleCloudStorageOperator.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToGoogleCloudStorageOperator._gcs_object_is_directory": [
            {
                "type": "method",
                "args": {
                    "object": "str"
                }
            }
        ],
        "S3ToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "S3ToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "dest_gcs_conn_id": "str",
                    "dest_gcs": "str",
                    "delegate_to": "str",
                    "replace": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.operators.vertica_to_hive": {
        "VerticaToHiveTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VerticaToHiveTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaToHiveTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.hive_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.partition": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VerticaToHiveTransfer.create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VerticaToHiveTransfer.recreate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VerticaToHiveTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.vertica_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToHiveTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "hive_table": "str",
                    "create": "bool",
                    "recreate": "bool",
                    "partition": "dict",
                    "delimiter": "str",
                    "vertica_conn_id": "str",
                    "hive_cli_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "VerticaToHiveTransfer.type_map": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "vertica_type": "str"
                }
            }
        ],
        "VerticaToHiveTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.qubole_check_operator": {
        "QuboleCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "QuboleCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleCheckOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleCheckOperator.on_failure_callback": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleCheckOperator.on_retry_callback": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleCheckOperator.hook": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleValueCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "QuboleValueCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleValueCheckOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleValueCheckOperator.on_failure_callback": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleValueCheckOperator.on_retry_callback": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "QuboleValueCheckOperator.hook": [
            {
                "type": "attr",
                "anno": "QuboleCheckHook"
            }
        ],
        "get_sql_from_qbol_cmd": [
            {
                "type": "func",
                "args": {
                    "params": "dict"
                }
            }
        ],
        "QuboleValueCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "pass_value": "str",
                    "tolerance": "float",
                    "qubole_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "qubole_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.__setattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "object"
                }
            }
        ],
        "QuboleValueCheckOperator.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "QuboleCheckOperator.__setattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "object"
                }
            }
        ],
        "QuboleCheckOperator.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.get_hook": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuboleCheckOperator.get_hook": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "QuboleCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuboleCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "QuboleValueCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "handle_airflow_exception": [
            {
                "type": "func",
                "args": {
                    "airflow_exception": "AirflowException",
                    "hook": "QuboleCheckHook"
                }
            }
        ]
    },
    "contrib.operators.mysql_to_gcs": {
        "PY3": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.schema_filename": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.approx_max_file_size_bytes": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.schema": [
            {
                "type": "attr",
                "anno": "str | list"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "bucket": "str",
                    "filename": "str",
                    "schema_filename": "str",
                    "approx_max_file_size_bytes": "int",
                    "mysql_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "schema": "str | list",
                    "delegate_to": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MySqlToGoogleCloudStorageOperator.type_map": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "mysql_type": "str"
                }
            }
        ],
        "MySqlToGoogleCloudStorageOperator._query_mysql": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MySqlToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "MySqlToGoogleCloudStorageOperator._get_col_type_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MySqlToGoogleCloudStorageOperator._write_local_schema_file": [
            {
                "type": "method",
                "args": {
                    "cursor": "mysql.Cursor"
                }
            }
        ],
        "MySqlToGoogleCloudStorageOperator._convert_types": [
            {
                "type": "method",
                "args": {
                    "schema": "list",
                    "col_type_dict": "dict",
                    "row": "list"
                }
            }
        ],
        "MySqlToGoogleCloudStorageOperator._write_local_data_files": [
            {
                "type": "method",
                "args": {
                    "cursor": "mysql.Cursor"
                }
            }
        ],
        "MySqlToGoogleCloudStorageOperator._upload_to_gcs": [
            {
                "type": "method",
                "args": {
                    "files_to_upload": "dict"
                }
            }
        ]
    },
    "contrib.operators.mlengine_prediction_summary": {
        "JsonCoder.encode": [
            {
                "type": "method",
                "args": {
                    "x": "object"
                }
            }
        ],
        "JsonCoder.decode": [
            {
                "type": "method",
                "args": {
                    "x": "str"
                }
            }
        ],
        "MakeSummary": [
            {
                "type": "func",
                "args": {
                    "pcoll": "beam.Pipeline",
                    "metric_fn": "beam.Pipeline",
                    "metric_keys": "beam.Pipeline"
                }
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {
                    "argv": "int"
                }
            }
        ]
    },
    "contrib.operators.gcs_list_operator": {
        "GoogleCloudStorageListOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStorageListOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageListOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageListOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.pubsub_operator": {
        "PubSubTopicCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "PubSubTopicCreateOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.topic": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.fail_if_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubTopicCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "fail_if_exists": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubSubscriptionCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "PubSubSubscriptionCreateOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.topic_project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.topic": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.subscription": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.subscription_project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.ack_deadline_secs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "PubSubSubscriptionCreateOperator.fail_if_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubSubscriptionCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "topic_project": "str",
                    "topic": "str",
                    "subscription": "str",
                    "subscription_project": "str",
                    "ack_deadline_secs": "int",
                    "fail_if_exists": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubTopicDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "PubSubTopicDeleteOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.topic": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.fail_if_not_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubTopicDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubTopicDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "fail_if_not_exists": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubSubscriptionDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "PubSubSubscriptionDeleteOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.subscription": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.fail_if_not_exists": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubSubscriptionDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubSubscriptionDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "fail_if_not_exists": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubPublishOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PubSubPublishOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.topic": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.messages": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPublishOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "messages": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubPublishOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "PubSubTopicCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "PubSubTopicDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "PubSubSubscriptionCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "PubSubSubscriptionDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.bigquery_operator": {
        "BigQueryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.bql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.destination_dataset_table": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryOperator.write_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.create_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.allow_large_results": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryOperator.flatten_results": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.udf_config": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryOperator.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryOperator.maximum_billing_tier": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryOperator.maximum_bytes_billed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryOperator.schema_update_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryOperator.query_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryOperator.bq_cursor": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BigQueryOperator.priority": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.time_partitioning": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateEmptyTableOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryCreateEmptyTableOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.schema_fields": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateEmptyTableOperator.gcs_schema_object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateEmptyTableOperator.time_partitioning": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateEmptyTableOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateEmptyTableOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str",
                    "project_id": "str",
                    "schema_fields": "dict",
                    "gcs_schema_object": "str",
                    "time_partitioning": "dict",
                    "bigquery_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "labels": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryCreateExternalTableOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryCreateExternalTableOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.source_objects": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BigQueryCreateExternalTableOperator.schema_object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.destination_project_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.schema_fields": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateExternalTableOperator.source_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.compression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.skip_leading_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryCreateExternalTableOperator.field_delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.max_bad_records": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryCreateExternalTableOperator.quote_character": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.allow_quoted_newlines": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryCreateExternalTableOperator.allow_jagged_rows": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryCreateExternalTableOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCreateExternalTableOperator.src_fmt_configs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateExternalTableOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryCreateExternalTableOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "source_objects": "list",
                    "destination_project_dataset_table": "str",
                    "schema_fields": "dict",
                    "schema_object": "str",
                    "source_format": "str",
                    "compression": "str",
                    "skip_leading_rows": "int",
                    "field_delimiter": "str",
                    "max_bad_records": "int",
                    "quote_character": "str",
                    "allow_quoted_newlines": "bool",
                    "allow_jagged_rows": "bool",
                    "bigquery_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "src_fmt_configs": "dict",
                    "labels": "dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BigQueryDeleteDatasetOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryDeleteDatasetOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryDeleteDatasetOperator.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryDeleteDatasetOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryDeleteDatasetOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryDeleteDatasetOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bql": "bool",
                    "sql": "str",
                    "destination_dataset_table": "bool",
                    "write_disposition": "str",
                    "allow_large_results": "bool",
                    "flatten_results": "bool",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "udf_config": "bool",
                    "use_legacy_sql": "bool",
                    "maximum_billing_tier": "int",
                    "maximum_bytes_billed": "int",
                    "create_disposition": "str",
                    "schema_update_options": "dict",
                    "query_params": "dict",
                    "labels": "dict",
                    "priority": "str",
                    "time_partitioning": "dict",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "BigQueryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCreateEmptyTableOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryCreateExternalTableOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryDeleteDatasetOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BigQueryDeleteDatasetOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "project_id": "str",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.operators.segment_track_event_operator": {
        "SegmentTrackEventOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SegmentTrackEventOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentTrackEventOperator.user_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentTrackEventOperator.event": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentTrackEventOperator.properties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SegmentTrackEventOperator.segment_debug_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SegmentTrackEventOperator.segment_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentTrackEventOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "user_id": "str",
                    "event": "str",
                    "properties": "dict",
                    "segment_conn_id": "str",
                    "segment_debug_mode": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SegmentTrackEventOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.datastore_export_operator": {
        "DatastoreExportOperator.datastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreExportOperator.entity_filter": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatastoreExportOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatastoreExportOperator.polling_interval_in_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatastoreExportOperator.overwrite_existing": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DatastoreExportOperator.xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DatastoreExportOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "namespace": "str",
                    "datastore_conn_id": "str",
                    "cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "entity_filter": "dict",
                    "labels": "dict",
                    "polling_interval_in_seconds": "int",
                    "overwrite_existing": "bool",
                    "xcom_push": "bool",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "DatastoreExportOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.postgres_to_gcs_operator": {
        "PY3": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.schema_filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.approx_max_file_size_bytes": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.postgres_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PostgresToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "bucket": "str",
                    "filename": "str",
                    "schema_filename": "str",
                    "approx_max_file_size_bytes": "int",
                    "postgres_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "parameters": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PostgresToGoogleCloudStorageOperator.type_map": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "postgres_type": "int"
                }
            }
        ],
        "PostgresToGoogleCloudStorageOperator.convert_types": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "value": "object"
                }
            }
        ],
        "PostgresToGoogleCloudStorageOperator._query_postgres": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PostgresToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "PostgresToGoogleCloudStorageOperator._write_local_data_files": [
            {
                "type": "method",
                "args": {
                    "cursor": "GoogleCloudStorageHook"
                }
            }
        ],
        "PostgresToGoogleCloudStorageOperator._write_local_schema_file": [
            {
                "type": "method",
                "args": {
                    "cursor": "GoogleCloudStorageHook"
                }
            }
        ],
        "PostgresToGoogleCloudStorageOperator._upload_to_gcs": [
            {
                "type": "method",
                "args": {
                    "files_to_upload": "dict"
                }
            }
        ]
    },
    "contrib.operators.hipchat_operator": {
        "HipChatAPIOperator.token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPIOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "token": "str",
                    "base_url": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HipChatAPIOperator.prepare_request": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HipChatAPISendRoomNotificationOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.room_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.message_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.frm": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.attach_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.notify": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.card": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "room_id": "str",
                    "message": "str",
                    "message_format": "str",
                    "color": "str",
                    "frm": "str",
                    "attach_to": "str",
                    "notify": "bool",
                    "card": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HipChatAPISendRoomNotificationOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.body": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HipChatAPISendRoomNotificationOperator.prepare_request": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HipChatAPIOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.s3_list_operator": {
        "S3ListOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "S3ListOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ListOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3ListOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.emr_add_steps_operator": {
        "EmrAddStepsOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrAddStepsOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrAddStepsOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrAddStepsOperator.job_flow_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrAddStepsOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrAddStepsOperator.steps": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrAddStepsOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_flow_id": "str",
                    "aws_conn_id": "str",
                    "steps": "list",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "EmrAddStepsOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.vertica_to_mysql": {
        "VerticaToMySqlTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VerticaToMySqlTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaToMySqlTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.mysql_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.mysql_preoperator": [
            {
                "type": "attr",
                "anno": "None"
            }
        ],
        "VerticaToMySqlTransfer.mysql_postoperator": [
            {
                "type": "attr",
                "anno": "None"
            }
        ],
        "VerticaToMySqlTransfer.vertica_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaToMySqlTransfer.bulk_load": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VerticaToMySqlTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mysql_table": "str",
                    "vertica_conn_id": "str",
                    "mysql_conn_id": "str",
                    "mysql_preoperator": "None",
                    "mysql_postoperator": "None",
                    "bulk_load": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "VerticaToMySqlTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.datastore_import_operator": {
        "DatastoreImportOperator.datastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatastoreImportOperator.entity_filter": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatastoreImportOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DatastoreImportOperator.polling_interval_in_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatastoreImportOperator.xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DatastoreImportOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "file": "str",
                    "namespace": "str",
                    "entity_filter": "dict",
                    "labels": "dict",
                    "datastore_conn_id": "str",
                    "delegate_to": "str",
                    "polling_interval_in_seconds": "int",
                    "xcom_push": "bool",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "DatastoreImportOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.winrm_operator": {
        "WinRMOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "WinRMOperator.winrm_hook": [
            {
                "type": "attr",
                "anno": "WinRMHook"
            }
        ],
        "WinRMOperator.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMOperator.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMOperator.command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WinRMOperator.do_xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WinRMOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "winrm_hook": "WinRMHook",
                    "ssh_conn_id": "str",
                    "remote_host": "str",
                    "command": "str",
                    "timeout": "int",
                    "do_xcom_push": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WinRMOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.sagemaker_create_tuning_job_operator": {
        "SageMakerCreateTuningJobOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SageMakerCreateTuningJobOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SageMakerCreateTuningJobOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerCreateTuningJobOperator.sagemaker_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerCreateTuningJobOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerCreateTuningJobOperator.tuning_job_config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SageMakerCreateTuningJobOperator.use_db_config": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerCreateTuningJobOperator.wait_for_completion": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerCreateTuningJobOperator.check_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerCreateTuningJobOperator.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerCreateTuningJobOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sagemaker_conn_id": "str",
                    "region_name": "str",
                    "tuning_job_config": "dict",
                    "use_db_config": "bool",
                    "wait_for_completion": "bool",
                    "check_interval": "int",
                    "max_ingestion_time": "int",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerCreateTuningJobOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.emr_terminate_job_flow_operator": {
        "EmrTerminateJobFlowOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrTerminateJobFlowOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrTerminateJobFlowOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrTerminateJobFlowOperator.job_flow_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrTerminateJobFlowOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrTerminateJobFlowOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_flow_id": "str",
                    "aws_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "EmrTerminateJobFlowOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcp_container_operator": {
        "GKEClusterDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "GKEClusterDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "name": "str",
                    "location": "str",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GKEClusterCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "GKEClusterCreateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterCreateOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterCreateOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterCreateOperator.body": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GKEClusterCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "location": "str",
                    "body": "dict | None",
                    "gcp_conn_id": "str",
                    "api_version": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "KUBE_CONFIG_ENV_VAR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "G_APP_CRED": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "GKEPodOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GKEPodOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "location": "str",
                    "cluster_name": "str",
                    "gcp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GKEPodOperator.config_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEPodOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GKEPodOperator._get_field": [
            {
                "type": "method",
                "args": {
                    "extras": "dict",
                    "field": "str",
                    "default": "str"
                }
            }
        ],
        "GKEPodOperator._set_env_from_extras": [
            {
                "type": "method",
                "args": {
                    "extras": "dict"
                }
            }
        ],
        "GKEClusterCreateOperator._check_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GKEClusterCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "GKEClusterDeleteOperator._check_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GKEClusterDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.gcs_download_operator": {
        "GoogleCloudStorageDownloadOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStorageDownloadOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.store_to_xcom_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageDownloadOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "filename": "str",
                    "store_to_xcom_key": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageDownloadOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.gcs_to_gcs": {
        "GoogleCloudStorageToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.source_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.source_object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.destination_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.destination_object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.move_object": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.wildcard": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_bucket": "str",
                    "source_object": "str",
                    "destination_bucket": "str",
                    "destination_object": "str",
                    "move_object": "bool",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.dataflow_operator": {
        "DataFlowJavaOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataFlowJavaOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.jar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowJavaOperator.dataflow_default_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataFlowJavaOperator.options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataFlowJavaOperator.poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataFlowJavaOperator.job_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataflowTemplateOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.dataflow_default_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataflowTemplateOperator.poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataflowTemplateOperator.template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataflowTemplateOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataflowTemplateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template": "str",
                    "dataflow_default_options": "dict",
                    "parameters": "dict",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "poll_sleep": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataFlowPythonOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataFlowPythonOperator.py_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowPythonOperator.py_options": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataFlowPythonOperator.dataflow_default_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataFlowPythonOperator.options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataFlowPythonOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowPythonOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataFlowPythonOperator.poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudBucketHelper.GCS_PREFIX_LENGTH": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudBucketHelper._gcs_hook": [
            {
                "type": "attr",
                "anno": "GoogleCloudStorageHook"
            }
        ],
        "GoogleCloudBucketHelper.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "DataFlowJavaOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "DataflowTemplateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "GoogleCloudBucketHelper.google_cloud_to_local": [
            {
                "type": "method",
                "args": {
                    "file_name": "str"
                }
            }
        ],
        "DataFlowPythonOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "DataFlowPythonOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "py_file": "str",
                    "py_options": "list",
                    "dataflow_default_options": "dict",
                    "options": "dict",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "poll_sleep": "int",
                    "args": "object",
                    "kwargs": "object"
                }
            }
        ],
        "DataFlowJavaOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "jar": "str",
                    "dataflow_default_options": "dict",
                    "options": "dict",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "poll_sleep": "int",
                    "job_class": "str",
                    "args": "object",
                    "kwargs": "object"
                }
            }
        ]
    },
    "contrib.operators.gcs_to_bq": {
        "GoogleCloudStorageToBigQueryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.source_objects": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.schema_object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.destination_project_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.schema_fields": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.source_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.compression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.create_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.skip_leading_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.write_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.field_delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.max_bad_records": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.quote_character": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.ignore_unknown_values": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.allow_quoted_newlines": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.allow_jagged_rows": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.external_table": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.max_id_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.schema_update_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.src_fmt_configs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.time_partitioning": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "source_objects": "list",
                    "destination_project_dataset_table": "str",
                    "schema_fields": "dict",
                    "schema_object": "str",
                    "source_format": "str",
                    "compression": "str",
                    "create_disposition": "str",
                    "skip_leading_rows": "int",
                    "write_disposition": "str",
                    "field_delimiter": "str",
                    "max_bad_records": "int",
                    "quote_character": "str",
                    "ignore_unknown_values": "bool",
                    "allow_quoted_newlines": "bool",
                    "allow_jagged_rows": "bool",
                    "max_id_key": "str",
                    "bigquery_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "schema_update_options": "dict",
                    "src_fmt_configs": "dict",
                    "external_table": "bool",
                    "time_partitioning": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageToBigQueryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.vertica_operator": {
        "VerticaOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VerticaOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VerticaOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaOperator.vertica_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "vertica_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "VerticaOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.jenkins_job_trigger_operator": {
        "basestring": [
            {
                "type": "var",
                "anno": "basestring"
            }
        ],
        "JenkinsJobTriggerOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "JenkinsJobTriggerOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "JenkinsJobTriggerOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JenkinsJobTriggerOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JenkinsJobTriggerOperator.parameters": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "JenkinsJobTriggerOperator.sleep_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "JenkinsJobTriggerOperator.jenkins_connection_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JenkinsJobTriggerOperator.max_try_before_job_appears": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "JenkinsJobTriggerOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "jenkins_connection_id": "str",
                    "job_name": "str",
                    "parameters": "str",
                    "sleep_time": "int",
                    "max_try_before_job_appears": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "JenkinsJobTriggerOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "jenkins_request_with_headers": [
            {
                "type": "func",
                "args": {
                    "jenkins_server": "jenkins.Jenkins",
                    "req": "Request",
                    "add_crumb": "bool"
                }
            }
        ],
        "JenkinsJobTriggerOperator.poll_job_in_queue": [
            {
                "type": "method",
                "args": {
                    "location": "str",
                    "jenkins_server": "jenkins.Jenkins"
                }
            }
        ],
        "JenkinsJobTriggerOperator.build_job": [
            {
                "type": "method",
                "args": {
                    "jenkins_server": "jenkins.Jenkins"
                }
            }
        ],
        "JenkinsJobTriggerOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.jira_operator": {
        "JiraOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "JiraOperator.jira_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraOperator.method_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraOperator.jira_method_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JiraOperator.result_processor": [
            {
                "type": "attr",
                "anno": "Callable[[dict, dict], dict]"
            }
        ],
        "JiraOperator.get_jira_resource_method": [
            {
                "type": "attr",
                "anno": "Callable[[dict], JiraOperator]"
            }
        ],
        "JiraOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "jira_conn_id": "str",
                    "jira_method": "str",
                    "jira_method_args": "dict",
                    "result_processor": "Callable[[dict, dict], dict]",
                    "get_jira_resource_method": "Callable[[dict], JiraOperator]",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "JiraOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.mlengine_operator": {
        "MLEngineBatchPredictionOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineBatchPredictionOperator._project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._data_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._input_paths": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineBatchPredictionOperator._output_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._model_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._version_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._max_worker_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MLEngineBatchPredictionOperator._runtime_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator._delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineBatchPredictionOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_id": "str",
                    "region": "str",
                    "data_format": "str",
                    "input_paths": "list",
                    "output_path": "str",
                    "model_name": "str",
                    "version_name": "str",
                    "uri": "str",
                    "max_worker_count": "int",
                    "runtime_version": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "MLEngineModelOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "MLEngineModelOperator._project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineModelOperator._model": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MLEngineModelOperator._operation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineModelOperator._gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineModelOperator._delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineModelOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model": "dict",
                    "operation": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MLEngineVersionOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineVersionOperator._project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._model_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._version_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._version": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MLEngineVersionOperator._operation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator._delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineVersionOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model_name": "str",
                    "version_name": "str",
                    "version": "dict",
                    "operation": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MLEngineTrainingOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineTrainingOperator._project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._package_uris": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._training_python_module": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._training_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MLEngineTrainingOperator._region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._scale_tier": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._runtime_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._python_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._job_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator._mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MLEngineTrainingOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_id": "str",
                    "package_uris": "str",
                    "training_python_module": "str",
                    "training_args": "list",
                    "region": "str",
                    "scale_tier": "str",
                    "runtime_version": "str",
                    "python_version": "str",
                    "job_dir": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "mode": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "_normalize_mlengine_job_id": [
            {
                "type": "func",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "MLEngineBatchPredictionOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "MLEngineVersionOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "MLEngineTrainingOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "MLEngineModelOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ]
    },
    "contrib.operators.snowflake_operator": {
        "SnowflakeOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SnowflakeOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SnowflakeOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.snowflake_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SnowflakeOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SnowflakeOperator.warehouse": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "snowflake_conn_id": "str",
                    "parameters": "dict",
                    "autocommit": "bool",
                    "warehouse": "str",
                    "database": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SnowflakeOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnowflakeOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.file_to_wasb": {
        "FileToWasbOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "FileToWasbOperator.file_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToWasbOperator.container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToWasbOperator.blob_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToWasbOperator.wasb_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToWasbOperator.load_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "FileToWasbOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "container_name": "str",
                    "blob_name": "str",
                    "wasb_conn_id": "str",
                    "load_options": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FileToWasbOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.emr_create_job_flow_operator": {
        "EmrCreateJobFlowOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrCreateJobFlowOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrCreateJobFlowOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrCreateJobFlowOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrCreateJobFlowOperator.emr_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrCreateJobFlowOperator.job_flow_overrides": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "EmrCreateJobFlowOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "emr_conn_id": "str",
                    "job_flow_overrides": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "EmrCreateJobFlowOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.discord_webhook_operator": {
        "DiscordWebhookOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DiscordWebhookOperator.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.webhook_endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.avatar_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.tts": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DiscordWebhookOperator.proxy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookOperator.hook": [
            {
                "type": "attr",
                "anno": "DiscordWebhookHook"
            }
        ],
        "DiscordWebhookOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_endpoint": "str",
                    "message": "str",
                    "username": "str",
                    "avatar_url": "str",
                    "tts": "bool",
                    "proxy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DiscordWebhookOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.bigquery_to_bigquery": {
        "BigQueryToBigQueryOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryToBigQueryOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryToBigQueryOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.source_project_dataset_tables": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.destination_project_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.write_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.create_disposition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToBigQueryOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryToBigQueryOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_project_dataset_tables": "str",
                    "destination_project_dataset_table": "str",
                    "write_disposition": "str",
                    "create_disposition": "str",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "labels": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryToBigQueryOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.file_to_gcs": {
        "FileToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "FileToGoogleCloudStorageOperator.src": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.dst": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.mime_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "src": "str",
                    "dst": "str",
                    "bucket": "str",
                    "google_cloud_storage_conn_id": "str",
                    "mime_type": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FileToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.oracle_to_azure_data_lake_transfer": {
        "OracleToAzureDataLakeTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "OracleToAzureDataLakeTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.oracle_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.sql_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "OracleToAzureDataLakeTransfer.azure_data_lake_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.azure_data_lake_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.encoding": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.quotechar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.quoting": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToAzureDataLakeTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "filename": "str",
                    "azure_data_lake_conn_id": "str",
                    "azure_data_lake_path": "str",
                    "oracle_conn_id": "str",
                    "sql": "str",
                    "sql_params": "dict",
                    "delimiter": "str",
                    "encoding": "str",
                    "quotechar": "str",
                    "quoting": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "OracleToAzureDataLakeTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "OracleToAzureDataLakeTransfer._write_temp_file": [
            {
                "type": "method",
                "args": {
                    "cursor": "BigQueryCursor",
                    "path_to_save": "str"
                }
            }
        ]
    },
    "contrib.operators.bigquery_check_operator": {
        "BigQueryCheckOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryCheckOperator.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "bigquery_conn_id": "str",
                    "use_legacy_sql": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BigQueryCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryValueCheckOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryValueCheckOperator.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryValueCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "pass_value": "bool",
                    "tolerance": "float",
                    "bigquery_conn_id": "str",
                    "use_legacy_sql": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryValueCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryIntervalCheckOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryIntervalCheckOperator.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryIntervalCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "metrics_thresholds": "int",
                    "date_filter_column": "str",
                    "days_back": "int",
                    "bigquery_conn_id": "str",
                    "use_legacy_sql": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BigQueryIntervalCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.kubernetes_pod_operator": {
        "template_fields": [
            {
                "type": "var",
                "anno": "tuple[str, ...]"
            }
        ],
        "template_ext": [
            {
                "type": "var",
                "anno": "tuple[str, ...]"
            }
        ],
        "ui_color": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "KubernetesPodOperator.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.cmds": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.arguments": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.startup_timeout_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KubernetesPodOperator.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.env_vars": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.volume_mounts": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.volumes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.secrets": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "KubernetesPodOperator.in_cluster": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.cluster_context": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.get_logs": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.image_pull_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.node_selectors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.annotations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.affinity": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KubernetesPodOperator.xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.resources": [
            {
                "type": "attr",
                "anno": "Resources"
            }
        ],
        "KubernetesPodOperator.config_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.image_pull_secrets": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.service_account_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubernetesPodOperator.is_delete_operator_pod": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.hostnetwork": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubernetesPodOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "namespace": "str",
                    "image": "str",
                    "name": "str",
                    "cmds": "list",
                    "arguments": "list",
                    "volume_mounts": "list",
                    "volumes": "list",
                    "env_vars": "dict",
                    "secrets": "list",
                    "in_cluster": "bool",
                    "cluster_context": "dict",
                    "labels": "dict",
                    "startup_timeout_seconds": "int",
                    "get_logs": "bool",
                    "image_pull_policy": "str",
                    "annotations": "dict",
                    "resources": "Resources",
                    "affinity": "dict",
                    "config_file": "str",
                    "xcom_push": "bool",
                    "node_selectors": "dict",
                    "image_pull_secrets": "str",
                    "service_account_name": "str",
                    "is_delete_operator_pod": "bool",
                    "hostnetwork": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "KubernetesPodOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.hive_to_dynamodb": {
        "HiveToDynamoDBTransferOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HiveToDynamoDBTransferOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveToDynamoDBTransferOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.table_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.table_keys": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.pre_process": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.pre_process_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HiveToDynamoDBTransferOperator.pre_process_kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveToDynamoDBTransferOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.hiveserver2_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDynamoDBTransferOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "table_name": "str",
                    "table_keys": "str",
                    "pre_process": "str",
                    "pre_process_args": "list",
                    "pre_process_kwargs": "dict",
                    "region_name": "str",
                    "schema": "str",
                    "hiveserver2_conn_id": "str",
                    "aws_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HiveToDynamoDBTransferOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.oracle_to_oracle_transfer": {
        "OracleToOracleTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "OracleToOracleTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.oracle_destination_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.destination_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.oracle_source_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.source_sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleToOracleTransfer.source_sql_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "OracleToOracleTransfer.rows_chunk": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "OracleToOracleTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "oracle_destination_conn_id": "str",
                    "destination_table": "str",
                    "oracle_source_conn_id": "str",
                    "source_sql": "str",
                    "source_sql_params": "dict",
                    "rows_chunk": "int",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "OracleToOracleTransfer._execute": [
            {
                "type": "method",
                "args": {
                    "src_hook": "OracleHook",
                    "dest_hook": "OracleHook",
                    "context": "dict"
                }
            }
        ],
        "OracleToOracleTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.cassandra_to_gcs": {
        "CassandraToGoogleCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.cql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.schema_filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.approx_max_file_size_bytes": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.cassandra_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.hook": [
            {
                "type": "attr",
                "anno": "GoogleCloudStorageHook"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "cql": "str",
                    "bucket": "str",
                    "filename": "str",
                    "schema_filename": "str",
                    "approx_max_file_size_bytes": "int",
                    "cassandra_conn_id": "str",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.CQL_TYPE_MAP": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CassandraToGoogleCloudStorageOperator.is_simple_type": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.is_array_type": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.is_record_type": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.get_bq_type": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.get_bq_mode": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator._query_cassandra": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CassandraToGoogleCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator._upload_to_gcs": [
            {
                "type": "method",
                "args": {
                    "files_to_upload": "dict"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.generate_schema_dict": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "name": "str",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.get_bq_fields": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseOperator]",
                    "name": "str",
                    "type": "BaseOperator"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator._write_local_schema_file": [
            {
                "type": "method",
                "args": {
                    "cursor": "str"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.generate_data_dict": [
            {
                "type": "method",
                "args": {
                    "cls": "type[object]",
                    "names": "list",
                    "values": "list"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_user_type": [
            {
                "type": "method",
                "args": {
                    "cls": "type[object]",
                    "name": "str",
                    "value": "object"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_value": [
            {
                "type": "method",
                "args": {
                    "cls": "type[object]",
                    "name": "str",
                    "value": "object"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_map_type": [
            {
                "type": "method",
                "args": {
                    "cls": "type[object]",
                    "name": "str",
                    "value": "OrderedMapSerializedKey"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_tuple_type": [
            {
                "type": "method",
                "args": {
                    "cls": "type[object]",
                    "name": "str",
                    "value": "tuple"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator.convert_array_types": [
            {
                "type": "method",
                "args": {
                    "cls": "type[object]",
                    "name": "str",
                    "value": "list"
                }
            }
        ],
        "CassandraToGoogleCloudStorageOperator._write_local_data_files": [
            {
                "type": "method",
                "args": {
                    "cursor": "str"
                }
            }
        ]
    },
    "contrib.operators.bigquery_table_delete_operator": {
        "BigQueryTableDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryTableDeleteOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableDeleteOperator.deletion_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableDeleteOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableDeleteOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableDeleteOperator.ignore_if_missing": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryTableDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "deletion_dataset_table": "str",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "ignore_if_missing": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryTableDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators": {
        "_operators": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "airflow_importer": [
            {
                "type": "var",
                "anno": "AirflowImporter"
            }
        ]
    },
    "contrib.operators.gcs_operator": {
        "GoogleCloudStorageCreateBucketOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.storage_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.google_cloud_storage_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "storage_class": "str",
                    "location": "str",
                    "project_id": "str",
                    "labels": "dict",
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageCreateBucketOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.slack_webhook_operator": {
        "SlackWebhookOperator.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.webhook_token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.channel": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.icon_emoji": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.link_names": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlackWebhookOperator.proxy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookOperator.hook": [
            {
                "type": "attr",
                "anno": "SlackWebhookHook"
            }
        ],
        "SlackWebhookOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_token": "str",
                    "message": "str",
                    "channel": "str",
                    "username": "str",
                    "icon_emoji": "str",
                    "link_names": "bool",
                    "proxy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SlackWebhookOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.bigquery_to_gcs": {
        "BigQueryToCloudStorageOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryToCloudStorageOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryToCloudStorageOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.source_project_dataset_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.destination_cloud_storage_uris": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.compression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.export_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.field_delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.print_header": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryToCloudStorageOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryToCloudStorageOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryToCloudStorageOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_project_dataset_table": "str",
                    "destination_cloud_storage_uris": "str",
                    "compression": "str",
                    "export_format": "str",
                    "field_delimiter": "str",
                    "print_header": "bool",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "labels": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryToCloudStorageOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.druid_operator": {
        "DruidOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DruidOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DruidOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidOperator.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DruidOperator.index_spec_str": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "json_index_file": "str",
                    "druid_ingest_conn_id": "str",
                    "max_ingestion_time": "int",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DruidOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.ssh_operator": {
        "SSHOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SSHOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SSHOperator.ssh_hook": [
            {
                "type": "attr",
                "anno": "SSHHook"
            }
        ],
        "SSHOperator.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHOperator.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHOperator.command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SSHOperator.do_xcom_push": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SSHOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "ssh_hook": "SSHHook",
                    "ssh_conn_id": "str",
                    "remote_host": "str",
                    "command": "str",
                    "timeout": "int",
                    "do_xcom_push": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SSHOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "SSHOperator.tunnel": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.spark_submit_operator": {
        "SparkSubmitOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SparkSubmitOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._application": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitOperator._files": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._py_files": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._driver_classpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._jars": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._java_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._packages": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._exclude_packages": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._repositories": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._total_executor_cores": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._executor_cores": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._executor_memory": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._driver_memory": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator._num_executors": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._application_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._env_vars": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSubmitOperator._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitOperator._hook": [
            {
                "type": "attr",
                "anno": "SparkSubmitHook"
            }
        ],
        "SparkSubmitOperator._conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "application": "str",
                    "conf": "dict",
                    "conn_id": "str",
                    "files": "list",
                    "py_files": "list",
                    "driver_classpath": "str",
                    "jars": "list",
                    "java_class": "str",
                    "packages": "list",
                    "exclude_packages": "list",
                    "repositories": "list",
                    "total_executor_cores": "list",
                    "executor_cores": "list",
                    "executor_memory": "list",
                    "driver_memory": "list",
                    "keytab": "str",
                    "principal": "str",
                    "name": "str",
                    "num_executors": "list",
                    "application_args": "list",
                    "env_vars": "list",
                    "verbose": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkSubmitOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.dataproc_operator": {
        "DataprocClusterCreateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataprocClusterCreateOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.num_workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterCreateOperator.num_preemptible_workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterCreateOperator.storage_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.init_actions_uris": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.init_action_timeout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.image_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.master_machine_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.master_disk_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.master_disk_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterCreateOperator.worker_machine_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.worker_disk_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.worker_disk_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterCreateOperator.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocClusterCreateOperator.zone": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.network_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.subnetwork_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.internal_ip_only": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DataprocClusterCreateOperator.tags": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocClusterCreateOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.service_account": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.service_account_scopes": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.idle_delete_ttl": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.auto_delete_time": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.auto_delete_ttl": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterCreateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_name": "str",
                    "project_id": "str",
                    "num_workers": "int",
                    "zone": "str",
                    "network_uri": "str",
                    "subnetwork_uri": "str",
                    "internal_ip_only": "bool",
                    "tags": "dict",
                    "storage_bucket": "str",
                    "init_actions_uris": "str",
                    "init_action_timeout": "str",
                    "metadata": "str",
                    "image_version": "str",
                    "properties": "str",
                    "master_machine_type": "str",
                    "master_disk_type": "str",
                    "master_disk_size": "int",
                    "worker_machine_type": "str",
                    "worker_disk_type": "str",
                    "worker_disk_size": "int",
                    "num_preemptible_workers": "int",
                    "labels": "dict",
                    "region": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "service_account": "str",
                    "service_account_scopes": "str",
                    "idle_delete_ttl": "str",
                    "auto_delete_time": "str",
                    "auto_delete_ttl": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataprocClusterScaleOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataprocClusterScaleOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterScaleOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterScaleOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterScaleOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterScaleOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterScaleOperator.num_workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterScaleOperator.num_preemptible_workers": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataprocClusterScaleOperator.optional_arguments": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DataprocClusterScaleOperator._build_scale_cluster_data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocClusterDeleteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataprocClusterDeleteOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterDeleteOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterDeleteOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterDeleteOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterDeleteOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocClusterDeleteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_name": "str",
                    "project_id": "str",
                    "region": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcPigOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcPigOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DataProcPigOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.query_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.variables": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.dataproc_properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.dataproc_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPigOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "query_uri": "str",
                    "variables": "str",
                    "job_name": "str",
                    "cluster_name": "str",
                    "dataproc_pig_properties": "str",
                    "dataproc_pig_jars": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "region": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcPigOperator.dataproc_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcHiveOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DataProcHiveOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.query_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.variables": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.dataproc_properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.dataproc_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHiveOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "query_uri": "str",
                    "variables": "str",
                    "job_name": "str",
                    "cluster_name": "str",
                    "dataproc_hive_properties": "str",
                    "dataproc_hive_jars": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "region": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcHiveOperator.dataproc_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcSparkSqlOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DataProcSparkSqlOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.query": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.query_uri": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.variables": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.dataproc_properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.dataproc_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkSqlOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "query_uri": "str",
                    "variables": "str",
                    "job_name": "str",
                    "cluster_name": "str",
                    "dataproc_spark_properties": "str",
                    "dataproc_spark_jars": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "region": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcSparkSqlOperator.dataproc_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcSparkOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.main_jar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.main_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.arguments": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.archives": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.dataproc_properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.dataproc_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcSparkOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "main_jar": "str",
                    "main_class": "str",
                    "arguments": "str",
                    "archives": "str",
                    "files": "str",
                    "job_name": "str",
                    "cluster_name": "str",
                    "dataproc_spark_properties": "str",
                    "dataproc_spark_jars": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "region": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcSparkOperator.dataproc_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataProcHadoopOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.main_jar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.main_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.arguments": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.archives": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.dataproc_properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.dataproc_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHadoopOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "main_jar": "str",
                    "main_class": "str",
                    "arguments": "str",
                    "archives": "str",
                    "files": "str",
                    "job_name": "str",
                    "cluster_name": "str",
                    "dataproc_hadoop_properties": "str",
                    "dataproc_hadoop_jars": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "region": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcHadoopOperator.dataproc_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DataProcPySparkOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator._generate_temp_filename": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "DataProcPySparkOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.main": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.arguments": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.archives": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.pyfiles": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.cluster_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.dataproc_properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.dataproc_jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcPySparkOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "main": "str",
                    "arguments": "str",
                    "archives": "str",
                    "pyfiles": "str",
                    "files": "str",
                    "job_name": "str",
                    "cluster_name": "str",
                    "dataproc_pyspark_properties": "str",
                    "dataproc_pyspark_jars": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "region": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataProcPySparkOperator.dataproc_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateBaseOperator.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateBaseOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateBaseOperator.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateBaseOperator.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateBaseOperator.hook": [
            {
                "type": "attr",
                "anno": "DataProcHook"
            }
        ],
        "DataprocWorkflowTemplateBaseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "region": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataprocWorkflowTemplateBaseOperator.start": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataprocWorkflowTemplateInstantiateOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataprocWorkflowTemplateInstantiateOperator.template_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateInstantiateOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataprocWorkflowTemplateInstantiateInlineOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DataprocWorkflowTemplateInstantiateInlineOperator.template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataprocWorkflowTemplateInstantiateInlineOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "template": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataprocClusterScaleOperator._get_graceful_decommission_timeout": [
            {
                "type": "method",
                "args": {
                    "timeout": "str"
                }
            }
        ],
        "DataprocClusterScaleOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_name": "str",
                    "project_id": "str",
                    "region": "str",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "num_workers": "int",
                    "num_preemptible_workers": "int",
                    "graceful_decommission_timeout": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DataprocClusterCreateOperator._get_init_action_timeout": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocClusterCreateOperator._get_cluster_list_for_project": [
            {
                "type": "method",
                "args": {
                    "service": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator._get_cluster": [
            {
                "type": "method",
                "args": {
                    "service": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator._cluster_ready": [
            {
                "type": "method",
                "args": {
                    "state": "str",
                    "service": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator._get_cluster_state": [
            {
                "type": "method",
                "args": {
                    "service": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator._wait_for_done": [
            {
                "type": "method",
                "args": {
                    "service": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataprocClusterScaleOperator._wait_for_done": [
            {
                "type": "method",
                "args": {
                    "service": "str",
                    "operation_name": "str"
                }
            }
        ],
        "DataprocClusterScaleOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataprocClusterDeleteOperator._wait_for_done": [
            {
                "type": "method",
                "args": {
                    "service": "str",
                    "operation_name": "str"
                }
            }
        ],
        "DataprocClusterDeleteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataprocWorkflowTemplateInstantiateOperator.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocWorkflowTemplateInstantiateInlineOperator.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataprocWorkflowTemplateBaseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcPySparkOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataprocClusterCreateOperator._build_cluster_data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcPySparkOperator._upload_file_temp": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "local_file": "str"
                }
            }
        ],
        "DataProcHadoopOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcSparkOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcSparkSqlOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcHiveOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DataProcPigOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.bigquery_get_data": {
        "BigQueryGetDataOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryGetDataOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.max_results": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryGetDataOperator.selected_fields": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BigQueryGetDataOperator.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryGetDataOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str",
                    "max_results": "int",
                    "selected_fields": "str | None",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "BigQueryGetDataOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.operators.awsbatch_operator": {
        "AWSBatchOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.client": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "AWSBatchOperator.arn": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "AWSBatchOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "AWSBatchOperator.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.job_definition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.job_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.overrides": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AWSBatchOperator.max_retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AWSBatchOperator.jobId": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.jobName": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AWSBatchOperator.hook": [
            {
                "type": "attr",
                "anno": "AwsHook"
            }
        ],
        "AWSBatchOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSBatchOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "job_definition": "str",
                    "job_queue": "str",
                    "overrides": "dict",
                    "max_retries": "int",
                    "aws_conn_id": "str",
                    "region_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AWSBatchOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSBatchOperator._wait_for_task_ended": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSBatchOperator._check_success_task": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AWSBatchOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.operators.spark_sql_operator": {
        "SparkSqlOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SparkSqlOperator.template_ext": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkSqlOperator._sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSqlOperator._conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._total_executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlOperator._executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlOperator._executor_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlOperator._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._master": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._num_executors": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlOperator._yarn_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlOperator._hook": [
            {
                "type": "attr",
                "anno": "SparkSqlHook"
            }
        ],
        "SparkSqlOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "conf": "dict",
                    "conn_id": "str",
                    "total_executor_cores": "int",
                    "executor_cores": "int",
                    "executor_memory": "int",
                    "keytab": "str",
                    "principal": "str",
                    "master": "str",
                    "name": "str",
                    "num_executors": "int",
                    "yarn_queue": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkSqlOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "SparkSqlOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.operators.mongo_to_s3": {
        "MongoToS3Operator.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MongoToS3Operator.mongo_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.s3_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.mongo_db": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.mongo_collection": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.mongo_query": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MongoToS3Operator.is_pipeline": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MongoToS3Operator.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoToS3Operator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MongoToS3Operator.__init__": [
            {
                "type": "method",
                "args": {
                    "mongo_conn_id": "str",
                    "s3_conn_id": "str",
                    "mongo_collection": "str",
                    "mongo_query": "list",
                    "s3_bucket": "str",
                    "s3_key": "str",
                    "mongo_db": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MongoToS3Operator._stringify": [
            {
                "type": "method",
                "args": {
                    "iterable": "list",
                    "joinable": "str"
                }
            }
        ],
        "MongoToS3Operator.transform": [
            {
                "type": "method",
                "args": {
                    "docs": "list"
                }
            }
        ],
        "MongoToS3Operator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "contrib.kubernetes.volume_mount": {
        "VolumeMount.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VolumeMount.mount_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VolumeMount.sub_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VolumeMount.read_only": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VolumeMount.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "mount_path": "str",
                    "sub_path": "str",
                    "read_only": "bool"
                }
            }
        ]
    },
    "contrib.kubernetes.kube_client": {
        "has_kubernetes": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "ApiException": [
            {
                "type": "var",
                "anno": "ApiException"
            }
        ],
        "_import_err": [
            {
                "type": "var",
                "anno": "Exception"
            }
        ],
        "_load_kube_config": [
            {
                "type": "func",
                "args": {
                    "in_cluster": "bool",
                    "cluster_context": "str",
                    "config_file": "str"
                }
            }
        ],
        "get_kube_client": [
            {
                "type": "func",
                "args": {
                    "in_cluster": "bool",
                    "cluster_context": "str",
                    "config_file": "str"
                }
            }
        ]
    },
    "contrib.kubernetes.pod": {
        "Resources.request_memory": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.request_cpu": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.limit_memory": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.limit_cpu": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Resources.__init__": [
            {
                "type": "method",
                "args": {
                    "request_memory": "bool",
                    "request_cpu": "bool",
                    "limit_memory": "bool",
                    "limit_cpu": "bool"
                }
            }
        ],
        "Resources.has_limits": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resources.has_requests": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resources.is_empty_resource_request": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Pod.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.envs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.cmds": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.secrets": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.result": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.volumes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.volume_mounts": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Pod.node_selectors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.image_pull_policy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.image_pull_secrets": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.init_containers": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Pod.service_account_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pod.resources": [
            {
                "type": "attr",
                "anno": "Resources"
            }
        ],
        "Pod.annotations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.affinity": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Pod.hostnetwork": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Pod.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "str",
                    "envs": "dict",
                    "cmds": "list",
                    "args": "list",
                    "secrets": "list",
                    "labels": "dict",
                    "node_selectors": "dict",
                    "name": "str",
                    "volumes": "list",
                    "volume_mounts": "list",
                    "namespace": "str",
                    "result": "list",
                    "image_pull_policy": "str",
                    "image_pull_secrets": "str",
                    "init_containers": "bool",
                    "service_account_name": "str",
                    "resources": "Resources",
                    "annotations": "dict",
                    "affinity": "dict",
                    "hostnetwork": "bool"
                }
            }
        ]
    },
    "contrib.kubernetes.kubernetes_request_factory.kubernetes_request_factory": {
        "KubernetesRequestFactory.__metaclass__": [
            {
                "type": "attr",
                "anno": "ABCMeta"
            }
        ],
        "KubernetesRequestFactory.create": [
            {
                "type": "method",
                "args": {
                    "pod": "six.Any"
                }
            }
        ],
        "KubernetesRequestFactory.extract_image_pull_policy": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_cmds": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_service_account_name": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_hostnetwork": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_image_pull_secrets": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_init_containers": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_resources": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.add_secret_to_env": [
            {
                "type": "method",
                "args": {
                    "env": "list",
                    "secret": "Secret"
                }
            }
        ],
        "KubernetesRequestFactory.extract_env_and_secrets": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_image": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_name": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_args": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_volume_secrets": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.attach_volume_mounts": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.attach_volumes": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_node_selector": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_affinity": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_annotations": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ],
        "KubernetesRequestFactory.extract_labels": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod",
                    "req": "dict"
                }
            }
        ]
    },
    "contrib.kubernetes.kubernetes_request_factory.pod_request_factory": {
        "SimplePodRequestFactory._yaml": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimplePodRequestFactory.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExtractXcomPodRequestFactory.XCOM_MOUNT_PATH": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExtractXcomPodRequestFactory.SIDECAR_CONTAINER_NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExtractXcomPodRequestFactory._yaml": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExtractXcomPodRequestFactory.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ExtractXcomPodRequestFactory.create": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod"
                }
            }
        ],
        "SimplePodRequestFactory.create": [
            {
                "type": "method",
                "args": {
                    "pod": "KubernetesPod"
                }
            }
        ]
    },
    "contrib.kubernetes.secret": {
        "Secret.deploy_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Secret.deploy_target": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Secret.secret": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Secret.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Secret.__init__": [
            {
                "type": "method",
                "args": {
                    "deploy_type": "str",
                    "deploy_target": "str",
                    "secret": "str",
                    "key": "str"
                }
            }
        ]
    },
    "contrib.kubernetes.volume": {
        "Volume.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Volume.configs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Volume.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "configs": "dict"
                }
            }
        ]
    },
    "contrib.kubernetes.pod_launcher": {
        "PodStatus.PENDING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodStatus.RUNNING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodStatus.FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodStatus.SUCCEEDED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PodLauncher._client": [
            {
                "type": "attr",
                "anno": "client.KubernetesClient"
            }
        ],
        "PodLauncher._watch": [
            {
                "type": "attr",
                "anno": "watch.Watch"
            }
        ],
        "PodLauncher.extract_xcom": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PodLauncher.kube_req_factory": [
            {
                "type": "attr",
                "anno": "pod_factory.KubernetesRequestFactory"
            }
        ],
        "PodLauncher.__init__": [
            {
                "type": "method",
                "args": {
                    "kube_client": "client.KubernetesClient",
                    "in_cluster": "bool",
                    "cluster_context": "str",
                    "extract_xcom": "bool"
                }
            }
        ],
        "PodLauncher.read_pod": [
            {
                "type": "method",
                "args": {
                    "pod": "client.Pod"
                }
            }
        ],
        "PodLauncher.delete_pod": [
            {
                "type": "method",
                "args": {
                    "pod": "pod_factory.Pod"
                }
            }
        ],
        "PodLauncher.base_container_is_running": [
            {
                "type": "method",
                "args": {
                    "pod": "client.Pod"
                }
            }
        ],
        "PodLauncher.process_status": [
            {
                "type": "method",
                "args": {
                    "job_id": "str",
                    "status": "str"
                }
            }
        ],
        "PodLauncher._exec_pod_command": [
            {
                "type": "method",
                "args": {
                    "resp": "kubernetes_stream",
                    "command": "str"
                }
            }
        ],
        "PodLauncher._task_status": [
            {
                "type": "method",
                "args": {
                    "event": "client.Pod"
                }
            }
        ],
        "PodLauncher.pod_is_running": [
            {
                "type": "method",
                "args": {
                    "pod": "client.Pod"
                }
            }
        ],
        "PodLauncher.pod_not_started": [
            {
                "type": "method",
                "args": {
                    "pod": "client.Pod"
                }
            }
        ],
        "PodLauncher.run_pod_async": [
            {
                "type": "method",
                "args": {
                    "pod": "client.Pod"
                }
            }
        ],
        "PodLauncher._extract_xcom": [
            {
                "type": "method",
                "args": {
                    "pod": "client.Pod"
                }
            }
        ],
        "PodLauncher._monitor_pod": [
            {
                "type": "method",
                "args": {
                    "pod": "client.Pod",
                    "get_logs": "bool"
                }
            }
        ],
        "PodLauncher.run_pod": [
            {
                "type": "method",
                "args": {
                    "pod": "client.Pod",
                    "startup_timeout": "int",
                    "get_logs": "bool"
                }
            }
        ]
    },
    "contrib.kubernetes.worker_configuration": {
        "WorkerConfiguration.kube_config": [
            {
                "type": "attr",
                "anno": "KubeConfig"
            }
        ],
        "WorkerConfiguration.worker_airflow_home": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.worker_airflow_dags": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration.worker_airflow_logs": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WorkerConfiguration._get_init_containers": [
            {
                "type": "method",
                "args": {
                    "volume_mounts": "dict"
                }
            }
        ],
        "WorkerConfiguration._get_environment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration._get_secrets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration._get_image_pull_secrets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration.init_volumes_and_mounts": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WorkerConfiguration.__init__": [
            {
                "type": "method",
                "args": {
                    "kube_config": "KubeConfig"
                }
            }
        ],
        "WorkerConfiguration.make_pod": [
            {
                "type": "method",
                "args": {
                    "namespace": "str",
                    "worker_uuid": "str",
                    "pod_id": "str",
                    "dag_id": "str",
                    "task_id": "str",
                    "execution_date": "str",
                    "airflow_command": "str",
                    "kube_executor_config": "KubernetesExecutorConfig"
                }
            }
        ]
    },
    "contrib.kubernetes.pod_generator": {
        "PodGenerator.kube_config": [
            {
                "type": "attr",
                "anno": "KubeConfig"
            }
        ],
        "PodGenerator.volumes": [
            {
                "type": "attr",
                "anno": "list[Volume]"
            }
        ],
        "PodGenerator.volume_mounts": [
            {
                "type": "attr",
                "anno": "list[VolumeMount]"
            }
        ],
        "PodGenerator.init_containers": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "PodGenerator.__init__": [
            {
                "type": "method",
                "args": {
                    "kube_config": "KubeConfig"
                }
            }
        ],
        "PodGenerator.add_init_container": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "image": "str",
                    "security_context": "str",
                    "init_environment": "str",
                    "volume_mounts": "VolumeMount"
                }
            }
        ],
        "PodGenerator._get_init_containers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PodGenerator._add_volume": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "configs": "dict"
                }
            }
        ],
        "PodGenerator.add_volume_with_configmap": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "config_map": "VolumeMount"
                }
            }
        ],
        "PodGenerator._add_mount": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "mount_path": "str",
                    "sub_path": "str",
                    "read_only": "bool"
                }
            }
        ],
        "PodGenerator._get_volumes_and_mounts": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PodGenerator._get_image_pull_secrets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PodGenerator.make_pod": [
            {
                "type": "method",
                "args": {
                    "namespace": "str",
                    "image": "str",
                    "pod_id": "str",
                    "cmds": "list",
                    "arguments": "list",
                    "labels": "dict"
                }
            }
        ],
        "PodGenerator.add_mount": [
            {
                "type": "method",
                "args": {
                    "volume_mount": "VolumeMount"
                }
            }
        ],
        "PodGenerator.add_volume": [
            {
                "type": "method",
                "args": {
                    "volume": "Volume"
                }
            }
        ]
    },
    "contrib.sensors.jira_sensor": {
        "JiraSensor.jira_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraSensor.result_processor": [
            {
                "type": "attr",
                "anno": "Resource"
            }
        ],
        "JiraSensor.method_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraSensor.method_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JiraSensor.jira_operator": [
            {
                "type": "attr",
                "anno": "JiraOperator"
            }
        ],
        "JiraTicketSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "JiraTicketSensor.jira_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraTicketSensor.ticket_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraTicketSensor.field": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraTicketSensor.expected_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "jira_conn_id": "str",
                    "method_name": "str",
                    "method_params": "dict",
                    "result_processor": "Resource",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "JiraTicketSensor.issue_field_checker": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "issue": "Resource"
                }
            }
        ],
        "JiraTicketSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "jira_conn_id": "str",
                    "ticket_id": "str",
                    "field": "str",
                    "expected_value": "str",
                    "field_checker_func": "Callable",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "JiraSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "JiraTicketSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.wasb_sensor": {
        "WasbBlobSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "WasbBlobSensor.wasb_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbBlobSensor.container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbBlobSensor.blob_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbBlobSensor.check_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "WasbBlobSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "blob_name": "str",
                    "wasb_conn_id": "str",
                    "check_options": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbPrefixSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, str]"
            }
        ],
        "WasbPrefixSensor.wasb_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbPrefixSensor.container_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbPrefixSensor.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbPrefixSensor.check_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "WasbPrefixSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "prefix": "str",
                    "wasb_conn_id": "str",
                    "check_options": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbPrefixSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "WasbBlobSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.aws_redshift_cluster_sensor": {
        "AwsRedshiftClusterSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "AwsRedshiftClusterSensor.cluster_identifier": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsRedshiftClusterSensor.target_status": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsRedshiftClusterSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsRedshiftClusterSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str",
                    "target_status": "str",
                    "aws_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AwsRedshiftClusterSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.sftp_sensor": {
        "SFTPSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SFTPSensor.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPSensor.hook": [
            {
                "type": "attr",
                "anno": "SFTPHook"
            }
        ],
        "SFTPSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "sftp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SFTPSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.sagemaker_base_sensor": {
        "SageMakerBaseSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerBaseSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerBaseSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "SageMakerBaseSensor.non_terminal_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerBaseSensor.failed_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerBaseSensor.get_sagemaker_response": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerBaseSensor.get_failed_reason_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerBaseSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerBaseSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.emr_step_sensor": {
        "EmrStepSensor.NON_TERMINAL_STATES": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrStepSensor.FAILED_STATE": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrStepSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "EmrStepSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrStepSensor.job_flow_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrStepSensor.step_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrStepSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_flow_id": "str",
                    "step_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "EmrStepSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "EmrStepSensor.get_emr_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.sensors.cassandra_record_sensor": {
        "CassandraRecordSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "CassandraRecordSensor.cassandra_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraRecordSensor.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraRecordSensor.keys": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraRecordSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "keys": "str",
                    "cassandra_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "CassandraRecordSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.redis_key_sensor": {
        "RedisKeySensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "RedisKeySensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisKeySensor.redis_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisKeySensor.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisKeySensor.__init__": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "redis_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "RedisKeySensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.hdfs_sensor": {
        "HdfsSensorRegex.regex": [
            {
                "type": "attr",
                "anno": "Pattern"
            }
        ],
        "HdfsSensorRegex.__init__": [
            {
                "type": "method",
                "args": {
                    "regex": "Pattern",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "HdfsSensorFolder.be_empty": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HdfsSensorFolder.__init__": [
            {
                "type": "method",
                "args": {
                    "be_empty": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HdfsSensorFolder.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "HdfsSensorRegex.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.gcs_sensor": {
        "GoogleCloudStorageObjectSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStorageObjectSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.google_cloud_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "google_cloud_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.object": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.ts_func": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.google_cloud_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudStoragePrefixSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.google_cloud_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudStoragePrefixSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "prefix": "str",
                    "google_cloud_conn_id": "str",
                    "delegate_to": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "ts_function": [
            {
                "type": "func",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "ts_func": "Callable",
                    "google_cloud_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GoogleCloudStoragePrefixSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudStorageObjectUpdatedSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "GoogleCloudStorageObjectSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.datadog_sensor": {
        "DatadogSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogSensor.datadog_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogSensor.from_seconds_ago": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatadogSensor.up_to_seconds_from_now": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatadogSensor.priority": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatadogSensor.sources": [
            {
                "type": "attr",
                "anno": "api.Event"
            }
        ],
        "DatadogSensor.tags": [
            {
                "type": "attr",
                "anno": "api.Event"
            }
        ],
        "DatadogSensor.response_check": [
            {
                "type": "attr",
                "anno": "Callable[[api.Event], bool]"
            }
        ],
        "DatadogSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "datadog_conn_id": "str",
                    "from_seconds_ago": "int",
                    "up_to_seconds_from_now": "int",
                    "priority": "int",
                    "sources": "api.Event",
                    "tags": "api.Event",
                    "response_check": "Callable[[api.Event], bool]",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "DatadogSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.cassandra_table_sensor": {
        "CassandraTableSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "CassandraTableSensor.cassandra_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraTableSensor.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraTableSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "cassandra_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "CassandraTableSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.pubsub_sensor": {
        "PubSubPullSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "PubSubPullSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.subscription": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PubSubPullSensor.max_messages": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "PubSubPullSensor.return_immediately": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubPullSensor.ack_messages": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PubSubPullSensor._messages": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "PubSubPullSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "max_messages": "int",
                    "return_immediately": "bool",
                    "ack_messages": "bool",
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PubSubPullSensor.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PubSubPullSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.bigquery_sensor": {
        "BigQueryTableSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BigQueryTableSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.dataset_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.table_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.bigquery_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryTableSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str",
                    "table_id": "str",
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BigQueryTableSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.mongo_sensor": {
        "MongoSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "MongoSensor.mongo_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoSensor.collection": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoSensor.query": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MongoSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "collection": "str",
                    "query": "int",
                    "mongo_conn_id": "str",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.sagemaker_training_sensor": {
        "SageMakerTrainingSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SageMakerTrainingSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SageMakerTrainingSensor.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerTrainingSensor.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerTrainingSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "region_name": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SageMakerTrainingSensor.non_terminal_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTrainingSensor.failed_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTrainingSensor.get_failed_reason_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTrainingSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTrainingSensor.get_sagemaker_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.sensors.emr_base_sensor": {
        "EmrBaseSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrBaseSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrBaseSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "EmrBaseSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.bash_sensor": {
        "BashSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BashSensor.bash_command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashSensor.env": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BashSensor.output_encoding": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bash_command": "str",
                    "env": "str | None",
                    "output_encoding": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BashSensor.sp": [
            {
                "type": "attr",
                "anno": "Popen"
            }
        ],
        "BashSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.file_sensor": {
        "FileSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "FileSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileSensor.filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileSensor.fs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "fs_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FileSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.ftp_sensor": {
        "FTPSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "FTPSensor.path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FTPSensor.ftp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FTPSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "ftp_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "FTPSensor._create_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPSSensor._create_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.emr_job_flow_sensor": {
        "EmrJobFlowSensor.NON_TERMINAL_STATES": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrJobFlowSensor.FAILED_STATE": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmrJobFlowSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "EmrJobFlowSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmrJobFlowSensor.job_flow_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrJobFlowSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_flow_id": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "EmrJobFlowSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "EmrJobFlowSensor.get_emr_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.sensors.qubole_sensor": {
        "QuboleSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "QuboleSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "QuboleSensor.data": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleSensor.qubole_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleFileSensor.sensor_class": [
            {
                "type": "attr",
                "anno": "FileSensor"
            }
        ],
        "QuboleFileSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QubolePartitionSensor.sensor_class": [
            {
                "type": "attr",
                "anno": "PartitionSensor"
            }
        ],
        "QubolePartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "str",
                    "qubole_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "contrib.sensors.sagemaker_tuning_sensor": {
        "SageMakerTuningSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SageMakerTuningSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SageMakerTuningSensor.job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerTuningSensor.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerTuningSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "job_name": "str",
                    "region_name": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SageMakerTuningSensor.non_terminal_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTuningSensor.failed_states": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerTuningSensor.get_failed_reason_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTuningSensor.state_from_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "SageMakerTuningSensor.get_sagemaker_response": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.ftp_hook": {
        "FTPHook.ftp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FTPHook.conn": [
            {
                "type": "attr",
                "anno": "ftplib.FTP"
            }
        ],
        "FTPHook.__init__": [
            {
                "type": "method",
                "args": {
                    "ftp_conn_id": "str"
                }
            }
        ],
        "FTPHook.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPHook.close_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPHook.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "Exception",
                    "exc_val": "Exception",
                    "exc_tb": "Exception"
                }
            }
        ],
        "FTPSHook.conn": [
            {
                "type": "attr",
                "anno": "ftplib.FTP"
            }
        ],
        "mlsd": [
            {
                "type": "func",
                "args": {
                    "conn": "ftplib.FTP",
                    "path": "str",
                    "facts": "list"
                }
            }
        ],
        "FTPHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPHook.get_mod_time": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPHook.rename": [
            {
                "type": "method",
                "args": {
                    "from_name": "str",
                    "to_name": "str"
                }
            }
        ],
        "FTPHook.delete_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPHook.create_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPHook.list_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "nlst": "bool"
                }
            }
        ],
        "FTPHook.describe_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "FTPSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FTPHook.store_file": [
            {
                "type": "method",
                "args": {
                    "remote_full_path": "str",
                    "local_full_path_or_buffer": "Union[str, ftplib.FTP, ftplib.FTP]"
                }
            }
        ],
        "FTPHook.retrieve_file": [
            {
                "type": "method",
                "args": {
                    "remote_full_path": "str",
                    "local_full_path_or_buffer": "Union[str, ftplib.FTP, ftplib.FTP]"
                }
            }
        ],
        "FTPHook.delete_file": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ]
    },
    "contrib.hooks.azure_data_lake_hook": {
        "AzureDataLakeHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureDataLakeHook.connection": [
            {
                "type": "attr",
                "anno": "multithread.ADLUploader"
            }
        ],
        "AzureDataLakeHook.account_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureDataLakeHook.check_for_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "AzureDataLakeHook.upload_file": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "remote_path": "str",
                    "nthreads": "int",
                    "overwrite": "bool",
                    "buffersize": "int",
                    "blocksize": "int"
                }
            }
        ],
        "AzureDataLakeHook.download_file": [
            {
                "type": "method",
                "args": {
                    "local_path": "str",
                    "remote_path": "str",
                    "nthreads": "int",
                    "overwrite": "bool",
                    "buffersize": "int",
                    "blocksize": "int"
                }
            }
        ],
        "AzureDataLakeHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureDataLakeHook.__init__": [
            {
                "type": "method",
                "args": {
                    "azure_data_lake_conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.discord_webhook_hook": {
        "DiscordWebhookHook.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.webhook_endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.avatar_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook.tts": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DiscordWebhookHook.proxy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DiscordWebhookHook._build_discord_payload": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DiscordWebhookHook.execute": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DiscordWebhookHook._get_webhook_endpoint": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_endpoint": "str"
                }
            }
        ],
        "DiscordWebhookHook.__init__": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_endpoint": "str",
                    "message": "str",
                    "username": "str",
                    "avatar_url": "str",
                    "tts": "bool",
                    "proxy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.hooks.qubole_check_hook": {
        "COL_DELIM": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ROW_DELIM": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "isint": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "isfloat": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "isbool": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "parse_first_row": [
            {
                "type": "func",
                "args": {
                    "row_list": "list"
                }
            }
        ],
        "QuboleCheckHook.results_parser_callable": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "QuboleCheckHook.context": [
            {
                "type": "attr",
                "anno": "Command"
            }
        ],
        "QuboleCheckHook.__init__": [
            {
                "type": "method",
                "args": {
                    "context": "Command",
                    "args": "list",
                    "kwargs": "list"
                }
            }
        ],
        "QuboleCheckHook.get_first": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "QuboleCheckHook.handle_failure_retry": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleCheckHook.get_query_results": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.spark_jdbc_hook": {
        "SparkJDBCHook._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkJDBCHook._py_files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._num_executors": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._executor_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._driver_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCHook._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._cmd_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_driver": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._metastore_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_truncate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCHook._save_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCHook._save_format": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkJDBCHook._batch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._fetch_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._num_partitions": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._partition_column": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._lower_bound": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._upper_bound": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkJDBCHook._create_table_column_types": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkJDBCHook._jdbc_connection": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkJDBCHook._build_jdbc_application_arguments": [
            {
                "type": "method",
                "args": {
                    "jdbc_conn": "dict"
                }
            }
        ],
        "SparkJDBCHook._application_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SparkJDBCHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkJDBCHook._resolve_jdbc_connection": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkJDBCHook.__init__": [
            {
                "type": "method",
                "args": {
                    "spark_app_name": "str",
                    "spark_conn_id": "str",
                    "spark_conf": "dict",
                    "spark_py_files": "str",
                    "spark_files": "str",
                    "spark_jars": "str",
                    "num_executors": "int",
                    "executor_cores": "int",
                    "executor_memory": "int",
                    "driver_memory": "int",
                    "verbose": "bool",
                    "principal": "str",
                    "keytab": "str",
                    "cmd_type": "str",
                    "jdbc_table": "str",
                    "jdbc_conn_id": "str",
                    "jdbc_driver": "str",
                    "metastore_table": "str",
                    "jdbc_truncate": "bool",
                    "save_mode": "bool",
                    "save_format": "bool",
                    "batch_size": "int",
                    "fetch_size": "int",
                    "num_partitions": "int",
                    "partition_column": "str",
                    "lower_bound": "int",
                    "upper_bound": "int",
                    "create_table_column_types": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SparkJDBCHook.submit_jdbc_job": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.snowflake_hook": {
        "SnowflakeHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SnowflakeHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SnowflakeHook.account": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "SnowflakeHook.warehouse": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "SnowflakeHook.database": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "SnowflakeHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SnowflakeHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "snowflake.connector.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "SnowflakeHook._get_aws_credentials": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnowflakeHook._get_conn_params": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnowflakeHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SnowflakeHook.get_uri": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.aws_dynamodb_hook": {
        "AwsDynamoDBHook.table_keys": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsDynamoDBHook.table_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsDynamoDBHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsDynamoDBHook.__init__": [
            {
                "type": "method",
                "args": {
                    "table_keys": "str",
                    "table_name": "str",
                    "region_name": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AwsDynamoDBHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsDynamoDBHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsDynamoDBHook.write_batch_data": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ]
    },
    "contrib.hooks.cloudant_hook": {
        "CloudantHook.cloudant_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CloudantHook.__init__": [
            {
                "type": "method",
                "args": {
                    "cloudant_conn_id": "str"
                }
            }
        ],
        "CloudantHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CloudantHook.db": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcp_mlengine_hook": {
        "MLEngineHook._mlengine": [
            {
                "type": "attr",
                "anno": "build.Cloud"
            }
        ],
        "_poll_with_exponential_delay": [
            {
                "type": "func",
                "args": {
                    "request": "build.Request",
                    "max_n": "int",
                    "is_done_func": "bool",
                    "is_error_func": "bool"
                }
            }
        ],
        "MLEngineHook.create_version": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model_name": "str",
                    "version_spec": "dict"
                }
            }
        ],
        "MLEngineHook.create_job": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job": "dict",
                    "use_existing_job_fn": "bool"
                }
            }
        ],
        "MLEngineHook.create_model": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model": "dict"
                }
            }
        ],
        "MLEngineHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MLEngineHook.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "MLEngineHook.get_model": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model_name": "str"
                }
            }
        ],
        "MLEngineHook.delete_version": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model_name": "str",
                    "version_name": "str"
                }
            }
        ],
        "MLEngineHook.list_versions": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model_name": "str"
                }
            }
        ],
        "MLEngineHook.set_default_version": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "model_name": "str",
                    "version_name": "str"
                }
            }
        ],
        "MLEngineHook._get_job": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_id": "str"
                }
            }
        ],
        "MLEngineHook._wait_for_job_done": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job_id": "str",
                    "interval": "int"
                }
            }
        ]
    },
    "contrib.hooks.datadog_hook": {
        "DatadogHook.api_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogHook.app_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogHook.source_type_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogHook.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatadogHook.__init__": [
            {
                "type": "method",
                "args": {
                    "datadog_conn_id": "str"
                }
            }
        ],
        "DatadogHook.validate_response": [
            {
                "type": "method",
                "args": {
                    "response": "dict"
                }
            }
        ],
        "DatadogHook.post_event": [
            {
                "type": "method",
                "args": {
                    "title": "str",
                    "text": "str",
                    "tags": "dict",
                    "alert_type": "str",
                    "aggregation_key": "str"
                }
            }
        ],
        "DatadogHook.query_metric": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "from_seconds_ago": "int",
                    "to_seconds_ago": "int"
                }
            }
        ],
        "DatadogHook.send_metric": [
            {
                "type": "method",
                "args": {
                    "metric_name": "str",
                    "datapoint": "dict",
                    "tags": "dict"
                }
            }
        ]
    },
    "contrib.hooks.jenkins_hook": {
        "JenkinsHook.connection": [
            {
                "type": "attr",
                "anno": "jenkins.Connection"
            }
        ],
        "JenkinsHook.jenkins_server": [
            {
                "type": "attr",
                "anno": "jenkins.Jenkins"
            }
        ],
        "JenkinsHook.get_jenkins_server": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JenkinsHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.datastore_hook": {
        "DatastoreHook.connection": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "DatastoreHook.admin_connection": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "DatastoreHook.commit": [
            {
                "type": "method",
                "args": {
                    "body": "dict"
                }
            }
        ],
        "DatastoreHook.lookup": [
            {
                "type": "method",
                "args": {
                    "keys": "list",
                    "read_consistency": "bool",
                    "transaction": "str"
                }
            }
        ],
        "DatastoreHook.rollback": [
            {
                "type": "method",
                "args": {
                    "transaction": "str"
                }
            }
        ],
        "DatastoreHook.run_query": [
            {
                "type": "method",
                "args": {
                    "body": "str"
                }
            }
        ],
        "DatastoreHook.get_operation": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "DatastoreHook.poll_operation_until_done": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "polling_interval_in_seconds": "int"
                }
            }
        ],
        "DatastoreHook.import_from_storage_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "file": "str",
                    "namespace": "str",
                    "entity_filter": "dict",
                    "labels": "dict"
                }
            }
        ],
        "DatastoreHook.get_conn": [
            {
                "type": "method",
                "args": {
                    "version": "str"
                }
            }
        ],
        "DatastoreHook.__init__": [
            {
                "type": "method",
                "args": {
                    "datastore_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "DatastoreHook.export_to_storage_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "namespace": "str",
                    "entity_filter": "dict",
                    "labels": "dict"
                }
            }
        ],
        "DatastoreHook.delete_operation": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "DatastoreHook.begin_transaction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DatastoreHook.allocate_ids": [
            {
                "type": "method",
                "args": {
                    "partialKeys": "dict"
                }
            }
        ]
    },
    "contrib.hooks.gcp_container_hook": {
        "OPERATIONAL_POLL_INTERVAL": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GKEClusterHook.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterHook.location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GKEClusterHook.client": [
            {
                "type": "attr",
                "anno": "container_v1.ClusterManagerClient"
            }
        ],
        "GKEClusterHook.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "location": "str"
                }
            }
        ],
        "GKEClusterHook._dict_to_proto": [
            {
                "type": "method",
                "args": {
                    "py_dict": "dict",
                    "proto": "str"
                }
            }
        ],
        "GKEClusterHook.get_operation": [
            {
                "type": "method",
                "args": {
                    "operation_name": "str"
                }
            }
        ],
        "GKEClusterHook._append_label": [
            {
                "type": "method",
                "args": {
                    "cluster_proto": "Cluster",
                    "key": "str",
                    "val": "str"
                }
            }
        ],
        "GKEClusterHook.get_cluster": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "retry": "int",
                    "timeout": "int"
                }
            }
        ],
        "GKEClusterHook.wait_for_operation": [
            {
                "type": "method",
                "args": {
                    "operation": "Operation"
                }
            }
        ],
        "GKEClusterHook.create_cluster": [
            {
                "type": "method",
                "args": {
                    "cluster": "Cluster",
                    "retry": "int",
                    "timeout": "int"
                }
            }
        ],
        "GKEClusterHook.delete_cluster": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "retry": "int",
                    "timeout": "int"
                }
            }
        ]
    },
    "contrib.hooks.spark_submit_hook": {
        "SparkSubmitHook._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._files": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._py_files": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._driver_classpath": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._jars": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._java_class": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._packages": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._exclude_packages": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._repositories": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._total_executor_cores": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._executor_cores": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._executor_memory": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._driver_memory": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._keytab": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._principal": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._num_executors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._application_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._env_vars": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitHook._submit_sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "SparkSubmitHook._yarn_application_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._kubernetes_driver_pod": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._connection": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._is_yarn": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitHook._is_kubernetes": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitHook._should_track_driver_status": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSubmitHook._driver_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._driver_status": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSubmitHook._spark_exit_code": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSubmitHook._resolve_should_track_driver_status": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._get_spark_binary_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._env": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SparkSubmitHook._resolve_connection": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conf": "dict",
                    "conn_id": "str",
                    "files": "dict",
                    "py_files": "dict",
                    "driver_classpath": "dict",
                    "jars": "dict",
                    "java_class": "dict",
                    "packages": "dict",
                    "exclude_packages": "dict",
                    "repositories": "dict",
                    "total_executor_cores": "dict",
                    "executor_cores": "dict",
                    "executor_memory": "dict",
                    "driver_memory": "dict",
                    "keytab": "dict",
                    "principal": "dict",
                    "name": "str",
                    "num_executors": "dict",
                    "application_args": "dict",
                    "env_vars": "dict",
                    "verbose": "bool"
                }
            }
        ],
        "SparkSubmitHook._build_spark_driver_kill_command": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._process_spark_status_log": [
            {
                "type": "method",
                "args": {
                    "itr": "list"
                }
            }
        ],
        "SparkSubmitHook._process_spark_submit_log": [
            {
                "type": "method",
                "args": {
                    "itr": "list"
                }
            }
        ],
        "SparkSubmitHook._build_track_driver_status_command": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._start_driver_status_tracking": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSubmitHook._build_spark_submit_command": [
            {
                "type": "method",
                "args": {
                    "application": "str"
                }
            }
        ],
        "SparkSubmitHook.submit": [
            {
                "type": "method",
                "args": {
                    "application": "str",
                    "kwargs": "dict"
                }
            }
        ]
    },
    "contrib.hooks.fs_hook": {
        "FSHook.basepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FSHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "FSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FSHook.get_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FSHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.gcp_dataflow_hook": {
        "DEFAULT_DATAFLOW_LOCATION": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_DataflowJob._dataflow": [
            {
                "type": "attr",
                "anno": "_Dataflow"
            }
        ],
        "_DataflowJob._project_number": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob._job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob._job_location": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob._job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataflowJob._job": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "_DataflowJob._poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DataflowJob.get": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_Dataflow._proc": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "_Dataflow._extract_job": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "DataFlowHook.poll_sleep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DataFlowHook.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "poll_sleep": "int"
                }
            }
        ],
        "DataFlowHook._set_variables": [
            {
                "type": "method",
                "args": {
                    "variables": "dict"
                }
            }
        ],
        "DataFlowHook._build_cmd": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "variables": "dict",
                    "label_formatter": "Callable[[str], str]"
                }
            }
        ],
        "DataFlowHook._build_dataflow_job_name": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "append_job_name": "bool"
                }
            }
        ],
        "_DataflowJob._get_job_id_from_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DataflowJob._get_job": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DataflowJob.__init__": [
            {
                "type": "method",
                "args": {
                    "dataflow": "_Dataflow",
                    "project_number": "str",
                    "name": "str",
                    "location": "str",
                    "poll_sleep": "int",
                    "job_id": "str"
                }
            }
        ],
        "_DataflowJob.wait_for_done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataFlowHook._start_dataflow": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "variables": "dict",
                    "name": "str",
                    "command_prefix": "list",
                    "label_formatter": "Callable[[str], str]"
                }
            }
        ],
        "DataFlowHook.start_python_dataflow": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "variables": "dict",
                    "dataflow": "str",
                    "py_options": "list",
                    "append_job_name": "bool"
                }
            }
        ],
        "DataFlowHook.start_java_dataflow": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "variables": "dict",
                    "dataflow": "str",
                    "job_class": "str",
                    "append_job_name": "bool"
                }
            }
        ],
        "DataFlowHook._start_template_dataflow": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "variables": "dict",
                    "parameters": "dict",
                    "dataflow_template": "str"
                }
            }
        ],
        "DataFlowHook.start_template_dataflow": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "variables": "dict",
                    "parameters": "dict",
                    "dataflow_template": "str",
                    "append_job_name": "bool"
                }
            }
        ],
        "_Dataflow.__init__": [
            {
                "type": "method",
                "args": {
                    "cmd": "list"
                }
            }
        ],
        "_Dataflow._line": [
            {
                "type": "method",
                "args": {
                    "fd": "int"
                }
            }
        ],
        "_Dataflow.wait_for_done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataFlowHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.spark_sql_hook": {
        "SparkSqlHook._sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._conf": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SparkSqlHook._total_executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlHook._executor_cores": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlHook._executor_memory": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlHook._keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._principal": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._master": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._num_executors": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SparkSqlHook._verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SparkSqlHook._yarn_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SparkSqlHook._sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "SparkSqlHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SparkSqlHook.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "conf": "str",
                    "conn_id": "str",
                    "total_executor_cores": "int",
                    "executor_cores": "int",
                    "executor_memory": "int",
                    "keytab": "str",
                    "principal": "str",
                    "master": "str",
                    "name": "str",
                    "num_executors": "int",
                    "verbose": "bool",
                    "yarn_queue": "str"
                }
            }
        ],
        "SparkSqlHook._prepare_command": [
            {
                "type": "method",
                "args": {
                    "cmd": "str"
                }
            }
        ],
        "SparkSqlHook.run_query": [
            {
                "type": "method",
                "args": {
                    "cmd": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "SparkSqlHook.kill": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.spark_jdbc_script": {
        "set_common_options": [
            {
                "type": "func",
                "args": {
                    "spark_source": "SparkSession",
                    "url": "str",
                    "jdbc_table": "str",
                    "user": "str",
                    "password": "str",
                    "driver": "str"
                }
            }
        ],
        "parser": [
            {
                "type": "var",
                "anno": "argparse.ArgumentParser"
            }
        ],
        "arguments": [
            {
                "type": "var",
                "anno": "argparse.Namespace"
            }
        ],
        "spark": [
            {
                "type": "var",
                "anno": "SparkSession"
            }
        ],
        "spark_write_to_jdbc": [
            {
                "type": "func",
                "args": {
                    "spark": "SparkSession",
                    "url": "str",
                    "user": "str",
                    "password": "str",
                    "metastore_table": "str",
                    "jdbc_table": "str",
                    "driver": "str",
                    "truncate": "bool",
                    "save_mode": "str",
                    "batch_size": "int",
                    "num_partitions": "int",
                    "create_table_column_types": "bool"
                }
            }
        ],
        "spark_read_from_jdbc": [
            {
                "type": "func",
                "args": {
                    "spark": "SparkSession",
                    "url": "str",
                    "user": "str",
                    "password": "str",
                    "metastore_table": "str",
                    "jdbc_table": "str",
                    "driver": "str",
                    "save_mode": "str",
                    "save_format": "str",
                    "fetch_size": "int",
                    "num_partitions": "int",
                    "partition_column": "str",
                    "lower_bound": "int",
                    "upper_bound": "int"
                }
            }
        ]
    },
    "contrib.hooks.databricks_hook": {
        "RESTART_CLUSTER_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "START_CLUSTER_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "TERMINATE_CLUSTER_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "SUBMIT_RUN_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "GET_RUN_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "CANCEL_RUN_ENDPOINT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "USER_AGENT_HEADER": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "DatabricksHook.databricks_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatabricksHook.databricks_conn": [
            {
                "type": "attr",
                "anno": "BaseHook"
            }
        ],
        "DatabricksHook.timeout_seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksHook.retry_limit": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DatabricksHook.retry_delay": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_retryable_error": [
            {
                "type": "func",
                "args": {
                    "exception": "AirflowException"
                }
            }
        ],
        "RUN_LIFE_CYCLE_STATES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "RunState.life_cycle_state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunState.result_state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunState.state_message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunState.__init__": [
            {
                "type": "method",
                "args": {
                    "life_cycle_state": "str",
                    "result_state": "str",
                    "state_message": "str"
                }
            }
        ],
        "RunState.is_terminal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RunState.is_successful": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RunState.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "RunState"
                }
            }
        ],
        "RunState.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TokenAuth.token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_TokenAuth.__init__": [
            {
                "type": "method",
                "args": {
                    "token": "str"
                }
            }
        ],
        "DatabricksHook._parse_host": [
            {
                "type": "method",
                "args": {
                    "host": "str"
                }
            }
        ],
        "_TokenAuth.__call__": [
            {
                "type": "method",
                "args": {
                    "r": "requests.Session"
                }
            }
        ],
        "DatabricksHook.__init__": [
            {
                "type": "method",
                "args": {
                    "databricks_conn_id": "str",
                    "timeout_seconds": "int",
                    "retry_limit": "int",
                    "retry_delay": "float"
                }
            }
        ],
        "DatabricksHook._log_request_error": [
            {
                "type": "method",
                "args": {
                    "attempt_num": "int",
                    "error": "AirflowException"
                }
            }
        ],
        "DatabricksHook._do_api_call": [
            {
                "type": "method",
                "args": {
                    "endpoint_info": "tuple",
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.terminate_cluster": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.start_cluster": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.restart_cluster": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ],
        "DatabricksHook.cancel_run": [
            {
                "type": "method",
                "args": {
                    "run_id": "str"
                }
            }
        ],
        "DatabricksHook.get_run_state": [
            {
                "type": "method",
                "args": {
                    "run_id": "str"
                }
            }
        ],
        "DatabricksHook.get_run_page_url": [
            {
                "type": "method",
                "args": {
                    "run_id": "str"
                }
            }
        ],
        "DatabricksHook.submit_run": [
            {
                "type": "method",
                "args": {
                    "json": "dict"
                }
            }
        ]
    },
    "contrib.hooks.pinot_hook": {
        "PinotDbApiHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PinotDbApiHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PinotDbApiHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PinotDbApiHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PinotDbApiHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "connect.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "PinotDbApiHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "PinotDbApiHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ],
        "PinotDbApiHook.get_records": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "PinotDbApiHook.get_first": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "PinotDbApiHook.get_uri": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PinotDbApiHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.salesforce_hook": {
        "SalesforceHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SalesforceHook._args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SalesforceHook._kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SalesforceHook.connection": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SalesforceHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SalesforceHook.sf": [
            {
                "type": "attr",
                "anno": "Salesforce"
            }
        ],
        "SalesforceHook._build_field_list": [
            {
                "type": "method",
                "args": {
                    "fields": "list"
                }
            }
        ],
        "SalesforceHook.sign_in": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SalesforceHook.describe_object": [
            {
                "type": "method",
                "args": {
                    "obj": "str"
                }
            }
        ],
        "SalesforceHook.get_available_fields": [
            {
                "type": "method",
                "args": {
                    "obj": "str"
                }
            }
        ],
        "SalesforceHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "SalesforceHook.make_query": [
            {
                "type": "method",
                "args": {
                    "query": "str"
                }
            }
        ],
        "SalesforceHook.get_object_from_salesforce": [
            {
                "type": "method",
                "args": {
                    "obj": "str",
                    "fields": "list"
                }
            }
        ],
        "SalesforceHook._to_timestamp": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "col": "pd.Series"
                }
            }
        ],
        "SalesforceHook.write_object_to_file": [
            {
                "type": "method",
                "args": {
                    "query_results": "list",
                    "filename": "str",
                    "fmt": "str",
                    "coerce_to_timestamp": "bool",
                    "record_time_added": "bool"
                }
            }
        ]
    },
    "contrib.hooks.redis_hook": {
        "RedisHook.redis_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisHook.client": [
            {
                "type": "attr",
                "anno": "StrictRedis"
            }
        ],
        "RedisHook.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisHook.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RedisHook.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedisHook.db": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "RedisHook.__init__": [
            {
                "type": "method",
                "args": {
                    "redis_conn_id": "str"
                }
            }
        ],
        "RedisHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedisHook.key_exists": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ]
    },
    "contrib.hooks.winrm_hook": {
        "WinRMHook.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.remote_port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WinRMHook.transport": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.service": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.keytab": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.ca_trust_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.cert_pem": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.cert_key_pem": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.server_cert_validation": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.kerberos_delegation": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WinRMHook.read_timeout_sec": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WinRMHook.operation_timeout_sec": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "WinRMHook.kerberos_hostname_override": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.message_encryption": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.credssp_disable_tlsv1_2": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WinRMHook.send_cbt": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WinRMHook.client": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WinRMHook.winrm_protocol": [
            {
                "type": "attr",
                "anno": "Protocol"
            }
        ],
        "WinRMHook.__init__": [
            {
                "type": "method",
                "args": {
                    "ssh_conn_id": "str",
                    "endpoint": "str",
                    "remote_host": "str",
                    "remote_port": "int",
                    "transport": "str",
                    "username": "str",
                    "password": "str",
                    "service": "str",
                    "keytab": "str",
                    "ca_trust_path": "str",
                    "cert_pem": "str",
                    "cert_key_pem": "str",
                    "server_cert_validation": "str",
                    "kerberos_delegation": "bool",
                    "read_timeout_sec": "int",
                    "operation_timeout_sec": "int",
                    "kerberos_hostname_override": "str",
                    "message_encryption": "str",
                    "credssp_disable_tlsv1_2": "bool",
                    "send_cbt": "bool"
                }
            }
        ],
        "WinRMHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.sqoop_hook": {
        "SqoopHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SqoopHook.job_tracker": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.namenode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.libjars": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.files": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.archives": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.password_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.hcatalog_database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.hcatalog_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqoopHook.num_mappers": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqoopHook.properties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SqoopHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SqoopHook.sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "SqoopHook._get_export_format_argument": [
            {
                "type": "method",
                "args": {
                    "file_type": "str"
                }
            }
        ],
        "SqoopHook._prepare_command": [
            {
                "type": "method",
                "args": {
                    "export": "bool"
                }
            }
        ],
        "SqoopHook._export_cmd": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "export_dir": "str",
                    "input_null_string": "bool",
                    "input_null_non_string": "bool",
                    "staging_table": "bool",
                    "clear_staging_table": "bool",
                    "enclosed_by": "bool",
                    "escaped_by": "bool",
                    "input_fields_terminated_by": "bool",
                    "input_lines_terminated_by": "bool",
                    "input_optionally_enclosed_by": "bool",
                    "batch": "bool",
                    "relaxed_isolation": "bool",
                    "extra_export_options": "dict"
                }
            }
        ],
        "SqoopHook._import_cmd": [
            {
                "type": "method",
                "args": {
                    "target_dir": "str",
                    "append": "bool",
                    "file_type": "str",
                    "split_by": "str",
                    "direct": "bool",
                    "driver": "str",
                    "extra_import_options": "dict"
                }
            }
        ],
        "SqoopHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "verbose": "bool",
                    "num_mappers": "str",
                    "hcatalog_database": "str",
                    "hcatalog_table": "str",
                    "properties": "dict"
                }
            }
        ],
        "SqoopHook.cmd_mask_password": [
            {
                "type": "method",
                "args": {
                    "cmd_orig": "list"
                }
            }
        ],
        "SqoopHook.Popen": [
            {
                "type": "method",
                "args": {
                    "cmd": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "SqoopHook.export_table": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "export_dir": "str",
                    "input_null_string": "bool",
                    "input_null_non_string": "bool",
                    "staging_table": "bool",
                    "clear_staging_table": "bool",
                    "enclosed_by": "bool",
                    "escaped_by": "bool",
                    "input_fields_terminated_by": "bool",
                    "input_lines_terminated_by": "bool",
                    "input_optionally_enclosed_by": "bool",
                    "batch": "bool",
                    "relaxed_isolation": "bool",
                    "extra_export_options": "dict"
                }
            }
        ],
        "SqoopHook.import_query": [
            {
                "type": "method",
                "args": {
                    "query": "str",
                    "target_dir": "str",
                    "append": "bool",
                    "file_type": "str",
                    "split_by": "str",
                    "direct": "bool",
                    "driver": "str",
                    "extra_import_options": "dict"
                }
            }
        ],
        "SqoopHook.import_table": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "target_dir": "str",
                    "append": "bool",
                    "file_type": "str",
                    "columns": "str",
                    "split_by": "str",
                    "where": "str",
                    "direct": "bool",
                    "driver": "str",
                    "extra_import_options": "dict"
                }
            }
        ]
    },
    "contrib.hooks.cassandra_hook": {
        "CassandraHook.cluster": [
            {
                "type": "attr",
                "anno": "Cluster"
            }
        ],
        "CassandraHook.keyspace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CassandraHook.session": [
            {
                "type": "attr",
                "anno": "settings.Session"
            }
        ],
        "CassandraHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CassandraHook.get_cluster": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CassandraHook.shutdown_cluster": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CassandraHook.table_exists": [
            {
                "type": "method",
                "args": {
                    "table": "str"
                }
            }
        ],
        "CassandraHook.get_lb_policy": [
            {
                "type": "method",
                "args": {
                    "policy_name": "str",
                    "policy_args": "dict"
                }
            }
        ],
        "CassandraHook.__init__": [
            {
                "type": "method",
                "args": {
                    "cassandra_conn_id": "str"
                }
            }
        ],
        "CassandraHook.record_exists": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "keys": "dict"
                }
            }
        ]
    },
    "contrib.hooks.slack_webhook_hook": {
        "SlackWebhookHook.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.webhook_token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.channel": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.icon_emoji": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook.link_names": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlackWebhookHook.proxy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackWebhookHook._build_slack_message": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SlackWebhookHook.execute": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SlackWebhookHook._get_token": [
            {
                "type": "method",
                "args": {
                    "token": "str",
                    "http_conn_id": "str"
                }
            }
        ],
        "SlackWebhookHook.__init__": [
            {
                "type": "method",
                "args": {
                    "http_conn_id": "str",
                    "webhook_token": "str",
                    "message": "str",
                    "channel": "str",
                    "username": "str",
                    "icon_emoji": "str",
                    "link_names": "bool",
                    "proxy": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.hooks.vertica_hook": {
        "VerticaHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VerticaHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "VerticaHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.segment_hook": {
        "SegmentHook.segment_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentHook.segment_debug_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SegmentHook._args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SegmentHook._kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SegmentHook.connection": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SegmentHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SegmentHook.write_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SegmentHook.__init__": [
            {
                "type": "method",
                "args": {
                    "segment_conn_id": "str",
                    "segment_debug_mode": "bool",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "SegmentHook.on_error": [
            {
                "type": "method",
                "args": {
                    "error": "str",
                    "items": "list"
                }
            }
        ],
        "SegmentHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.gcs_hook": {
        "GoogleCloudStorageHook.__init__": [
            {
                "type": "method",
                "args": {
                    "google_cloud_storage_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "_parse_gcs_url": [
            {
                "type": "func",
                "args": {
                    "gsurl": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.copy": [
            {
                "type": "method",
                "args": {
                    "source_bucket": "str",
                    "source_object": "str",
                    "destination_bucket": "str",
                    "destination_object": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.rewrite": [
            {
                "type": "method",
                "args": {
                    "source_bucket": "str",
                    "source_object": "str",
                    "destination_bucket": "str",
                    "destination_object": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.download": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "filename": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.upload": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "filename": "str",
                    "mime_type": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.exists": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.delete": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "generation": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.list": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "versions": "int",
                    "maxResults": "int",
                    "prefix": "str",
                    "delimiter": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.create_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "storage_class": "str",
                    "location": "str",
                    "project_id": "str",
                    "labels": "dict"
                }
            }
        ],
        "GoogleCloudStorageHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleCloudStorageHook.get_md5hash": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.get_crc32c": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.get_size": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str"
                }
            }
        ],
        "GoogleCloudStorageHook.is_updated_after": [
            {
                "type": "method",
                "args": {
                    "bucket": "str",
                    "object": "str",
                    "ts": "dateutil.Date"
                }
            }
        ]
    },
    "contrib.hooks.sagemaker_hook": {
        "SageMakerHook.sagemaker_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerHook.use_db_config": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SageMakerHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerHook.check_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerHook.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SageMakerHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SageMakerHook.list_training_job": [
            {
                "type": "method",
                "args": {
                    "name_contains": "str",
                    "status_equals": "str"
                }
            }
        ],
        "SageMakerHook.list_tuning_job": [
            {
                "type": "method",
                "args": {
                    "name_contains": "str",
                    "status_equals": "str"
                }
            }
        ],
        "SageMakerHook.describe_training_job": [
            {
                "type": "method",
                "args": {
                    "training_job_name": "str"
                }
            }
        ],
        "SageMakerHook.describe_tuning_job": [
            {
                "type": "method",
                "args": {
                    "tuning_job_name": "str"
                }
            }
        ],
        "SageMakerHook.check_for_url": [
            {
                "type": "method",
                "args": {
                    "s3url": "str"
                }
            }
        ],
        "SageMakerHook.check_valid_tuning_input": [
            {
                "type": "method",
                "args": {
                    "tuning_config": "dict"
                }
            }
        ],
        "SageMakerHook.check_valid_training_input": [
            {
                "type": "method",
                "args": {
                    "training_config": "dict"
                }
            }
        ],
        "SageMakerHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SageMakerHook.__init__": [
            {
                "type": "method",
                "args": {
                    "sagemaker_conn_id": "str",
                    "use_db_config": "bool",
                    "region_name": "str",
                    "check_interval": "int",
                    "max_ingestion_time": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SageMakerHook.check_status": [
            {
                "type": "method",
                "args": {
                    "non_terminal_states": "list",
                    "failed_state": "list",
                    "key": "str",
                    "describe_function": "dict",
                    "args": "str"
                }
            }
        ],
        "SageMakerHook.create_tuning_job": [
            {
                "type": "method",
                "args": {
                    "tuning_job_config": "dict",
                    "wait_for_completion": "bool"
                }
            }
        ],
        "SageMakerHook.create_training_job": [
            {
                "type": "method",
                "args": {
                    "training_job_config": "dict",
                    "wait_for_completion": "bool"
                }
            }
        ]
    },
    "contrib.hooks.bigquery_hook": {
        "BigQueryHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryHook.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryHook.__init__": [
            {
                "type": "method",
                "args": {
                    "bigquery_conn_id": "str",
                    "delegate_to": "str",
                    "use_legacy_sql": "bool"
                }
            }
        ],
        "BigQueryHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ],
        "BigQueryPandasConnector.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryPandasConnector.reauth": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryPandasConnector.service": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryPandasConnector.verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryPandasConnector.dialect": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryPandasConnector.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "service": "str",
                    "reauth": "bool",
                    "verbose": "bool",
                    "dialect": "str"
                }
            }
        ],
        "BigQueryConnection._args": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BigQueryConnection._kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BigQueryConnection.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "BigQueryConnection.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryConnection.commit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryConnection.rollback": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryBaseCursor.service": [
            {
                "type": "attr",
                "anno": "bigquery.BigQuery"
            }
        ],
        "BigQueryBaseCursor.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryBaseCursor.use_legacy_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryBaseCursor.running_job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BigQueryBaseCursor.__init__": [
            {
                "type": "method",
                "args": {
                    "service": "bigquery.BigQuery",
                    "project_id": "str",
                    "use_legacy_sql": "bool"
                }
            }
        ],
        "BigQueryCursor.buffersize": [
            {
                "type": "attr",
                "anno": "int | None"
            }
        ],
        "BigQueryCursor.page_token": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BigQueryCursor.job_id": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BigQueryCursor.buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BigQueryCursor.all_pages_loaded": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BigQueryCursor.__init__": [
            {
                "type": "method",
                "args": {
                    "service": "str",
                    "project_id": "str",
                    "use_legacy_sql": "bool"
                }
            }
        ],
        "BigQueryConnection.cursor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.description": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.rowcount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.get_arraysize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.set_arraysize": [
            {
                "type": "method",
                "args": {
                    "arraysize": "int"
                }
            }
        ],
        "BigQueryCursor.arraysize": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BigQueryCursor.setinputsizes": [
            {
                "type": "method",
                "args": {
                    "sizes": "list[int]"
                }
            }
        ],
        "BigQueryCursor.setoutputsize": [
            {
                "type": "method",
                "args": {
                    "size": "int",
                    "column": "str"
                }
            }
        ],
        "_bq_cast": [
            {
                "type": "func",
                "args": {
                    "string_field": "str | None",
                    "bq_type": "str"
                }
            }
        ],
        "_escape": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_bind_parameters": [
            {
                "type": "func",
                "args": {
                    "operation": "str",
                    "parameters": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.run_table_delete": [
            {
                "type": "method",
                "args": {
                    "deletion_dataset_table": "str",
                    "ignore_if_missing": "bool"
                }
            }
        ],
        "BigQueryBaseCursor.create_external_table": [
            {
                "type": "method",
                "args": {
                    "external_project_dataset_table": "str",
                    "schema_fields": "dict",
                    "source_uris": "list[str]",
                    "source_format": "str",
                    "autodetect": "bool",
                    "compression": "str",
                    "ignore_unknown_values": "bool",
                    "max_bad_records": "int",
                    "skip_leading_rows": "int",
                    "field_delimiter": "str",
                    "quote_character": "str",
                    "allow_quoted_newlines": "bool",
                    "allow_jagged_rows": "bool",
                    "src_fmt_configs": "dict",
                    "labels": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.run_with_configuration": [
            {
                "type": "method",
                "args": {
                    "configuration": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.run_query": [
            {
                "type": "method",
                "args": {
                    "bql": "str",
                    "sql": "str",
                    "destination_dataset_table": "bool",
                    "write_disposition": "str",
                    "allow_large_results": "bool",
                    "flatten_results": "bool",
                    "udf_config": "bool",
                    "use_legacy_sql": "bool",
                    "maximum_billing_tier": "int",
                    "maximum_bytes_billed": "int",
                    "create_disposition": "str",
                    "query_params": "dict",
                    "labels": "dict",
                    "schema_update_options": "dict",
                    "priority": "str",
                    "time_partitioning": "dict"
                }
            }
        ],
        "BigQueryCursor.execute": [
            {
                "type": "method",
                "args": {
                    "operation": "str",
                    "parameters": "dict"
                }
            }
        ],
        "BigQueryCursor.executemany": [
            {
                "type": "method",
                "args": {
                    "operation": "str",
                    "seq_of_parameters": "list"
                }
            }
        ],
        "BigQueryBaseCursor.get_tabledata": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str",
                    "max_results": "int",
                    "selected_fields": "str",
                    "page_token": "str",
                    "start_index": "int"
                }
            }
        ],
        "BigQueryBaseCursor.delete_dataset": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str"
                }
            }
        ],
        "BigQueryCursor.next": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.fetchone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.fetchall": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_split_tablename": [
            {
                "type": "func",
                "args": {
                    "table_input": "str",
                    "default_project_id": "str",
                    "var_name": "str"
                }
            }
        ],
        "BigQueryBaseCursor.run_copy": [
            {
                "type": "method",
                "args": {
                    "source_project_dataset_tables": "str",
                    "destination_project_dataset_table": "str",
                    "write_disposition": "str",
                    "create_disposition": "str",
                    "labels": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.run_extract": [
            {
                "type": "method",
                "args": {
                    "source_project_dataset_table": "str",
                    "destination_cloud_storage_uris": "str",
                    "compression": "str",
                    "export_format": "str",
                    "field_delimiter": "str",
                    "print_header": "bool",
                    "labels": "dict"
                }
            }
        ],
        "BigQueryHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict",
                    "dialect": "str"
                }
            }
        ],
        "_cleanse_time_partitioning": [
            {
                "type": "func",
                "args": {
                    "destination_dataset_table": "str",
                    "time_partitioning_in": "dict"
                }
            }
        ],
        "BigQueryBaseCursor.run_load": [
            {
                "type": "method",
                "args": {
                    "destination_project_dataset_table": "str",
                    "schema_fields": "dict",
                    "source_uris": "list",
                    "source_format": "str",
                    "create_disposition": "str",
                    "skip_leading_rows": "int",
                    "write_disposition": "str",
                    "field_delimiter": "str",
                    "max_bad_records": "int",
                    "quote_character": "str",
                    "ignore_unknown_values": "bool",
                    "allow_quoted_newlines": "bool",
                    "allow_jagged_rows": "bool",
                    "schema_update_options": "dict",
                    "src_fmt_configs": "dict",
                    "time_partitioning": "dict"
                }
            }
        ],
        "BigQueryHook.get_service": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryCursor.fetchmany": [
            {
                "type": "method",
                "args": {
                    "size": "int"
                }
            }
        ],
        "BigQueryBaseCursor.run_grant_dataset_view_access": [
            {
                "type": "method",
                "args": {
                    "source_dataset": "str",
                    "view_dataset": "str",
                    "view_table": "str",
                    "source_project": "str",
                    "view_project": "str"
                }
            }
        ],
        "BigQueryBaseCursor.run_table_upsert": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_resource": "dict",
                    "project_id": "str"
                }
            }
        ],
        "BigQueryBaseCursor.get_schema": [
            {
                "type": "method",
                "args": {
                    "dataset_id": "str",
                    "table_id": "str"
                }
            }
        ],
        "BigQueryBaseCursor.poll_job_complete": [
            {
                "type": "method",
                "args": {
                    "job_id": "str"
                }
            }
        ],
        "BigQueryBaseCursor.cancel_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BigQueryBaseCursor.create_empty_table": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str",
                    "table_id": "str",
                    "schema_fields": "dict",
                    "time_partitioning": "dict",
                    "labels": "dict"
                }
            }
        ],
        "BigQueryHook.table_exists": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "dataset_id": "str",
                    "table_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.gcp_kms_hook": {
        "_b64encode": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_b64decode": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "GoogleCloudKMSHook.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "GoogleCloudKMSHook.encrypt": [
            {
                "type": "method",
                "args": {
                    "key_name": "str",
                    "plaintext": "str",
                    "authenticated_data": "str"
                }
            }
        ],
        "GoogleCloudKMSHook.decrypt": [
            {
                "type": "method",
                "args": {
                    "key_name": "str",
                    "ciphertext": "str",
                    "authenticated_data": "str"
                }
            }
        ],
        "GoogleCloudKMSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.jira_hook": {
        "JiraHook.jira_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JiraHook.proxies": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JiraHook.client": [
            {
                "type": "attr",
                "anno": "JIRA"
            }
        ],
        "JiraHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JiraHook.__init__": [
            {
                "type": "method",
                "args": {
                    "jira_conn_id": "str",
                    "proxies": "dict"
                }
            }
        ]
    },
    "contrib.hooks.gcp_pubsub_hook": {
        "_format_subscription": [
            {
                "type": "func",
                "args": {
                    "project": "str",
                    "subscription": "str"
                }
            }
        ],
        "_format_topic": [
            {
                "type": "func",
                "args": {
                    "project": "str",
                    "topic": "str"
                }
            }
        ],
        "PubSubHook.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "PubSubHook.publish": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "messages": "list"
                }
            }
        ],
        "PubSubHook.create_topic": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "fail_if_exists": "bool"
                }
            }
        ],
        "PubSubHook.delete_topic": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "topic": "str",
                    "fail_if_not_exists": "bool"
                }
            }
        ],
        "PubSubHook.create_subscription": [
            {
                "type": "method",
                "args": {
                    "topic_project": "str",
                    "topic": "str",
                    "subscription": "str",
                    "subscription_project": "str",
                    "ack_deadline_secs": "int",
                    "fail_if_exists": "bool"
                }
            }
        ],
        "PubSubHook.delete_subscription": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "fail_if_not_exists": "bool"
                }
            }
        ],
        "PubSubHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PubSubHook.acknowledge": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "ack_ids": "list"
                }
            }
        ],
        "PubSubHook.pull": [
            {
                "type": "method",
                "args": {
                    "project": "str",
                    "subscription": "str",
                    "max_messages": "int",
                    "return_immediately": "bool"
                }
            }
        ]
    },
    "contrib.hooks.gcp_dataproc_hook": {
        "_DataProcJob.dataproc_api": [
            {
                "type": "attr",
                "anno": "GoogleCloudBaseHook"
            }
        ],
        "_DataProcJob.project_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJob.region": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJob.job": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "_DataProcJob.job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJob.raise_error": [
            {
                "type": "method",
                "args": {
                    "message": "str"
                }
            }
        ],
        "_DataProcJob.get": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DataProcJobBuilder.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcJobBuilder.job": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "_DataProcJobBuilder.__init__": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "task_id": "str",
                    "cluster_name": "str",
                    "job_type": "str",
                    "properties": "dict"
                }
            }
        ],
        "_DataProcJobBuilder.add_variables": [
            {
                "type": "method",
                "args": {
                    "variables": "str"
                }
            }
        ],
        "_DataProcJobBuilder.add_args": [
            {
                "type": "method",
                "args": {
                    "args": "str"
                }
            }
        ],
        "_DataProcJobBuilder.add_query": [
            {
                "type": "method",
                "args": {
                    "query": "str"
                }
            }
        ],
        "_DataProcJobBuilder.add_query_uri": [
            {
                "type": "method",
                "args": {
                    "query_uri": "str"
                }
            }
        ],
        "_DataProcJobBuilder.add_jar_file_uris": [
            {
                "type": "method",
                "args": {
                    "jars": "str"
                }
            }
        ],
        "_DataProcJobBuilder.add_archive_uris": [
            {
                "type": "method",
                "args": {
                    "archives": "str"
                }
            }
        ],
        "_DataProcJobBuilder.add_file_uris": [
            {
                "type": "method",
                "args": {
                    "files": "str"
                }
            }
        ],
        "_DataProcJobBuilder.add_python_file_uris": [
            {
                "type": "method",
                "args": {
                    "pyfiles": "str"
                }
            }
        ],
        "_DataProcJobBuilder.set_main": [
            {
                "type": "method",
                "args": {
                    "main_jar": "str",
                    "main_class": "str"
                }
            }
        ],
        "_DataProcJobBuilder.set_python_main": [
            {
                "type": "method",
                "args": {
                    "main": "str"
                }
            }
        ],
        "_DataProcJobBuilder.set_job_name": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "_DataProcJobBuilder.build": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DataProcOperation.dataproc_api": [
            {
                "type": "attr",
                "anno": "GoogleCloudBaseHook"
            }
        ],
        "_DataProcOperation.operation": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "_DataProcOperation.operation_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DataProcOperation.__init__": [
            {
                "type": "method",
                "args": {
                    "dataproc_api": "GoogleCloudBaseHook",
                    "operation": "dict"
                }
            }
        ],
        "_DataProcOperation.get": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DataProcOperation._raise_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcHook.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataProcHook.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str",
                    "api_version": "str"
                }
            }
        ],
        "DataProcHook.create_job_template": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "cluster_name": "str",
                    "job_type": "str",
                    "properties": "dict"
                }
            }
        ],
        "_DataProcJob.__init__": [
            {
                "type": "method",
                "args": {
                    "dataproc_api": "GoogleCloudBaseHook",
                    "project_id": "str",
                    "job": "dict",
                    "region": "str"
                }
            }
        ],
        "_DataProcJob.wait_for_done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcHook.submit": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "job": "str",
                    "region": "str"
                }
            }
        ],
        "_DataProcOperation.wait_for_done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcHook.wait": [
            {
                "type": "method",
                "args": {
                    "operation": "dict"
                }
            }
        ],
        "DataProcHook.get_cluster": [
            {
                "type": "method",
                "args": {
                    "project_id": "str",
                    "region": "str",
                    "cluster_name": "str"
                }
            }
        ],
        "_DataProcOperation._check_done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProcHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks": {
        "_hooks": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "airflow_importer": [
            {
                "type": "var",
                "anno": "AirflowImporter"
            }
        ]
    },
    "contrib.hooks.emr_hook": {
        "EmrHook.emr_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrHook.__init__": [
            {
                "type": "method",
                "args": {
                    "emr_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "EmrHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmrHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "EmrHook.create_job_flow": [
            {
                "type": "method",
                "args": {
                    "job_flow_overrides": "dict"
                }
            }
        ]
    },
    "contrib.hooks.ssh_hook": {
        "SSHHook.ssh_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.remote_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.key_file": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SSHHook.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SSHHook.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SSHHook.keepalive_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SSHHook.compress": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SSHHook.no_host_key_check": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SSHHook.host_proxy": [
            {
                "type": "attr",
                "anno": "paramiko.ProxyCommand"
            }
        ],
        "SSHHook.client": [
            {
                "type": "attr",
                "anno": "paramiko.SSHClient"
            }
        ],
        "SSHHook.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SSHHook.__init__": [
            {
                "type": "method",
                "args": {
                    "ssh_conn_id": "str",
                    "remote_host": "str",
                    "username": "str",
                    "password": "str",
                    "key_file": "str",
                    "port": "int",
                    "timeout": "int",
                    "keepalive_interval": "int"
                }
            }
        ],
        "SSHHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SSHHook.get_tunnel": [
            {
                "type": "method",
                "args": {
                    "remote_port": "int",
                    "remote_host": "str",
                    "local_port": "int"
                }
            }
        ],
        "SSHHook.create_tunnel": [
            {
                "type": "method",
                "args": {
                    "local_port": "int",
                    "remote_port": "int",
                    "remote_host": "str"
                }
            }
        ],
        "SSHHook.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "str",
                    "exc_val": "str",
                    "exc_tb": "str"
                }
            }
        ]
    },
    "contrib.hooks.mongo_hook": {
        "MongoHook.conn_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoHook.mongo_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MongoHook.connection": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "MongoHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MongoHook.client": [
            {
                "type": "attr",
                "anno": "MongoClient"
            }
        ],
        "MongoHook.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MongoHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MongoHook.get_collection": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "mongo_db": "str"
                }
            }
        ],
        "MongoHook.insert_many": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "docs": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.insert_one": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "doc": "dict",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.find": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "query": "list",
                    "find_one": "bool",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.aggregate": [
            {
                "type": "method",
                "args": {
                    "mongo_collection": "str",
                    "aggregate_query": "list",
                    "mongo_db": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "MongoHook.close_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MongoHook.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "Any",
                    "exc_val": "Any",
                    "exc_tb": "Any"
                }
            }
        ],
        "MongoHook.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.hooks.aws_hook": {
        "AwsHook.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsHook.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsHook.__init__": [
            {
                "type": "method",
                "args": {
                    "aws_conn_id": "str",
                    "verify": "str"
                }
            }
        ],
        "_parse_s3_config": [
            {
                "type": "func",
                "args": {
                    "config_file_name": "str",
                    "config_format": "str",
                    "profile": "str"
                }
            }
        ],
        "AwsHook._get_credentials": [
            {
                "type": "method",
                "args": {
                    "region_name": "str"
                }
            }
        ],
        "AwsHook.get_credentials": [
            {
                "type": "method",
                "args": {
                    "region_name": "str"
                }
            }
        ],
        "AwsHook.get_session": [
            {
                "type": "method",
                "args": {
                    "region_name": "str"
                }
            }
        ],
        "AwsHook.get_resource_type": [
            {
                "type": "method",
                "args": {
                    "resource_type": "str",
                    "region_name": "str"
                }
            }
        ],
        "AwsHook.get_client_type": [
            {
                "type": "method",
                "args": {
                    "client_type": "str",
                    "region_name": "str"
                }
            }
        ]
    },
    "contrib.hooks.sftp_hook": {
        "SFTPHook.ftp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SFTPHook.conn": [
            {
                "type": "attr",
                "anno": "pysftp.Connection"
            }
        ],
        "SFTPHook.__init__": [
            {
                "type": "method",
                "args": {
                    "ftp_conn_id": "str"
                }
            }
        ],
        "SFTPHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SFTPHook.get_mod_time": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.delete_file": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.store_file": [
            {
                "type": "method",
                "args": {
                    "remote_full_path": "str",
                    "local_full_path": "str"
                }
            }
        ],
        "SFTPHook.retrieve_file": [
            {
                "type": "method",
                "args": {
                    "remote_full_path": "str",
                    "local_full_path": "str"
                }
            }
        ],
        "SFTPHook.delete_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.create_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "mode": "int"
                }
            }
        ],
        "SFTPHook.list_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.describe_directory": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "SFTPHook.close_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.hooks.azure_fileshare_hook": {
        "AzureFileShareHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AzureFileShareHook.connection": [
            {
                "type": "attr",
                "anno": "FileService"
            }
        ],
        "AzureFileShareHook.list_directories_and_files": [
            {
                "type": "method",
                "args": {
                    "share_name": "str",
                    "directory_name": "str",
                    "kwargs": "dict"
                }
            }
        ],
        "AzureFileShareHook.get_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.get_file_to_stream": [
            {
                "type": "method",
                "args": {
                    "stream": "FileService",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.load_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.load_string": [
            {
                "type": "method",
                "args": {
                    "string_data": "str",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.load_stream": [
            {
                "type": "method",
                "args": {
                    "stream": "str",
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "count": "int",
                    "kwargs": "dict"
                }
            }
        ],
        "AzureFileShareHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AzureFileShareHook.__init__": [
            {
                "type": "method",
                "args": {
                    "wasb_conn_id": "str"
                }
            }
        ],
        "AzureFileShareHook.create_directory": [
            {
                "type": "method",
                "args": {
                    "share_name": "str",
                    "directory_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.check_for_file": [
            {
                "type": "method",
                "args": {
                    "share_name": "str",
                    "directory_name": "str",
                    "file_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AzureFileShareHook.check_for_directory": [
            {
                "type": "method",
                "args": {
                    "share_name": "str",
                    "directory_name": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "contrib.hooks.aws_firehose_hook": {
        "AwsFirehoseHook.delivery_stream": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsFirehoseHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsFirehoseHook.__init__": [
            {
                "type": "method",
                "args": {
                    "delivery_stream": "str",
                    "region_name": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "AwsFirehoseHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsFirehoseHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsFirehoseHook.put_records": [
            {
                "type": "method",
                "args": {
                    "records": "list"
                }
            }
        ]
    },
    "contrib.hooks.wasb_hook": {
        "WasbHook.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbHook.connection": [
            {
                "type": "attr",
                "anno": "BlockBlobService"
            }
        ],
        "WasbHook.check_for_prefix": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "prefix": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.load_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.load_string": [
            {
                "type": "method",
                "args": {
                    "string_data": "str",
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.get_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.read_file": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.check_for_blob": [
            {
                "type": "method",
                "args": {
                    "container_name": "str",
                    "blob_name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WasbHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WasbHook.__init__": [
            {
                "type": "method",
                "args": {
                    "wasb_conn_id": "str"
                }
            }
        ]
    },
    "contrib.hooks.qubole_hook": {
        "COMMAND_CLASSES": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "HYPHEN_ARGS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "POSITIONAL_ARGS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "COMMAND_ARGS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "QuboleHook.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleHook.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuboleHook.kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "QuboleHook.cls": [
            {
                "type": "attr",
                "anno": "Type[BaseHook]"
            }
        ],
        "QuboleHook.cmd": [
            {
                "type": "attr",
                "anno": "Command"
            }
        ],
        "QuboleHook.create_cmd_args": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "QuboleHook.get_jobs_id": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleHook.get_log": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleHook.handle_failure_retry": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleHook.kill": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance"
                }
            }
        ],
        "QuboleHook.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "QuboleHook.get_results": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "fp": "str",
                    "inline": "bool",
                    "delim": "str",
                    "fetch": "bool"
                }
            }
        ]
    },
    "contrib.hooks.aws_lambda_hook": {
        "AwsLambdaHook.function_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.region_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.log_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.invocation_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.qualifier": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.__init__": [
            {
                "type": "method",
                "args": {
                    "function_name": "str",
                    "region_name": "str",
                    "log_type": "str",
                    "qualifier": "str",
                    "invocation_type": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AwsLambdaHook.conn": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AwsLambdaHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AwsLambdaHook.invoke_lambda": [
            {
                "type": "method",
                "args": {
                    "payload": "dict"
                }
            }
        ]
    },
    "contrib.hooks.gcp_api_base_hook": {
        "_DEFAULT_SCOPES": [
            {
                "type": "var",
                "anno": "tuple[str, ...]"
            }
        ],
        "GoogleCloudBaseHook.gcp_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudBaseHook.delegate_to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleCloudBaseHook.extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GoogleCloudBaseHook._get_field": [
            {
                "type": "method",
                "args": {
                    "f": "str",
                    "default": "str"
                }
            }
        ],
        "GoogleCloudBaseHook.project_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleCloudBaseHook.__init__": [
            {
                "type": "method",
                "args": {
                    "gcp_conn_id": "str",
                    "delegate_to": "str"
                }
            }
        ],
        "GoogleCloudBaseHook._get_credentials": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleCloudBaseHook._authorize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleCloudBaseHook._get_access_token": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "contrib.auth.backends.google_auth": {
        "get_config_param": [
            {
                "type": "func",
                "args": {
                    "param": "str"
                }
            }
        ],
        "GoogleUser.user": [
            {
                "type": "attr",
                "anno": "current_user"
            }
        ],
        "GoogleUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "current_user"
                }
            }
        ],
        "GoogleUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleAuthBackend.login_manager": [
            {
                "type": "attr",
                "anno": "flask_login.LoginManager"
            }
        ],
        "GoogleAuthBackend.flask_app": [
            {
                "type": "attr",
                "anno": "flask_login.Flask"
            }
        ],
        "GoogleAuthBackend.google_oauth": [
            {
                "type": "attr",
                "anno": "OAuth"
            }
        ],
        "GoogleAuthBackend.api_rev": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GoogleAuthBackend.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GoogleAuthBackend.domain_check": [
            {
                "type": "method",
                "args": {
                    "email": "str"
                }
            }
        ],
        "login_manager": [
            {
                "type": "var",
                "anno": "GoogleAuthBackend"
            }
        ],
        "GoogleUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "GoogleAuthBackend.login": [
            {
                "type": "method",
                "args": {
                    "request": "request.Request"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "request.Request"
                }
            }
        ],
        "GoogleAuthBackend.load_user": [
            {
                "type": "method",
                "args": {
                    "userid": "str",
                    "session": "flask_login.Session"
                }
            }
        ],
        "GoogleAuthBackend.get_google_user_profile_info": [
            {
                "type": "method",
                "args": {
                    "google_token": "str"
                }
            }
        ],
        "GoogleAuthBackend.oauth_callback": [
            {
                "type": "method",
                "args": {
                    "session": "flask_login.Session"
                }
            }
        ],
        "GoogleAuthBackend.init_app": [
            {
                "type": "method",
                "args": {
                    "flask_app": "flask_login.Flask"
                }
            }
        ]
    },
    "contrib.auth.backends.kerberos_auth": {
        "login_manager": [
            {
                "type": "var",
                "anno": "flask_login.LoginManager"
            }
        ],
        "KerberosUser.user": [
            {
                "type": "attr",
                "anno": "kerberos.Kerberos"
            }
        ],
        "KerberosUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "kerberos.Kerberos"
                }
            }
        ],
        "KerberosUser.authenticate": [
            {
                "type": "method",
                "args": {
                    "username": "str",
                    "password": "str"
                }
            }
        ],
        "KerberosUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KerberosUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KerberosUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KerberosUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KerberosUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoginForm.username": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "LoginForm.password": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "KerberosUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "requests.Request",
                    "session": "settings.Session"
                }
            }
        ],
        "load_user": [
            {
                "type": "func",
                "args": {
                    "userid": "str",
                    "session": "sqla.Session"
                }
            }
        ]
    },
    "contrib.auth.backends.password_auth": {
        "login_manager": [
            {
                "type": "var",
                "anno": "flask_login.LoginManager"
            }
        ],
        "PY3": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "PasswordUser._password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PasswordUser.user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PasswordUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "str"
                }
            }
        ],
        "PasswordUser.password": [
            {
                "type": "method",
                "args": {
                    "plaintext": "str"
                }
            }
        ],
        "PasswordUser.authenticate": [
            {
                "type": "method",
                "args": {
                    "plaintext": "str"
                }
            }
        ],
        "PasswordUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PasswordUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PasswordUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PasswordUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PasswordUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoginForm.username": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "LoginForm.password": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "_unauthorized": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_forbidden": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "init_app": [
            {
                "type": "func",
                "args": {
                    "app": "logging.Logger"
                }
            }
        ],
        "PasswordUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "authenticate": [
            {
                "type": "func",
                "args": {
                    "session": "settings.Session",
                    "username": "str",
                    "password": "str"
                }
            }
        ],
        "requires_authentication": [
            {
                "type": "func",
                "args": {
                    "function": "Callable"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "settings.Request",
                    "session": "settings.Session"
                }
            }
        ],
        "load_user": [
            {
                "type": "func",
                "args": {
                    "userid": "str",
                    "session": "sqla.Session"
                }
            }
        ]
    },
    "contrib.auth.backends.ldap_auth": {
        "login_manager": [
            {
                "type": "var",
                "anno": "flask_login.LoginManager"
            }
        ],
        "LdapUser.user": [
            {
                "type": "attr",
                "anno": "models.User"
            }
        ],
        "LdapUser.ldap_groups": [
            {
                "type": "attr",
                "anno": "List[str]"
            }
        ],
        "LdapUser.superuser": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LdapUser.data_profiler": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LdapUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LdapUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LdapUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LdapUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LdapUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoginForm.username": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "LoginForm.password": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "LdapUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "groups_user": [
            {
                "type": "func",
                "args": {
                    "conn": "Connection",
                    "search_base": "str",
                    "user_filter": "str",
                    "user_name_att": "str",
                    "username": "str"
                }
            }
        ],
        "group_contains_user": [
            {
                "type": "func",
                "args": {
                    "conn": "Connection",
                    "search_base": "str",
                    "group_filter": "str",
                    "user_name_attr": "str",
                    "username": "str"
                }
            }
        ],
        "get_ldap_connection": [
            {
                "type": "func",
                "args": {
                    "dn": "str",
                    "password": "str"
                }
            }
        ],
        "LdapUser.try_login": [
            {
                "type": "method",
                "args": {
                    "username": "str",
                    "password": "str"
                }
            }
        ],
        "LdapUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "models.User"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "settings.Request",
                    "session": "settings.Session"
                }
            }
        ],
        "load_user": [
            {
                "type": "func",
                "args": {
                    "userid": "str",
                    "session": "sqla.Session"
                }
            }
        ]
    },
    "contrib.auth.backends.github_enterprise_auth": {
        "get_config_param": [
            {
                "type": "func",
                "args": {
                    "param": "str"
                }
            }
        ],
        "GHEUser.user": [
            {
                "type": "attr",
                "anno": "current_user"
            }
        ],
        "GHEUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "current_user"
                }
            }
        ],
        "GHEUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEAuthBackend.ghe_host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GHEAuthBackend.login_manager": [
            {
                "type": "attr",
                "anno": "flask_login.LoginManager"
            }
        ],
        "GHEAuthBackend.flask_app": [
            {
                "type": "attr",
                "anno": "flask_login.Flask"
            }
        ],
        "GHEAuthBackend.ghe_oauth": [
            {
                "type": "attr",
                "anno": "OAuth"
            }
        ],
        "GHEAuthBackend.api_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GHEAuthBackend.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GHEAuthBackend.ghe_api_route": [
            {
                "type": "method",
                "args": {
                    "leaf": "str"
                }
            }
        ],
        "login_manager": [
            {
                "type": "var",
                "anno": "GHEAuthBackend"
            }
        ],
        "GHEUser.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "GHEAuthBackend.login": [
            {
                "type": "method",
                "args": {
                    "request": "request.Request"
                }
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "request.Request"
                }
            }
        ],
        "GHEAuthBackend.load_user": [
            {
                "type": "method",
                "args": {
                    "userid": "str",
                    "session": "flask_login.Session"
                }
            }
        ],
        "GHEAuthBackend.ghe_team_check": [
            {
                "type": "method",
                "args": {
                    "username": "str",
                    "ghe_token": "str"
                }
            }
        ],
        "GHEAuthBackend.get_ghe_user_profile_info": [
            {
                "type": "method",
                "args": {
                    "ghe_token": "str"
                }
            }
        ],
        "GHEAuthBackend.oauth_callback": [
            {
                "type": "method",
                "args": {
                    "session": "flask_login.Session"
                }
            }
        ],
        "GHEAuthBackend.init_app": [
            {
                "type": "method",
                "args": {
                    "flask_app": "flask_login.Flask"
                }
            }
        ]
    },
    "default_login": {
        "DEFAULT_USERNAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "login_manager": [
            {
                "type": "var",
                "anno": "flask_login.LoginManager"
            }
        ],
        "DefaultUser.user": [
            {
                "type": "attr",
                "anno": "models.User"
            }
        ],
        "DefaultUser.__init__": [
            {
                "type": "method",
                "args": {
                    "user": "models.User"
                }
            }
        ],
        "DefaultUser.is_active": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DefaultUser.is_authenticated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DefaultUser.is_anonymous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DefaultUser.data_profiling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DefaultUser.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "login": [
            {
                "type": "func",
                "args": {
                    "request": "settings.Request",
                    "session": "settings.Session"
                }
            }
        ],
        "load_user": [
            {
                "type": "func",
                "args": {
                    "userid": "int",
                    "session": "sqla.Session"
                }
            }
        ]
    },
    "example_dags.test_utils": {
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "task": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "example_dags.example_branch_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "cmd": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "run_this_first": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "options": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "branching": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "join": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "t": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "dummy_follow": [
            {
                "type": "var",
                "anno": "DummyOperator"
            }
        ]
    },
    "example_dags.example_passing_params_via_test_command": {
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "my_py_command": [
            {
                "type": "func",
                "args": {
                    "ds": "DAG",
                    "kwargs": "str"
                }
            }
        ],
        "my_templated_command": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "also_run_this": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "example_dags.example_kubernetes_executor": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "print_stuff": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "use_zip_binary": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "start_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "one_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "two_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "three_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.subdags.subdag": {
        "subdag": [
            {
                "type": "func",
                "args": {
                    "parent_dag_name": "str",
                    "child_dag_name": "str",
                    "args": "dict"
                }
            }
        ]
    },
    "example_dags.example_short_circuit_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "cond_true": [
            {
                "type": "var",
                "anno": "ShortCircuitOperator"
            }
        ],
        "cond_false": [
            {
                "type": "var",
                "anno": "ShortCircuitOperator"
            }
        ],
        "ds_true": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "ds_false": [
            {
                "type": "var",
                "anno": "list"
            }
        ]
    },
    "example_dags.example_xcom": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "value_1": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "value_2": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "push_by_returning": [
            {
                "type": "func",
                "args": {
                    "kwargs": "str"
                }
            }
        ],
        "push2": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "puller": [
            {
                "type": "func",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "pull": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "push": [
            {
                "type": "func",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "push1": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.example_python_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "print_context": [
            {
                "type": "func",
                "args": {
                    "ds": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ],
        "my_sleeping_function": [
            {
                "type": "func",
                "args": {
                    "random_base": "float"
                }
            }
        ],
        "task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.example_trigger_controller_dag": {
        "pp": [
            {
                "type": "var",
                "anno": "pprint.PrettyPrinter"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "conditionally_trigger": [
            {
                "type": "func",
                "args": {
                    "context": "dict",
                    "dag_run_obj": "DagRunOrder"
                }
            }
        ],
        "trigger": [
            {
                "type": "var",
                "anno": "TriggerDagRunOperator"
            }
        ]
    },
    "example_dags.example_latest_only_with_trigger": {
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "latest_only": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task1": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task2": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task3": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task4": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ]
    },
    "example_dags.example_branch_python_dop_operator_3": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "should_run": [
            {
                "type": "func",
                "args": {
                    "ds": "DAG",
                    "kwargs": "dict"
                }
            }
        ],
        "cond": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "oper_1": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ],
        "oper_2": [
            {
                "type": "var",
                "anno": "BranchPythonOperator"
            }
        ]
    },
    "example_dags.example_latest_only": {
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "latest_only": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ],
        "task1": [
            {
                "type": "var",
                "anno": "LatestOnlyOperator"
            }
        ]
    },
    "example_dags.example_skip_dag": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "DummySkipOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DummySkipOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "create_test_pipeline": [
            {
                "type": "func",
                "args": {
                    "suffix": "str",
                    "trigger_rule": "str",
                    "dag": "DAG"
                }
            }
        ]
    },
    "example_dags.example_bash_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "cmd": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "run_this_last": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "i": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "task": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "example_dags.example_trigger_target_dag": {
        "pp": [
            {
                "type": "var",
                "anno": "pprint.PrettyPrinter"
            }
        ],
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "bash_task": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "run_this_func": [
            {
                "type": "func",
                "args": {
                    "ds": "DAG",
                    "kwargs": "dict"
                }
            }
        ],
        "run_this": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.tutorial": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ],
        "templated_command": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "BashOperator"
            }
        ]
    },
    "example_dags.example_http_operator": {
        "default_args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "t5": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "t3": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "t4": [
            {
                "type": "var",
                "anno": "SimpleHttpOperator"
            }
        ],
        "sensor": [
            {
                "type": "var",
                "anno": "HttpSensor"
            }
        ]
    },
    "example_dags.example_subdag_operator": {
        "DAG_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "start": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ],
        "section_1": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ],
        "some_other_task": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ],
        "section_2": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ],
        "end": [
            {
                "type": "var",
                "anno": "SubDagOperator"
            }
        ]
    },
    "example_dags.example_kubernetes_annotation": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "print_stuff": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "start_task": [
            {
                "type": "var",
                "anno": "PythonOperator"
            }
        ]
    },
    "example_dags.example_kubernetes_operator": {
        "args": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dag": [
            {
                "type": "var",
                "anno": "DAG"
            }
        ],
        "k": [
            {
                "type": "var",
                "anno": "KubernetesPodOperator"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ]
    },
    "models": {
        "Base": [
            {
                "type": "var",
                "anno": "declarative_base"
            }
        ],
        "ID_LEN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "XCOM_RETURN_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "Stats": [
            {
                "type": "var",
                "anno": "Stats"
            }
        ],
        "NullFernet.is_encrypted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NullFernet.decrpyt": [
            {
                "type": "method",
                "args": {
                    "b": "object"
                }
            }
        ],
        "NullFernet.encrypt": [
            {
                "type": "method",
                "args": {
                    "b": "bytes"
                }
            }
        ],
        "_fernet": [
            {
                "type": "var",
                "anno": "Fernet"
            }
        ],
        "_CONTEXT_MANAGER_DAG": [
            {
                "type": "var",
                "anno": "DAG | None"
            }
        ],
        "DagBag.CYCLE_NEW": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagBag.CYCLE_IN_PROGRESS": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagBag.CYCLE_DONE": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagBag.dag_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagBag.dags": [
            {
                "type": "attr",
                "anno": "dict[str, BaseDag]"
            }
        ],
        "DagBag.file_last_changed": [
            {
                "type": "attr",
                "anno": "dict[str, datetime]"
            }
        ],
        "DagBag.executor": [
            {
                "type": "attr",
                "anno": "LocalExecutor"
            }
        ],
        "DagBag.import_errors": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "DagBag.has_logged": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagBag.size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagBag.dagbag_stats": [
            {
                "type": "attr",
                "anno": "list[DagStat]"
            }
        ],
        "User.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "User.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "User.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "User.email": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "User.superuser": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "User.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "User.get_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "User.is_superuser": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Connection.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Connection.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.conn_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.host": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.login": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection._password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Connection.is_encrypted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Connection.is_extra_encrypted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Connection._extra": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Connection._types": [
            {
                "type": "attr",
                "anno": "list[tuple[str, ...]]"
            }
        ],
        "Connection.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagPickle.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagPickle.pickle": [
            {
                "type": "attr",
                "anno": "DagPickle"
            }
        ],
        "DagPickle.created_dttm": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DagPickle.pickle_hash": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagPickle.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagPickle.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.execution_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TaskInstance.start_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TaskInstance.end_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TaskInstance.duration": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TaskInstance.state": [
            {
                "type": "attr",
                "anno": "State"
            }
        ],
        "TaskInstance._try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.max_tries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.hostname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.unixname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.job_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.priority_weight": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.operator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstance.queued_dttm": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TaskInstance.pid": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.executor_config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TaskInstance.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[Index, ...]"
            }
        ],
        "TaskInstance.task": [
            {
                "type": "attr",
                "anno": "settings.Task"
            }
        ],
        "TaskInstance._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "TaskInstance.run_as_user": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "TaskInstance.raw": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskInstance.test_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskInstance.init_on_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.next_try_number": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.generate_command": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_id": "str",
                    "execution_date": "datetime",
                    "mark_success": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "local": "bool",
                    "pickle_id": "str | None",
                    "file_path": "str | None",
                    "raw": "bool",
                    "job_id": "str | None",
                    "pool": "str",
                    "cfg_path": "str"
                }
            }
        ],
        "TaskInstance.log_filepath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.log_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.mark_success_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.try_number": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.VariableAccessor.var": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "TaskInstance.VariableJsonAccessor.var": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "TaskInstance.VariableJsonAccessor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.VariableAccessor.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.VariableAccessor.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.VariableJsonAccessor.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.set_duration": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskFail.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskFail.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskFail.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskFail.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskFail.execution_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TaskFail.start_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TaskFail.end_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TaskFail.duration": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskFail.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[Index, ...]"
            }
        ],
        "Log.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Log.dttm": [
            {
                "type": "attr",
                "anno": "timezone"
            }
        ],
        "Log.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.event": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.execution_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "Log.owner": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.extra": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Log.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[Index, ...]"
            }
        ],
        "BaseOperator.template_fields": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "BaseOperator.template_ext": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "BaseOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator._base_operator_shallow_copy_attrs": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BaseOperator.shallow_copy_attrs": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BaseOperator.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.owner": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.email": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.email_on_retry": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.email_on_failure": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.start_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "BaseOperator.end_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "BaseOperator.trigger_rule": [
            {
                "type": "attr",
                "anno": "TriggerRule"
            }
        ],
        "BaseOperator.depends_on_past": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.wait_for_downstream": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator._schedule_interval": [
            {
                "type": "attr",
                "anno": "Hashable"
            }
        ],
        "BaseOperator.retries": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstance.is_eligible_to_retry": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.sla": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseOperator.execution_timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "BaseOperator.on_failure_callback": [
            {
                "type": "attr",
                "anno": "None"
            }
        ],
        "BaseOperator.on_success_callback": [
            {
                "type": "attr",
                "anno": "None"
            }
        ],
        "BaseOperator.on_retry_callback": [
            {
                "type": "attr",
                "anno": "None"
            }
        ],
        "BaseOperator.retry_delay": [
            {
                "type": "attr",
                "anno": "timedelta"
            }
        ],
        "BaseOperator.retry_exponential_backoff": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.max_retry_delay": [
            {
                "type": "attr",
                "anno": "timedelta"
            }
        ],
        "TaskInstance.next_retry_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.ready_for_retry": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.is_premature": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseOperator.adhoc": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseOperator.priority_weight": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseOperator.weight_rule": [
            {
                "type": "attr",
                "anno": "WeightRule"
            }
        ],
        "BaseOperator.resources": [
            {
                "type": "attr",
                "anno": "Resources"
            }
        ],
        "BaseOperator.run_as_user": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BaseOperator.task_concurrency": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseOperator.executor_config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseOperator._upstream_task_ids": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "BaseOperator._downstream_task_ids": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "BaseOperator._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "BaseOperator.inlets": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "BaseOperator.outlets": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "BaseOperator.lineage_data": [
            {
                "type": "attr",
                "anno": "None"
            }
        ],
        "BaseOperator._inlets": [
            {
                "type": "attr",
                "anno": "dict[str, list[str]]"
            }
        ],
        "BaseOperator._outlets": [
            {
                "type": "attr",
                "anno": "dict[str, list[str]]"
            }
        ],
        "BaseOperator._comps": [
            {
                "type": "attr",
                "anno": "dict[str, Chart]"
            }
        ],
        "BaseOperator.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "BaseOperator.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator._dag": [
            {
                "type": "attr",
                "anno": "DAG"
            }
        ],
        "BaseOperator.has_dag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.deps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.pre_execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BaseOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "BaseOperator.post_execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "result": "object"
                }
            }
        ],
        "BaseOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.__dict__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseOperator.__setstate__": [
            {
                "type": "method",
                "args": {
                    "state": "dict"
                }
            }
        ],
        "BaseOperator.__getstate__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.prepare_template": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.upstream_task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.downstream_task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.get_direct_relative_ids": [
            {
                "type": "method",
                "args": {
                    "upstream": "bool"
                }
            }
        ],
        "BaseOperator.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.task_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.add_only_new": [
            {
                "type": "method",
                "args": {
                    "item_set": "set[str]",
                    "item": "str"
                }
            }
        ],
        "BaseOperator.dag": [
            {
                "type": "attr",
                "anno": "DAG"
            }
        ],
        "DagModel.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.is_paused_at_creation": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.is_paused": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.is_subdag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.is_active": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.last_scheduler_run": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DagModel.last_pickled": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DagModel.last_expired": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DagModel.scheduler_lock": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModel.pickle_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagModel.fileloc": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.owners": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModel.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.user_defined_macros": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DAG.user_defined_filters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DAG.default_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DAG.params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DAG._dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG._full_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG._concurrency": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DAG._pickle_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG._description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.fileloc": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.task_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseOperator.get_flat_relative_ids": [
            {
                "type": "method",
                "args": {
                    "upstream": "bool",
                    "found_descendants": "set[str]"
                }
            }
        ],
        "BaseOperator.get_flat_relatives": [
            {
                "type": "method",
                "args": {
                    "upstream": "bool"
                }
            }
        ],
        "BaseOperator.priority_weight_total": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.timezone": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DAG.start_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DAG.end_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DAG.schedule_interval": [
            {
                "type": "attr",
                "anno": "Hashable"
            }
        ],
        "DAG._schedule_interval": [
            {
                "type": "attr",
                "anno": "Hashable"
            }
        ],
        "BaseOperator.schedule_interval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.template_searchpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.parent_dag": [
            {
                "type": "attr",
                "anno": "DagModel"
            }
        ],
        "DAG.last_loaded": [
            {
                "type": "attr",
                "anno": "timezone"
            }
        ],
        "DAG.safe_dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.max_active_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DAG.dagrun_timeout": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "DAG.sla_miss_callback": [
            {
                "type": "attr",
                "anno": "Callable[[], SlaMiss]"
            }
        ],
        "DAG.default_view": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.orientation": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DAG.catchup": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DAG.is_subdag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DAG.partial": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DAG.on_success_callback": [
            {
                "type": "attr",
                "anno": "Callable[[], None]"
            }
        ],
        "DAG.on_failure_callback": [
            {
                "type": "attr",
                "anno": "Callable[[], None]"
            }
        ],
        "DAG._comps": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DAG.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "DAG.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "DAG.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG._old_context_manager_dag": [
            {
                "type": "attr",
                "anno": "DAG"
            }
        ],
        "DAG.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.__exit__": [
            {
                "type": "method",
                "args": {
                    "_type": "str",
                    "_value": "str",
                    "_tb": "str"
                }
            }
        ],
        "DAG.date_range": [
            {
                "type": "method",
                "args": {
                    "start_date": "datetime",
                    "num": "int",
                    "end_date": "datetime"
                }
            }
        ],
        "DAG.following_schedule": [
            {
                "type": "method",
                "args": {
                    "dttm": "datetime"
                }
            }
        ],
        "DAG.previous_schedule": [
            {
                "type": "method",
                "args": {
                    "dttm": "datetime"
                }
            }
        ],
        "DAG.normalize_schedule": [
            {
                "type": "method",
                "args": {
                    "dttm": "datetime"
                }
            }
        ],
        "DAG.dag_id": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "DAG.full_filepath": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "DAG.concurrency": [
            {
                "type": "method",
                "args": {
                    "value": "int"
                }
            }
        ],
        "DAG.description": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.tasks": [
            {
                "type": "method",
                "args": {
                    "val": "list[Task]"
                }
            }
        ],
        "DAG.task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.active_task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.active_tasks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.folder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.get_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str"
                }
            }
        ],
        "BaseOperator.downstream_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.roots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.upstream_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.topological_sort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.get_direct_relatives": [
            {
                "type": "method",
                "args": {
                    "upstream": "bool"
                }
            }
        ],
        "DAG.last_pickled": [
            {
                "type": "attr",
                "anno": "timezone.Timezone"
            }
        ],
        "DAG.pickle_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.tree_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.task_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DAG.cli": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG._test_cycle_helper": [
            {
                "type": "method",
                "args": {
                    "visit_map": "dict",
                    "task_id": "int"
                }
            }
        ],
        "DAG.test_cycle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Chart.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Chart.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Chart.label": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Chart.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Chart.user_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Chart.chart_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Chart.sql_layout": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Chart.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Chart.y_log_scale": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Chart.show_datatable": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Chart.show_sql": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Chart.height": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Chart.default_params": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Chart.owner": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.owner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Chart.x_is_date": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Chart.iteration_no": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Chart.last_modified": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "Chart.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KnownEventType.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KnownEventType.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KnownEventType.know_event_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KnownEventType.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "KnownEvent.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KnownEvent.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KnownEvent.label": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KnownEvent.start_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "KnownEvent.end_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "KnownEvent.user_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KnownEvent.known_event_type_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "KnownEvent.reported_by": [
            {
                "type": "attr",
                "anno": "User"
            }
        ],
        "KnownEvent.event_type": [
            {
                "type": "attr",
                "anno": "KnownEventType"
            }
        ],
        "KnownEvent.description": [
            {
                "type": "attr",
                "anno": "Column"
            }
        ],
        "KnownEvent.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Variable.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Variable.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Variable.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Variable._val": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Variable.is_encrypted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Variable.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "XCom.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XCom.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "XCom.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XCom.value": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "XCom.timestamp": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "XCom.execution_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "XCom.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XCom.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XCom.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "XCom.init_on_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "XCom.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagStat.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagStat.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagStat.state": [
            {
                "type": "attr",
                "anno": "State"
            }
        ],
        "DagStat.count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagStat.dirty": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagStat.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "state": "State",
                    "count": "int",
                    "dirty": "bool"
                }
            }
        ],
        "DagRun.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.ID_PREFIX": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.ID_FORMAT_PREFIX": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagRun.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.execution_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DagRun.start_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DagRun.end_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "DagRun._state": [
            {
                "type": "attr",
                "anno": "State"
            }
        ],
        "DagRun.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRun.external_trigger": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagRun.conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagRun.dag": [
            {
                "type": "attr",
                "anno": "DAG | None"
            }
        ],
        "DagRun.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[Index, ...]"
            }
        ],
        "DagRun.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRun.get_state": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRun.id_for_date": [
            {
                "type": "method",
                "args": {
                    "cls": "type[BaseException]",
                    "date": "datetime",
                    "prefix": "str"
                }
            }
        ],
        "DagRun.state": [
            {
                "type": "attr",
                "anno": "State"
            }
        ],
        "DagRun.get_dag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRun.is_backfill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Pool.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pool.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Pool.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pool.slots": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Pool.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Pool.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Pool.to_json": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SlaMiss.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMiss.task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.has_task": [
            {
                "type": "method",
                "args": {
                    "task_id": "str"
                }
            }
        ],
        "BaseOperator.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "BaseOperator"
                }
            }
        ],
        "SlaMiss.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMiss.execution_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "SlaMiss.email_sent": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlaMiss.timestamp": [
            {
                "type": "attr",
                "anno": "Column"
            }
        ],
        "SlaMiss.description": [
            {
                "type": "attr",
                "anno": "Column"
            }
        ],
        "SlaMiss.notification_sent": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlaMiss.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ImportError.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImportError.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ImportError.timestamp": [
            {
                "type": "attr",
                "anno": "Column"
            }
        ],
        "ImportError.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ImportError.stacktrace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeResourceVersion.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeResourceVersion.one_row_id": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeResourceVersion.resource_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeWorkerIdentifier.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KubeWorkerIdentifier.one_row_id": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KubeWorkerIdentifier.worker_uuid": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DAG.filepath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.email_alert": [
            {
                "type": "method",
                "args": {
                    "exception": "Exception"
                }
            }
        ],
        "BaseOperator.__deepcopy__": [
            {
                "type": "method",
                "args": {
                    "memo": "dict"
                }
            }
        ],
        "DAG.sub_dag": [
            {
                "type": "method",
                "args": {
                    "task_regex": "str",
                    "include_downstream": "bool",
                    "include_upstream": "bool"
                }
            }
        ],
        "DAG.subdags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Connection.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.command_as_list": [
            {
                "type": "method",
                "args": {
                    "mark_success": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_ti_state": "bool",
                    "local": "bool",
                    "pickle_id": "str",
                    "raw": "bool",
                    "job_id": "str",
                    "pool": "str",
                    "cfg_path": "str"
                }
            }
        ],
        "TaskInstance.command": [
            {
                "type": "method",
                "args": {
                    "mark_success": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "local": "bool",
                    "pickle_id": "str",
                    "raw": "bool",
                    "job_id": "str",
                    "pool": "str",
                    "cfg_path": "str"
                }
            }
        ],
        "BaseOperator.dag_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "DAG"
                }
            }
        ],
        "BaseOperator._set_relatives": [
            {
                "type": "method",
                "args": {
                    "task_or_task_list": "str",
                    "upstream": "bool"
                }
            }
        ],
        "BaseOperator.set_upstream": [
            {
                "type": "method",
                "args": {
                    "task_or_task_list": "str"
                }
            }
        ],
        "BaseOperator.__lshift__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "BaseOperator.__rrshift__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "BaseOperator.set_downstream": [
            {
                "type": "method",
                "args": {
                    "task_or_task_list": "str"
                }
            }
        ],
        "DAG.set_dependency": [
            {
                "type": "method",
                "args": {
                    "upstream_task_id": "str",
                    "downstream_task_id": "str"
                }
            }
        ],
        "BaseOperator.__rshift__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "BaseOperator.__rlshift__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TaskFail.__init__": [
            {
                "type": "method",
                "args": {
                    "task": "settings.Task",
                    "execution_date": "datetime",
                    "start_date": "datetime",
                    "end_date": "datetime"
                }
            }
        ],
        "DagPickle.__init__": [
            {
                "type": "method",
                "args": {
                    "dag": "DagModel"
                }
            }
        ],
        "DAG.get_run_dates": [
            {
                "type": "method",
                "args": {
                    "start_date": "datetime",
                    "end_date": "datetime"
                }
            }
        ],
        "DAG.add_task": [
            {
                "type": "method",
                "args": {
                    "task": "TaskInstance"
                }
            }
        ],
        "DAG.add_tasks": [
            {
                "type": "method",
                "args": {
                    "tasks": "list[TaskInstance]"
                }
            }
        ],
        "TaskInstance.set_state": [
            {
                "type": "method",
                "args": {
                    "state": "State",
                    "session": "settings.Session"
                }
            }
        ],
        "DagStat.set_dirty": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "session": "settings.Session"
                }
            }
        ],
        "DagRun.set_state": [
            {
                "type": "method",
                "args": {
                    "state": "State"
                }
            }
        ],
        "DAG.create_dagrun": [
            {
                "type": "method",
                "args": {
                    "run_id": "str",
                    "state": "State",
                    "execution_date": "datetime | None",
                    "start_date": "datetime | None",
                    "external_trigger": "bool",
                    "conf": "dict",
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstance._run_raw_task": [
            {
                "type": "method",
                "args": {
                    "mark_success": "bool",
                    "test_mode": "bool",
                    "job_id": "str",
                    "pool": "str",
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstance.run": [
            {
                "type": "method",
                "args": {
                    "verbose": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "mark_success": "bool",
                    "test_mode": "bool",
                    "job_id": "str",
                    "pool": "str",
                    "session": "settings.Session"
                }
            }
        ],
        "XCom.delete": [
            {
                "type": "method",
                "args": {
                    "cls": "type[XCom]",
                    "xcoms": "object",
                    "session": "settings.Session"
                }
            }
        ],
        "Connection.set_password": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "Connection.password": [
            {
                "type": "method",
                "args": {
                    "cls": "object"
                }
            }
        ],
        "Connection.get_extra": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Connection.extra": [
            {
                "type": "method",
                "args": {
                    "cls": "object"
                }
            }
        ],
        "KubeResourceVersion.get_current_resource_version": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Pool.queued_slots": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Pool.used_slots": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Pool.open_slots": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRun.get_latest_runs": [
            {
                "type": "method",
                "args": {
                    "cls": "type[DagRun]",
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRun.get_run": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session",
                    "dag_id": "str",
                    "execution_date": "datetime"
                }
            }
        ],
        "DagRun.get_previous_scheduled_dagrun": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRun.get_previous_dagrun": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRun.get_task_instance": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRun.get_task_instances": [
            {
                "type": "method",
                "args": {
                    "state": "State",
                    "session": "settings.Session"
                }
            }
        ],
        "DagRun.find": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "execution_date": "str",
                    "state": "str",
                    "external_trigger": "bool",
                    "no_backfills": "bool",
                    "session": "sqla.Session"
                }
            }
        ],
        "DAG.get_active_runs": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRun.refresh_from_db": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "XCom.get_many": [
            {
                "type": "method",
                "args": {
                    "cls": "type[XCom]",
                    "execution_date": "datetime",
                    "key": "str",
                    "task_ids": "list[str]",
                    "dag_ids": "list[str]",
                    "include_prior_dates": "bool",
                    "limit": "int",
                    "session": "session"
                }
            }
        ],
        "DAG.get_num_task_instances": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_ids": "list[str]",
                    "states": "list[State]",
                    "session": "sqla.Session"
                }
            }
        ],
        "DAG.deactivate_unknown_dags": [
            {
                "type": "method",
                "args": {
                    "active_dag_ids": "list[str]",
                    "session": "sqla.Session"
                }
            }
        ],
        "DAG.db_merge": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "DAG.pickle": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "DAG.get_task_instances": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session",
                    "start_date": "datetime | None",
                    "end_date": "datetime | None",
                    "state": "State"
                }
            }
        ],
        "DAG.latest_execution_date": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "DAG.get_dagrun": [
            {
                "type": "method",
                "args": {
                    "execution_date": "datetime",
                    "session": "sqla.Session"
                }
            }
        ],
        "DAG.get_num_active_runs": [
            {
                "type": "method",
                "args": {
                    "external_trigger": "bool",
                    "session": "settings.Session"
                }
            }
        ],
        "DAG.is_paused": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "DAG.concurrency_reached": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "DAG.get_last_dagrun": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session",
                    "include_externally_triggered": "bool"
                }
            }
        ],
        "DagModel.get_current": [
            {
                "type": "method",
                "args": {
                    "cls": "type[BaseDag]",
                    "dag_id": "str",
                    "session": "sqla.Session"
                }
            }
        ],
        "BaseOperator.get_task_instances": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session",
                    "start_date": "datetime | None",
                    "end_date": "datetime | None"
                }
            }
        ],
        "TaskInstance.get_num_running_task_instances": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstance.get_template_context": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "DagBag.process_file": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "only_if_updated": "bool",
                    "safe_mode": "bool"
                }
            }
        ],
        "DagBag.get_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "DagBag.dagbag_report": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Variable.set": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "key": "str",
                    "value": "object",
                    "serialize_json": "bool",
                    "session": "settings.Session"
                }
            }
        ],
        "DagStat.create": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "session": "settings.Session"
                }
            }
        ],
        "DagStat.update": [
            {
                "type": "method",
                "args": {
                    "dag_ids": "list[str]",
                    "dirty_only": "bool",
                    "session": "settings.Session"
                }
            }
        ],
        "KubeWorkerIdentifier.checkpoint_kube_worker_uuid": [
            {
                "type": "method",
                "args": {
                    "worker_uuid": "str",
                    "session": "sqla.Session"
                }
            }
        ],
        "KubeWorkerIdentifier.get_or_create_current_kube_worker_uuid": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "KubeResourceVersion.reset_resource_version": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "KubeResourceVersion.checkpoint_resource_version": [
            {
                "type": "method",
                "args": {
                    "resource_version": "str",
                    "session": "sqla.Session"
                }
            }
        ],
        "DAG.set_dag_runs_state": [
            {
                "type": "method",
                "args": {
                    "state": "State",
                    "session": "settings.Session",
                    "start_date": "datetime",
                    "end_date": "datetime"
                }
            }
        ],
        "DAG.get_template_env": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.render_template": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "content": "six.Union[str, numbers.Number, dict]",
                    "context": "dict"
                }
            }
        ],
        "BaseOperator.render_template_from_field": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "content": "six.Union[str, numbers.Number, dict]",
                    "context": "dict",
                    "jinja_env": "jinja2.Environment"
                }
            }
        ],
        "DAG.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "description": "str",
                    "schedule_interval": "timedelta",
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "full_filepath": "str",
                    "template_searchpath": "str",
                    "user_defined_macros": "dict",
                    "user_defined_filters": "dict",
                    "default_args": "dict",
                    "concurrency": "int",
                    "max_active_runs": "int",
                    "dagrun_timeout": "float",
                    "sla_miss_callback": "Callable[[], SlaMiss]",
                    "default_view": "str",
                    "orientation": "bool",
                    "catchup": "bool",
                    "on_success_callback": "Callable[[], None]",
                    "on_failure_callback": "Callable[[], None]",
                    "params": "dict"
                }
            }
        ],
        "DAG.__deepcopy__": [
            {
                "type": "method",
                "args": {
                    "memo": "dict"
                }
            }
        ],
        "TaskInstance.overwrite_params_with_dag_run_conf": [
            {
                "type": "method",
                "args": {
                    "params": "dict",
                    "dag_run": "DagRun"
                }
            }
        ],
        "DAG.deactivate_stale_dags": [
            {
                "type": "method",
                "args": {
                    "expiration_date": "datetime",
                    "session": "sqla.Session"
                }
            }
        ],
        "DAG.sync_to_db": [
            {
                "type": "method",
                "args": {
                    "owner": "str",
                    "sync_time": "datetime",
                    "session": "settings.Session"
                }
            }
        ],
        "DAG.pickle_info": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "BaseOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "owner": "str",
                    "email": "str",
                    "email_on_retry": "bool",
                    "email_on_failure": "bool",
                    "retries": "int",
                    "retry_delay": "timedelta",
                    "retry_exponential_backoff": "bool",
                    "max_retry_delay": "timedelta",
                    "start_date": "datetime | None",
                    "end_date": "datetime | None",
                    "schedule_interval": "int | None",
                    "depends_on_past": "bool",
                    "wait_for_downstream": "bool",
                    "dag": "DAG",
                    "params": "dict",
                    "default_args": "dict",
                    "adhoc": "bool",
                    "priority_weight": "int",
                    "weight_rule": "WeightRule",
                    "queue": "str",
                    "pool": "str",
                    "sla": "str",
                    "execution_timeout": "float",
                    "on_failure_callback": "None",
                    "on_success_callback": "None",
                    "on_retry_callback": "None",
                    "trigger_rule": "TriggerRule",
                    "resources": "Resources",
                    "run_as_user": "str | None",
                    "task_concurrency": "int | None",
                    "executor_config": "dict",
                    "inlets": "list[str]",
                    "outlets": "list[str]",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BaseOperator.dry_run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.resolve_template_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DAG.resolve_template_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.__init__": [
            {
                "type": "method",
                "args": {
                    "task": "settings.Task",
                    "execution_date": "datetime",
                    "state": "State"
                }
            }
        ],
        "DagRun.verify_integrity": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "SkipMixin.skip": [
            {
                "type": "method",
                "args": {
                    "dag_run": "DagRun",
                    "execution_date": "datetime",
                    "tasks": "list[settings.Task]",
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstance.get_failed_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "dep_context": "DepContext",
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstance.are_dependencies_met": [
            {
                "type": "method",
                "args": {
                    "dep_context": "DepContext",
                    "session": "settings.Session",
                    "verbose": "bool"
                }
            }
        ],
        "DagBag.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_folder": "str",
                    "executor": "LocalExecutor",
                    "include_examples": "bool"
                }
            }
        ],
        "DagBag.collect_dags": [
            {
                "type": "method",
                "args": {
                    "dag_folder": "str",
                    "only_if_updated": "bool"
                }
            }
        ],
        "DagBag.bag_dag": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "parent_dag": "DagModel",
                    "root_dag": "DAGModel"
                }
            }
        ],
        "get_fernet": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "Variable.set_val": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "Connection.set_extra": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "TaskInstance.error": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "XCom.get_one": [
            {
                "type": "method",
                "args": {
                    "cls": "type[XCom]",
                    "execution_date": "datetime",
                    "key": "str",
                    "task_id": "str",
                    "dag_id": "str",
                    "include_prior_dates": "bool",
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstance.xcom_pull": [
            {
                "type": "method",
                "args": {
                    "task_ids": "str",
                    "dag_id": "str",
                    "key": "str",
                    "include_prior_dates": "bool"
                }
            }
        ],
        "BaseOperator.xcom_pull": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "task_ids": "str",
                    "dag_id": "str",
                    "key": "str",
                    "include_prior_dates": "bool"
                }
            }
        ],
        "XCom.set": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "key": "str",
                    "value": "object",
                    "execution_date": "datetime",
                    "task_id": "str",
                    "dag_id": "str",
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstance.xcom_push": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "value": "object",
                    "execution_date": "datetime"
                }
            }
        ],
        "BaseOperator.xcom_push": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "key": "str",
                    "value": "object",
                    "execution_date": "datetime"
                }
            }
        ],
        "Variable.get_val": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Variable.val": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "Variable.get": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "key": "str",
                    "default_var": "object",
                    "deserialize_json": "bool",
                    "session": "settings.Session"
                }
            }
        ],
        "Variable.setdefault": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "key": "str",
                    "default": "object",
                    "deserialize_json": "bool"
                }
            }
        ],
        "BaseOperator.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TaskInstance.VariableJsonAccessor.__getattr__": [
            {
                "type": "method",
                "args": {
                    "item": "str"
                }
            }
        ],
        "TaskInstance.VariableAccessor.__getattr__": [
            {
                "type": "method",
                "args": {
                    "item": "str"
                }
            }
        ],
        "TaskInstance.render_templates": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.get_dagrun": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstance.previous_ti": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstance.pool_full": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstance.are_dependents_done": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstance.clear_xcom_data": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstance.refresh_from_db": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session",
                    "lock_for_update": "bool"
                }
            }
        ],
        "DAG.handle_callback": [
            {
                "type": "method",
                "args": {
                    "dagrun": "DagRun",
                    "success": "bool",
                    "reason": "str",
                    "session": "settings.Session"
                }
            }
        ],
        "Log.__init__": [
            {
                "type": "method",
                "args": {
                    "event": "str",
                    "task_instance": "settings.TaskInstance",
                    "owner": "str",
                    "extra": "str",
                    "kwargs": "object"
                }
            }
        ],
        "TaskInstance.handle_failure": [
            {
                "type": "method",
                "args": {
                    "error": "Exception",
                    "test_mode": "bool",
                    "context": "dict",
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstance._check_and_change_state_before_execution": [
            {
                "type": "method",
                "args": {
                    "verbose": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "mark_success": "bool",
                    "test_mode": "bool",
                    "job_id": "str",
                    "pool": "str",
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstance.current_state": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "DagRun.update_state": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "Connection.parse_from_uri": [
            {
                "type": "method",
                "args": {
                    "uri": "str"
                }
            }
        ],
        "Connection.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "conn_type": "str",
                    "host": "str",
                    "login": "str",
                    "password": "str",
                    "schema": "str",
                    "port": "int",
                    "extra": "str",
                    "uri": "str"
                }
            }
        ],
        "Connection.extra_dejson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstance.dry_run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseOperator.run": [
            {
                "type": "method",
                "args": {
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "ignore_first_depends_on_past": "bool",
                    "ignore_ti_state": "bool",
                    "mark_success": "bool"
                }
            }
        ],
        "DAG.run": [
            {
                "type": "method",
                "args": {
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "mark_success": "bool",
                    "local": "bool",
                    "executor": "Executor",
                    "donot_pickle": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_first_depends_on_past": "bool",
                    "pool": "str",
                    "delay_on_limit_secs": "float",
                    "verbose": "bool",
                    "conf": "dict",
                    "rerun_failed_tasks": "bool"
                }
            }
        ],
        "TaskInstance.init_run_context": [
            {
                "type": "method",
                "args": {
                    "raw": "bool"
                }
            }
        ],
        "DagBag.paused_dags": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "DagBag.deactivate_inactive_dags": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "DagBag.kill_zombies": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "clear_task_instances": [
            {
                "type": "func",
                "args": {
                    "tis": "list",
                    "session": "sqla.Session",
                    "activate_dag_runs": "bool",
                    "dag": "DAG"
                }
            }
        ],
        "DAG.clear": [
            {
                "type": "method",
                "args": {
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "only_failed": "bool",
                    "only_running": "bool",
                    "confirm_prompt": "bool",
                    "include_subdags": "bool",
                    "reset_dag_runs": "bool",
                    "dry_run": "bool",
                    "session": "settings.Session"
                }
            }
        ],
        "BaseOperator.clear": [
            {
                "type": "method",
                "args": {
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "upstream": "bool",
                    "downstream": "bool",
                    "session": "settings.Session"
                }
            }
        ],
        "DAG.clear_dags": [
            {
                "type": "method",
                "args": {
                    "cls": "type[BaseOperator]",
                    "dags": "list",
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "only_failed": "bool",
                    "only_running": "bool",
                    "confirm_prompt": "bool",
                    "include_subdags": "bool",
                    "reset_dag_runs": "bool",
                    "dry_run": "bool"
                }
            }
        ],
        "Connection.get_password": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "operators.slack_operator": {
        "SlackAPIOperator.token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIOperator.slack_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIOperator.api_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SlackAPIOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "slack_conn_id": "str",
                    "token": "str",
                    "method": "str",
                    "api_params": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SlackAPIOperator.construct_api_call_params": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SlackAPIPostOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SlackAPIPostOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.channel": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.text": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.icon_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.attachments": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackAPIPostOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "channel": "str",
                    "username": "str",
                    "text": "str",
                    "icon_url": "str",
                    "attachments": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SlackAPIPostOperator.api_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SlackAPIPostOperator.construct_api_call_params": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SlackAPIOperator.execute": [
            {
                "type": "method",
                "args": {
                    "kwargs": "str"
                }
            }
        ]
    },
    "operators.check_operator": {
        "CheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "CheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "CheckOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CheckOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "CheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_convert_to_float_if_possible": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "ValueCheckOperator.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ValueCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ValueCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "ValueCheckOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValueCheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValueCheckOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValueCheckOperator.pass_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValueCheckOperator.tol": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "ValueCheckOperator.has_tolerance": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ValueCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "pass_value": "str",
                    "tolerance": "float",
                    "conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "ValueCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntervalCheckOperator.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "IntervalCheckOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "IntervalCheckOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "IntervalCheckOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.metrics_thresholds": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "IntervalCheckOperator.metrics_sorted": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "IntervalCheckOperator.date_filter_column": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.days_back": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "IntervalCheckOperator.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.sql1": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.sql2": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntervalCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "metrics_thresholds": "dict",
                    "date_filter_column": "str",
                    "days_back": "int",
                    "conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "IntervalCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "ValueCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ],
        "IntervalCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "operators.docker_operator": {
        "DockerOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DockerOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DockerOperator.api_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.cpus": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "DockerOperator.docker_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.environment": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DockerOperator.force_pull": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DockerOperator.image": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.mem_limit": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "DockerOperator.network_mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_ca_cert": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_client_cert": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_client_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_hostname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tls_ssl_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.tmp_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.volumes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DockerOperator.working_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.xcom_push_flag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DockerOperator.xcom_all": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DockerOperator.docker_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.shm_size": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerOperator.cli": [
            {
                "type": "attr",
                "anno": "APIClient"
            }
        ],
        "DockerOperator.container": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DockerOperator.__get_tls_config": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DockerOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DockerOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "DockerOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "image": "str",
                    "api_version": "str",
                    "command": "str",
                    "cpus": "float",
                    "docker_url": "str",
                    "environment": "dict",
                    "force_pull": "bool",
                    "mem_limit": "float",
                    "network_mode": "str",
                    "tls_ca_cert": "str",
                    "tls_client_cert": "str",
                    "tls_client_key": "str",
                    "tls_hostname": "str",
                    "tls_ssl_version": "str",
                    "tmp_dir": "str",
                    "user": "str",
                    "volumes": "list",
                    "working_dir": "str",
                    "xcom_push": "bool",
                    "xcom_all": "bool",
                    "docker_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DockerOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DockerOperator.get_command": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "operators.s3_file_transform_operator": {
        "S3FileTransformOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "S3FileTransformOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3FileTransformOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.source_s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.source_aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.source_verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.dest_s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.dest_aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.dest_verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.replace": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3FileTransformOperator.transform_script": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.select_expression": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3FileTransformOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "source_s3_key": "str",
                    "dest_s3_key": "str",
                    "transform_script": "str",
                    "select_expression": "str",
                    "source_aws_conn_id": "str",
                    "source_verify": "str",
                    "dest_aws_conn_id": "str",
                    "dest_verify": "str",
                    "replace": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3FileTransformOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.bash_operator": {
        "BashOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "BashOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "BashOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashOperator.bash_command": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashOperator.env": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BashOperator.xcom_push_flag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BashOperator.output_encoding": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "bash_command": "str",
                    "xcom_push": "bool",
                    "env": "dict",
                    "output_encoding": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "BashOperator.lineage_data": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BashOperator.sp": [
            {
                "type": "attr",
                "anno": "Popen"
            }
        ],
        "BashOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BashOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.http_operator": {
        "SimpleHttpOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SimpleHttpOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SimpleHttpOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleHttpOperator.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleHttpOperator.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleHttpOperator.endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleHttpOperator.headers": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SimpleHttpOperator.data": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SimpleHttpOperator.response_check": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SimpleHttpOperator.extra_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SimpleHttpOperator.xcom_push_flag": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SimpleHttpOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "endpoint": "str",
                    "method": "str",
                    "data": "dict",
                    "headers": "dict",
                    "response_check": "bool",
                    "extra_options": "dict",
                    "xcom_push": "bool",
                    "http_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SimpleHttpOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.dummy_operator": {
        "DummyOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DummyOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DummyOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DummyOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.mssql_operator": {
        "MsSqlOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "MsSqlOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MsSqlOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlOperator.mssql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MsSqlOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MsSqlOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mssql_conn_id": "str",
                    "parameters": "dict",
                    "autocommit": "bool",
                    "database": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MsSqlOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.email_operator": {
        "EmailOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "EmailOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "EmailOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.subject": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.html_content": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.files": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "EmailOperator.cc": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.bcc": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.mime_subtype": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.mime_charset": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EmailOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "to": "str",
                    "subject": "str",
                    "html_content": "str",
                    "files": "list",
                    "cc": "str",
                    "bcc": "str",
                    "mime_subtype": "str",
                    "mime_charset": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "EmailOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "operators.hive_stats_operator": {
        "HiveStatsCollectionOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HiveStatsCollectionOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.partition": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveStatsCollectionOperator.extra_exprs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveStatsCollectionOperator.col_blacklist": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveStatsCollectionOperator.metastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.assignment_func": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveStatsCollectionOperator.ds": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.dttm": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveStatsCollectionOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "partition": "dict",
                    "extra_exprs": "dict",
                    "col_blacklist": "dict",
                    "assignment_func": "dict",
                    "metastore_conn_id": "str",
                    "presto_conn_id": "str",
                    "mysql_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HiveStatsCollectionOperator.get_default_exprs": [
            {
                "type": "method",
                "args": {
                    "col": "str",
                    "col_type": "str"
                }
            }
        ],
        "HiveStatsCollectionOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.druid_check_operator": {
        "DruidCheckOperator.druid_broker_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidCheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "druid_broker_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DruidCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DruidCheckOperator.get_first": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "DruidCheckOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "operators.sqlite_operator": {
        "SqliteOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SqliteOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SqliteOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteOperator.sqlite_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteOperator.parameters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SqliteOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "sqlite_conn_id": "str",
                    "parameters": "list",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SqliteOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "operators.mssql_to_hive": {
        "MsSqlToHiveTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "MsSqlToHiveTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MsSqlToHiveTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.hive_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.partition": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MsSqlToHiveTransfer.create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MsSqlToHiveTransfer.recreate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MsSqlToHiveTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.mssql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlToHiveTransfer.tblproperties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MsSqlToHiveTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "hive_table": "str",
                    "create": "bool",
                    "recreate": "bool",
                    "partition": "dict",
                    "delimiter": "str",
                    "mssql_conn_id": "str",
                    "hive_cli_conn_id": "str",
                    "tblproperties": "dict",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MsSqlToHiveTransfer.type_map": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "mssql_type": "str"
                }
            }
        ],
        "MsSqlToHiveTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "pymssql.HiveContext"
                }
            }
        ]
    },
    "operators.oracle_operator": {
        "OracleOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "OracleOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "OracleOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleOperator.oracle_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "OracleOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "OracleOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "oracle_conn_id": "str",
                    "parameters": "dict",
                    "autocommit": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "OracleOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "operators.redshift_to_s3_operator": {
        "RedshiftToS3Transfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "RedshiftToS3Transfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "RedshiftToS3Transfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.redshift_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RedshiftToS3Transfer.unload_options": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "RedshiftToS3Transfer.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RedshiftToS3Transfer.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "RedshiftToS3Transfer.include_header": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RedshiftToS3Transfer.__init__": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table": "str",
                    "s3_bucket": "str",
                    "s3_key": "str",
                    "redshift_conn_id": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "unload_options": "tuple",
                    "autocommit": "bool",
                    "parameters": "dict",
                    "include_header": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "RedshiftToS3Transfer.hook": [
            {
                "type": "attr",
                "anno": "PostgresHook"
            }
        ],
        "RedshiftToS3Transfer.s3": [
            {
                "type": "attr",
                "anno": "S3Hook"
            }
        ],
        "RedshiftToS3Transfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.mysql_operator": {
        "MySqlOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "MySqlOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MySqlOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlOperator.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MySqlOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mysql_conn_id": "str",
                    "parameters": "dict",
                    "autocommit": "bool",
                    "database": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MySqlOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.dagrun_operator": {
        "DagRunOrder.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunOrder.payload": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagRunOrder.__init__": [
            {
                "type": "method",
                "args": {
                    "run_id": "str",
                    "payload": "dict"
                }
            }
        ],
        "TriggerDagRunOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "TriggerDagRunOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TriggerDagRunOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerDagRunOperator.python_callable": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerDagRunOperator.trigger_dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerDagRunOperator.execution_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "TriggerDagRunOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "trigger_dag_id": "str",
                    "python_callable": "str",
                    "execution_date": "datetime",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TriggerDagRunOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "operators.mysql_to_hive": {
        "MySqlToHiveTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "MySqlToHiveTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "MySqlToHiveTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.hive_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.partition": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MySqlToHiveTransfer.create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlToHiveTransfer.recreate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlToHiveTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlToHiveTransfer.tblproperties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MySqlToHiveTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "hive_table": "str",
                    "create": "bool",
                    "recreate": "bool",
                    "partition": "dict",
                    "delimiter": "str",
                    "mysql_conn_id": "str",
                    "hive_cli_conn_id": "str",
                    "tblproperties": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MySqlToHiveTransfer.type_map": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "mysql_type": "str"
                }
            }
        ],
        "MySqlToHiveTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.presto_check_operator": {
        "PrestoCheckOperator.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoCheckOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "presto_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PrestoCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PrestoValueCheckOperator.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoValueCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "pass_value": "bool",
                    "tolerance": "float",
                    "presto_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PrestoValueCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PrestoIntervalCheckOperator.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoIntervalCheckOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "metrics_thresholds": "int",
                    "date_filter_column": "str",
                    "days_back": "int",
                    "presto_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PrestoIntervalCheckOperator.get_db_hook": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "operators.hive_to_samba_operator": {
        "Hive2SambaOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "Hive2SambaOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Hive2SambaOperator.hiveserver2_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hive2SambaOperator.samba_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hive2SambaOperator.destination_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hive2SambaOperator.hql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hive2SambaOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "destination_filepath": "str",
                    "samba_conn_id": "str",
                    "hiveserver2_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "Hive2SambaOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.hive_to_mysql": {
        "HiveToMySqlTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HiveToMySqlTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveToMySqlTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.mysql_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.mysql_preoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.mysql_postoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.hiveserver2_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToMySqlTransfer.bulk_load": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HiveToMySqlTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mysql_table": "str",
                    "hiveserver2_conn_id": "str",
                    "mysql_conn_id": "str",
                    "mysql_preoperator": "str",
                    "mysql_postoperator": "str",
                    "bulk_load": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HiveToMySqlTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.presto_to_mysql": {
        "PrestoToMySqlTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "PrestoToMySqlTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PrestoToMySqlTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.mysql_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.mysql_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.mysql_preoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.presto_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoToMySqlTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "mysql_table": "str",
                    "presto_conn_id": "str",
                    "mysql_conn_id": "str",
                    "mysql_preoperator": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PrestoToMySqlTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.generic_transfer": {
        "GenericTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "GenericTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GenericTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.destination_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.source_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.destination_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.preoperator": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GenericTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "destination_table": "str",
                    "source_conn_id": "str",
                    "destination_conn_id": "str",
                    "preoperator": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "GenericTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.python_operator": {
        "PythonOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "PythonOperator.template_ext": [
            {
                "type": "attr",
                "anno": "types.Tuple[str, ...]"
            }
        ],
        "PythonOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PythonOperator.shallow_copy_attrs": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PythonOperator.python_callable": [
            {
                "type": "attr",
                "anno": "types.FunctionType"
            }
        ],
        "PythonOperator.op_args": [
            {
                "type": "attr",
                "anno": "types.Tuple[str, ...]"
            }
        ],
        "PythonOperator.op_kwargs": [
            {
                "type": "attr",
                "anno": "types.Dict[str, ...]"
            }
        ],
        "PythonOperator.provide_context": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PythonOperator.templates_dict": [
            {
                "type": "attr",
                "anno": "types.Dict[str, ...]"
            }
        ],
        "PythonOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "python_callable": "types.FunctionType",
                    "op_args": "types.Tuple[str, ...]",
                    "op_kwargs": "types.Dict[str, ...]",
                    "provide_context": "bool",
                    "templates_dict": "types.Dict[str, ...]",
                    "templates_exts": "types.Tuple[str, ...]",
                    "args": "types.Any",
                    "kwargs": "types.Any"
                }
            }
        ],
        "PythonOperator.execute_callable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PythonVirtualenvOperator.requirements": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PythonVirtualenvOperator.string_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PythonVirtualenvOperator.python_version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PythonVirtualenvOperator.use_dill": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PythonVirtualenvOperator.system_site_packages": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PythonVirtualenvOperator._pass_op_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PythonVirtualenvOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "python_callable": "types.FunctionType",
                    "requirements": "list",
                    "python_version": "str",
                    "use_dill": "bool",
                    "system_site_packages": "bool",
                    "op_args": "list",
                    "op_kwargs": "list",
                    "string_args": "list",
                    "templates_dict": "dict",
                    "templates_exts": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PythonVirtualenvOperator._write_args": [
            {
                "type": "method",
                "args": {
                    "input_filename": "str"
                }
            }
        ],
        "PythonVirtualenvOperator._generate_virtualenv_cmd": [
            {
                "type": "method",
                "args": {
                    "tmp_dir": "TemporaryDirectory"
                }
            }
        ],
        "PythonVirtualenvOperator._generate_pip_install_cmd": [
            {
                "type": "method",
                "args": {
                    "tmp_dir": "TemporaryDirectory"
                }
            }
        ],
        "PythonVirtualenvOperator._generate_python_cmd": [
            {
                "type": "method",
                "args": {
                    "tmp_dir": "TemporaryDirectory",
                    "script_filename": "str",
                    "input_filename": "str",
                    "output_filename": "str",
                    "string_args_filename": "str"
                }
            }
        ],
        "BranchPythonOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "ShortCircuitOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PythonVirtualenvOperator._write_string_args": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "PythonVirtualenvOperator._generate_python_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PythonVirtualenvOperator._write_script": [
            {
                "type": "method",
                "args": {
                    "script_filename": "str"
                }
            }
        ],
        "PythonVirtualenvOperator._execute_in_subprocess": [
            {
                "type": "method",
                "args": {
                    "cmd": "list"
                }
            }
        ],
        "PythonOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "PythonVirtualenvOperator._read_result": [
            {
                "type": "method",
                "args": {
                    "output_filename": "str"
                }
            }
        ],
        "PythonVirtualenvOperator.execute_callable": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "operators.subdag_operator": {
        "SubDagOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SubDagOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SubDagOperator.ui_fgcolor": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SubDagOperator.subdag": [
            {
                "type": "attr",
                "anno": "SubDag"
            }
        ],
        "SubDagOperator.executor": [
            {
                "type": "attr",
                "anno": "SequentialExecutor"
            }
        ],
        "SubDagOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "subdag": "SubDag",
                    "executor": "SequentialExecutor",
                    "args": "object",
                    "kwargs": "object"
                }
            }
        ],
        "SubDagOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators": {
        "_operators": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "airflow_importer": [
            {
                "type": "var",
                "anno": "AirflowImporter"
            }
        ],
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "operators.postgres_operator": {
        "PostgresOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "PostgresOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PostgresOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresOperator.postgres_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PostgresOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PostgresOperator.database": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "postgres_conn_id": "str",
                    "autocommit": "bool",
                    "parameters": "dict",
                    "database": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PostgresOperator.hook": [
            {
                "type": "attr",
                "anno": "PostgresHook"
            }
        ],
        "PostgresOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.jdbc_operator": {
        "JdbcOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "JdbcOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "JdbcOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcOperator.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JdbcOperator.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcOperator.jdbc_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcOperator.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "JdbcOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "jdbc_conn_id": "str",
                    "autocommit": "bool",
                    "parameters": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "JdbcOperator.hook": [
            {
                "type": "attr",
                "anno": "JdbcHook"
            }
        ],
        "JdbcOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "operators.s3_to_redshift_operator": {
        "S3ToRedshiftTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "S3ToRedshiftTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3ToRedshiftTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.s3_bucket": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.redshift_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToRedshiftTransfer.copy_options": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3ToRedshiftTransfer.autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToRedshiftTransfer.parameters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "S3ToRedshiftTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table": "str",
                    "s3_bucket": "str",
                    "s3_key": "str",
                    "redshift_conn_id": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "copy_options": "tuple",
                    "autocommit": "bool",
                    "parameters": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3ToRedshiftTransfer.hook": [
            {
                "type": "attr",
                "anno": "PostgresHook"
            }
        ],
        "S3ToRedshiftTransfer.s3": [
            {
                "type": "attr",
                "anno": "S3Hook"
            }
        ],
        "S3ToRedshiftTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.hive_to_druid": {
        "LOAD_CHECK_INTERVAL": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "DEFAULT_TARGET_PARTITION_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "HiveToDruidTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HiveToDruidTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveToDruidTransfer.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.druid_datasource": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.ts_dim": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.intervals": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "HiveToDruidTransfer.num_shards": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HiveToDruidTransfer.target_partition_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HiveToDruidTransfer.query_granularity": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.segment_granularity": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.metric_spec": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "HiveToDruidTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.hadoop_dependency_coordinates": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.druid_ingest_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.metastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveToDruidTransfer.hive_tblproperties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveToDruidTransfer.job_properties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveToDruidTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "druid_datasource": "str",
                    "ts_dim": "str",
                    "metric_spec": "list[dict]",
                    "hive_cli_conn_id": "str",
                    "druid_ingest_conn_id": "str",
                    "metastore_conn_id": "str",
                    "hadoop_dependency_coordinates": "str",
                    "intervals": "list[str]",
                    "num_shards": "int",
                    "target_partition_size": "int",
                    "query_granularity": "str",
                    "segment_granularity": "str",
                    "hive_tblproperties": "dict",
                    "job_properties": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HiveToDruidTransfer.construct_ingest_query": [
            {
                "type": "method",
                "args": {
                    "static_path": "str",
                    "columns": "list[str]"
                }
            }
        ],
        "HiveToDruidTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.latest_only_operator": {
        "LatestOnlyOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LatestOnlyOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.pig_operator": {
        "PigOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "PigOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PigOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigOperator.pigparams_jinja_translate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PigOperator.pig": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigOperator.pig_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "pig": "str",
                    "pig_cli_conn_id": "str",
                    "pigparams_jinja_translate": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "PigOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigOperator.prepare_template": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigOperator.hook": [
            {
                "type": "attr",
                "anno": "PigCliHook"
            }
        ],
        "PigOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "str"
                }
            }
        ]
    },
    "operators.s3_to_hive_operator": {
        "S3ToHiveTransfer.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "S3ToHiveTransfer.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "S3ToHiveTransfer.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.s3_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.field_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "S3ToHiveTransfer.hive_table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.recreate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.partition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.headers": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.check_headers": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.wildcard_match": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3ToHiveTransfer.verify": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.input_compressed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.tblproperties": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "S3ToHiveTransfer.select_expression": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3ToHiveTransfer.__init__": [
            {
                "type": "method",
                "args": {
                    "s3_key": "str",
                    "field_dict": "dict",
                    "hive_table": "str",
                    "delimiter": "str",
                    "create": "bool",
                    "recreate": "bool",
                    "partition": "str",
                    "headers": "bool",
                    "check_headers": "bool",
                    "wildcard_match": "bool",
                    "aws_conn_id": "str",
                    "verify": "bool",
                    "hive_cli_conn_id": "str",
                    "input_compressed": "bool",
                    "tblproperties": "dict",
                    "select_expression": "bool",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3ToHiveTransfer.s3": [
            {
                "type": "attr",
                "anno": "S3Hook"
            }
        ],
        "S3ToHiveTransfer.hive": [
            {
                "type": "attr",
                "anno": "HiveCliHook"
            }
        ],
        "S3ToHiveTransfer._get_top_row_as_list": [
            {
                "type": "method",
                "args": {
                    "file_name": "str"
                }
            }
        ],
        "S3ToHiveTransfer._delete_top_row_and_compress": [
            {
                "type": "method",
                "args": {
                    "input_file_name": "str",
                    "output_file_ext": "str",
                    "dest_dir": "str"
                }
            }
        ],
        "S3ToHiveTransfer._match_headers": [
            {
                "type": "method",
                "args": {
                    "header_list": "list"
                }
            }
        ],
        "S3ToHiveTransfer.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "operators.hive_operator": {
        "HiveOperator.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HiveOperator.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "HiveOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.hql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.hive_cli_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.hiveconfs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HiveOperator.hiveconf_jinja_translate": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HiveOperator.script_begin_tag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.run_as": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.mapred_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.mapred_queue_priority": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.mapred_job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.mapred_job_name_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveOperator.hook": [
            {
                "type": "attr",
                "anno": "HiveCliHook"
            }
        ],
        "HiveOperator.get_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveOperator.prepare_template": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "hive_cli_conn_id": "str",
                    "schema": "str",
                    "hiveconfs": "dict",
                    "hiveconf_jinja_translate": "bool",
                    "script_begin_tag": "str",
                    "run_as_owner": "bool",
                    "mapred_queue": "str",
                    "mapred_queue_priority": "str",
                    "mapred_job_name": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HiveOperator.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveOperator.dry_run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "utils.timezone": {
        "utc": [
            {
                "type": "var",
                "anno": "pendulum.Timezone"
            }
        ],
        "is_localized": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime"
                }
            }
        ],
        "is_naive": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime"
                }
            }
        ],
        "utcnow": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "utc_epoch": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "convert_to_utc": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime"
                }
            }
        ],
        "make_aware": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime",
                    "timezone": "dt.timezone"
                }
            }
        ],
        "make_naive": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime",
                    "timezone": "int"
                }
            }
        ],
        "datetime": [
            {
                "type": "func",
                "args": {
                    "args": "int",
                    "kwargs": "int"
                }
            }
        ],
        "parse": [
            {
                "type": "func",
                "args": {
                    "string": "str"
                }
            }
        ]
    },
    "utils.module_loading": {
        "prepare_classpath": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "import_string": [
            {
                "type": "func",
                "args": {
                    "dotted_path": "str"
                }
            }
        ]
    },
    "utils.helpers": {
        "DEFAULT_TIME_TO_WAIT_AFTER_SIGTERM": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "validate_key": [
            {
                "type": "func",
                "args": {
                    "k": "str",
                    "max_length": "int"
                }
            }
        ],
        "ask_yesno": [
            {
                "type": "func",
                "args": {
                    "question": "str"
                }
            }
        ],
        "is_in": [
            {
                "type": "func",
                "args": {
                    "obj": "object",
                    "l": "list"
                }
            }
        ],
        "is_container": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "as_tuple": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "chunks": [
            {
                "type": "func",
                "args": {
                    "items": "str",
                    "chunk_size": "int"
                }
            }
        ],
        "reduce_in_chunks": [
            {
                "type": "func",
                "args": {
                    "fn": "Callable[[str], str]",
                    "iterable": "str",
                    "initializer": "str",
                    "chunk_size": "int"
                }
            }
        ],
        "as_flattened_list": [
            {
                "type": "func",
                "args": {
                    "iterable": "list"
                }
            }
        ],
        "pprinttable": [
            {
                "type": "func",
                "args": {
                    "rows": "list"
                }
            }
        ],
        "parse_template_string": [
            {
                "type": "func",
                "args": {
                    "template_string": "str"
                }
            }
        ],
        "AirflowImporter._parent_module": [
            {
                "type": "attr",
                "anno": "imp.Module"
            }
        ],
        "AirflowImporter._attribute_modules": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AirflowImporter._loaded_modules": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AirflowImporter._build_attribute_modules": [
            {
                "type": "method",
                "args": {
                    "module_attributes": "dict"
                }
            }
        ],
        "AirflowImporter.__init__": [
            {
                "type": "method",
                "args": {
                    "parent_module": "imp.Module",
                    "module_attributes": "dict"
                }
            }
        ],
        "alchemy_to_dict": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "chain": [
            {
                "type": "func",
                "args": {
                    "tasks": "str"
                }
            }
        ],
        "reap_process_group": [
            {
                "type": "func",
                "args": {
                    "pid": "int",
                    "log": "logging.Logger",
                    "sig": "int",
                    "timeout": "int"
                }
            }
        ],
        "AirflowImporter._load_attribute": [
            {
                "type": "method",
                "args": {
                    "attribute": "str"
                }
            }
        ],
        "AirflowImporter.__getattr__": [
            {
                "type": "method",
                "args": {
                    "attribute": "str"
                }
            }
        ]
    },
    "utils.dates": {
        "cron_presets": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "date_range": [
            {
                "type": "func",
                "args": {
                    "start_date": "datetime",
                    "end_date": "timezone.Timezone",
                    "num": "int",
                    "delta": "timedelta"
                }
            }
        ],
        "round_time": [
            {
                "type": "func",
                "args": {
                    "dt": "datetime",
                    "delta": "timedelta",
                    "start_date": "datetime"
                }
            }
        ],
        "infer_time_unit": [
            {
                "type": "func",
                "args": {
                    "time_seconds_arr": "list"
                }
            }
        ],
        "scale_time_units": [
            {
                "type": "func",
                "args": {
                    "time_seconds_arr": "list",
                    "unit": "str"
                }
            }
        ],
        "days_ago": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "hour": "int",
                    "minute": "int",
                    "second": "int",
                    "microsecond": "int"
                }
            }
        ],
        "parse_execution_date": [
            {
                "type": "func",
                "args": {
                    "execution_date_str": "str"
                }
            }
        ]
    },
    "utils.cli_action_loggers": {
        "__pre_exec_callbacks": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "on_pre_execution": [
            {
                "type": "func",
                "args": {
                    "kwargs": "str"
                }
            }
        ],
        "register_pre_exec_callback": [
            {
                "type": "func",
                "args": {
                    "action_logger": "str"
                }
            }
        ],
        "__post_exec_callbacks": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "on_post_execution": [
            {
                "type": "func",
                "args": {
                    "kwargs": "str"
                }
            }
        ],
        "register_post_exec_callback": [
            {
                "type": "func",
                "args": {
                    "action_logger": "str"
                }
            }
        ],
        "default_action_log": [
            {
                "type": "func",
                "args": {
                    "log": "dict",
                    "_": "dict"
                }
            }
        ]
    },
    "utils.asciiart": {
        "bug": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nukular": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "utils.decorators": {
        "signature": [
            {
                "type": "var",
                "anno": "signature"
            }
        ],
        "apply_defaults": [
            {
                "type": "var",
                "anno": "decorator"
            }
        ]
    },
    "utils.json": {
        "json_ser": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "AirflowJsonEncoder.default": [
            {
                "type": "method",
                "args": {
                    "obj": "object"
                }
            }
        ]
    },
    "utils.email": {
        "send_email": [
            {
                "type": "func",
                "args": {
                    "to": "str",
                    "subject": "str",
                    "html_content": "str",
                    "files": "str",
                    "dryrun": "bool",
                    "cc": "str",
                    "bcc": "str",
                    "mime_subtype": "str",
                    "mime_charset": "str",
                    "kwargs": "str"
                }
            }
        ],
        "get_email_address_list": [
            {
                "type": "func",
                "args": {
                    "address_string": "str"
                }
            }
        ],
        "send_MIME_email": [
            {
                "type": "func",
                "args": {
                    "e_from": "str",
                    "e_to": "str",
                    "mime_msg": "MIMEApplication",
                    "dryrun": "bool"
                }
            }
        ],
        "send_email_smtp": [
            {
                "type": "func",
                "args": {
                    "to": "str",
                    "subject": "str",
                    "html_content": "str",
                    "files": "list",
                    "dryrun": "bool",
                    "cc": "list",
                    "bcc": "list",
                    "mime_subtype": "str",
                    "mime_charset": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "utils.log.file_task_handler": {
        "FileTaskHandler.handler": [
            {
                "type": "attr",
                "anno": "logging.Handler"
            }
        ],
        "FileTaskHandler.local_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileTaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "filename_template": "str"
                }
            }
        ],
        "FileTaskHandler.emit": [
            {
                "type": "method",
                "args": {
                    "record": "logging.LogRecord"
                }
            }
        ],
        "FileTaskHandler._render_filename": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int"
                }
            }
        ],
        "FileTaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ],
        "FileTaskHandler.read": [
            {
                "type": "method",
                "args": {
                    "task_instance": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ],
        "FileTaskHandler.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileTaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileTaskHandler._init_file": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "FileTaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ]
    },
    "utils.log.es_task_handler": {
        "ElasticsearchTaskHandler.PAGE": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ElasticsearchTaskHandler.MAX_LINE_PER_PAGE": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ElasticsearchTaskHandler.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ElasticsearchTaskHandler.client": [
            {
                "type": "attr",
                "anno": "elasticsearch.Elasticsearch"
            }
        ],
        "ElasticsearchTaskHandler.mark_end_on_close": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ElasticsearchTaskHandler.end_of_log_mark": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ElasticsearchTaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "filename_template": "str",
                    "log_id_template": "str",
                    "end_of_log_mark": "str",
                    "host": "str"
                }
            }
        ],
        "ElasticsearchTaskHandler._render_log_id": [
            {
                "type": "method",
                "args": {
                    "ti": "elasticsearch.TaskInstance",
                    "try_number": "int"
                }
            }
        ],
        "ElasticsearchTaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ElasticsearchTaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "ElasticsearchTaskHandler.es_read": [
            {
                "type": "method",
                "args": {
                    "log_id": "str",
                    "offset": "int"
                }
            }
        ],
        "ElasticsearchTaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "elasticsearch.TaskInstance",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ]
    },
    "utils.log.s3_task_handler": {
        "S3TaskHandler.remote_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3TaskHandler.log_relative_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3TaskHandler._hook": [
            {
                "type": "attr",
                "anno": "S3Hook"
            }
        ],
        "S3TaskHandler.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3TaskHandler.upload_on_close": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3TaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "s3_log_folder": "str",
                    "filename_template": "str"
                }
            }
        ],
        "S3TaskHandler._build_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3TaskHandler.hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3TaskHandler.s3_read": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str",
                    "return_error": "bool"
                }
            }
        ],
        "S3TaskHandler.s3_log_exists": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str"
                }
            }
        ],
        "S3TaskHandler.s3_write": [
            {
                "type": "method",
                "args": {
                    "log": "str",
                    "remote_log_location": "str",
                    "append": "bool"
                }
            }
        ],
        "S3TaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3TaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "S3TaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ]
    },
    "utils.log.wasb_task_handler": {
        "WasbTaskHandler.wasb_container": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbTaskHandler.remote_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbTaskHandler.log_relative_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WasbTaskHandler._hook": [
            {
                "type": "attr",
                "anno": "WasbHook"
            }
        ],
        "WasbTaskHandler.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WasbTaskHandler.upload_on_close": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WasbTaskHandler.delete_local_copy": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "WasbTaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "wasb_log_folder": "str",
                    "wasb_container": "str",
                    "filename_template": "str",
                    "delete_local_copy": "bool"
                }
            }
        ],
        "WasbTaskHandler.wasb_log_exists": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str"
                }
            }
        ],
        "WasbTaskHandler.wasb_write": [
            {
                "type": "method",
                "args": {
                    "log": "str",
                    "remote_log_location": "str",
                    "append": "bool"
                }
            }
        ],
        "WasbTaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WasbTaskHandler._build_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WasbTaskHandler.hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WasbTaskHandler.wasb_read": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str",
                    "return_error": "bool"
                }
            }
        ],
        "WasbTaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "WasbTaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ]
    },
    "utils.log.gcs_task_handler": {
        "GCSTaskHandler.remote_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCSTaskHandler.log_relative_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCSTaskHandler._hook": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GCSTaskHandler.closed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GCSTaskHandler.upload_on_close": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "GCSTaskHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "gcs_log_folder": "str",
                    "filename_template": "str"
                }
            }
        ],
        "GCSTaskHandler.parse_gcs_url": [
            {
                "type": "method",
                "args": {
                    "gsurl": "str"
                }
            }
        ],
        "GCSTaskHandler._build_hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GCSTaskHandler.hook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GCSTaskHandler.gcs_read": [
            {
                "type": "method",
                "args": {
                    "remote_log_location": "str"
                }
            }
        ],
        "GCSTaskHandler.gcs_write": [
            {
                "type": "method",
                "args": {
                    "log": "str",
                    "remote_log_location": "str",
                    "append": "bool"
                }
            }
        ],
        "GCSTaskHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GCSTaskHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger"
                }
            }
        ],
        "GCSTaskHandler._read": [
            {
                "type": "method",
                "args": {
                    "ti": "logging.Logger",
                    "try_number": "int",
                    "metadata": "dict"
                }
            }
        ]
    },
    "utils.log.file_processor_handler": {
        "FileProcessorHandler.handler": [
            {
                "type": "attr",
                "anno": "logging.Handler"
            }
        ],
        "FileProcessorHandler.base_log_folder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileProcessorHandler.dag_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FileProcessorHandler._cur_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "FileProcessorHandler.emit": [
            {
                "type": "method",
                "args": {
                    "record": "logging.LogRecord"
                }
            }
        ],
        "FileProcessorHandler._get_log_directory": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileProcessorHandler._symlink_latest_log_directory": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileProcessorHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "base_log_folder": "str",
                    "filename_template": "str"
                }
            }
        ],
        "FileProcessorHandler._render_filename": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "FileProcessorHandler.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileProcessorHandler.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FileProcessorHandler._init_file": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "FileProcessorHandler.set_context": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ]
    },
    "utils.log.logging_mixin": {
        "LoggingMixin._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "LoggingMixin.log": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoggingMixin.logger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StreamLogWriter.encoding": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "StreamLogWriter.logger": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "StreamLogWriter.level": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "StreamLogWriter._buffer": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "StreamLogWriter.__init__": [
            {
                "type": "method",
                "args": {
                    "logger": "logging.Logger",
                    "level": "int"
                }
            }
        ],
        "StreamLogWriter.isatty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedirectStdHandler._use_stderr": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RedirectStdHandler.__init__": [
            {
                "type": "method",
                "args": {
                    "stream": "str"
                }
            }
        ],
        "RedirectStdHandler.stream": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "redirect_stdout": [
            {
                "type": "func",
                "args": {
                    "logger": "logging.Logger",
                    "level": "int"
                }
            }
        ],
        "redirect_stderr": [
            {
                "type": "func",
                "args": {
                    "logger": "logging.Logger",
                    "level": "int"
                }
            }
        ],
        "StreamLogWriter.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StreamLogWriter.write": [
            {
                "type": "method",
                "args": {
                    "message": "str"
                }
            }
        ],
        "set_context": [
            {
                "type": "func",
                "args": {
                    "logger": "logging.Logger",
                    "value": "dict[str, str]"
                }
            }
        ],
        "LoggingMixin._set_context": [
            {
                "type": "method",
                "args": {
                    "context": "dict[str, str]"
                }
            }
        ],
        "LoggingMixin.__init__": [
            {
                "type": "method",
                "args": {
                    "context": "dict[str, str]"
                }
            }
        ]
    },
    "utils.tests": {
        "skipUnlessImported": [
            {
                "type": "func",
                "args": {
                    "module": "str",
                    "obj": "str"
                }
            }
        ],
        "assertEqualIgnoreMultipleSpaces": [
            {
                "type": "func",
                "args": {
                    "case": "unittest.Case",
                    "first": "str",
                    "second": "str",
                    "msg": "str"
                }
            }
        ]
    },
    "utils.sqlalchemy": {
        "utc": [
            {
                "type": "var",
                "anno": "pendulum.Timezone"
            }
        ],
        "UtcDateTime.impl": [
            {
                "type": "attr",
                "anno": "DateTime"
            }
        ],
        "UtcDateTime.process_bind_param": [
            {
                "type": "method",
                "args": {
                    "value": "DateTime",
                    "dialect": "str"
                }
            }
        ],
        "UtcDateTime.process_result_value": [
            {
                "type": "method",
                "args": {
                    "value": "DateTime",
                    "dialect": "str"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "setup_event_handlers": [
            {
                "type": "func",
                "args": {
                    "engine": "sqlalchemy.engine.Engine",
                    "reconnect_timeout_seconds": "int",
                    "initial_backoff_seconds": "float",
                    "max_backoff_seconds": "int"
                }
            }
        ]
    },
    "utils.operator_helpers": {
        "AIRFLOW_VAR_NAME_FORMAT_MAPPING": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "context_to_airflow_vars": [
            {
                "type": "func",
                "args": {
                    "context": "dict",
                    "in_env_var_format": "bool"
                }
            }
        ]
    },
    "utils.trigger_rule": {
        "TriggerRule.ALL_SUCCESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.ALL_FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.ALL_DONE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.ONE_SUCCESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.ONE_FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule.DUMMY": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRule._ALL_TRIGGER_RULES": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TriggerRule.all_triggers": [
            {
                "type": "method",
                "args": {
                    "cls": "object"
                }
            }
        ],
        "TriggerRule.is_valid": [
            {
                "type": "method",
                "args": {
                    "cls": "object",
                    "trigger_rule": "str"
                }
            }
        ]
    },
    "utils.file": {
        "TemporaryDirectory": [
            {
                "type": "func",
                "args": {
                    "suffix": "str",
                    "prefix": "str",
                    "dir": "str"
                }
            }
        ],
        "mkdirs": [
            {
                "type": "func",
                "args": {
                    "path": "str",
                    "mode": "int"
                }
            }
        ]
    },
    "utils.net": {
        "get_hostname": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "utils.timeout": {
        "timeout.seconds": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "timeout.error_message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "timeout.__init__": [
            {
                "type": "method",
                "args": {
                    "seconds": "int",
                    "error_message": "str"
                }
            }
        ],
        "timeout.__exit__": [
            {
                "type": "method",
                "args": {
                    "type": "str",
                    "value": "str",
                    "traceback": "str"
                }
            }
        ],
        "timeout.handle_timeout": [
            {
                "type": "method",
                "args": {
                    "signum": "int",
                    "frame": "str"
                }
            }
        ],
        "timeout.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "utils.state": {
        "State.NONE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.REMOVED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.SCHEDULED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.QUEUED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.RUNNING": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.SUCCESS": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.SHUTDOWN": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.UP_FOR_RETRY": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.UPSTREAM_FAILED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.SKIPPED": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "State.task_states": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "State.dag_states": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "State.state_color": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "State.color": [
            {
                "type": "method",
                "args": {
                    "cls": "State",
                    "state": "str"
                }
            }
        ],
        "State.color_fg": [
            {
                "type": "method",
                "args": {
                    "cls": "State",
                    "state": "str"
                }
            }
        ],
        "State.finished": [
            {
                "type": "method",
                "args": {
                    "cls": "type[State]"
                }
            }
        ],
        "State.unfinished": [
            {
                "type": "method",
                "args": {
                    "cls": "type[State]"
                }
            }
        ]
    },
    "utils.operator_resources": {
        "MB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "TB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "PB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "EB": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "Resource._name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Resource._units_str": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Resource._qty": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Resource.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "units_str": "str",
                    "qty": "int"
                }
            }
        ],
        "Resource.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "Resource.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resource.name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resource.units_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Resource.qty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CpuResource.__init__": [
            {
                "type": "method",
                "args": {
                    "qty": "int"
                }
            }
        ],
        "RamResource.__init__": [
            {
                "type": "method",
                "args": {
                    "qty": "int"
                }
            }
        ],
        "DiskResource.__init__": [
            {
                "type": "method",
                "args": {
                    "qty": "int"
                }
            }
        ],
        "GpuResource.__init__": [
            {
                "type": "method",
                "args": {
                    "qty": "int"
                }
            }
        ],
        "Resources.cpus": [
            {
                "type": "attr",
                "anno": "CpuResource"
            }
        ],
        "Resources.ram": [
            {
                "type": "attr",
                "anno": "RamResource"
            }
        ],
        "Resources.disk": [
            {
                "type": "attr",
                "anno": "DiskResource"
            }
        ],
        "Resources.gpus": [
            {
                "type": "attr",
                "anno": "GpuResource"
            }
        ],
        "Resources.__init__": [
            {
                "type": "method",
                "args": {
                    "cpus": "int",
                    "ram": "int",
                    "disk": "int",
                    "gpus": "int"
                }
            }
        ],
        "Resources.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "Resources.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "utils.dag_processing": {
        "SimpleDag._dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleDag._task_ids": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SimpleDag._full_filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleDag._is_paused": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SimpleDag._concurrency": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SimpleDag._pickle_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleDag._task_special_args": [
            {
                "type": "attr",
                "anno": "dict[str, dict]"
            }
        ],
        "SimpleDag.dag_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.full_filepath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.concurrency": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.is_paused": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.pickle_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.task_special_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDag.get_task_special_arg": [
            {
                "type": "method",
                "args": {
                    "task_id": "str",
                    "special_arg_name": "str"
                }
            }
        ],
        "SimpleDagBag.simple_dags": [
            {
                "type": "attr",
                "anno": "list[SimpleDag]"
            }
        ],
        "SimpleDagBag.dag_id_to_simple_dag": [
            {
                "type": "attr",
                "anno": "dict[str, SimpleDag]"
            }
        ],
        "SimpleDagBag.dag_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SimpleDagBag.get_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "AbstractDagFileProcessor.__metaclass__": [
            {
                "type": "attr",
                "anno": "ABCMeta"
            }
        ],
        "AbstractDagFileProcessor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.terminate": [
            {
                "type": "method",
                "args": {
                    "sigkill": "bool"
                }
            }
        ],
        "AbstractDagFileProcessor.pid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.exit_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.result": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.start_time": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractDagFileProcessor.file_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager._file_paths": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagFileProcessorManager._file_path_queue": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagFileProcessorManager._parallelism": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager._dag_directory": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessorManager._max_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager._process_file_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessorManager._processor_factory": [
            {
                "type": "attr",
                "anno": "AbstractDagFileProcessor"
            }
        ],
        "DagFileProcessorManager._processors": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorManager._last_runtime": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorManager._last_finish_time": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorManager._run_count": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagFileProcessorManager._heart_beat_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessorManager.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_directory": "str",
                    "file_paths": "list",
                    "parallelism": "int",
                    "process_file_interval": "int",
                    "max_runs": "int",
                    "processor_factory": "AbstractDagFileProcessor"
                }
            }
        ],
        "DagFileProcessorManager.file_paths": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.processing_count": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.max_runs_reached": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.get_all_pids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.get_pid": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "DagFileProcessorManager.get_start_time": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "DagFileProcessorManager.get_runtime": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "SimpleDagBag.__init__": [
            {
                "type": "method",
                "args": {
                    "simple_dags": "list[SimpleDag]"
                }
            }
        ],
        "DagFileProcessorManager.heartbeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.wait_until_finished": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessorManager.get_last_finish_time": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "DagFileProcessorManager.get_last_runtime": [
            {
                "type": "method",
                "args": {
                    "file_path": "str"
                }
            }
        ],
        "list_py_file_paths": [
            {
                "type": "func",
                "args": {
                    "directory": "str",
                    "safe_mode": "bool"
                }
            }
        ],
        "SimpleDag.__init__": [
            {
                "type": "method",
                "args": {
                    "dag": "BaseDag",
                    "pickle_id": "str"
                }
            }
        ],
        "DagFileProcessorManager.set_file_paths": [
            {
                "type": "method",
                "args": {
                    "new_file_paths": "list"
                }
            }
        ]
    },
    "utils.weight_rule": {
        "WeightRule.DOWNSTREAM": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WeightRule.UPSTREAM": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WeightRule.ABSOLUTE": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WeightRule._ALL_WEIGHT_RULES": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "WeightRule.all_weight_rules": [
            {
                "type": "method",
                "args": {
                    "cls": "WeightRule"
                }
            }
        ],
        "WeightRule.is_valid": [
            {
                "type": "method",
                "args": {
                    "cls": "WeightRule",
                    "weight_rule": "str"
                }
            }
        ]
    },
    "utils.configuration": {
        "tmp_configuration_copy": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "jobs": {
        "Base": [
            {
                "type": "var",
                "anno": "models.Base"
            }
        ],
        "ID_LEN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "BaseJob.__tablename__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseJob.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.job_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.start_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "BaseJob.end_date": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "BaseJob.latest_heartbeat": [
            {
                "type": "attr",
                "anno": "datetime"
            }
        ],
        "BaseJob.executor_class": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.hostname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.unixname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseJob.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BaseJob.__table_args__": [
            {
                "type": "attr",
                "anno": "tuple[Index, ...]"
            }
        ],
        "BaseJob.executor": [
            {
                "type": "attr",
                "anno": "executors.Executor"
            }
        ],
        "BaseJob.heartrate": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "BaseJob.max_tis_per_query": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseJob.__init__": [
            {
                "type": "method",
                "args": {
                    "executor": "executors.DefaultExecutor",
                    "heartrate": "float",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BaseJob.is_alive": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseJob.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseJob.heartbeat_callback": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "BaseJob._execute": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.class_creation_counter": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessor._file_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessor._result_queue": [
            {
                "type": "attr",
                "anno": "multiprocessing.Queue"
            }
        ],
        "DagFileProcessor._process": [
            {
                "type": "attr",
                "anno": "multiprocessing.Process"
            }
        ],
        "DagFileProcessor._dag_id_white_list": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DagFileProcessor._pickle_dags": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagFileProcessor._result": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagFileProcessor._done": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagFileProcessor._start_time": [
            {
                "type": "attr",
                "anno": "timezone.Timezone"
            }
        ],
        "DagFileProcessor._instance_id": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagFileProcessor.__init__": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "pickle_dags": "bool",
                    "dag_id_white_list": "list[str]"
                }
            }
        ],
        "DagFileProcessor.file_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.pid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.exit_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.start_time": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SchedulerJob.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SchedulerJob.dag_ids": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SchedulerJob.subdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SchedulerJob.num_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob.run_duration": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob._processor_poll_interval": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "SchedulerJob.do_pickle": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SchedulerJob.heartrate": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob.max_threads": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob._log": [
            {
                "type": "attr",
                "anno": "logging.Logger"
            }
        ],
        "SchedulerJob.using_sqlite": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SchedulerJob.dag_dir_list_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob.print_stats_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob.file_process_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob.max_tis_per_query": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "SchedulerJob.heartbeat_callback": [
            {
                "type": "method",
                "args": {
                    "session": "models.Session"
                }
            }
        ],
        "BackfillJob.ID_PREFIX": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.ID_FORMAT_PREFIX": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BackfillJob._DagRunTaskStatus.to_run": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BackfillJob._DagRunTaskStatus.running": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BackfillJob._DagRunTaskStatus.skipped": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.succeeded": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.failed": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.not_ready": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.deadlocked": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.active_runs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BackfillJob._DagRunTaskStatus.executed_dag_run_dates": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "BackfillJob._DagRunTaskStatus.finished_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BackfillJob._DagRunTaskStatus.total_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BackfillJob._DagRunTaskStatus.__init__": [
            {
                "type": "method",
                "args": {
                    "to_run": "dict",
                    "running": "dict",
                    "skipped": "set",
                    "succeeded": "set",
                    "failed": "set",
                    "not_ready": "set",
                    "deadlocked": "set",
                    "active_runs": "list",
                    "executed_dag_run_dates": "set",
                    "finished_runs": "int",
                    "total_runs": "int"
                }
            }
        ],
        "BackfillJob.dag": [
            {
                "type": "attr",
                "anno": "DAG"
            }
        ],
        "BackfillJob.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.bf_start_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.bf_end_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.mark_success": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.donot_pickle": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.ignore_first_depends_on_past": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.ignore_task_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BackfillJob.delay_on_limit_secs": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "BackfillJob.verbose": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BackfillJob.conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "BackfillJob.rerun_failed_tasks": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.__mapper_args__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "LocalTaskJob.task_instance": [
            {
                "type": "attr",
                "anno": "tasks.TaskInstance"
            }
        ],
        "LocalTaskJob.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalTaskJob.ignore_all_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.ignore_depends_on_past": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.ignore_task_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.ignore_ti_state": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.pool": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalTaskJob.pickle_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LocalTaskJob.mark_success": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.terminating": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LocalTaskJob.task_runner": [
            {
                "type": "attr",
                "anno": "tasks.BaseTaskRunner"
            }
        ],
        "LocalTaskJob.__init__": [
            {
                "type": "method",
                "args": {
                    "task_instance": "tasks.TaskInstance",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool",
                    "mark_success": "bool",
                    "pickle_id": "str",
                    "pool": "str",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BackfillJob.__init__": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "mark_success": "bool",
                    "donot_pickle": "bool",
                    "ignore_first_depends_on_past": "bool",
                    "ignore_task_deps": "bool",
                    "pool": "str",
                    "delay_on_limit_secs": "float",
                    "verbose": "bool",
                    "conf": "dict",
                    "rerun_failed_tasks": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BaseJob.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob.create_dag_run": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._process_dags": [
            {
                "type": "method",
                "args": {
                    "dagbag": "DagBag",
                    "dags": "list[DAG]",
                    "tis_out": "str"
                }
            }
        ],
        "SchedulerJob.process_file": [
            {
                "type": "method",
                "args": {
                    "file_path": "str",
                    "pickle_dags": "bool",
                    "session": "settings.Session"
                }
            }
        ],
        "DagFileProcessor._launch_process": [
            {
                "type": "method",
                "args": {
                    "result_queue": "multiprocessing.Queue",
                    "file_path": "str",
                    "pickle_dags": "bool",
                    "dag_id_white_list": "list[str]",
                    "thread_name": "str"
                }
            }
        ],
        "DagFileProcessor.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.terminate": [
            {
                "type": "method",
                "args": {
                    "sigkill": "bool"
                }
            }
        ],
        "LocalTaskJob.on_kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob.__get_task_concurrency_map": [
            {
                "type": "method",
                "args": {
                    "states": "list[State]",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob.update_import_errors": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session",
                    "dagbag": "DagBag"
                }
            }
        ],
        "SchedulerJob.clear_nonexistent_import_errors": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session",
                    "known_file_paths": "list"
                }
            }
        ],
        "BackfillJob._log_progress": [
            {
                "type": "method",
                "args": {
                    "ti_status": "DagRunTaskStatus"
                }
            }
        ],
        "DagFileProcessor.done": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFileProcessor.result": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseJob.reset_state_for_orphaned_tasks": [
            {
                "type": "method",
                "args": {
                    "filter_by_dag_run": "DagRun | None",
                    "session": "settings.Session"
                }
            }
        ],
        "BackfillJob._get_dag_run": [
            {
                "type": "method",
                "args": {
                    "run_date": "datetime",
                    "session": "settings.Session"
                }
            }
        ],
        "BackfillJob._collect_errors": [
            {
                "type": "method",
                "args": {
                    "ti_status": "_DagRunTaskStatus",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob.__init__": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str | None",
                    "dag_ids": "list[str] | None",
                    "subdir": "str",
                    "num_runs": "int",
                    "file_process_interval": "int",
                    "processor_poll_interval": "float",
                    "run_duration": "int | None",
                    "do_pickle": "bool",
                    "log": "logging.Logger",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "SchedulerJob._change_state_for_executable_task_instances": [
            {
                "type": "method",
                "args": {
                    "task_instances": "list[models.TaskInstance]",
                    "acceptable_states": "list[State]",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._change_state_for_tis_without_dagrun": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "old_states": "list[State]",
                    "new_state": "State",
                    "session": "settings.Session"
                }
            }
        ],
        "BaseJob.kill": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "BaseJob.heartbeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SchedulerJob._log_file_processing_stats": [
            {
                "type": "method",
                "args": {
                    "known_file_paths": "list",
                    "processor_manager": "DagFileProcessorManager"
                }
            }
        ],
        "SchedulerJob._enqueue_task_instances_with_queued_state": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "task_instances": "list[models.TaskInstance]"
                }
            }
        ],
        "SchedulerJob._find_executable_task_instances": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "states": "list[State]",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._execute_task_instances": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "states": "list[State]",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob.manage_slas": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "session": "settings.Session"
                }
            }
        ],
        "SchedulerJob._process_executor_events": [
            {
                "type": "method",
                "args": {
                    "simple_dag_bag": "SimpleDagBag",
                    "session": "settings.Session"
                }
            }
        ],
        "LocalTaskJob.heartbeat_callback": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "BackfillJob._task_instances_for_dag_run": [
            {
                "type": "method",
                "args": {
                    "dag_run": "DagRun",
                    "session": "settings.Session"
                }
            }
        ],
        "BackfillJob._manage_executor_state": [
            {
                "type": "method",
                "args": {
                    "running": "dict"
                }
            }
        ],
        "BackfillJob._update_counters": [
            {
                "type": "method",
                "args": {
                    "ti_status": "DagRunTaskStatus"
                }
            }
        ],
        "SchedulerJob._process_task_instances": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "queue": "str",
                    "session": "settings.Session"
                }
            }
        ],
        "LocalTaskJob._execute": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BackfillJob._process_backfill_task_instances": [
            {
                "type": "method",
                "args": {
                    "ti_status": "DagRunTaskStatus",
                    "executor": "executors.Executor",
                    "pickle_id": "str",
                    "start_date": "datetime",
                    "session": "settings.Session"
                }
            }
        ],
        "BackfillJob._execute_for_run_dates": [
            {
                "type": "method",
                "args": {
                    "run_dates": "list[datetime]",
                    "ti_status": "_DagRunTaskStatus",
                    "executor": "executors.Executor",
                    "pickle_id": "str",
                    "start_date": "datetime",
                    "session": "settings.Session"
                }
            }
        ],
        "BackfillJob._execute": [
            {
                "type": "method",
                "args": {
                    "session": "provide_session"
                }
            }
        ],
        "SchedulerJob._execute_helper": [
            {
                "type": "method",
                "args": {
                    "processor_manager": "DagFileProcessorManager"
                }
            }
        ],
        "SchedulerJob._execute": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "task.task_runner.standard_task_runner": {
        "StandardTaskRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "local_task_job": "psutil.Popen"
                }
            }
        ],
        "StandardTaskRunner.process": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "StandardTaskRunner.return_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StandardTaskRunner.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StandardTaskRunner.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StandardTaskRunner.on_finish": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "task.task_runner.base_task_runner": {
        "PYTHONPATH_VAR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BaseTaskRunner._task_instance": [
            {
                "type": "attr",
                "anno": "tasks.TaskInstance"
            }
        ],
        "BaseTaskRunner.run_as_user": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "BaseTaskRunner._cfg_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseTaskRunner._command": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "BaseTaskRunner.process": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "BaseTaskRunner.start": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTaskRunner.return_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTaskRunner.terminate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTaskRunner.on_finish": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTaskRunner.run_command": [
            {
                "type": "method",
                "args": {
                    "run_with": "list",
                    "join_args": "bool"
                }
            }
        ],
        "BaseTaskRunner.__init__": [
            {
                "type": "method",
                "args": {
                    "local_task_job": "LocalTaskJob"
                }
            }
        ],
        "BaseTaskRunner._read_task_logs": [
            {
                "type": "method",
                "args": {
                    "stream": "subprocess.Popen"
                }
            }
        ]
    },
    "task.task_runner": {
        "_TASK_RUNNER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_task_runner": [
            {
                "type": "func",
                "args": {
                    "local_task_job": "str"
                }
            }
        ]
    },
    "config_templates.default_webserver_config": {
        "basedir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SQLALCHEMY_DATABASE_URI": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "CSRF_ENABLED": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "AUTH_TYPE": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "config_templates.default_celery": {
        "_broker_supports_visibility_timeout": [
            {
                "type": "func",
                "args": {
                    "url": "str"
                }
            }
        ],
        "broker_url": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "broker_transport_options": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "DEFAULT_CELERY_CONFIG": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "celery_ssl_active": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "broker_use_ssl": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "result_backend": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ]
    },
    "config_templates.airflow_local_settings": {
        "LOG_LEVEL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FAB_LOG_LEVEL": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LOG_FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BASE_LOG_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PROCESSOR_LOG_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FILENAME_TEMPLATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "PROCESSOR_FILENAME_TEMPLATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "REMOTE_BASE_LOG_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ELASTICSEARCH_HOST": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LOG_ID_TEMPLATE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "END_OF_LOG_MARK": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEFAULT_LOGGING_CONFIG": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "REMOTE_HANDLERS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "REMOTE_LOGGING": [
            {
                "type": "var",
                "anno": "bool"
            }
        ]
    },
    "sensors.http_sensor": {
        "HttpSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HttpSensor.endpoint": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpSensor.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpSensor.request_params": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HttpSensor.headers": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HttpSensor.extra_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HttpSensor.response_check": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "HttpSensor.hook": [
            {
                "type": "attr",
                "anno": "HttpHook"
            }
        ],
        "HttpSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "endpoint": "str",
                    "http_conn_id": "str",
                    "method": "str",
                    "request_params": "dict",
                    "headers": "dict",
                    "response_check": "Callable",
                    "extra_options": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HttpSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.sql_sensor": {
        "SqlSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SqlSensor.template_ext": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "SqlSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqlSensor.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqlSensor.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqlSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "conn_id": "str",
                    "sql": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "SqlSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.base_sensor_operator": {
        "BaseSensorOperator.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseSensorOperator.poke_interval": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseSensorOperator.soft_fail": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseSensorOperator.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BaseSensorOperator.__init__": [
            {
                "type": "method",
                "args": {
                    "poke_interval": "int",
                    "timeout": "int",
                    "soft_fail": "bool",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "BaseSensorOperator.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BaseSensorOperator._do_skip_downstream_tasks": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ],
        "BaseSensorOperator.execute": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.named_hive_partition_sensor": {
        "NamedHivePartitionSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "NamedHivePartitionSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NamedHivePartitionSensor.metastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NamedHivePartitionSensor.partition_names": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "NamedHivePartitionSensor.hook": [
            {
                "type": "attr",
                "anno": "HiveMetastoreHook"
            }
        ],
        "NamedHivePartitionSensor.parse_partition_name": [
            {
                "type": "method",
                "args": {
                    "partition": "str"
                }
            }
        ],
        "NamedHivePartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "partition_names": "list[str]",
                    "metastore_conn_id": "str",
                    "poke_interval": "int",
                    "hook": "HiveMetastoreHook",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "NamedHivePartitionSensor.poke_partition": [
            {
                "type": "method",
                "args": {
                    "partition": "str"
                }
            }
        ],
        "NamedHivePartitionSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.external_task_sensor": {
        "ExternalTaskSensor.template_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ExternalTaskSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalTaskSensor.allowed_states": [
            {
                "type": "attr",
                "anno": "list[State]"
            }
        ],
        "ExternalTaskSensor.execution_delta": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "ExternalTaskSensor.execution_date_fn": [
            {
                "type": "attr",
                "anno": "Callable[[str], datetime]"
            }
        ],
        "ExternalTaskSensor.external_dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalTaskSensor.external_task_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExternalTaskSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "external_dag_id": "str",
                    "external_task_id": "str",
                    "allowed_states": "list[State]",
                    "execution_delta": "float",
                    "execution_date_fn": "Callable[[str], datetime]",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "ExternalTaskSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict",
                    "session": "provide_session"
                }
            }
        ]
    },
    "sensors.hdfs_sensor": {
        "HdfsSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HdfsSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsSensor.filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsSensor.hdfs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HdfsSensor.file_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HdfsSensor.ignored_ext": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HdfsSensor.ignore_copying": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HdfsSensor.hook": [
            {
                "type": "attr",
                "anno": "HDFSHook"
            }
        ],
        "HdfsSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "hdfs_conn_id": "str",
                    "ignored_ext": "list",
                    "ignore_copying": "bool",
                    "file_size": "int",
                    "hook": "HDFSHook",
                    "args": "list",
                    "kwargs": "dict"
                }
            }
        ],
        "HdfsSensor.filter_for_ignored_ext": [
            {
                "type": "method",
                "args": {
                    "result": "list",
                    "ignored_ext": "list",
                    "ignore_copying": "bool"
                }
            }
        ],
        "HdfsSensor.filter_for_filesize": [
            {
                "type": "method",
                "args": {
                    "result": "list",
                    "size": "int"
                }
            }
        ],
        "HdfsSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.s3_prefix_sensor": {
        "S3PrefixSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "S3PrefixSensor.bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.delimiter": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.full_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3PrefixSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3PrefixSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.time_sensor": {
        "TimeSensor.target_time": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TimeSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "target_time": "float",
                    "args": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "TimeSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.hive_partition_sensor": {
        "HivePartitionSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "HivePartitionSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.metastore_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.partition": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HivePartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "partition": "str",
                    "metastore_conn_id": "str",
                    "schema": "str",
                    "poke_interval": "int",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "HivePartitionSensor.hook": [
            {
                "type": "attr",
                "anno": "HiveMetastoreHook"
            }
        ],
        "HivePartitionSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.time_delta_sensor": {
        "TimeDeltaSensor.delta": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TimeDeltaSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "delta": "float",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TimeDeltaSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.metastore_partition_sensor": {
        "MetastorePartitionSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "MetastorePartitionSensor.ui_color": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.partition_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.table": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.schema": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.first_poke": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MetastorePartitionSensor.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "partition_name": "str",
                    "schema": "str",
                    "mysql_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "MetastorePartitionSensor.sql": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MetastorePartitionSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors": {
        "_sensors": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "airflow_importer": [
            {
                "type": "var",
                "anno": "AirflowImporter"
            }
        ],
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "sensors.web_hdfs_sensor": {
        "WebHdfsSensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "WebHdfsSensor.filepath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHdfsSensor.webhdfs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHdfsSensor.__init__": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "webhdfs_conn_id": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "WebHdfsSensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "sensors.s3_key_sensor": {
        "S3KeySensor.template_fields": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "S3KeySensor.bucket_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3KeySensor.bucket_key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3KeySensor.wildcard_match": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "S3KeySensor.aws_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3KeySensor.verify": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "S3KeySensor.__init__": [
            {
                "type": "method",
                "args": {
                    "bucket_key": "str",
                    "bucket_name": "str",
                    "wildcard_match": "bool",
                    "aws_conn_id": "str",
                    "verify": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "S3KeySensor.poke": [
            {
                "type": "method",
                "args": {
                    "context": "dict"
                }
            }
        ]
    },
    "hooks.mssql_hook": {
        "MsSqlHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MsSqlHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MsSqlHook.schema": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "MsSqlHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MsSqlHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "pymssql.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "MsSqlHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.http_hook": {
        "HttpHook.http_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpHook.method": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpHook.base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HttpHook._retry_obj": [
            {
                "type": "attr",
                "anno": "tenacity.Retrying"
            }
        ],
        "HttpHook.__init__": [
            {
                "type": "method",
                "args": {
                    "method": "str",
                    "http_conn_id": "str"
                }
            }
        ],
        "HttpHook.check_response": [
            {
                "type": "method",
                "args": {
                    "response": "requests.Response"
                }
            }
        ],
        "HttpHook.run_and_check": [
            {
                "type": "method",
                "args": {
                    "session": "requests.Session",
                    "prepped_request": "requests.Request",
                    "extra_options": "dict"
                }
            }
        ],
        "HttpHook.get_conn": [
            {
                "type": "method",
                "args": {
                    "headers": "dict"
                }
            }
        ],
        "HttpHook.run": [
            {
                "type": "method",
                "args": {
                    "endpoint": "str",
                    "data": "dict",
                    "headers": "dict",
                    "extra_options": "dict"
                }
            }
        ],
        "HttpHook.run_with_advanced_retry": [
            {
                "type": "method",
                "args": {
                    "_retry_args": "dict",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "hooks.docker_hook": {
        "DockerHook.__base_url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__tls": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__registry": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__username": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__password": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__email": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DockerHook.__reauth": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DockerHook.__init__": [
            {
                "type": "method",
                "args": {
                    "docker_conn_id": "str",
                    "base_url": "str",
                    "version": "str",
                    "tls": "str"
                }
            }
        ],
        "DockerHook.__login": [
            {
                "type": "method",
                "args": {
                    "client": "APIClient"
                }
            }
        ],
        "DockerHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.dbapi_hook": {
        "DbApiHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "DbApiHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DbApiHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DbApiHook.connector": [
            {
                "type": "attr",
                "anno": "BigQueryConnection | None"
            }
        ],
        "DbApiHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "DbApiHook.get_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "BigQueryConnection"
                }
            }
        ],
        "DbApiHook._serialize_cell": [
            {
                "type": "method",
                "args": {
                    "cell": "dict",
                    "conn": "BigQueryConnection"
                }
            }
        ],
        "DbApiHook.bulk_dump": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ],
        "DbApiHook.bulk_load": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ],
        "DbApiHook.get_records": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "DbApiHook.run": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "autocommit": "bool",
                    "parameters": "dict"
                }
            }
        ],
        "DbApiHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int",
                    "replace": "bool"
                }
            }
        ],
        "DbApiHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "BigQueryConnection",
                    "autocommit": "bool"
                }
            }
        ],
        "DbApiHook.get_uri": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DbApiHook.get_sqlalchemy_engine": [
            {
                "type": "method",
                "args": {
                    "engine_kwargs": "dict"
                }
            }
        ],
        "DbApiHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DbApiHook.get_cursor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DbApiHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "DbApiHook.get_first": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict"
                }
            }
        ]
    },
    "hooks.druid_hook": {
        "DruidHook.druid_ingest_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidHook.timeout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DruidHook.max_ingestion_time": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DruidHook.header": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DruidHook.__init__": [
            {
                "type": "method",
                "args": {
                    "druid_ingest_conn_id": "str",
                    "timeout": "int",
                    "max_ingestion_time": "int"
                }
            }
        ],
        "DruidDbApiHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidDbApiHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DruidDbApiHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DruidDbApiHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "DruidDbApiHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "connect.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "DruidDbApiHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "DruidDbApiHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ],
        "DruidDbApiHook.get_uri": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DruidDbApiHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DruidHook.get_conn_url": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DruidHook.submit_indexing_job": [
            {
                "type": "method",
                "args": {
                    "json_index_spec": "dict"
                }
            }
        ]
    },
    "hooks.slack_hook": {
        "SlackHook.token": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlackHook.call": [
            {
                "type": "method",
                "args": {
                    "method": "str",
                    "api_params": "dict"
                }
            }
        ],
        "SlackHook.__get_token": [
            {
                "type": "method",
                "args": {
                    "token": "str",
                    "slack_conn_id": "str"
                }
            }
        ],
        "SlackHook.__init__": [
            {
                "type": "method",
                "args": {
                    "token": "str",
                    "slack_conn_id": "str"
                }
            }
        ]
    },
    "hooks.S3_hook": {
        "S3Hook.parse_s3_url": [
            {
                "type": "method",
                "args": {
                    "s3url": "str"
                }
            }
        ],
        "S3Hook.get_key": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.read_key": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.get_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "S3Hook.select_key": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "bucket_name": "str",
                    "expression": "str",
                    "expression_type": "str",
                    "input_serialization": "dict",
                    "output_serialization": "dict"
                }
            }
        ],
        "S3Hook.check_for_key": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "bucket_name": "str"
                }
            }
        ],
        "S3Hook.load_bytes": [
            {
                "type": "method",
                "args": {
                    "bytes_data": "bytes",
                    "key": "str",
                    "bucket_name": "str",
                    "replace": "bool",
                    "encrypt": "bool"
                }
            }
        ],
        "S3Hook.load_string": [
            {
                "type": "method",
                "args": {
                    "string_data": "str",
                    "key": "str",
                    "bucket_name": "str",
                    "replace": "bool",
                    "encrypt": "bool",
                    "encoding": "str"
                }
            }
        ],
        "S3Hook.load_file": [
            {
                "type": "method",
                "args": {
                    "filename": "str",
                    "key": "str",
                    "bucket_name": "str",
                    "replace": "bool",
                    "encrypt": "bool"
                }
            }
        ],
        "S3Hook.list_keys": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "page_size": "int",
                    "max_items": "int"
                }
            }
        ],
        "S3Hook.get_wildcard_key": [
            {
                "type": "method",
                "args": {
                    "wildcard_key": "str",
                    "bucket_name": "str",
                    "delimiter": "str"
                }
            }
        ],
        "S3Hook.check_for_wildcard_key": [
            {
                "type": "method",
                "args": {
                    "wildcard_key": "str",
                    "bucket_name": "str",
                    "delimiter": "str"
                }
            }
        ],
        "S3Hook.list_prefixes": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "prefix": "str",
                    "delimiter": "str",
                    "page_size": "int",
                    "max_items": "int"
                }
            }
        ],
        "S3Hook.check_for_prefix": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str",
                    "prefix": "str",
                    "delimiter": "str"
                }
            }
        ],
        "S3Hook.check_for_bucket": [
            {
                "type": "method",
                "args": {
                    "bucket_name": "str"
                }
            }
        ]
    },
    "hooks.pig_hook": {
        "PigCliHook.pig_properties": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PigCliHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "PigCliHook.sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "PigCliHook.kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PigCliHook.__init__": [
            {
                "type": "method",
                "args": {
                    "pig_cli_conn_id": "str"
                }
            }
        ],
        "PigCliHook.run_cli": [
            {
                "type": "method",
                "args": {
                    "pig": "str",
                    "verbose": "bool"
                }
            }
        ]
    },
    "hooks.sqlite_hook": {
        "SqliteHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SqliteHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SqliteHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.webhdfs_hook": {
        "_kerberos_security_mode": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "WebHDFSHook.webhdfs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHDFSHook.proxy_user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "WebHDFSHook.__init__": [
            {
                "type": "method",
                "args": {
                    "webhdfs_conn_id": "str",
                    "proxy_user": "str"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "WebHDFSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "WebHDFSHook.load_file": [
            {
                "type": "method",
                "args": {
                    "source": "str",
                    "destination": "str",
                    "overwrite": "bool",
                    "parallelism": "int",
                    "kwargs": "str"
                }
            }
        ],
        "WebHDFSHook.check_for_path": [
            {
                "type": "method",
                "args": {
                    "hdfs_path": "str"
                }
            }
        ]
    },
    "hooks.zendesk_hook": {
        "ZendeskHook.__zendesk_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ZendeskHook.__url": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ZendeskHook.__init__": [
            {
                "type": "method",
                "args": {
                    "zendesk_conn_id": "str"
                }
            }
        ],
        "ZendeskHook.__handle_rate_limit_exception": [
            {
                "type": "method",
                "args": {
                    "rate_limit_exception": "RateLimitError"
                }
            }
        ],
        "ZendeskHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ZendeskHook.call": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "query": "dict",
                    "get_all_pages": "bool",
                    "side_loading": "bool"
                }
            }
        ]
    },
    "hooks.jdbc_hook": {
        "JdbcHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JdbcHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "JdbcHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "jaydebeapi.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "JdbcHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.samba_hook": {
        "SambaHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "SambaHook.__init__": [
            {
                "type": "method",
                "args": {
                    "samba_conn_id": "str"
                }
            }
        ],
        "SambaHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SambaHook.push_from_local": [
            {
                "type": "method",
                "args": {
                    "destination_filepath": "str",
                    "local_filepath": "str"
                }
            }
        ]
    },
    "hooks": {
        "_hooks": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "airflow_importer": [
            {
                "type": "var",
                "anno": "AirflowImporter"
            }
        ],
        "_integrate_plugins": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "hooks.postgres_hook": {
        "PostgresHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PostgresHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PostgresHook.schema": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "PostgresHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "PostgresHook.conn": [
            {
                "type": "attr",
                "anno": "psycopg2.Connection"
            }
        ],
        "PostgresHook._serialize_cell": [
            {
                "type": "method",
                "args": {
                    "cell": "psycopg2.extensions.Cell",
                    "conn": "psycopg2.extensions.Connection"
                }
            }
        ],
        "PostgresHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PostgresHook.copy_expert": [
            {
                "type": "method",
                "args": {
                    "sql": "str",
                    "filename": "str",
                    "open": "typing.Callable[[str], str]"
                }
            }
        ],
        "PostgresHook.bulk_dump": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ],
        "PostgresHook.bulk_load": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ]
    },
    "hooks.hdfs_hook": {
        "snakebite_imported": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "HDFSHook.hdfs_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HDFSHook.proxy_user": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HDFSHook.autoconfig": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HDFSHook.__init__": [
            {
                "type": "method",
                "args": {
                    "hdfs_conn_id": "str",
                    "proxy_user": "str",
                    "autoconfig": "bool"
                }
            }
        ],
        "HDFSHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "hooks.hive_hooks": {
        "HIVE_QUEUE_PRIORITIES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "get_context_from_env_var": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "HiveCliHook.hive_cli_params": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.use_beeline": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "HiveCliHook.auth": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.conn": [
            {
                "type": "attr",
                "anno": "Connection"
            }
        ],
        "HiveCliHook.run_as": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.mapred_queue": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.mapred_queue_priority": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook.mapred_job_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveCliHook._prepare_hiveconf": [
            {
                "type": "method",
                "args": {
                    "d": "dict"
                }
            }
        ],
        "HiveCliHook.sp": [
            {
                "type": "attr",
                "anno": "subprocess.Popen"
            }
        ],
        "HiveMetastoreHook.MAX_PART_COUNT": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "HiveMetastoreHook.metastore_conn": [
            {
                "type": "attr",
                "anno": "hmsclient.HMSClient"
            }
        ],
        "HiveMetastoreHook.metastore": [
            {
                "type": "attr",
                "anno": "hmsclient.HMSClient"
            }
        ],
        "HiveMetastoreHook.__getstate__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveMetastoreHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveMetastoreHook.check_for_partition": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table": "str",
                    "partition": "str"
                }
            }
        ],
        "HiveMetastoreHook.check_for_named_partition": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table": "str",
                    "partition_name": "str"
                }
            }
        ],
        "HiveMetastoreHook.get_table": [
            {
                "type": "method",
                "args": {
                    "table_name": "str",
                    "db": "str"
                }
            }
        ],
        "HiveMetastoreHook.get_tables": [
            {
                "type": "method",
                "args": {
                    "db": "str",
                    "pattern": "str"
                }
            }
        ],
        "HiveMetastoreHook.get_databases": [
            {
                "type": "method",
                "args": {
                    "pattern": "str"
                }
            }
        ],
        "HiveMetastoreHook._get_max_partition_from_part_specs": [
            {
                "type": "method",
                "args": {
                    "part_specs": "list",
                    "partition_key": "str",
                    "filter_map": "dict"
                }
            }
        ],
        "HiveMetastoreHook.table_exists": [
            {
                "type": "method",
                "args": {
                    "table_name": "str",
                    "db": "str"
                }
            }
        ],
        "HiveServer2Hook.hiveserver2_conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HiveServer2Hook.__init__": [
            {
                "type": "method",
                "args": {
                    "hiveserver2_conn_id": "str"
                }
            }
        ],
        "HiveMetastoreHook.max_partition": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table_name": "str",
                    "field": "str",
                    "filter_map": "dict"
                }
            }
        ],
        "HiveMetastoreHook.get_partitions": [
            {
                "type": "method",
                "args": {
                    "schema": "str",
                    "table_name": "str",
                    "filter": "str"
                }
            }
        ],
        "HiveServer2Hook._get_results": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str",
                    "fetch_size": "int",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveServer2Hook.get_results": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str",
                    "fetch_size": "int",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveServer2Hook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str"
                }
            }
        ],
        "HiveServer2Hook.get_records": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str"
                }
            }
        ],
        "HiveServer2Hook.to_csv": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "csv_filepath": "str",
                    "schema": "str",
                    "delimiter": "str",
                    "lineterminator": "str",
                    "output_header": "bool",
                    "fetch_size": "int",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveCliHook.kill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveServer2Hook.get_conn": [
            {
                "type": "method",
                "args": {
                    "schema": "str"
                }
            }
        ],
        "HiveMetastoreHook.get_metastore_client": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveMetastoreHook.__init__": [
            {
                "type": "method",
                "args": {
                    "metastore_conn_id": "str"
                }
            }
        ],
        "HiveMetastoreHook.__setstate__": [
            {
                "type": "method",
                "args": {
                    "d": "dict"
                }
            }
        ],
        "HiveCliHook._prepare_cli_cmd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HiveCliHook.__init__": [
            {
                "type": "method",
                "args": {
                    "hive_cli_conn_id": "str",
                    "run_as": "str",
                    "mapred_queue": "str",
                    "mapred_queue_priority": "str",
                    "mapred_job_name": "str"
                }
            }
        ],
        "HiveCliHook.run_cli": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "schema": "str",
                    "verbose": "bool",
                    "hive_conf": "dict"
                }
            }
        ],
        "HiveCliHook.load_file": [
            {
                "type": "method",
                "args": {
                    "filepath": "str",
                    "table": "str",
                    "delimiter": "str",
                    "field_dict": "dict",
                    "create": "bool",
                    "overwrite": "bool",
                    "partition": "dict",
                    "recreate": "bool",
                    "tblproperties": "dict"
                }
            }
        ],
        "HiveCliHook.load_df": [
            {
                "type": "method",
                "args": {
                    "df": "pd.DataFrame",
                    "table": "str",
                    "field_dict": "dict",
                    "delimiter": "str",
                    "encoding": "str",
                    "pandas_kwargs": "dict",
                    "kwargs": "dict"
                }
            }
        ],
        "HiveCliHook.test_hql": [
            {
                "type": "method",
                "args": {
                    "hql": "str"
                }
            }
        ]
    },
    "hooks.base_hook": {
        "CONN_ENV_PREFIX": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "BaseHook.__init__": [
            {
                "type": "method",
                "args": {
                    "source": "str"
                }
            }
        ],
        "BaseHook._get_connection_from_env": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str"
                }
            }
        ],
        "BaseHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseHook.get_records": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "BaseHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "BaseHook.run": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "BaseHook._get_connections_from_db": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str",
                    "session": "sqla.Session"
                }
            }
        ],
        "BaseHook.get_connections": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str"
                }
            }
        ],
        "BaseHook.get_connection": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str"
                }
            }
        ],
        "BaseHook.get_hook": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[BaseHook]",
                    "conn_id": "str"
                }
            }
        ]
    },
    "hooks.presto_hook": {
        "PrestoHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrestoHook._strip_sql": [
            {
                "type": "method",
                "args": {
                    "sql": "str"
                }
            }
        ],
        "PrestoHook._get_pretty_exception_message": [
            {
                "type": "method",
                "args": {
                    "e": "DatabaseError"
                }
            }
        ],
        "PrestoHook.get_records": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "PrestoHook.get_pandas_df": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "PrestoHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PrestoHook.run": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "parameters": "dict"
                }
            }
        ],
        "PrestoHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list"
                }
            }
        ],
        "PrestoHook.get_first": [
            {
                "type": "method",
                "args": {
                    "hql": "str",
                    "parameters": "dict"
                }
            }
        ]
    },
    "hooks.oracle_hook": {
        "OracleHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "OracleHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "OracleHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "OracleHook.bulk_insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ],
        "OracleHook.insert_rows": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "rows": "list",
                    "target_fields": "list",
                    "commit_every": "int"
                }
            }
        ]
    },
    "hooks.mysql_hook": {
        "MySqlHook.conn_name_attr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlHook.default_conn_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MySqlHook.supports_autocommit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MySqlHook.schema": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "MySqlHook.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MySqlHook.set_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "MySQLdb.cursors.Connection",
                    "autocommit": "bool"
                }
            }
        ],
        "MySqlHook.get_autocommit": [
            {
                "type": "method",
                "args": {
                    "conn": "MySQLdb.Connection"
                }
            }
        ],
        "MySqlHook._serialize_cell": [
            {
                "type": "method",
                "args": {
                    "cell": "MySQLdb.Cursor",
                    "conn": "MySQLdb.Connection"
                }
            }
        ],
        "MySqlHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MySqlHook.bulk_dump": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ],
        "MySqlHook.bulk_load": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "tmp_file": "str"
                }
            }
        ]
    },
    "settings": {
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "RBAC": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "tz": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TIMEZONE": [
            {
                "type": "var",
                "anno": "pendulum.Timezone"
            }
        ],
        "DummyStatsLogger.incr": [
            {
                "type": "method",
                "args": {
                    "cls": "type[StatsClient]",
                    "stat": "str",
                    "count": "int",
                    "rate": "int"
                }
            }
        ],
        "DummyStatsLogger.decr": [
            {
                "type": "method",
                "args": {
                    "cls": "type[StatsClient]",
                    "stat": "str",
                    "count": "int",
                    "rate": "int"
                }
            }
        ],
        "DummyStatsLogger.gauge": [
            {
                "type": "method",
                "args": {
                    "cls": "type[StatsClient]",
                    "stat": "str",
                    "value": "int",
                    "rate": "int",
                    "delta": "bool"
                }
            }
        ],
        "DummyStatsLogger.timing": [
            {
                "type": "method",
                "args": {
                    "cls": "type[StatsClient]",
                    "stat": "str",
                    "dt": "float"
                }
            }
        ],
        "statsd": [
            {
                "type": "var",
                "anno": "StatsClient"
            }
        ],
        "Stats": [
            {
                "type": "var",
                "anno": "StatsClient"
            }
        ],
        "HEADER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LOGGING_LEVEL": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "GUNICORN_WORKER_READY_PREFIX": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "LOG_FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SIMPLE_LOG_FORMAT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AIRFLOW_HOME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SQL_ALCHEMY_CONN": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DAGS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "engine": [
            {
                "type": "var",
                "anno": "scoped_engine"
            }
        ],
        "Session": [
            {
                "type": "var",
                "anno": "scoped_session"
            }
        ],
        "policy": [
            {
                "type": "func",
                "args": {
                    "task_instance": "pdulum.Task"
                }
            }
        ],
        "configure_vars": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "configure_orm": [
            {
                "type": "func",
                "args": {
                    "disable_connection_pool": "bool"
                }
            }
        ],
        "dispose_orm": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "configure_adapters": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "configure_action_logging": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "KILOBYTE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "MEGABYTE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "WEB_COLORS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "validate_session": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "www.utils": {
        "AUTHENTICATE": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "DEFAULT_SENSITIVE_VARIABLE_FIELDS": [
            {
                "type": "var",
                "anno": "tuple[str, ...]"
            }
        ],
        "should_hide_value_for_key": [
            {
                "type": "func",
                "args": {
                    "key_name": "str"
                }
            }
        ],
        "LoginMixin.is_accessible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SuperUserMixin.is_accessible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataProfilingMixin.is_accessible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_params": [
            {
                "type": "func",
                "args": {
                    "kwargs": "str"
                }
            }
        ],
        "generate_pages": [
            {
                "type": "func",
                "args": {
                    "current_page": "int",
                    "num_of_pages": "int",
                    "search": "str",
                    "showPaused": "bool",
                    "window": "int"
                }
            }
        ],
        "limit_sql": [
            {
                "type": "func",
                "args": {
                    "sql": "str",
                    "limit": "int",
                    "conn_type": "str"
                }
            }
        ],
        "epoch": [
            {
                "type": "func",
                "args": {
                    "dttm": "datetime.datetime"
                }
            }
        ],
        "notify_owner": [
            {
                "type": "func",
                "args": {
                    "f": "object"
                }
            }
        ],
        "json_response": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "open_maybe_zipped": [
            {
                "type": "func",
                "args": {
                    "f": "str",
                    "mode": "str"
                }
            }
        ],
        "make_cache_key": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "get_python_source": [
            {
                "type": "func",
                "args": {
                    "x": "object"
                }
            }
        ],
        "UtcFilterConverter.conv_utcdatetime": [
            {
                "type": "method",
                "args": {
                    "column": "str",
                    "name": "str",
                    "kwargs": "str"
                }
            }
        ],
        "action_logging": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "AceEditorWidget.__call__": [
            {
                "type": "method",
                "args": {
                    "field": "wtforms.widgets.Field",
                    "kwargs": "str"
                }
            }
        ],
        "gzipped": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ]
    },
    "www.api.experimental.endpoints": {
        "requires_authentication": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "api_experimental": [
            {
                "type": "var",
                "anno": "Blueprint"
            }
        ],
        "test": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "latest_dag_runs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "task_instance_info": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "task_id": "str"
                }
            }
        ],
        "task_info": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "task_id": "str"
                }
            }
        ],
        "delete_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "create_pool": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_pools": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "delete_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "trigger_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ]
    },
    "www.app": {
        "csrf": [
            {
                "type": "var",
                "anno": "CSRFProtect"
            }
        ],
        "app": [
            {
                "type": "var",
                "anno": "Flask | None"
            }
        ],
        "root_app": [
            {
                "type": "func",
                "args": {
                    "env": "dict",
                    "resp": "Callable[[bytes], None]"
                }
            }
        ],
        "create_app": [
            {
                "type": "func",
                "args": {
                    "config": "dict",
                    "testing": "bool"
                }
            }
        ],
        "cached_app": [
            {
                "type": "func",
                "args": {
                    "config": "dict",
                    "testing": "bool"
                }
            }
        ]
    },
    "www.gunicorn_config": {
        "post_worker_init": [
            {
                "type": "func",
                "args": {
                    "dummy_worker": "settings.Worker"
                }
            }
        ]
    },
    "www.forms": {
        "DateTimeForm.execution_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DateTimeWithNumRunsForm.base_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DateTimeWithNumRunsForm.num_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DateTimeWithNumRunsWithDagRunsForm.execution_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ]
    },
    "www.views": {
        "QUERY_LIMIT": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "CHART_LIMIT": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "UTF8_READER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "dagbag": [
            {
                "type": "var",
                "anno": "models.DagBag"
            }
        ],
        "login_required": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "current_user": [
            {
                "type": "var",
                "anno": "airflow.login.LoginUser"
            }
        ],
        "logout_user": [
            {
                "type": "var",
                "anno": "typing.Callable"
            }
        ],
        "FILTER_BY_OWNER": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "PAGE_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "log_url_formatter": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "LogModelView",
                    "p": "str"
                }
            }
        ],
        "state_token": [
            {
                "type": "func",
                "args": {
                    "state": "str"
                }
            }
        ],
        "parse_datetime_f": [
            {
                "type": "func",
                "args": {
                    "value": "dt.datetime"
                }
            }
        ],
        "datetime_f": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "LogModelView",
                    "p": "str"
                }
            }
        ],
        "nobr_f": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "LogModelView",
                    "p": "str"
                }
            }
        ],
        "label_link": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "ChartModelView",
                    "p": "str"
                }
            }
        ],
        "pool_link": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "str",
                    "p": "str"
                }
            }
        ],
        "pygment_html_render": [
            {
                "type": "func",
                "args": {
                    "s": "str",
                    "lexer": "lexers.TextLexer"
                }
            }
        ],
        "render": [
            {
                "type": "func",
                "args": {
                    "obj": "object",
                    "lexer": "lexers.TextLexer"
                }
            }
        ],
        "wrapped_markdown": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "attr_renderer": [
            {
                "type": "var",
                "anno": "dict[str, lexers.TextLexer]"
            }
        ],
        "data_profiling_required": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "get_chart_height": [
            {
                "type": "func",
                "args": {
                    "dag": "DAG"
                }
            }
        ],
        "Airflow.is_visible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.circles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.show_traceback": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.login": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.logout": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.delete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.GraphForm.arrange": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Airflow.varimport": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QueryView.QueryForm.conn_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QueryView.QueryForm.sql": [
            {
                "type": "attr",
                "anno": "TextAreaField"
            }
        ],
        "AirflowModelView.list_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowModelView.edit_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowModelView.create_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowModelView.column_display_actions": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "AirflowModelView.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ModelViewOnly.named_filter_urls": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ModelViewOnly.can_create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ModelViewOnly.can_edit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ModelViewOnly.can_delete": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ModelViewOnly.column_display_pk": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PoolModelView.column_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "PoolModelView.named_filter_urls": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PoolModelView.form_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SlaMissModelView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMissModelView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMissModelView.column_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SlaMissModelView.named_filter_urls": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "SlaMissModelView.column_searchable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SlaMissModelView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "SlaMissModelView.filter_converter": [
            {
                "type": "attr",
                "anno": "wwwutils.UtcFilterConverter"
            }
        ],
        "SlaMissModelView.form_widget_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ChartModelView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ChartModelView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ChartModelView.form_columns": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ChartModelView.column_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ChartModelView.column_sortable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ChartModelView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "ChartModelView.column_default_sort": [
            {
                "type": "attr",
                "anno": "tuple[str, bool]"
            }
        ],
        "ChartModelView.create_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ChartModelView.edit_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ChartModelView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ChartModelView.column_searchable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ChartModelView.column_descriptions": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ChartModelView.column_labels": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ChartModelView.on_model_change": [
            {
                "type": "method",
                "args": {
                    "form": "Form",
                    "model": "models.Chart",
                    "is_created": "bool"
                }
            }
        ],
        "chart_mapping": [
            {
                "type": "var",
                "anno": "tuple[str, str]"
            }
        ],
        "KnownEventView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KnownEventView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KnownEventView.form_columns": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "KnownEventView.form_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "KnownEventView.column_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "KnownEventView.column_default_sort": [
            {
                "type": "attr",
                "anno": "tuple[str, bool]"
            }
        ],
        "KnownEventView.column_sortable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "KnownEventView.filter_converter": [
            {
                "type": "attr",
                "anno": "wwwutils.UtcFilterConverter"
            }
        ],
        "KnownEventView.form_overrides": [
            {
                "type": "attr",
                "anno": "dict[str, Form]"
            }
        ],
        "VariableView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VariableView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VariableView.list_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VariableView.hidden_field_formatter": [
            {
                "type": "method",
                "args": {
                    "view": "BaseView",
                    "context": "DepContext",
                    "model": "models.Variable",
                    "name": "str"
                }
            }
        ],
        "VariableView.form_columns": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VariableView.column_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VariableView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VariableView.column_searchable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VariableView.column_default_sort": [
            {
                "type": "attr",
                "anno": "tuple[str, bool]"
            }
        ],
        "VariableView.form_widget_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableView.form_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableView.column_sortable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VariableView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "XComView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XComView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XComView.form_columns": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "XComView.form_extra_fields": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "XComView.form_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "XComView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "XComView.column_searchable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "XComView.filter_converter": [
            {
                "type": "attr",
                "anno": "wwwutils.UtcFilterConverter"
            }
        ],
        "XComView.form_overrides": [
            {
                "type": "attr",
                "anno": "dict[str, Form]"
            }
        ],
        "JobModelView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JobModelView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JobModelView.column_display_actions": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "JobModelView.column_default_sort": [
            {
                "type": "attr",
                "anno": "tuple[str, bool]"
            }
        ],
        "JobModelView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "JobModelView.filter_converter": [
            {
                "type": "attr",
                "anno": "wwwutils.UtcFilterConverter"
            }
        ],
        "DagRunModelView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunModelView.can_edit": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagRunModelView.can_create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagRunModelView.column_editable_list": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DagRunModelView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunModelView.column_default_sort": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DagRunModelView.form_choices": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagRunModelView.form_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagRunModelView.column_list": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DagRunModelView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DagRunModelView.filter_converter": [
            {
                "type": "attr",
                "anno": "wwwutils.UtcFilterConverter"
            }
        ],
        "DagRunModelView.column_searchable_list": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "LogModelView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LogModelView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LogModelView.column_display_actions": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "LogModelView.column_default_sort": [
            {
                "type": "attr",
                "anno": "tuple[str, bool]"
            }
        ],
        "LogModelView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "LogModelView.filter_converter": [
            {
                "type": "attr",
                "anno": "wwwutils.UtcFilterConverter"
            }
        ],
        "TaskInstanceModelView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstanceModelView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstanceModelView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "TaskInstanceModelView.filter_converter": [
            {
                "type": "attr",
                "anno": "wwwutils.UtcFilterConverter"
            }
        ],
        "TaskInstanceModelView.named_filter_urls": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskInstanceModelView.column_searchable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "TaskInstanceModelView.column_default_sort": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "TaskInstanceModelView.form_choices": [
            {
                "type": "attr",
                "anno": "dict[str, tuple[str, ...]]"
            }
        ],
        "TaskInstanceModelView.column_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "TaskInstanceModelView.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ConnectionModelView.create_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.edit_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.list_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.form_columns": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ConnectionModelView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.column_default_sort": [
            {
                "type": "attr",
                "anno": "tuple[str, bool]"
            }
        ],
        "ConnectionModelView.column_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "ConnectionModelView.form_overrides": [
            {
                "type": "attr",
                "anno": "dict[str, Form]"
            }
        ],
        "ConnectionModelView.form_widget_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ConnectionModelView.form_extra_fields": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ConnectionModelView.form_choices": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "ConnectionModelView.alert_fernet_key": [
            {
                "type": "method",
                "args": {
                    "cls": "models.ConnectionModel"
                }
            }
        ],
        "ConnectionModelView.is_secure": [
            {
                "type": "method",
                "args": {
                    "cls": "models.ConnectionModel"
                }
            }
        ],
        "UserModelView.verbose_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "UserModelView.verbose_name_plural": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "UserModelView.column_default_sort": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModelView.column_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DagModelView.column_editable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DagModelView.form_excluded_columns": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DagModelView.column_searchable_list": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DagModelView.column_filters": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "DagModelView.filter_converter": [
            {
                "type": "attr",
                "anno": "wwwutils.UtcFilterConverter"
            }
        ],
        "DagModelView.form_widget_args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagModelView.can_delete": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModelView.can_create": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagModelView.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DagModelView.list_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModelView.named_filter_urls": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "recurse_tasks": [
            {
                "type": "func",
                "args": {
                    "tasks": "Union[BaseOperator, list[SubDagOperator]]",
                    "task_ids": "list[str]",
                    "dag_ids": "list[str]",
                    "task_id_to_dag": "dict"
                }
            }
        ],
        "state_f": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "LogModelView",
                    "p": "str"
                }
            }
        ],
        "JobModelView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "task_instance_link": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "LogModelView",
                    "p": "str"
                }
            }
        ],
        "dag_run_link": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "LogModelView",
                    "p": "str"
                }
            }
        ],
        "dag_link": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "LogModelView",
                    "p": "str"
                }
            }
        ],
        "DagModelView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "LogModelView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "DagRunModelView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SlaMissModelView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "Airflow.noaccess": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VersionView.version": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModelView.get_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModelView.get_count_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.variables": [
            {
                "type": "method",
                "args": {
                    "form": "str"
                }
            }
        ],
        "Airflow.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QueryView.query": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRunModelView.action_set_running": [
            {
                "type": "method",
                "args": {
                    "ids": "set[int]",
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRunModelView.action_new_delete": [
            {
                "type": "method",
                "args": {
                    "ids": "set",
                    "session": "sqla.Session"
                }
            }
        ],
        "_connection_ids": [
            {
                "type": "func",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "ChartModelView.form_choices": [
            {
                "type": "attr",
                "anno": "dict[str, tuple[str, ...]]"
            }
        ],
        "Airflow.blocked": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.task_stats": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "fqueued_slots": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "str",
                    "p": "str"
                }
            }
        ],
        "fused_slots": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "str",
                    "p": "str"
                }
            }
        ],
        "PoolModelView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "HomeView.index": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "ConfigurationView.conf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRunModelView.after_model_change": [
            {
                "type": "method",
                "args": {
                    "form": "Form",
                    "dagrun": "DagRun",
                    "is_created": "bool",
                    "session": "str"
                }
            }
        ],
        "DagRunModelView.action_set_success": [
            {
                "type": "method",
                "args": {
                    "ids": "list",
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRunModelView.action_set_failed": [
            {
                "type": "method",
                "args": {
                    "ids": "list",
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.task_instances": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.refresh": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.paused": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.landing_times": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.tries": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.duration": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "duration_f": [
            {
                "type": "func",
                "args": {
                    "v": "str",
                    "c": "str",
                    "m": "LogModelView",
                    "p": "str"
                }
            }
        ],
        "TaskInstanceModelView.column_formatters": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "TaskInstanceModelView.set_task_instance_state": [
            {
                "type": "method",
                "args": {
                    "ids": "list[str]",
                    "target_state": "State",
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstanceModelView.action_set_retry": [
            {
                "type": "method",
                "args": {
                    "ids": "list[str]"
                }
            }
        ],
        "TaskInstanceModelView.action_set_success": [
            {
                "type": "method",
                "args": {
                    "ids": "list[str]"
                }
            }
        ],
        "TaskInstanceModelView.action_set_failed": [
            {
                "type": "method",
                "args": {
                    "ids": "list[str]"
                }
            }
        ],
        "TaskInstanceModelView.action_set_running": [
            {
                "type": "method",
                "args": {
                    "ids": "list[str]"
                }
            }
        ],
        "Airflow._mark_task_instance_state": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_id": "str",
                    "origin": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "upstream": "bool",
                    "downstream": "bool",
                    "future": "bool",
                    "past": "bool",
                    "state": "State"
                }
            }
        ],
        "Airflow.success": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.failed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow._mark_dagrun_state_as_success": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "origin": "str"
                }
            }
        ],
        "Airflow.dagrun_success": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow._mark_dagrun_state_as_failed": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "origin": "str"
                }
            }
        ],
        "Airflow.dagrun_failed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.trigger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.xcom": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.log": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.dag_stats": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.refresh_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VariableView.action_varexport": [
            {
                "type": "method",
                "args": {
                    "ids": "list[int]",
                    "session": "sqla.Session"
                }
            }
        ],
        "TaskInstanceModelView.get_one": [
            {
                "type": "method",
                "args": {
                    "id": "str"
                }
            }
        ],
        "Airflow.tree": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.pickle_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.chart": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_date_time_num_runs_dag_runs_form_data": [
            {
                "type": "func",
                "args": {
                    "request": "request.Request",
                    "session": "settings.Session",
                    "dag": "DagRun"
                }
            }
        ],
        "Airflow.graph": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "TaskInstanceModelView.action_clear": [
            {
                "type": "method",
                "args": {
                    "ids": "str",
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.dag_details": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.rendered": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.task": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.gantt": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.get_logs_with_metadata": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow._clear_dag_tis": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "origin": "str",
                    "recursive": "bool",
                    "confirmed": "bool"
                }
            }
        ],
        "Airflow.dagrun_clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ConnectionModelView.on_form_prefill": [
            {
                "type": "method",
                "args": {
                    "form": "Form",
                    "id": "str"
                }
            }
        ],
        "ConnectionModelView.on_model_change": [
            {
                "type": "method",
                "args": {
                    "form": "Form",
                    "model": "models.Connection",
                    "is_created": "bool"
                }
            }
        ],
        "VariableView.on_form_prefill": [
            {
                "type": "method",
                "args": {
                    "form": "Form",
                    "id": "str"
                }
            }
        ],
        "Airflow.chart_data": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "www.blueprints": {
        "routes": [
            {
                "type": "var",
                "anno": "Blueprint"
            }
        ],
        "index": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "health": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "version": {
        "version": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "plugins_manager": {
        "AirflowPlugin.name": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "AirflowPlugin.operators": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "AirflowPlugin.sensors": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "AirflowPlugin.hooks": [
            {
                "type": "attr",
                "anno": "list[object]"
            }
        ],
        "AirflowPlugin.executors": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "AirflowPlugin.macros": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "AirflowPlugin.admin_views": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "AirflowPlugin.flask_blueprints": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "AirflowPlugin.menu_links": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "plugins_folder": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "plugins": [
            {
                "type": "var",
                "anno": "list[AirflowPlugin]"
            }
        ],
        "norm_pattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "filepath": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "namespace": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "m": [
            {
                "type": "var",
                "anno": "object"
            }
        ],
        "operators_modules": [
            {
                "type": "var",
                "anno": "list[imp.Module]"
            }
        ],
        "sensors_modules": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "hooks_modules": [
            {
                "type": "var",
                "anno": "list[imp.Module]"
            }
        ],
        "executors_modules": [
            {
                "type": "var",
                "anno": "list[imp.Module]"
            }
        ],
        "macros_modules": [
            {
                "type": "var",
                "anno": "list[imp.Module]"
            }
        ],
        "admin_views": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "flask_blueprints": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "menu_links": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "AirflowPlugin.validate": [
            {
                "type": "method",
                "args": {
                    "cls": "object"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "make_module": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "objects": "list[object]"
                }
            }
        ]
    },
    "dag.base_dag": {
        "BaseDag.__metaclass__": [
            {
                "type": "attr",
                "anno": "ABCMeta"
            }
        ],
        "BaseDag.dag_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.task_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.full_filepath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.concurrency": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.is_paused": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDag.pickle_id": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDagBag.dag_ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseDagBag.get_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ]
    },
    "": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "login": [
            {
                "type": "var",
                "anno": "object"
            }
        ],
        "AirflowMacroPlugin.namespace": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowMacroPlugin.__init__": [
            {
                "type": "method",
                "args": {
                    "namespace": "str"
                }
            }
        ],
        "load_login": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "ti_deps.dep_context": {
        "DepContext.deps": [
            {
                "type": "attr",
                "anno": "set[DagUnpausedDep]"
            }
        ],
        "DepContext.flag_upstream_failed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_all_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_depends_on_past": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_in_retry_period": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_task_deps": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.ignore_ti_state": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DepContext.__init__": [
            {
                "type": "method",
                "args": {
                    "deps": "set[DagUnpausedDep]",
                    "flag_upstream_failed": "bool",
                    "ignore_all_deps": "bool",
                    "ignore_depends_on_past": "bool",
                    "ignore_in_retry_period": "bool",
                    "ignore_task_deps": "bool",
                    "ignore_ti_state": "bool"
                }
            }
        ],
        "QUEUEABLE_STATES": [
            {
                "type": "var",
                "anno": "set[State]"
            }
        ],
        "QUEUE_DEPS": [
            {
                "type": "var",
                "anno": "set[State]"
            }
        ],
        "RUN_DEPS": [
            {
                "type": "var",
                "anno": "set[State]"
            }
        ],
        "SCHEDULER_DEPS": [
            {
                "type": "var",
                "anno": "set[State]"
            }
        ]
    },
    "ti_deps.deps.not_in_retry_period_dep": {
        "NotInRetryPeriodDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NotInRetryPeriodDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NotInRetryPeriodDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NotInRetryPeriodDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ]
    },
    "ti_deps.deps.dag_unpaused_dep": {
        "DagUnpausedDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagUnpausedDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagUnpausedDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.valid_state_dep": {
        "ValidStateDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ValidStateDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ValidStateDep._valid_states": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "ValidStateDep.__init__": [
            {
                "type": "method",
                "args": {
                    "valid_states": "set"
                }
            }
        ],
        "ValidStateDep.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ValidStateDep.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ValidStateDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "AirflowException",
                    "dep_context": "DepContext"
                }
            }
        ]
    },
    "ti_deps.deps.not_skipped_dep": {
        "NotSkippedDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NotSkippedDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NotSkippedDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "NotSkippedDep",
                    "session": "provide_session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.task_concurrency_dep": {
        "TaskConcurrencyDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskConcurrencyDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskConcurrencyDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TaskConcurrencyDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "sqla.Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.exec_date_after_start_date_dep": {
        "ExecDateAfterStartDateDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ExecDateAfterStartDateDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ExecDateAfterStartDateDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.base_ti_dep": {
        "BaseTIDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseTIDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "BaseTIDep.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTIDep.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "BaseTIDep.__hash__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTIDep.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTIDep.name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseTIDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ],
        "TIDepStatus": [
            {
                "type": "var",
                "anno": "namedtuple"
            }
        ],
        "BaseTIDep._passing_status": [
            {
                "type": "method",
                "args": {
                    "reason": "str"
                }
            }
        ],
        "BaseTIDep.get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ],
        "BaseTIDep.get_failure_reasons": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ],
        "BaseTIDep.is_met": [
            {
                "type": "method",
                "args": {
                    "ti": "str",
                    "session": "provide_session",
                    "dep_context": "DepContext"
                }
            }
        ],
        "BaseTIDep._failing_status": [
            {
                "type": "method",
                "args": {
                    "reason": "str"
                }
            }
        ]
    },
    "utils.compression": {
        "uncompress_file": [
            {
                "type": "func",
                "args": {
                    "input_file_name": "str",
                    "file_extension": "str",
                    "dest_dir": "str"
                }
            }
        ]
    },
    "ti_deps.deps.dag_ti_slots_available_dep": {
        "DagTISlotsAvailableDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagTISlotsAvailableDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagTISlotsAvailableDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "sqla.Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.trigger_rule_dep": {
        "TriggerRuleDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TriggerRuleDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TriggerRuleDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TriggerRuleDep._evaluate_trigger_rule": [
            {
                "type": "method",
                "args": {
                    "ti": "airflow.models.TaskInstance",
                    "successes": "int",
                    "skipped": "bool",
                    "failed": "int",
                    "upstream_failed": "int",
                    "done": "int",
                    "flag_upstream_failed": "bool",
                    "session": "Session"
                }
            }
        ],
        "TriggerRuleDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "airflow.models.TaskInstance",
                    "session": "Session",
                    "dep_context": "dep_context.DepContext"
                }
            }
        ]
    },
    "ti_deps.deps.prev_dagrun_dep": {
        "PrevDagrunDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PrevDagrunDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PrevDagrunDep.IS_TASK_DEP": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "PrevDagrunDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "TaskInstance",
                    "session": "sqla.Session",
                    "dep_context": "DepContext"
                }
            }
        ]
    },
    "ti_deps.deps.not_running_dep": {
        "NotRunningDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NotRunningDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NotRunningDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "NotRunningDep",
                    "session": "Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.runnable_exec_date_dep": {
        "RunnableExecDateDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "RunnableExecDateDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "RunnableExecDateDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "BaseTIDep",
                    "session": "session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "ti_deps.deps.dagrun_exists_dep": {
        "DagrunRunningDep.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagrunRunningDep.IGNOREABLE": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DagrunRunningDep._get_dep_statuses": [
            {
                "type": "method",
                "args": {
                    "ti": "DagrunRunningDep",
                    "session": "sqla.Session",
                    "dep_context": "dict"
                }
            }
        ]
    },
    "www_rbac.utils": {
        "AUTHENTICATE": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "DEFAULT_SENSITIVE_VARIABLE_FIELDS": [
            {
                "type": "var",
                "anno": "tuple[str, ...]"
            }
        ],
        "should_hide_value_for_key": [
            {
                "type": "func",
                "args": {
                    "key_name": "str"
                }
            }
        ],
        "get_params": [
            {
                "type": "func",
                "args": {
                    "kwargs": "str"
                }
            }
        ],
        "generate_pages": [
            {
                "type": "func",
                "args": {
                    "current_page": "int",
                    "num_of_pages": "int",
                    "search": "str",
                    "showPaused": "bool",
                    "window": "int"
                }
            }
        ],
        "epoch": [
            {
                "type": "func",
                "args": {
                    "dttm": "datetime.datetime"
                }
            }
        ],
        "json_response": [
            {
                "type": "func",
                "args": {
                    "obj": "dict"
                }
            }
        ],
        "open_maybe_zipped": [
            {
                "type": "func",
                "args": {
                    "f": "str",
                    "mode": "str"
                }
            }
        ],
        "make_cache_key": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "state_token": [
            {
                "type": "func",
                "args": {
                    "state": "str"
                }
            }
        ],
        "pygment_html_render": [
            {
                "type": "func",
                "args": {
                    "s": "str",
                    "lexer": "lexers.TextLexer"
                }
            }
        ],
        "render": [
            {
                "type": "func",
                "args": {
                    "obj": "Union[str, dict, list, dict]",
                    "lexer": "lexers.TextLexer"
                }
            }
        ],
        "wrapped_markdown": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "get_attr_renderer": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_chart_height": [
            {
                "type": "func",
                "args": {
                    "dag": "DAG"
                }
            }
        ],
        "recurse_tasks": [
            {
                "type": "func",
                "args": {
                    "tasks": "Union[BaseOperator, list[SubDagOperator]]",
                    "task_ids": "list[str]",
                    "dag_ids": "list[str]",
                    "task_id_to_dag": "dict"
                }
            }
        ],
        "dag_run_link": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "dag_link": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "datetime_f": [
            {
                "type": "func",
                "args": {
                    "attr_name": "str"
                }
            }
        ],
        "nobr_f": [
            {
                "type": "func",
                "args": {
                    "attr_name": "str"
                }
            }
        ],
        "state_f": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "task_instance_link": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ]
    },
    "www_rbac.api.experimental.endpoints": {
        "requires_authentication": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "api_experimental": [
            {
                "type": "var",
                "anno": "Blueprint"
            }
        ],
        "test": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "latest_dag_runs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "dag_paused": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "paused": "str"
                }
            }
        ],
        "_log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "dag_run_status": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str"
                }
            }
        ],
        "task_instance_info": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "task_id": "str"
                }
            }
        ],
        "task_info": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "task_id": "str"
                }
            }
        ],
        "dag_runs": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "delete_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "create_pool": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_pools": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "trigger_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ]
    },
    "www_rbac.security": {
        "viewer_vms": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "user_vms": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "op_vms": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "viewer_perms": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "user_perms": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "op_perms": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "dag_vms": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "dag_perms": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "ROLE_CONFIGS": [
            {
                "type": "var",
                "anno": "list[dict[str, str]]"
            }
        ],
        "EXISTING_ROLES": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "AirflowSecurityManager.get_user_roles": [
            {
                "type": "method",
                "args": {
                    "user": "models.User | None"
                }
            }
        ],
        "AirflowSecurityManager.get_all_permissions_views": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager.get_accessible_dag_ids": [
            {
                "type": "method",
                "args": {
                    "username": "models.User | None"
                }
            }
        ],
        "AirflowSecurityManager.perms": [
            {
                "type": "attr",
                "anno": "set[tuple[str, str]]"
            }
        ],
        "AirflowSecurityManager._get_and_cache_perms": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager.has_access": [
            {
                "type": "method",
                "args": {
                    "permission": "str",
                    "view_name": "str",
                    "user": "models.User"
                }
            }
        ],
        "AirflowSecurityManager._has_role": [
            {
                "type": "method",
                "args": {
                    "role_name_or_list": "str"
                }
            }
        ],
        "AirflowSecurityManager._has_perm": [
            {
                "type": "method",
                "args": {
                    "permission_name": "str",
                    "view_menu_name": "str"
                }
            }
        ],
        "AirflowSecurityManager.has_all_dags_access": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager.sync_perm_for_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "AirflowSecurityManager.update_admin_perm_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager._merge_perm": [
            {
                "type": "method",
                "args": {
                    "permission_name": "str",
                    "view_menu_name": "str"
                }
            }
        ],
        "AirflowSecurityManager.clean_perms": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager.init_role": [
            {
                "type": "method",
                "args": {
                    "role_name": "str",
                    "role_vms": "set[str]",
                    "role_perms": "set[tuple[str, str]]"
                }
            }
        ],
        "AirflowSecurityManager.create_custom_dag_permission_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowSecurityManager.sync_roles": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "www_rbac.widgets": {
        "AirflowModelListWidget.template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ]
    },
    "www_rbac.static_config": {
        "manifest": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "configure_manifest_files": [
            {
                "type": "func",
                "args": {
                    "app": "Any"
                }
            }
        ]
    },
    "www_rbac.app": {
        "app": [
            {
                "type": "var",
                "anno": "Flask"
            }
        ],
        "appbuilder": [
            {
                "type": "var",
                "anno": "AppBuilder"
            }
        ],
        "csrf": [
            {
                "type": "var",
                "anno": "CSRFProtect"
            }
        ],
        "root_app": [
            {
                "type": "func",
                "args": {
                    "env": "dict",
                    "resp": "Callable[[bytes], None]"
                }
            }
        ],
        "create_app": [
            {
                "type": "func",
                "args": {
                    "config": "dict",
                    "session": "settings.Session",
                    "testing": "bool",
                    "app_name": "str"
                }
            }
        ],
        "cached_app": [
            {
                "type": "func",
                "args": {
                    "config": "dict",
                    "session": "settings.Session",
                    "testing": "bool"
                }
            }
        ],
        "cached_appbuilder": [
            {
                "type": "func",
                "args": {
                    "config": "dict",
                    "testing": "bool"
                }
            }
        ]
    },
    "www_rbac.forms": {
        "DateTimeForm.execution_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DateTimeWithNumRunsForm.base_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DateTimeWithNumRunsForm.num_runs": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "DateTimeWithNumRunsWithDagRunsForm.execution_date": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunForm.dag_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunForm.start_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DagRunForm.end_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DagRunForm.run_id": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunForm.state": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunForm.execution_date": [
            {
                "type": "attr",
                "anno": "DateTimeField"
            }
        ],
        "DagRunForm.external_trigger": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ConnectionForm.conn_id": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.conn_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionForm.host": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.schema": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.login": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.password": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "ConnectionForm.port": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ConnectionForm.extra": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionForm.extra__jdbc__drv_path": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.extra__jdbc__drv_clsname": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__project": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__key_path": [
            {
                "type": "attr",
                "anno": "StringField"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__keyfile_dict": [
            {
                "type": "attr",
                "anno": "PasswordField"
            }
        ],
        "ConnectionForm.extra__google_cloud_platform__scope": [
            {
                "type": "attr",
                "anno": "str"
            }
        ]
    },
    "api.common.experimental.get_dag_runs": {
        "get_dag_runs": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "state": "str"
                }
            }
        ]
    },
    "www_rbac.views": {
        "PAGE_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "dagbag": [
            {
                "type": "var",
                "anno": "dagbag"
            }
        ],
        "AirflowBaseView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowBaseView.render": [
            {
                "type": "method",
                "args": {
                    "template": "str",
                    "context": "dict"
                }
            }
        ],
        "Airflow.circles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.show_traceback": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.delete": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.GraphForm.arrange": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VersionView.version": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagFilter.apply": [
            {
                "type": "method",
                "args": {
                    "query": "pd.DataFrame",
                    "func": "Callable"
                }
            }
        ],
        "AirflowModelView.list_widget": [
            {
                "type": "attr",
                "anno": "AirflowModelListWidget"
            }
        ],
        "AirflowModelView.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AirflowModelView.CustomSQLAInterface.session": [
            {
                "type": "attr",
                "anno": "settings.Session"
            }
        ],
        "SlaMissModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SlaMissModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "SlaMissModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple[str, str]"
            }
        ],
        "SlaMissModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list[basefilter]"
            }
        ],
        "SlaMissModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "XComModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "XComModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "XComModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "XComModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.extra_fields": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ConnectionModelView.add_form": [
            {
                "type": "attr",
                "anno": "add_form"
            }
        ],
        "ConnectionModelView.edit_form": [
            {
                "type": "attr",
                "anno": "edit_form"
            }
        ],
        "ConnectionModelView.add_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.edit_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ConnectionModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PoolModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PoolModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PoolModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PoolModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PoolModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PoolModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "PoolModelView.validators_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VariableModelView.list_template": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VariableModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.add_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.edit_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "VariableModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "VariableModelView.validators_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "JobModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "JobModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "JobModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "JobModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "JobModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple[str, str]"
            }
        ],
        "JobModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list[BaseFilter]"
            }
        ],
        "JobModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagRunModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagRunModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "DagRunModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagRunModelView.add_form": [
            {
                "type": "attr",
                "anno": "edit_form"
            }
        ],
        "DagRunModelView.edit_form": [
            {
                "type": "attr",
                "anno": "add_form"
            }
        ],
        "DagRunModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagRunModelView.validators_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "LogModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LogModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "LogModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "LogModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "LogModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "LogModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list[basefilter]"
            }
        ],
        "LogModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict[str, HtmlFormatter]"
            }
        ],
        "TaskInstanceModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TaskInstanceModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TaskInstanceModelView.page_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TaskInstanceModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TaskInstanceModelView.search_columns": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TaskInstanceModelView.base_order": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TaskInstanceModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "DagModelView.route_base": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DagModelView.base_permissions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "DagModelView.list_columns": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "AirflowModelView.CustomSQLAInterface.__init__": [
            {
                "type": "method",
                "args": {
                    "obj": "models.BaseJob"
                }
            }
        ],
        "DagModelView.datamodel": [
            {
                "type": "attr",
                "anno": "SQLAInterface"
            }
        ],
        "TaskInstanceModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "LogModelView.datamodel": [
            {
                "type": "attr",
                "anno": "SQLAInterface"
            }
        ],
        "DagRunModelView.datamodel": [
            {
                "type": "attr",
                "anno": "SQLAInterface"
            }
        ],
        "DagRunModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list",
                    "session": "sqla.Session"
                }
            }
        ],
        "JobModelView.datamodel": [
            {
                "type": "attr",
                "anno": "SQLAInterface"
            }
        ],
        "VariableModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "PoolModelView.datamodel": [
            {
                "type": "attr",
                "anno": "SQLAInterface"
            }
        ],
        "ConnectionModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "ConnectionModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "XComModelView.datamodel": [
            {
                "type": "attr",
                "anno": "AirflowModelView.CustomSQLAInterface"
            }
        ],
        "XComModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "SlaMissModelView.datamodel": [
            {
                "type": "attr",
                "anno": "SQLAInterface"
            }
        ],
        "DagModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "DagModelView.base_filters": [
            {
                "type": "attr",
                "anno": "list[basefilter]"
            }
        ],
        "DagModelView.get_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagModelView.get_count_query": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstanceModelView.set_task_instance_state": [
            {
                "type": "method",
                "args": {
                    "tis": "SQLAInterface",
                    "target_state": "State",
                    "session": "Session"
                }
            }
        ],
        "Airflow.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRunModelView.action_set_running": [
            {
                "type": "method",
                "args": {
                    "drs": "list[DagRun]",
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.blocked": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.task_stats": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.index": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "ConfigurationView.conf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DagRunModelView.action_set_success": [
            {
                "type": "method",
                "args": {
                    "drs": "list[DagRun]",
                    "session": "sqla.Session"
                }
            }
        ],
        "DagRunModelView.action_set_failed": [
            {
                "type": "method",
                "args": {
                    "drs": "list[DagRun]",
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.task_instances": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.refresh": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.paused": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.landing_times": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.tries": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow._mark_task_instance_state": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "task_id": "str",
                    "origin": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "upstream": "bool",
                    "downstream": "bool",
                    "future": "bool",
                    "past": "bool",
                    "state": "State"
                }
            }
        ],
        "Airflow.success": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.failed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow._mark_dagrun_state_as_success": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "origin": "str"
                }
            }
        ],
        "Airflow.dagrun_success": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow._mark_dagrun_state_as_failed": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "confirmed": "bool",
                    "origin": "str"
                }
            }
        ],
        "Airflow.dagrun_failed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.trigger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.xcom": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.log": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.dag_details": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.duration": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.dag_stats": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.refresh_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VariableModelView.action_varexport": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "TaskInstanceModelView.duration_f": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "TaskInstanceModelView.log_url_formatter": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "TaskInstanceModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TaskInstanceModelView.get_one": [
            {
                "type": "method",
                "args": {
                    "id": "str"
                }
            }
        ],
        "TaskInstanceModelView.action_set_retry": [
            {
                "type": "method",
                "args": {
                    "tis": "SQLAInterface"
                }
            }
        ],
        "TaskInstanceModelView.action_set_success": [
            {
                "type": "method",
                "args": {
                    "tis": "SQLAInterface"
                }
            }
        ],
        "TaskInstanceModelView.action_set_failed": [
            {
                "type": "method",
                "args": {
                    "tis": "SQLAInterface"
                }
            }
        ],
        "TaskInstanceModelView.action_set_running": [
            {
                "type": "method",
                "args": {
                    "tis": "SQLAInterface"
                }
            }
        ],
        "VariableModelView.hidden_field_formatter": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "VariableModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableModelView.varimport": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VariableModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "PoolModelView.fqueued_slots": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "PoolModelView.fused_slots": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "PoolModelView.pool_link": [
            {
                "type": "method",
                "args": {
                    "attr": "dict"
                }
            }
        ],
        "PoolModelView.formatters_columns": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PoolModelView.action_muldelete": [
            {
                "type": "method",
                "args": {
                    "items": "list"
                }
            }
        ],
        "Airflow.tree": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "get_date_time_num_runs_dag_runs_form_data": [
            {
                "type": "func",
                "args": {
                    "request": "request.Request",
                    "session": "settings.Session",
                    "dag": "DagRun"
                }
            }
        ],
        "Airflow.graph": [
            {
                "type": "method",
                "args": {
                    "session": "settings.Session"
                }
            }
        ],
        "Airflow.pickle_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TaskInstanceModelView.action_clear": [
            {
                "type": "method",
                "args": {
                    "tis": "list",
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.rendered": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.task": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.gantt": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow.get_logs_with_metadata": [
            {
                "type": "method",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "Airflow._clear_dag_tis": [
            {
                "type": "method",
                "args": {
                    "dag": "DAG",
                    "start_date": "datetime",
                    "end_date": "datetime",
                    "origin": "str",
                    "recursive": "bool",
                    "confirmed": "bool"
                }
            }
        ],
        "Airflow.dagrun_clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Airflow.clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VariableModelView.prefill_form": [
            {
                "type": "method",
                "args": {
                    "form": "sqla.Variable",
                    "id": "str"
                }
            }
        ],
        "ConnectionModelView.prefill_form": [
            {
                "type": "method",
                "args": {
                    "form": "ConnectionForm",
                    "pk": "str"
                }
            }
        ],
        "ConnectionModelView.process_form": [
            {
                "type": "method",
                "args": {
                    "form": "ConnectionForm",
                    "is_created": "bool"
                }
            }
        ]
    },
    "www_rbac.blueprints": {
        "routes": [
            {
                "type": "var",
                "anno": "Blueprint"
            }
        ],
        "index": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "health": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "bin.cli": {
        "api_module": [
            {
                "type": "var",
                "anno": "api.API"
            }
        ],
        "api_client": [
            {
                "type": "var",
                "anno": "api.API"
            }
        ],
        "sigint_handler": [
            {
                "type": "func",
                "args": {
                    "sig": "int",
                    "frame": "int"
                }
            }
        ],
        "setup_logging": [
            {
                "type": "func",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "setup_locations": [
            {
                "type": "func",
                "args": {
                    "process": "str",
                    "pid": "int",
                    "stdout": "str",
                    "stderr": "str",
                    "log": "str"
                }
            }
        ],
        "process_subdir": [
            {
                "type": "func",
                "args": {
                    "subdir": "str"
                }
            }
        ],
        "get_dag": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "get_dags": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "dag_state": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "clear": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "get_num_ready_workers_running": [
            {
                "type": "func",
                "args": {
                    "gunicorn_master_proc": "psutil.Process"
                }
            }
        ],
        "get_num_workers_running": [
            {
                "type": "func",
                "args": {
                    "gunicorn_master_proc": "psutil.Process"
                }
            }
        ],
        "initdb": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "resetdb": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "version": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "alternative_conn_specs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "delete_user": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "list_users": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "list_dag_runs": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "Arg": [
            {
                "type": "var",
                "anno": "namedtuple"
            }
        ],
        "CLIFactory.args": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CLIFactory.dag_subparsers": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "create_user": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "upgradedb": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "set_is_paused": [
            {
                "type": "func",
                "args": {
                    "is_paused": "bool",
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "unpause": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "pause": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "import_helper": [
            {
                "type": "func",
                "args": {
                    "filepath": "str"
                }
            }
        ],
        "list_dags": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "task_failed_deps": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "connections": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "restart_workers": [
            {
                "type": "func",
                "args": {
                    "gunicorn_master_proc": "psutil.Process",
                    "num_workers_expected": "int",
                    "master_timeout": "float"
                }
            }
        ],
        "sigquit_handler": [
            {
                "type": "func",
                "args": {
                    "sig": "int",
                    "frame": "int"
                }
            }
        ],
        "list_tasks": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "render": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "task_state": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "serve_logs": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "test": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "kerberos": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "flower": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "worker": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "scheduler": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "webserver": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "export_helper": [
            {
                "type": "func",
                "args": {
                    "filepath": "str"
                }
            }
        ],
        "variables": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "sync_perm": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "pool": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "_run": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG",
                    "ti": "TaskInstance"
                }
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "backfill": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace",
                    "dag": "DAG"
                }
            }
        ],
        "delete_dag": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "trigger_dag": [
            {
                "type": "func",
                "args": {
                    "args": "argparse.Namespace"
                }
            }
        ],
        "CLIFactory.subparsers": [
            {
                "type": "attr",
                "anno": "dict[str, func]"
            }
        ],
        "CLIFactory.subparsers_dict": [
            {
                "type": "attr",
                "anno": "dict[str, argparse.ArgumentParser]"
            }
        ],
        "CLIFactory.get_parser": [
            {
                "type": "method",
                "args": {
                    "cls": "type[cli_utils.CliFactory]",
                    "dag_parser": "bool"
                }
            }
        ],
        "get_parser": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "configuration": {
        "generate_fernet_key": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "expand_env_var": [
            {
                "type": "func",
                "args": {
                    "env_var": "str"
                }
            }
        ],
        "run_command": [
            {
                "type": "func",
                "args": {
                    "command": "str"
                }
            }
        ],
        "AirflowConfigParser.as_command_stdout": [
            {
                "type": "attr",
                "anno": "set[tuple[str, str]]"
            }
        ],
        "AirflowConfigParser.deprecated_options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AirflowConfigParser.deprecation_format_string": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AirflowConfigParser.defaults": [
            {
                "type": "attr",
                "anno": "ConfigParser"
            }
        ],
        "AirflowConfigParser.is_validated": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "AirflowConfigParser.__init__": [
            {
                "type": "method",
                "args": {
                    "default_config": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AirflowConfigParser._get_env_var_option": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "AirflowConfigParser._warn_deprecate": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str",
                    "deprecated_name": "str"
                }
            }
        ],
        "mkdir_p": [
            {
                "type": "func",
                "args": {
                    "path": "str"
                }
            }
        ],
        "AIRFLOW_HOME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AIRFLOW_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_TEST_DAGS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEST_DAGS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_TEST_PLUGINS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEST_PLUGINS_FOLDER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "parameterized_config": [
            {
                "type": "func",
                "args": {
                    "template": "str"
                }
            }
        ],
        "TEST_CONFIG_FILE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FERNET_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "SECRET_KEY": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEMPLATE_START": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "WEBSERVER_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "has_option": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowConfigParser._get_cmd_option": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "AirflowConfigParser.get": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str",
                    "kwargs": "str"
                }
            }
        ],
        "AirflowConfigParser.has_option": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str"
                }
            }
        ],
        "AirflowConfigParser.getfloat": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "AirflowConfigParser.getint": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "AirflowConfigParser.getboolean": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "AirflowConfigParser._validate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AirflowConfigParser.read": [
            {
                "type": "method",
                "args": {
                    "filenames": "str"
                }
            }
        ],
        "_read_default_config_file": [
            {
                "type": "func",
                "args": {
                    "file_name": "str"
                }
            }
        ],
        "DEFAULT_WEBSERVER_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TEST_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEFAULT_CONFIG": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "conf": [
            {
                "type": "var",
                "anno": "AirflowConfigParser"
            }
        ],
        "getint": [
            {
                "type": "var",
                "anno": "Callable[[str, str], int]"
            }
        ],
        "getfloat": [
            {
                "type": "var",
                "anno": "Callable[[str, str], float]"
            }
        ],
        "getboolean": [
            {
                "type": "var",
                "anno": "Callable[[str, str], bool]"
            }
        ],
        "cfg": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowConfigParser.load_test_config": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "load_test_config": [
            {
                "type": "var",
                "anno": "Callable[[], None]"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "AirflowConfigParser.getsection": [
            {
                "type": "method",
                "args": {
                    "section": "str"
                }
            }
        ],
        "getsection": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "get": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowConfigParser.as_dict": [
            {
                "type": "method",
                "args": {
                    "display_source": "bool",
                    "display_sensitive": "bool"
                }
            }
        ],
        "remove_option": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "AirflowConfigParser.remove_option": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "option": "str",
                    "remove_default": "bool"
                }
            }
        ],
        "as_dict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "set": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ]
    },
    "www_rbac.decorators": {
        "action_logging": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "has_dag_access": [
            {
                "type": "func",
                "args": {
                    "dag_kwargs": "str"
                }
            }
        ],
        "gzipped": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ]
    },
    "utils.db": {
        "log": [
            {
                "type": "var",
                "anno": "logging.Logger"
            }
        ],
        "upgradedb": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "create_session": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "provide_session": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "merge_conn": [
            {
                "type": "func",
                "args": {
                    "conn": "models.Connection",
                    "session": "settings.Session"
                }
            }
        ],
        "initdb": [
            {
                "type": "func",
                "args": {
                    "rbac": "bool"
                }
            }
        ],
        "resetdb": [
            {
                "type": "func",
                "args": {
                    "rbac": "bool"
                }
            }
        ]
    },
    "contrib.utils.sendgrid": {
        "_post_sendgrid_mail": [
            {
                "type": "func",
                "args": {
                    "mail_data": "dict"
                }
            }
        ],
        "send_email": [
            {
                "type": "func",
                "args": {
                    "to": "str",
                    "subject": "str",
                    "html_content": "str",
                    "files": "list",
                    "dryrun": "bool",
                    "cc": "list",
                    "bcc": "list",
                    "mime_subtype": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "utils.cli": {
        "_build_metrics": [
            {
                "type": "func",
                "args": {
                    "func_name": "str",
                    "namespace": "Namespace"
                }
            }
        ],
        "action_logging": [
            {
                "type": "func",
                "args": {
                    "f": "typing.Callable"
                }
            }
        ]
    },
    "contrib.operators.mlengine_operator_utils": {
        "create_evaluate_ops": [
            {
                "type": "func",
                "args": {
                    "task_prefix": "str",
                    "data_format": "str",
                    "input_paths": "str",
                    "prediction_path": "str",
                    "metric_fn_and_keys": "tuple",
                    "validate_fn": "Callable",
                    "batch_prediction_job_id": "str",
                    "project_id": "str",
                    "region": "str",
                    "dataflow_options": "dict",
                    "model_uri": "str",
                    "model_name": "str",
                    "version_name": "str",
                    "dag": "DataFlowPythonOperator"
                }
            }
        ]
    },
    "api.common.experimental.get_task": {
        "get_task": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "task_id": "str"
                }
            }
        ]
    },
    "api.common.experimental.get_task_instance": {
        "get_task_instance": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "task_id": "str",
                    "execution_date": "datetime"
                }
            }
        ]
    },
    "api.common.experimental.get_dag_run_state": {
        "get_dag_run_state": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "execution_date": "datetime"
                }
            }
        ]
    },
    "contrib.hooks.redshift_hook": {
        "RedshiftHook.get_conn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RedshiftHook.create_cluster_snapshot": [
            {
                "type": "method",
                "args": {
                    "snapshot_identifier": "str",
                    "cluster_identifier": "str"
                }
            }
        ],
        "RedshiftHook.restore_from_cluster_snapshot": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str",
                    "snapshot_identifier": "str"
                }
            }
        ],
        "RedshiftHook.describe_cluster_snapshots": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str"
                }
            }
        ],
        "RedshiftHook.delete_cluster": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str",
                    "skip_final_cluster_snapshot": "bool",
                    "final_cluster_snapshot_identifier": "str"
                }
            }
        ],
        "RedshiftHook.cluster_status": [
            {
                "type": "method",
                "args": {
                    "cluster_identifier": "str"
                }
            }
        ]
    },
    "api.common.experimental.pool": {
        "get_pools": [
            {
                "type": "func",
                "args": {
                    "session": "sqla.Session"
                }
            }
        ],
        "get_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "session": "sqla.Session"
                }
            }
        ],
        "delete_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "session": "Session"
                }
            }
        ],
        "create_pool": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "slots": "int",
                    "description": "str",
                    "session": "sqla.Session"
                }
            }
        ]
    },
    "www_rbac.validators": {
        "GreaterEqualThan.__call__": [
            {
                "type": "method",
                "args": {
                    "form": "dict",
                    "field": "Field"
                }
            }
        ]
    },
    "www.validators": {
        "GreaterEqualThan.__call__": [
            {
                "type": "method",
                "args": {
                    "form": "dict",
                    "field": "Field"
                }
            }
        ]
    },
    "api.common.experimental.trigger_dag": {
        "_trigger_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "dag_bag": "DagBag",
                    "dag_run": "DagRun",
                    "run_id": "str",
                    "conf": "str",
                    "execution_date": "str",
                    "replace_microseconds": "bool"
                }
            }
        ],
        "trigger_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "conf": "str",
                    "execution_date": "str",
                    "replace_microseconds": "bool"
                }
            }
        ]
    },
    "api.common.experimental.mark_tasks": {
        "_create_dagruns": [
            {
                "type": "func",
                "args": {
                    "dag": "SubDag",
                    "execution_dates": "list[str]",
                    "state": "State",
                    "run_id_template": "str"
                }
            }
        ],
        "_set_dag_run_state": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str",
                    "execution_date": "str",
                    "state": "State",
                    "session": "Session"
                }
            }
        ],
        "set_dag_run_state_to_running": [
            {
                "type": "func",
                "args": {
                    "dag": "DagRun",
                    "execution_date": "str",
                    "commit": "bool",
                    "session": "Session"
                }
            }
        ],
        "set_state": [
            {
                "type": "func",
                "args": {
                    "task": "TaskInstance",
                    "execution_date": "str",
                    "upstream": "bool",
                    "downstream": "bool",
                    "future": "bool",
                    "past": "bool",
                    "state": "State",
                    "commit": "bool"
                }
            }
        ],
        "set_dag_run_state_to_failed": [
            {
                "type": "func",
                "args": {
                    "dag": "DAG",
                    "execution_date": "str",
                    "commit": "bool",
                    "session": "Session"
                }
            }
        ],
        "set_dag_run_state_to_success": [
            {
                "type": "func",
                "args": {
                    "dag": "DAG",
                    "execution_date": "str",
                    "commit": "bool",
                    "session": "Session"
                }
            }
        ]
    },
    "api.common.experimental.delete_dag": {
        "delete_dag": [
            {
                "type": "func",
                "args": {
                    "dag_id": "str"
                }
            }
        ]
    },
    "api.client.json_client": {
        "Client._request": [
            {
                "type": "method",
                "args": {
                    "url": "str",
                    "method": "str",
                    "json": "dict"
                }
            }
        ],
        "Client.delete_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.create_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "slots": "int",
                    "description": "str"
                }
            }
        ],
        "Client.get_pools": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Client.get_pool": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Client.delete_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str"
                }
            }
        ],
        "Client.trigger_dag": [
            {
                "type": "method",
                "args": {
                    "dag_id": "str",
                    "run_id": "str",
                    "conf": "dict",
                    "execution_date": "str"
                }
            }
        ]
    }
}