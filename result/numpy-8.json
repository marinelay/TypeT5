{
    "matrixlib.tests.test_matrix_linalg": {
        "CASES": [
            {
                "type": "var",
                "anno": "list[LinalgCase]"
            }
        ],
        "MatrixTestCase.TEST_CASES": [
            {
                "type": "attr",
                "anno": "list[LinalgCase]"
            }
        ],
        "_TestNorm2DMatrix.array": [
            {
                "type": "attr",
                "anno": "typing.Type[np.ndarray]"
            }
        ],
        "TestQRMatrix.array": [
            {
                "type": "attr",
                "anno": "typing.Type[np.ndarray]"
            }
        ]
    },
    "matrixlib.tests.test_regression": {
        "TestRegression.test_kron_matrix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_matrix_multiply_by_1d_vector": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_matrix_properties": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_matrix_std_argmax": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "matrixlib.tests.test_interaction": {
        "test_polynomial_mapdomain": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_sort_matrix_none": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_partition_matrix_none": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_dot_scalar_and_matrix_of_objects": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_inner_scalar_and_matrix": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_inner_scalar_and_matrix_of_objects": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "like_function": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_stack": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_object_scalar_multiply": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_trapz_matrix": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_ediff1d_matrix": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_apply_along_axis_matrix": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_kron_matrix": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestConcatenatorMatrix.test_matrix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenatorMatrix.test_matrix_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenatorMatrix.test_matrix_builder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_array_almost_equal_matrix": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_array_equal_error_message_matrix": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_array_astype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_nanfunctions_matrices_general": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_nanfunctions_matrices": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_subtype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_fancy_indexing": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_average_matrix": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "matrixlib.tests.test_masked_matrix": {
        "MMatrix.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[MaskedArray]",
                    "data": "np.ndarray",
                    "mask": "MaskType"
                }
            }
        ],
        "MMatrix.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "TestSubclassing.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestSubclassing.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_masked_unary_operations": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_matrix_builder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_masked_binary_operations": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_maskedarray_subclassing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedMatrix.test_pickling_subbaseclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_matrix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MMatrix._series": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedMatrix.test_ravel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedMatrix.test_compressed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_masked_binary_operations2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedMatrix.test_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedMatrix.test_flat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedMatrix.test_matrix_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedMatrix.test_count_mean_with_matrix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedMatrix.test_allany_onmatrices": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "matrixlib.tests.test_defmatrix": {
        "TestCtor.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCtor.test_bmat_nondefault_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_make_bool_matrix_from_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlgebra.test_scalar_type_pow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlgebra.test_notimplemented": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.a": [
            {
                "type": "attr",
                "anno": "mat.Matrix"
            }
        ],
        "TestNewScalarIndexing.test_dimesions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.test_fancy_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.test_scalar_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.test_row_column_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_returntype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestShape.m": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatrixReturn.test_instance_methods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_numpy_ravel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.test_list_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.test_boolean_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.test_matrix_element": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.test_array_from_matrix_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_expand_dims_matrix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_asmatrix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_comparisons": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_member_ravel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlgebra.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCtor.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_pinv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_matrix_ravel_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_numpy_ravel_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_matrix_memory_sharing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_array_memory_sharing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape.test_member_flatten": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_prod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_noaxis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_max": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_ptp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_min": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewScalarIndexing.test_array_to_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestProperties.test_var": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlgebra.test_pow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCasting.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "matrixlib.tests.test_numeric": {
        "TestDot.test_matscalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_diagonal": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "matrixlib.defmatrix": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "matrix.__array_priority__": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "matrix._getitem": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "matrix.shape": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "matrix.__rmul__": [
            {
                "type": "method",
                "args": {
                    "other": "N.ndarray"
                }
            }
        ],
        "matrix.__imul__": [
            {
                "type": "method",
                "args": {
                    "other": "N.ndarray"
                }
            }
        ],
        "matrix.__pow__": [
            {
                "type": "method",
                "args": {
                    "other": "N.ndarray"
                }
            }
        ],
        "matrix.__ipow__": [
            {
                "type": "method",
                "args": {
                    "other": "N.ndarray"
                }
            }
        ],
        "matrix.__rpow__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "matrix._collapse": [
            {
                "type": "method",
                "args": {
                    "axis": "int"
                }
            }
        ],
        "matrix.sum": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "str",
                    "out": "str"
                }
            }
        ],
        "matrix.squeeze": [
            {
                "type": "method",
                "args": {
                    "axis": "int"
                }
            }
        ],
        "matrix.flatten": [
            {
                "type": "method",
                "args": {
                    "order": "str"
                }
            }
        ],
        "matrix.mean": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "str",
                    "out": "str"
                }
            }
        ],
        "matrix.std": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "ddof": "int"
                }
            }
        ],
        "matrix.var": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "ddof": "int"
                }
            }
        ],
        "matrix.prod": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "str",
                    "out": "list"
                }
            }
        ],
        "matrix.any": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "int"
                }
            }
        ],
        "matrix.all": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "N.ndarray"
                }
            }
        ],
        "matrix.max": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "int"
                }
            }
        ],
        "matrix.min": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "N.ndarray"
                }
            }
        ],
        "matrix.ravel": [
            {
                "type": "method",
                "args": {
                    "order": "str"
                }
            }
        ],
        "matrix.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "matrix.__getitem__": [
            {
                "type": "method",
                "args": {
                    "index": "tuple"
                }
            }
        ],
        "matrix.T": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "matrix.getT": [
            {
                "type": "attr",
                "anno": "N.ndarray"
            }
        ],
        "asmatrix": [
            {
                "type": "func",
                "args": {
                    "data": "object",
                    "dtype": "str"
                }
            }
        ],
        "mat": [
            {
                "type": "var",
                "anno": "N.ndarray"
            }
        ],
        "matrix.I": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "matrix.getI": [
            {
                "type": "attr",
                "anno": "N.ndarray"
            }
        ],
        "matrix.A": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "matrix.getA": [
            {
                "type": "attr",
                "anno": "N.ndarray"
            }
        ],
        "matrix.A1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "matrix.getA1": [
            {
                "type": "attr",
                "anno": "N.ndarray"
            }
        ],
        "matrix.H": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "matrix.getH": [
            {
                "type": "attr",
                "anno": "N.ndarray"
            }
        ],
        "matrix.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "matrix._align": [
            {
                "type": "method",
                "args": {
                    "axis": "int"
                }
            }
        ],
        "matrix.ptp": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "int"
                }
            }
        ],
        "matrix.argmin": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "N.ndarray"
                }
            }
        ],
        "matrix.argmax": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "int"
                }
            }
        ],
        "matrix.tolist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_from_string": [
            {
                "type": "func",
                "args": {
                    "str": "str",
                    "gdict": "dict",
                    "ldict": "dict"
                }
            }
        ],
        "bmat": [
            {
                "type": "func",
                "args": {
                    "obj": "Union[str, N.ndarray]",
                    "ldict": "dict",
                    "gdict": "dict"
                }
            }
        ],
        "_convert_from_string": [
            {
                "type": "func",
                "args": {
                    "data": "str"
                }
            }
        ],
        "matrix.__new__": [
            {
                "type": "method",
                "args": {
                    "subtype": "type",
                    "data": "Union[N.ndarray, matrix]",
                    "dtype": "N.dtype",
                    "copy": "bool"
                }
            }
        ]
    },
    "matrixlib": {
        "__all__": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ]
    },
    "core._methods": {
        "umr_maximum": [
            {
                "type": "var",
                "anno": "um.reduce"
            }
        ],
        "umr_minimum": [
            {
                "type": "var",
                "anno": "um.reduce"
            }
        ],
        "umr_sum": [
            {
                "type": "var",
                "anno": "um.reduce"
            }
        ],
        "umr_prod": [
            {
                "type": "var",
                "anno": "um.reduce"
            }
        ],
        "umr_any": [
            {
                "type": "var",
                "anno": "um.reduce"
            }
        ],
        "umr_all": [
            {
                "type": "var",
                "anno": "um.reduce"
            }
        ],
        "_complex_to_float": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_amax": [
            {
                "type": "func",
                "args": {
                    "a": "um.Variable",
                    "axis": "nt.Optional[int]",
                    "out": "um.Variable",
                    "keepdims": "bool",
                    "initial": "um.Variable",
                    "where": "bool"
                }
            }
        ],
        "_amin": [
            {
                "type": "func",
                "args": {
                    "a": "um.Variable",
                    "axis": "nt.Optional[int]",
                    "out": "um.Variable",
                    "keepdims": "bool",
                    "initial": "um.Variable",
                    "where": "bool"
                }
            }
        ],
        "_sum": [
            {
                "type": "func",
                "args": {
                    "a": "um.array",
                    "axis": "nt.Optional[int]",
                    "dtype": "nt.Optional[nt.Type[nt.Type]]",
                    "out": "nt.Optional[nt.Union[int, str]]",
                    "keepdims": "bool",
                    "initial": "nt.Union[int, str]",
                    "where": "bool"
                }
            }
        ],
        "_prod": [
            {
                "type": "func",
                "args": {
                    "a": "um.array",
                    "axis": "nt.Optional[int]",
                    "dtype": "nt.Optional[nt.Type[nt.Type]]",
                    "out": "nt.Optional[um.array]",
                    "keepdims": "bool",
                    "initial": "_NoValue",
                    "where": "bool"
                }
            }
        ],
        "_any": [
            {
                "type": "func",
                "args": {
                    "a": "um.array",
                    "axis": "int",
                    "dtype": "nt.dtype",
                    "out": "nt.dtype",
                    "keepdims": "bool"
                }
            }
        ],
        "_all": [
            {
                "type": "func",
                "args": {
                    "a": "um.array",
                    "axis": "int",
                    "dtype": "nt.dtype",
                    "out": "nt.dtype",
                    "keepdims": "bool"
                }
            }
        ],
        "_clip_dep_is_scalar_nan": [
            {
                "type": "func",
                "args": {
                    "a": "_NoValue"
                }
            }
        ],
        "_ptp": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "out": "int",
                    "keepdims": "bool"
                }
            }
        ],
        "_dump": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "protocol": "int"
                }
            }
        ],
        "_dumps": [
            {
                "type": "func",
                "args": {
                    "protocol": "int"
                }
            }
        ],
        "_clip_dep_invoke_with_casting": [
            {
                "type": "func",
                "args": {
                    "ufunc": "um.UFunc",
                    "args": "_NoValue",
                    "out": "_NoValue",
                    "casting": "_NoValue",
                    "kwargs": "_NoValue"
                }
            }
        ],
        "_clip_dep_is_byte_swapped": [
            {
                "type": "func",
                "args": {
                    "a": "_NoValue"
                }
            }
        ],
        "_clip": [
            {
                "type": "func",
                "args": {
                    "a": "_NoValue",
                    "min": "_NoValue",
                    "max": "_NoValue",
                    "out": "_NoValue",
                    "casting": "_NoValue",
                    "kwargs": "_NoValue"
                }
            }
        ],
        "_count_reduce_items": [
            {
                "type": "func",
                "args": {
                    "arr": "mu.ndarray",
                    "axis": "int"
                }
            }
        ],
        "_mean": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "keepdims": "bool"
                }
            }
        ],
        "_var": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "ddof": "int",
                    "keepdims": "bool"
                }
            }
        ],
        "_std": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "ddof": "int",
                    "keepdims": "bool"
                }
            }
        ]
    },
    "core.records": {
        "__all__": [
            {
                "type": "var",
                "anno": "nt.List[str]"
            }
        ],
        "ndarray": [
            {
                "type": "var",
                "anno": "type"
            }
        ],
        "_byteorderconv": [
            {
                "type": "var",
                "anno": "nt.Dict[str, str]"
            }
        ],
        "_OrderedCounter.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_OrderedCounter.__reduce__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "find_duplicate": [
            {
                "type": "func",
                "args": {
                    "list": "nt.List[str]"
                }
            }
        ],
        "format_parser.dtype": [
            {
                "type": "attr",
                "anno": "sb.dtype"
            }
        ],
        "format_parser._f_formats": [
            {
                "type": "attr",
                "anno": "nt.List[str]"
            }
        ],
        "format_parser._offsets": [
            {
                "type": "attr",
                "anno": "nt.List[str]"
            }
        ],
        "format_parser._nfields": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "format_parser._names": [
            {
                "type": "attr",
                "anno": "nt.List[str]"
            }
        ],
        "format_parser._titles": [
            {
                "type": "attr",
                "anno": "nt.List[str]"
            }
        ],
        "format_parser._descr": [
            {
                "type": "attr",
                "anno": "sb.dtype"
            }
        ],
        "format_parser._createdescr": [
            {
                "type": "method",
                "args": {
                    "byteorder": "str"
                }
            }
        ],
        "record.__name__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "record.__module__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "recarray.__name__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "recarray.__module__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "recarray.dtype": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_deprecate_shape_0_as_None": [
            {
                "type": "func",
                "args": {
                    "shape": "tuple"
                }
            }
        ],
        "numfmt": [
            {
                "type": "var",
                "anno": "nt.TypeNADict"
            }
        ],
        "record.__setattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "val": "str"
                }
            }
        ],
        "get_remaining_size": [
            {
                "type": "func",
                "args": {
                    "fd": "bytes"
                }
            }
        ],
        "format_parser._parseFormats": [
            {
                "type": "method",
                "args": {
                    "formats": "nt.Union[str, nt.List[str]]",
                    "aligned": "bool"
                }
            }
        ],
        "recarray.__setattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "val": "nt.dtype"
                }
            }
        ],
        "recarray.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "nt.ndarray"
                }
            }
        ],
        "recarray.field": [
            {
                "type": "method",
                "args": {
                    "attr": "int | str | bytes",
                    "val": "str | bytes"
                }
            }
        ],
        "recarray.__getitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int"
                }
            }
        ],
        "recarray.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "record.__getitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int"
                }
            }
        ],
        "record.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "format_parser._setfieldnames": [
            {
                "type": "method",
                "args": {
                    "names": "nt.Union[str, nt.List[str]]",
                    "titles": "nt.Union[str, nt.List[str]]"
                }
            }
        ],
        "format_parser.__init__": [
            {
                "type": "method",
                "args": {
                    "formats": "nt.Union[str, nt.List[str]]",
                    "names": "nt.Union[str, nt.List[str]]",
                    "titles": "nt.Union[str, nt.List[str]]",
                    "aligned": "bool",
                    "byteorder": "str"
                }
            }
        ],
        "fromfile": [
            {
                "type": "func",
                "args": {
                    "fd": "bytes",
                    "dtype": "str",
                    "shape": "tuple",
                    "offset": "int",
                    "formats": "nt.Union[str, nt.List[str]]",
                    "names": "nt.Union[str, nt.List[str]]",
                    "titles": "nt.Union[str, nt.List[str]]",
                    "aligned": "bool",
                    "byteorder": "str"
                }
            }
        ],
        "fromstring": [
            {
                "type": "func",
                "args": {
                    "datastring": "bytes",
                    "dtype": "str",
                    "shape": "tuple",
                    "offset": "int",
                    "formats": "nt.Union[str, nt.List[str]]",
                    "names": "nt.Union[str, nt.List[str]]",
                    "titles": "nt.Union[str, nt.List[str]]",
                    "aligned": "bool",
                    "byteorder": "str"
                }
            }
        ],
        "fromarrays": [
            {
                "type": "func",
                "args": {
                    "arrayList": "tuple",
                    "dtype": "str",
                    "shape": "tuple",
                    "formats": "nt.Union[str, nt.List[str]]",
                    "names": "nt.Union[str, nt.List[str]]",
                    "titles": "nt.Union[str, nt.List[str]]",
                    "aligned": "bool",
                    "byteorder": "str"
                }
            }
        ],
        "recarray.__new__": [
            {
                "type": "method",
                "args": {
                    "subtype": "type",
                    "shape": "nt.Tuple[int, ...]",
                    "dtype": "nt.Union[str, nt.Union[str, nt.List[str]]]",
                    "buf": "bytes",
                    "offset": "int",
                    "strides": "nt.Union[str, ...]",
                    "formats": "nt.Union[str, nt.List[str]]",
                    "names": "nt.Union[str, nt.List[str]]",
                    "titles": "nt.Union[str, nt.List[str]]",
                    "byteorder": "str",
                    "aligned": "bool",
                    "order": "str"
                }
            }
        ],
        "record.pprint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "fromrecords": [
            {
                "type": "func",
                "args": {
                    "recList": "tuple",
                    "dtype": "str",
                    "shape": "tuple",
                    "formats": "nt.Union[str, nt.List[str]]",
                    "names": "nt.Union[str, nt.List[str]]",
                    "titles": "nt.Union[str, nt.List[str]]",
                    "aligned": "bool",
                    "byteorder": "str"
                }
            }
        ],
        "array": [
            {
                "type": "func",
                "args": {
                    "obj": "Union[bytes, ndarray, type, tuple, list, recarray, str]",
                    "dtype": "str",
                    "shape": "tuple",
                    "offset": "int",
                    "strides": "tuple",
                    "formats": "nt.Union[str, nt.List[str]]",
                    "names": "nt.Union[str, nt.List[str]]",
                    "titles": "nt.Union[str, nt.List[str]]",
                    "aligned": "bool",
                    "byteorder": "str",
                    "copy": "bool"
                }
            }
        ],
        "recarray.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "record.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "record.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.overrides": {
        "ARRAY_FUNCTION_ENABLED": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "ArgSpec": [
            {
                "type": "var",
                "anno": "ArgSpec"
            }
        ],
        "set_module": [
            {
                "type": "func",
                "args": {
                    "module": "str"
                }
            }
        ],
        "_wrapped_func_source": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "verify_matching_signatures": [
            {
                "type": "func",
                "args": {
                    "implementation": "function",
                    "dispatcher": "function"
                }
            }
        ],
        "array_function_dispatch": [
            {
                "type": "func",
                "args": {
                    "dispatcher": "function",
                    "module": "str",
                    "verify": "bool",
                    "docs_from_dispatcher": "bool"
                }
            }
        ],
        "array_function_from_dispatcher": [
            {
                "type": "func",
                "args": {
                    "implementation": "function",
                    "module": "str",
                    "verify": "bool",
                    "docs_from_dispatcher": "bool"
                }
            }
        ]
    },
    "core.function_base": {
        "__all__": [
            {
                "type": "var",
                "anno": "types.List[str]"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_linspace_dispatcher": [
            {
                "type": "func",
                "args": {
                    "start": "float",
                    "stop": "float",
                    "num": "int",
                    "endpoint": "bool",
                    "retstep": "bool",
                    "dtype": "types.Type",
                    "axis": "int"
                }
            }
        ],
        "_logspace_dispatcher": [
            {
                "type": "func",
                "args": {
                    "start": "float",
                    "stop": "float",
                    "num": "int",
                    "endpoint": "bool",
                    "base": "float",
                    "dtype": "types.Type",
                    "axis": "int"
                }
            }
        ],
        "_geomspace_dispatcher": [
            {
                "type": "func",
                "args": {
                    "start": "_nx.Tensor",
                    "stop": "_nx.Tensor",
                    "num": "int",
                    "endpoint": "bool",
                    "dtype": "_nx.dtype",
                    "axis": "int"
                }
            }
        ],
        "_needs_add_docstring": [
            {
                "type": "func",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "_add_docstring": [
            {
                "type": "func",
                "args": {
                    "obj": "object",
                    "doc": "str",
                    "warn_on_python": "bool"
                }
            }
        ],
        "add_newdoc": [
            {
                "type": "func",
                "args": {
                    "place": "str",
                    "obj": "object",
                    "doc": "typing.Union[str, typing.Tuple[str, str]]",
                    "warn_on_python": "bool"
                }
            }
        ],
        "linspace": [
            {
                "type": "func",
                "args": {
                    "start": "float",
                    "stop": "float",
                    "num": "int",
                    "endpoint": "bool",
                    "retstep": "bool",
                    "dtype": "types.Type",
                    "axis": "int"
                }
            }
        ],
        "logspace": [
            {
                "type": "func",
                "args": {
                    "start": "float",
                    "stop": "float",
                    "num": "int",
                    "endpoint": "bool",
                    "base": "float",
                    "dtype": "types.Type",
                    "axis": "int"
                }
            }
        ],
        "geomspace": [
            {
                "type": "func",
                "args": {
                    "start": "_nx.Tensor",
                    "stop": "_nx.Tensor",
                    "num": "int",
                    "endpoint": "bool",
                    "dtype": "_nx.dtype",
                    "axis": "int"
                }
            }
        ]
    },
    "core._add_newdocs": {
        "tobytesdoc": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "numeric_type_aliases": [
            {
                "type": "func",
                "args": {
                    "aliases": "list"
                }
            }
        ],
        "possible_aliases": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "add_newdoc_for_scalar_type": [
            {
                "type": "func",
                "args": {
                    "obj": "str",
                    "fixed_aliases": "list",
                    "doc": "str"
                }
            }
        ]
    },
    "core.memmap": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "dtypedescr": [
            {
                "type": "var",
                "anno": "type"
            }
        ],
        "valid_filemodes": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "writeable_filemodes": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "mode_equivalents": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "memmap.__array_priority__": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "memmap._mmap": [
            {
                "type": "attr",
                "anno": "mmap.Mmap"
            }
        ],
        "memmap.offset": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "memmap.mode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "memmap.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "memmap.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "ndarray"
                }
            }
        ],
        "memmap.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "memmap.__new__": [
            {
                "type": "method",
                "args": {
                    "subtype": "type",
                    "filename": "str",
                    "dtype": "type",
                    "mode": "str",
                    "offset": "int",
                    "shape": "tuple",
                    "order": "str"
                }
            }
        ],
        "memmap.__getitem__": [
            {
                "type": "method",
                "args": {
                    "index": "int"
                }
            }
        ],
        "memmap.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "arr": "ndarray",
                    "context": "np.ndarray"
                }
            }
        ]
    },
    "core._dtype_ctypes": {
        "_from_ctypes_scalar": [
            {
                "type": "func",
                "args": {
                    "t": "_ctypes.Type"
                }
            }
        ],
        "_from_ctypes_structure": [
            {
                "type": "func",
                "args": {
                    "t": "_ctypes.Type"
                }
            }
        ],
        "dtype_from_ctypes_type": [
            {
                "type": "func",
                "args": {
                    "t": "_ctypes.Type"
                }
            }
        ],
        "_from_ctypes_union": [
            {
                "type": "func",
                "args": {
                    "t": "_ctypes.Type"
                }
            }
        ],
        "_from_ctypes_array": [
            {
                "type": "func",
                "args": {
                    "t": "_ctypes.Type"
                }
            }
        ]
    },
    "core._type_aliases": {
        "sctypeDict": [
            {
                "type": "var",
                "anno": "TypeNADict"
            }
        ],
        "TypeNADict.__getitem__": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "TypeNADict.get": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "default": "type"
                }
            }
        ],
        "sctypeNA": [
            {
                "type": "var",
                "anno": "TypeNADict"
            }
        ],
        "allTypes": [
            {
                "type": "var",
                "anno": "TypeNADict"
            }
        ],
        "_abstract_types": [
            {
                "type": "var",
                "anno": "TypeNADict"
            }
        ],
        "_concrete_typeinfo": [
            {
                "type": "var",
                "anno": "TypeNADict"
            }
        ],
        "k": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_int_ctypes": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "void": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_set_up_aliases": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "sctypes": [
            {
                "type": "var",
                "anno": "TypeNADict"
            }
        ],
        "_add_array_type": [
            {
                "type": "func",
                "args": {
                    "typename": "str",
                    "bits": "int"
                }
            }
        ],
        "_toadd": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_uint_ctypes": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_set_array_types": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_add_types": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_bits_of": [
            {
                "type": "func",
                "args": {
                    "obj": "type"
                }
            }
        ],
        "bitname": [
            {
                "type": "func",
                "args": {
                    "obj": "type"
                }
            }
        ],
        "_add_aliases": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_concrete_types": [
            {
                "type": "var",
                "anno": "set"
            }
        ],
        "_add_integer_aliases": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core.setup": {
        "NPY_RELAXED_STRIDES_CHECKING": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "NPY_RELAXED_STRIDES_DEBUG": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "CallOnceOnly._check_types": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "CallOnceOnly._check_ieee_macros": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "CallOnceOnly._check_complex": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "CallOnceOnly.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "pythonlib_dir": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "is_npy_no_signal": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "is_npy_no_smp": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "win32_checks": [
            {
                "type": "func",
                "args": {
                    "deflist": "list"
                }
            }
        ],
        "visibility_define": [
            {
                "type": "func",
                "args": {
                    "config": "Configuration"
                }
            }
        ],
        "check_mathlib": [
            {
                "type": "func",
                "args": {
                    "config_cmd": "distutils.core.Command"
                }
            }
        ],
        "check_ieee_macros": [
            {
                "type": "func",
                "args": {
                    "config": "config.Config"
                }
            }
        ],
        "CallOnceOnly.check_ieee_macros": [
            {
                "type": "method",
                "args": {
                    "a": "list",
                    "kw": "dict"
                }
            }
        ],
        "check_math_capabilities": [
            {
                "type": "func",
                "args": {
                    "config": "Configuration",
                    "moredefs": "list",
                    "mathlibs": "list"
                }
            }
        ],
        "check_types": [
            {
                "type": "func",
                "args": {
                    "config_cmd": "CallOnceOnly",
                    "ext": "str",
                    "build_dir": "str"
                }
            }
        ],
        "CallOnceOnly.check_types": [
            {
                "type": "method",
                "args": {
                    "a": "str",
                    "kw": "str"
                }
            }
        ],
        "check_complex": [
            {
                "type": "func",
                "args": {
                    "config": "config.Config",
                    "mathlibs": "list"
                }
            }
        ],
        "CallOnceOnly.check_complex": [
            {
                "type": "method",
                "args": {
                    "a": "tuple",
                    "kw": "tuple"
                }
            }
        ],
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "str"
                }
            }
        ]
    },
    "core.tests.test_umath": {
        "_FilterInvalids.olderr": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "_FilterInvalids.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_FilterInvalids.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_pi": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_e": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_euler_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOut.ArrayWrap.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestComparisons.test_ignore_object_identity_in_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisons.test_ignore_object_identity_in_not_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisons.FunkyType.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestDivision.test_division_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDivision.test_division_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDivision.test_zero_division_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDivision.test_floor_division_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDivision.test_floor_division_signed_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "floor_divide_and_remainder": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray"
                }
            }
        ],
        "_signs": [
            {
                "type": "func",
                "args": {
                    "dt": "float"
                }
            }
        ],
        "TestRemainder.test_remainder_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRemainder.test_float_remainder_roundoff": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCbrt.test_cbrt_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCbrt.test_cbrt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_integer_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_integer_power_with_integer_zero_exponent": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_integer_power_of_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_integer_power_of_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_integer_to_negative_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLog2.test_log2_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLog2.test_log2_ints": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLog2.test_log2_special": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExp2.test_exp2_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp2.test_logaddexp2_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp2.test_logaddexp2_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp2.test_inf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp2.test_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLog.test_log_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExp.test_exp_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialFloats.test_exp_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialFloats.test_log_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialFloats.test_sincos_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialFloats.test_sqrt_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialFloats.test_abs_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialFloats.test_square_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialFloats.test_reciprocal_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "avx_ufuncs": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "TestAVXUfuncs.test_avx_based_ufunc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAVXFloat32Transcendental.test_exp_float32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAVXFloat32Transcendental.test_log_float32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAVXFloat32Transcendental.test_sincos_float32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAVXFloat32Transcendental.test_strided_float32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp.test_logaddexp_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp.test_logaddexp_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp.test_inf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp.test_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogAddExp.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLog1p.test_log1p": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLog1p.test_special": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExpm1.test_expm1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExpm1.test_special": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHypot.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHypot.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "assert_hypot_isnan": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "assert_hypot_isinf": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "TestHypotSpecialValues.test_nan_outputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHypotSpecialValues.test_nan_outputs2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHypotSpecialValues.test_no_fpe": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "assert_arctan2_isnan": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "assert_arctan2_ispinf": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "assert_arctan2_isninf": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "assert_arctan2_ispzero": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "assert_arctan2_isnzero": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "TestArctan2SpecialValues.test_one_one": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_zero_nzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_zero_pzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_zero_negative": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_zero_positive": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_positive_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_negative_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_any_ninf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_any_pinf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_inf_any": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_inf_ninf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_inf_pinf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArctan2SpecialValues.test_nan_any": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLdexp._check_ldexp": [
            {
                "type": "method",
                "args": {
                    "tp": "float"
                }
            }
        ],
        "TestLdexp.test_ldexp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaximum.test_reduce_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaximum.test_float_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaximum.test_object_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaximum.test_complex_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaximum.test_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaximum.test_strided_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimum.test_reduce_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimum.test_float_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimum.test_object_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimum.test_complex_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimum.test_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimum.test_strided_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFmax.test_reduce_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFmax.test_float_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFmax.test_complex_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFmin.test_reduce_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFmin.test_float_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFmin.test_complex_nans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_truth_table_bitwise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBitwiseUFuncs.test_identity": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFloatingPoint.test_floating_point": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDegrees.test_degrees": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRadians.test_radians": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinMax.test_reduce_reorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinMax.test_minimize_no_warns": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPositive.test_valid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPositive.test_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.StoreArrayPrepareWrap._wrap_args": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSpecialMethods.StoreArrayPrepareWrap._prepare_args": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSpecialMethods.StoreArrayPrepareWrap.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray",
                    "context": "tuple"
                }
            }
        ],
        "TestSpecialMethods.StoreArrayPrepareWrap.__array_prepare__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray",
                    "context": "tuple"
                }
            }
        ],
        "TestSpecialMethods.StoreArrayPrepareWrap.args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.StoreArrayPrepareWrap.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_failing_wrap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.Ok.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "TestSpecialMethods.Bad.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "TestSpecialMethods.test_none_wrap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_default_prepare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.with_wrap.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestSpecialMethods.with_wrap.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.with_wrap.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "context": "Any"
                }
            }
        ],
        "TestSpecialMethods.with_prepare.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestSpecialMethods.test_failing_prepare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_array_too_many_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.MyNDArray.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestSpecialMethods.ASub.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "func": "np.ndarray",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestSpecialMethods.C.count": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "TestSpecialMethods.test_ufunc_override_methods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_ufunc_override_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_ufunc_override_exception": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_ufunc_override_not_implemented": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_ufunc_override_disabled": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.OptOut.__array_ufunc__": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSpecialMethods.GreedyArray.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestSpecialMethods.test_gufunc_override": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.B.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "np.ndarray",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestChoose.test_mixed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRationalFunctions.test_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRationalFunctions.test_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRationalFunctions.test_builtin_long": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRoundingFunctions.test_object_direct": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRoundingFunctions.test_object_indirect": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRoundingFunctions.C.__float__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRoundingFunctions.test_fraction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexFunctions.funcs": [
            {
                "type": "attr",
                "anno": "typing.List[typing.Callable]"
            }
        ],
        "TestComplexFunctions.test_precisions_consistent": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_doc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_copysign": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_spacing_gfortran": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_nextafter_vs_spacing": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_pos_nan": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_reduceat": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_complex_nan_comparisons": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_rint_big_int": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_memoverlap_accumulate": [
            {
                "type": "func",
                "args": {
                    "ftype": "type"
                }
            }
        ],
        "test_signaling_nan_exceptions": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "on_powerpc": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_nextafter_0": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_test_spacing": [
            {
                "type": "func",
                "args": {
                    "t": "typing.Callable"
                }
            }
        ],
        "test_spacingl": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_spacingf": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_spacing": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_test_nextafter": [
            {
                "type": "func",
                "args": {
                    "t": "typing.Callable"
                }
            }
        ],
        "test_nextafterl": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_nextafterf": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_nextafter": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestSubclass.simple.__new__": [
            {
                "type": "method",
                "args": {
                    "subtype": "type[np.ndarray]",
                    "shape": "tuple"
                }
            }
        ],
        "TestSubclass.test_subclass_op": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexFunctions.test_against_cmath": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRationalFunctions._test_gcd_inner": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestRationalFunctions.test_gcd_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRationalFunctions._test_lcm_inner": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestRationalFunctions.test_gcd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRationalFunctions.test_lcm_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRationalFunctions.test_lcm": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSign.test_sign_dtype_nan_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSign.test_sign_dtype_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_truth_table_logical": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFmin.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFmax.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimum.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaximum.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExpm1.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBitwiseUFuncs.bitwise_types": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestBitwiseUFuncs.test_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOut.test_out_subok": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_priority": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_old_wrap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_wrap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_check_branch_cut": [
            {
                "type": "func",
                "args": {
                    "f": "Callable[[np.ndarray], np.ndarray]",
                    "x0": "np.ndarray",
                    "dx": "np.ndarray",
                    "re_sign": "int",
                    "im_sign": "int",
                    "sig_zero_ok": "bool",
                    "dtype": "int"
                }
            }
        ],
        "TestComplexFunctions.test_branch_cuts_complex64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexFunctions.test_branch_cuts": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexFunctions.test_it": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_power_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_power_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBitwiseUFuncs.test_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFloat_power.test_type_conversion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_reduceat_empty": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestSign.test_sign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_fast_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_outer_subclass_preserve": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "TestSpecialMethods.A.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "Ufunc",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "out": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestSpecialMethods.test_ufunc_override": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.with_prepare.__array_prepare__": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "context": "np.ndarray"
                }
            }
        ],
        "TestSpecialMethods.test_prepare_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_prepare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_failing_out_wrap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.StoreArrayPrepareWrap.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type[np.ndarray]"
                }
            }
        ],
        "TestAbsoluteNegative.test_lower_align": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOut.ArrayWrap.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "context": "np.ndarray"
                }
            }
        ],
        "TestRemainder.test_float_remainder_exact": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.CSub.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "func": "typing.Callable",
                    "method": "str",
                    "inputs": "typing.Any",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "TestSpecialMethods.C.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "func": "typing.Callable",
                    "method": "str",
                    "inputs": "typing.Any",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "TestSpecialMethods.C.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_ufunc_override_mro": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAdd.test_reduce_alignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAbsoluteNegative.test_abs_neg_blocked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexFunctions.test_loss_of_precision": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestRationalFunctions.test_lcm_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRationalFunctions.test_gcd_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinMax.test_lower_align": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLdexp.test_ldexp_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinMax.test_minmax_blocked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRemainder.test_float_remainder_corner_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_wrap_and_prepare_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFrompyfunc.test_identity": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_ufunc_override_with_super": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_priority_with_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSpecialMethods.test_wrap_with_iterable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHeavside.test_heaviside": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInt.test_logical_not": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_power_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOut.ArrayWrap.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type[np.ndarray]",
                    "arr": "np.ndarray"
                }
            }
        ],
        "TestOut.test_out_wrap_subok": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_attributes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBitwiseUFuncs.test_reduction": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_errstate": {
        "hosttype": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TestErrstate.test_errcall": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestErrstate.test_errstate_decorator": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "arm_softfloat": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "TestErrstate.test_divide": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestErrstate.test_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_regression": {
        "RecursionError": [
            {
                "type": "var",
                "anno": "ClassVar[Exception]"
            }
        ],
        "TestRegression.test_invalid_round": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_dtype_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_zeros_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_asarray_with_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_indexing1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_indexing2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_round": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unicode_swapping": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_dtype_align": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_endian_recarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_arange_endian": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_arange_inf_step": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_divmod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_add_identity": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_numpy_float_python_long_addition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_binary_repr_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unicode_string_comparison": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_broadcast_flat_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_nonarray_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_array_creation_invalid_specification": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_zero_sized_array_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_around": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_character_array_strip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_lexsort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_lexsort_invalid_sequence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.BuggySequence.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.BuggySequence.__getitem__": [
            {
                "type": "method",
                "args": {
                    "key": "int"
                }
            }
        ],
        "TestRegression.test_pickle_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_multiple_assign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_lexsort_strings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_recarray_copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_rec_fromarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ndmin_float64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_axis_minimization": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_dtype_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_dtype_posttuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_numeric_carray_compare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_string_array_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_dtype_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_refcount_vdot": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_noncommutative_reduce_accumulate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_convolve_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_string_NULL": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_junk_in_string_fields_of_recarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_str_64bit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_string_arr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_rand_seed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_deallocation_leak": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_on_invalid_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_casting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unicode_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_scalar_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_binary_repr_0_width": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_fromstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_searchsorted_variable_length": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_string_sort_with_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_sign_bit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.MyFloat.__float__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.VictimObject.deleted": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TestRegression.test_object_array_refcount_self_assign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.VictimObject.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_fromiter_invalid_dtype_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_reduce_big_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_0d_array_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.TestArray.info": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestRegression.test_nonscalar_item_method": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_char_array_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unaligned_unicode_access": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_sign_for_complex_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_for_zero_length_in_choose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_ndmin_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_void_scalar_with_titles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_huge_arange": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_fromiter_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_too_big": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_dtype_keyerrors_": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_lexsort_buffer_length": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_to_fixed_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unicode_to_string_cast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mixed_string_unicode_array_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_misaligned_scalars_segfault": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_misaligned_dot_product_objects": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_duplicate_title_and_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_buffer_hashlib": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_0d_string_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_log1p_compiler_shenanigans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_fromiter_comparison": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_fromstring_crash": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_complex_nan_maximum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_complex_scalar_complex_cast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_uint_int_conversion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_eq_string_and_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_find_common_type_boolean": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_empty_mul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_side_effect": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_any_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ufunc_casting_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_self_reference": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_circular_reference": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_nested": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_self_copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_zerosize_accumulate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_objectarray_setfield": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_setting_rank0_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ticket_1756": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ticket_1770": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_pickle_string_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_pickle_py2_array_latin1_hack": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_pickle_py2_scalar_latin1_hack": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_memoryleak": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ufunc_reduce_memoryleak": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_search_sorted_invalid_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_string_truncation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unique_stable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unicode_alloc_dealloc_match": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_searchsorted_wrong_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_fortran_order_buffer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_assign_from_sequence_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_deepcopy_F_order_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_richcompare_crash": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.Foo.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestRegression.test_pickle_empty_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_frompyfunc_many_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_frompyfunc_nout_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_leak_in_structured_dtype_comparison": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_empty_percentile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_invalid_structured_dtypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_correct_hash_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_void_item_memview": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_structarray_title": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_field_access_by_title": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_eff1d_casting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_pickle_datetime64_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_bad_array_interface": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.T.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.T.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.T.__getitem__": [
            {
                "type": "method",
                "args": {
                    "idx": "int"
                }
            }
        ],
        "TestRegression.T.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_to_ctypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_refcount_error_in_clip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_startswith": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_format_on_flex_array_element": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_nonnative_endian_fill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_fill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_resize_method_system_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_scalar_copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_fields_strides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unpickle_dtype_with_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_char_dump": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_pickle_transposed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.TestArray.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "TestRegression.test_ticket_1538": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_casting_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_void_getitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_structured_count_nonzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_structured_type_to_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_complex_boolean_cast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_astype_copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_custom_float_to_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_frompyfunc_endian": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_void_copyswap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_copymodule_preserves_f_contiguity": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_alignment_update": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_reduce_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_scalar_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ndmin_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ticket_1539": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_fromfile_tofile_seeks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_endian_bool_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_float_imag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_string_argsort_with_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_string_mergesort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_bool_subscript_crash": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_string_truncation_ucs2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_string_astype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_nonzero_byteswap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_duplicate_field_names_assign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_byteswap_complex_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_for_object_scalar_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_for_equal_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_arange_non_native_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_multidim_byteswap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_recarray_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_empty_array_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_pickle_py2_bytes_encoding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_2d__array__shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_pickle_module": [
            {
                "type": "method",
                "args": {
                    "protocol": "int",
                    "val": "np.ndarray"
                }
            }
        ],
        "TestRegression.test_deepcopy_empty_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_deepcopy_on_0d_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_complex64_alignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_from_sequence_scalar_array2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_array_from_sequence_scalar_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_blasdot_uninitialized_memory": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_dot_alignment_sse2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_reshape_zero_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_fancy_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_from_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_lexsort_zerolen_element": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_lexsort_zerolen_custom_strides_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_lexsort_zerolen_custom_strides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_dot": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_noncontiguous_fill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_richcompare_scalar_and_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.OldSqueeze.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type[np.ndarray]",
                    "input_array": "np.ndarray"
                }
            }
        ],
        "TestRegression.test_ufunc_no_unnecessary_views": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_subclass_int_tuple_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_void_scalar_constructor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.TestArray.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "data": "tuple",
                    "info": "dict"
                }
            }
        ],
        "TestRegression.test_reshape_size_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_take_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_reshape_zero_strides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_reshape_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_hstack_invalid_dims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_negative_nd_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_flat_index_byteswap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_flat_byteorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_bool_flat_indexing_invalid_nr_elements": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_assign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_flat_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_structured_arrays_with_objects2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_structured_arrays_with_objects1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_tobytes_FORTRANORDER_discontiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ravel_with_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_compress_small_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_arr_transpose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ticket_1608": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_copy_detection_corner_case": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_copy_detection_zero_dim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_argmax": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_argmax": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.OldSqueeze.squeeze": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_dtype_scalar_squeeze": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_squeeze_axis_handling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_squeeze_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_squeeze_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_repeat_broadcasting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_repeat_discont": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_void_compare_segfault": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_misaligned_objects_segfault": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_sort_bigendian": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_large_float_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_copy_detection_corner_case2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_argmax_byteorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_reshape_trailing_ones_strides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_swap_real": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_arange_underflow_stop_and_step": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_endian_where": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_signed_integer_division_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_chararray_rstrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_complex_scalar_warning": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_scalar_compare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_typeNA": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_pickle_bytes_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_recarray_tolist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_rec_iterate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_take_refcount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_take_object_fail": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ticket_1434": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_assign_obj_listoflists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_attributes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_object_array_refcounting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_dot_negative_stride": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_random_shuffle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_method_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_recarray_single_element": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_scalar_ctors": {
        "TestFromString.test_floating": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromString.test_floating_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExtraArgs.test_superclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExtraArgs.test_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExtraArgs.test_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExtraArgs.test_void": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromInt.test_intp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromInt.test_uint64_from_negative": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_indexerrors": {
        "TestIndexErrors.test_multiindex_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexErrors.test_mapping": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexErrors.test_methods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexErrors.test_iterators_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexErrors.test_take_from_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexErrors.test_arraytypes_fasttake": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexErrors.test_put_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_print": {
        "_REF": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "test_float_types": [
            {
                "type": "func",
                "args": {
                    "tp": "np.type"
                }
            }
        ],
        "test_nan_inf_float": [
            {
                "type": "func",
                "args": {
                    "tp": "type"
                }
            }
        ],
        "test_complex_types": [
            {
                "type": "func",
                "args": {
                    "tp": "np.complex64"
                }
            }
        ],
        "test_complex_inf_nan": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "_test_redirected_print": [
            {
                "type": "func",
                "args": {
                    "x": "np.type",
                    "tp": "np.type",
                    "ref": "str"
                }
            }
        ],
        "test_float_type_print": [
            {
                "type": "func",
                "args": {
                    "tp": "np.type"
                }
            }
        ],
        "test_complex_type_print": [
            {
                "type": "func",
                "args": {
                    "tp": "np.type"
                }
            }
        ],
        "TestCommaDecimalPointLocale.test_locale_single": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_locale_double": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_locale_longdouble": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_scalar_format": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core.tests.test_getlimits": {
        "TestPythonFloat.test_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingle.test_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDouble.test_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLongdouble.test_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinfo.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIinfo.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr.test_iinfo_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr.test_finfo_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_instances": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_plausible_finfo": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "assert_ma_equal": [
            {
                "type": "func",
                "args": {
                    "discovered": "_discovered_machar",
                    "ma_like": "np.dtype"
                }
            }
        ],
        "test_known_types": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestIinfo.test_unsigned_max": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_abc": {
        "TestABC.test_abstract": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestABC.test_uint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestABC.test_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestABC.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestABC.test_floats": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_function_base": {
        "PhysicalQuantity.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type[float]",
                    "value": "float"
                }
            }
        ],
        "PhysicalQuantity.__rmul__": [
            {
                "type": "attr",
                "anno": "__mul__"
            }
        ],
        "PhysicalQuantity.__add__": [
            {
                "type": "method",
                "args": {
                    "x": "PhysicalQuantity"
                }
            }
        ],
        "PhysicalQuantity.__radd__": [
            {
                "type": "attr",
                "anno": "__add__"
            }
        ],
        "PhysicalQuantity.__mul__": [
            {
                "type": "method",
                "args": {
                    "x": "float"
                }
            }
        ],
        "PhysicalQuantity.__rsub__": [
            {
                "type": "method",
                "args": {
                    "x": "PhysicalQuantity"
                }
            }
        ],
        "PhysicalQuantity.__sub__": [
            {
                "type": "method",
                "args": {
                    "x": "PhysicalQuantity"
                }
            }
        ],
        "PhysicalQuantity.__div__": [
            {
                "type": "method",
                "args": {
                    "x": "float"
                }
            }
        ],
        "PhysicalQuantity.__rdiv__": [
            {
                "type": "method",
                "args": {
                    "x": "float"
                }
            }
        ],
        "PhysicalQuantity2.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestLogspace.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogspace.test_physical_quantities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeomspace.test_start_stop_array_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeomspace.test_physical_quantities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeomspace.test_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_corner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_start_stop_array_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_physical_quantities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.Arrayish._data": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "TestLinspace.Arrayish.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "Arrayish"
                }
            }
        ],
        "TestLinspace.test_denormal_numbers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_equivalent_to_arange": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_retstep": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.Arrayish.__array_interface__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.Arrayish.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "ndarray"
                }
            }
        ],
        "TestLinspace.test_array_interface": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeomspace.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeomspace.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeomspace.test_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogspace.test_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeomspace.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogspace.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinspace.test_start_stop_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeomspace.test_start_stop_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLogspace.test_start_stop_array": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_mem_overlap": {
        "ndims": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "size": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "shape": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "MAY_SHARE_BOUNDS": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "MAY_SHARE_EXACT": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_indices_for_nelems": [
            {
                "type": "func",
                "args": {
                    "nelems": "int"
                }
            }
        ],
        "_indices_for_axis": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_indices": [
            {
                "type": "func",
                "args": {
                    "ndims": "int"
                }
            }
        ],
        "test_may_share_memory_bad_max_work": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "view_element_first_byte": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "test_non_ndarray_inputs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_internal_overlap_diophantine": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_internal_overlap_slices": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "iter_random_view_pairs": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "same_steps": "bool",
                    "equal_size": "bool"
                }
            }
        ],
        "check_may_share_memory_easy_fuzz": [
            {
                "type": "func",
                "args": {
                    "get_max_work": "Callable[[np.ndarray, np.ndarray], int]",
                    "same_steps": "bool",
                    "min_count": "int"
                }
            }
        ],
        "test_may_share_memory_harder_fuzz": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_may_share_memory_easy_fuzz": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestUFunc.test_inplace_op_simple_manual": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_diophantine_overflow": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_diophantine_fuzz": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "check_internal_overlap": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "manual_expected": "bool"
                }
            }
        ],
        "test_internal_overlap_fuzz": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_internal_overlap_manual": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "check_may_share_memory_exact": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray"
                }
            }
        ],
        "TestUFunc.test_binary_ufunc_1d_manual": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUFunc.test_unary_ufunc_where_same": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUFunc.test_unary_ufunc_1d_manual": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUFunc.test_ufunc_at_manual": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUFunc.test_binary_ufunc_reduceat_manual": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "assert_copy_equivalent": [
            {
                "type": "func",
                "args": {
                    "operation": "Callable",
                    "args": "list",
                    "out": "np.ndarray",
                    "kwargs": "dict"
                }
            }
        ],
        "TestUFunc.test_unary_gufunc_fuzz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUFunc.check_unary_fuzz": [
            {
                "type": "method",
                "args": {
                    "operation": "Callable",
                    "get_out_axis_size": "Callable",
                    "dtype": "type",
                    "count": "int"
                }
            }
        ],
        "TestUFunc.test_binary_ufunc_reduceat_fuzz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUFunc.test_binary_ufunc_reduce_fuzz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUFunc.test_binary_ufunc_accumulate_fuzz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUFunc.test_unary_ufunc_call_fuzz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_shares_memory_api": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_may_share_memory_manual": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_check_assignment": [
            {
                "type": "func",
                "args": {
                    "srcidx": "tuple",
                    "dstidx": "tuple"
                }
            }
        ],
        "test_overlapping_assignments": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core.tests.test_ufunc": {
        "TestUfuncKwargs.test_kwarg_exact": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncKwargs.test_sig_signature": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncKwargs.test_sig_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncKwargs.test_extobj_refcount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncGenericLoops.np_dtypes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestUfuncGenericLoops.f2": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray"
                }
            }
        ],
        "TestUfuncGenericLoops.foo.conjugate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncGenericLoops.foo.logical_xor": [
            {
                "type": "method",
                "args": {
                    "obj": "uml.Variable"
                }
            }
        ],
        "TestUfuncGenericLoops.test_unary_PyUFunc_O_O": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncGenericLoops.test_unary_PyUFunc_O_O_method_simple": [
            {
                "type": "method",
                "args": {
                    "foo": "int"
                }
            }
        ],
        "TestUfuncGenericLoops.test_binary_PyUFunc_OO_O": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncGenericLoops.test_binary_PyUFunc_OO_O_method": [
            {
                "type": "method",
                "args": {
                    "foo": "int"
                }
            }
        ],
        "TestUfuncGenericLoops.test_binary_PyUFunc_On_Om_method": [
            {
                "type": "method",
                "args": {
                    "foo": "int"
                }
            }
        ],
        "TestUfuncGenericLoops.MyFloat.__getattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "TestUfunc.test_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_pickle_withstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_all_ufunc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.size_inferred": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestUfunc.can_ignore": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestUfunc.test_signature0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature4": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature5": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature6": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature7": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature8": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature_failure_extra_parenthesis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature_failure_mismatching_parenthesis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature_failure_signature_missing_input_arg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_signature_failure_signature_missing_output_arg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_get_signature": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_forced_sig": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_sum_initial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_sum_where": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_innerwt_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_cross1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_matrix_multiply_umath_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_object_comparison": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.HasComparisons.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestUfunc.test_object_array_accumulate_inplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_object_array_reduceat_inplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_zerosize_reduction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_casting_out_param": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_where_param_buffer_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_where_param_alloc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.check_identityless_reduction": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "TestUfunc.test_identityless_reduction_corder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_identityless_reduction_forder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_initial_reduction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_identityless_reduction_nonreorderable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_safe_casting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_ufunc_custom_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_struct_ufunc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_custom_ufunc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_custom_ufunc_forced_sig": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.MyThing.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestUfunc.MyThing.rmul_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestUfunc.MyThing.getitem_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestUfunc.MyThing.shape": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestUfunc.MyThing.__rmul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestUfunc.test_scalar_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_NotImplemented_not_returned": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_no_doc_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_invalid_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_nat_is_not_finite": [
            {
                "type": "method",
                "args": {
                    "nat": "np.ndarray"
                }
            }
        ],
        "TestUfunc.test_nat_is_nan": [
            {
                "type": "method",
                "args": {
                    "nat": "np.datetime64"
                }
            }
        ],
        "TestUfunc.test_nat_is_not_inf": [
            {
                "type": "method",
                "args": {
                    "nat": "np.datetime64"
                }
            }
        ],
        "UNARY_UFUNCS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "UNARY_OBJECT_UFUNCS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "TestUfuncGenericLoops.test_unary_PyUFunc_O_O_method_full": [
            {
                "type": "method",
                "args": {
                    "ufunc": "umt.Ufunc"
                }
            }
        ],
        "TestUfunc.test_object_logical": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_sum_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_ufunc_types": [
            {
                "type": "func",
                "args": {
                    "ufunc": "np.ufunc"
                }
            }
        ],
        "TestUfunc.test_true_divide": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncGenericLoops.test_python_complex_conjugate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncGenericLoops.test_binary_PyUFunc": [
            {
                "type": "method",
                "args": {
                    "input_dtype": "np.dtype",
                    "output_dtype": "np.dtype",
                    "f": "pytest.UFunc",
                    "x": "int",
                    "y": "int"
                }
            }
        ],
        "TestUfuncGenericLoops.test_unary_PyUFunc": [
            {
                "type": "method",
                "args": {
                    "input_dtype": "type",
                    "output_dtype": "type",
                    "f": "Callable[[np.ndarray], np.ndarray]",
                    "x": "int",
                    "y": "int"
                }
            }
        ],
        "TestUfunc.MyThing.__getitem__": [
            {
                "type": "method",
                "args": {
                    "i": "int"
                }
            }
        ],
        "TestUfunc.MyThing.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.MyThing.__init__": [
            {
                "type": "method",
                "args": {
                    "shape": "tuple[int, ...]"
                }
            }
        ],
        "TestUfunc.test_custom_array_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.MyA.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "umt.Ufunc",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestUfunc.test_identityless_reduction_noncontig_unaligned": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_scalar_reduction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_reduce_wrong_dimension_output": [
            {
                "type": "method",
                "args": {
                    "f_reduce": "Callable[[np.ndarray], np.ndarray]",
                    "output_shape": "tuple"
                }
            }
        ],
        "TestUfunc.test_reduce_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_inplace_fancy_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_operand_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_reduction_where_initial_needed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_where_param": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_euclidean_pdist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_innerwt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_output_argument": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_endian": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_type_cast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_inner1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_ufunc_noncontiguous": [
            {
                "type": "func",
                "args": {
                    "ufunc": "np.ufunc"
                }
            }
        ],
        "TestUfunc.test_reduceat_shifting_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_incontiguous_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_identityless_reduction_noncontig": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_identityless_reduction_otherorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.compare_matrix_multiply_results": [
            {
                "type": "method",
                "args": {
                    "tp": "type"
                }
            }
        ],
        "TestUfunc.test_matrix_multiply": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_structured_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_can_ignore_signature": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_cumsum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_object_array_reduction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_keepdims_argument": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_axis_argument": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_axes_argument": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_sum_stability": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_axis_out_of_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_reduce_zero_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_ufunc_warn_with_nan": [
            {
                "type": "func",
                "args": {
                    "ufunc": "TestUfunc"
                }
            }
        ],
        "TestUfunc.test_reduce_noncontig_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunc.test_reduction_with_where_and_initial": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "where": "int",
                    "initial": "int"
                }
            }
        ],
        "TestUfunc.test_reduction_with_where": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "where": "np.ndarray"
                }
            }
        ]
    },
    "core.tests.test_deprecations": {
        "_has_pytz": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "_DeprecationTestCase.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DeprecationTestCase.warning_cls": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_DeprecationTestCase.warn_ctx": [
            {
                "type": "attr",
                "anno": "warnings.CatchWarnings"
            }
        ],
        "_DeprecationTestCase.log": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "_DeprecationTestCase.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DeprecationTestCase.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_VisibleDeprecationTestCase.warning_cls": [
            {
                "type": "attr",
                "anno": "type[np.VisibleDeprecationWarning]"
            }
        ],
        "TestNonTupleNDIndexDeprecation.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisonDeprecations.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestComparisonDeprecations.test_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisonDeprecations.NotArray.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisonDeprecations.NotArray.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestComparisonDeprecations.test_array_richcompare_legacy_weirdness": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayDataAttributeAssignmentDeprecation.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestBinaryReprInsufficientWidthParameterForRepresentation.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestPyArray_AS1D.test_npy_pyarrayas1d_deprecation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPyArray_AS2D.test_npy_pyarrayas2d_deprecation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTruthTestingEmptyArrays.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestFromStringAndFileInvalidData.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestShape1Fields.warning_cls": [
            {
                "type": "attr",
                "anno": "type[warnings.Warning]"
            }
        ],
        "test_deprecate_ragged_arrays": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestDTypeCoercion.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestDTypeCoercion.deprecated_types": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "_DeprecationTestCase.assert_deprecated": [
            {
                "type": "method",
                "args": {
                    "function": "Callable",
                    "num": "int",
                    "ignore_others": "bool",
                    "function_fails": "bool",
                    "exceptions": "tuple",
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "TestDTypeCoercion.test_array_construction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDTypeCoercion.test_dtype_coercion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonZero.test_zerod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShape1Fields.test_shape_1_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_GetSet_NumericOps.test_get_numeric_ops": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromStringAndFileInvalidData.test_deprecate_unparsable_data_file": [
            {
                "type": "method",
                "args": {
                    "invalid_str": "str"
                }
            }
        ],
        "TestFromstring.test_fromstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPositiveOnNonNumerical.test_positive_on_non_number": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSctypeNA.test_sctypeNA": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeneratorSum.test_generator_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlen.test_alen": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_bincount_minlength": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTruthTestingEmptyArrays.test_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTruthTestingEmptyArrays.test_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_UPDATEIFCOPY.test_npy_updateifcopy_deprecation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNPY_CHAR.test_npy_char_deprecation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNumericStyleTypecodes.test_all_dtypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_negative": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_positive": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayDataAttributeAssignmentDeprecation.test_data_attr_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonCContiguousViewDeprecation.test_fortran_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDatetime64Timezone.test_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDatetime64Timezone.test_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisonDeprecations.test_void_dtype_equality_failures": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisonDeprecations.test_normal_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DeprecationTestCase.assert_not_deprecated": [
            {
                "type": "method",
                "args": {
                    "function": "Callable",
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "TestDTypeCoercion.test_not_deprecated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDatetimeEvent.test_3_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonNumericConjugate.test_conjugate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromStringAndFileInvalidData.test_deprecate_unparsable_string": [
            {
                "type": "method",
                "args": {
                    "invalid_str": "str"
                }
            }
        ],
        "TestTestDeprecated.test_assert_deprecated": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_scalarbuffer": {
        "scalars_and_codes": [
            {
                "type": "var",
                "anno": "pytest.List[pytest.Tuple[pytest.Callable, str]]"
            }
        ],
        "TestScalarPEP3118.test_scalar_known_code": [
            {
                "type": "method",
                "args": {
                    "scalar": "pytest.Callable",
                    "code": "str"
                }
            }
        ],
        "TestScalarPEP3118.test_scalar_match_array": [
            {
                "type": "method",
                "args": {
                    "scalar": "Callable[[], np.ndarray]"
                }
            }
        ],
        "TestScalarPEP3118._as_dict": [
            {
                "type": "method",
                "args": {
                    "m": "np.ndarray"
                }
            }
        ],
        "TestScalarPEP3118.test_str_ucs4": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "TestScalarPEP3118.test_datetime_memoryview": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarPEP3118.test_void_scalar_structured_data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarPEP3118.test_scalar_dim": [
            {
                "type": "method",
                "args": {
                    "scalar": "Callable[[], np.ndarray]"
                }
            }
        ]
    },
    "core.tests.test_defchararray": {
        "kw_unicode_true": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "kw_unicode_false": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "TestVecString.test_non_existent_method": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVecString.test_non_string_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVecString.test_invalid_args_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVecString.test_invalid_type_descr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVecString.test_invalid_function_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVecString.test_invalid_result_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVecString.test_broadcast_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhitespace.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestWhitespace.B": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestWhitespace.test1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestChar.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestComparisons.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestComparisons.B": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestComparisons.test_not_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisons.test_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisons.test_greater_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisons.test_less_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisons.test_greater": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisons.test_less": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisonsMixed1.B": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestComparisonsMixed2.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestInformation.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestInformation.B": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMethods.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMethods.B": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestOperations.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestOperations.B": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestOperations.test_rmod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_empty_indexing": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMethods.test_isdecimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_isnumeric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_startswith": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_rindex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_rfind": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_isupper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_istitle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_isspace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_islower": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_isdigit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_isalpha": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_isalnum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_find": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_endswith": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_len": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBasic.test_from_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBasic.test_from_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBasic.test_unicode_upconvert": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBasic.test_from_object_array_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBasic.test_from_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_splitlines": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBasic.test_from_unicode_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBasic.test_from_string_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOperations.test_slice": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOperations.test_mod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOperations.test_rmul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOperations.test_mul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOperations.test_radd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOperations.test_add": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOperations.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisons.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisonsMixed2.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComparisonsMixed1.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestChar.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhitespace.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInformation.test_count": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_upper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestChar.test_it": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_title": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_swapcase": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_strip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_rstrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_rjust": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_lstrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_lower": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_ljust": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_center": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_capitalize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_rpartition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_replace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_partition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_expandtabs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_encode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_join": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_decode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_split": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_rsplit": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_scalarprint": {
        "TestRealScalars.test_scalar_cutoffs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRealScalars.test_dragon4_interface": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRealScalars.float32_roundtrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRealScalars.float64_vs_python": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRealScalars.test_ppc64_ibm_double_double128": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRealScalars.test_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRealScalars.test_dragon4": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRealScalars.test_py2_float_print": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_extint128": {
        "INT64_MID": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "INT128_MAX": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "INT128_MIN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "INT128_MID": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "INT128_VALUES": [
            {
                "type": "var",
                "anno": "list[bool]"
            }
        ],
        "exc_iter": [
            {
                "type": "func",
                "args": {
                    "args": "int"
                }
            }
        ],
        "test_add_128": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_sub_128": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_neg_128": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_shl_128": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_shr_128": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_gt_128": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "INT64_MAX": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "INT64_MIN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "test_to_64": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "INT64_VALUES": [
            {
                "type": "var",
                "anno": "list[int]"
            }
        ],
        "test_mul_64_64": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_to_128": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_safe_binop": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "INT64_POS_VALUES": [
            {
                "type": "var",
                "anno": "list[int]"
            }
        ],
        "test_ceildiv_128_64": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_floordiv_128_64": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_divmod_128_64": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core.tests.test_shape_base": {
        "TestAtleast1d.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast1d.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast1d.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast1d.test_3D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast2d.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast2d.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast2d.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast2d.test_3D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast3d.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast3d.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast3d.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast3d.test_3D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHstack.test_non_iterable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHstack.test_empty_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHstack.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHstack.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHstack.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHstack.test_generator": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVstack.test_non_iterable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVstack.test_empty_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVstack.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVstack.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVstack.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVstack.test_2D_array2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVstack.test_generator": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenate.test_returns_copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenate.test_large_concatenate_axis_None": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenate.test_bad_out_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenate.test_out_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBlock.block": [
            {
                "type": "method",
                "args": {
                    "request": "Any"
                }
            }
        ],
        "TestBlock.test_returns_copy": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_total_size_estimate": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_simple_row_wise": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_simple_column_wise": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_with_1d_arrays_row_wise": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_with_1d_arrays_multiple_rows": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_with_1d_arrays_column_wise": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_mixed_1d_and_2d": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_complicated": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_nested": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_3d": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_block_with_mismatched_shape": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_no_lists": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_invalid_nesting": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_empty_lists": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_tuple": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_different_ndims": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestBlock.test_different_ndims_depths": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "test_block_dispatcher": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestConcatenate.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBlock.test_block_memory_order": [
            {
                "type": "method",
                "args": {
                    "block": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestAtleast2d.test_r2array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAtleast1d.test_r1array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenate.test_concatenate_axis_None": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_stack": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestConcatenate.test_concatenate": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_longdouble": {
        "LD_INFO": [
            {
                "type": "var",
                "anno": "np.finfo"
            }
        ],
        "repr_precision": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "test_bogus_string": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_fromstring_complex": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_fromstring_bogus": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_fromstring_empty": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_fromstring_missing": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_repr_roundtrip_foreign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_fromstring_foreign_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_fromstring_best_effort_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_fromstring_best_effort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_fromstring_foreign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_fromstring_foreign_sep": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommaDecimalPointLocale.test_fromstring_foreign_value": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_longdouble_from_bool": [
            {
                "type": "func",
                "args": {
                    "bool_val": "bool"
                }
            }
        ],
        "test_repr_exact": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestFileBased.ldbl": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TestFileBased.tgt": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "test_repr_roundtrip": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_scalar_extraction": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_o": [
            {
                "type": "var",
                "anno": "np.longdouble"
            }
        ],
        "string_to_longdouble_inaccurate": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "test_fromstring": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "longdouble_longer_than_double": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "test_array_repr": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_percent": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_format": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestFileBased.test_tofile_roundtrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFileBased.test_fromfile_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFileBased.test_fromfile_bogus": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_longdouble_from_int": [
            {
                "type": "func",
                "args": {
                    "int_val": "int"
                }
            }
        ],
        "TestFileBased.out": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestFileBased.test_loadtxt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFileBased.test_genfromtxt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFileBased.test_fromfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_array_and_stringlike_roundtrip": [
            {
                "type": "func",
                "args": {
                    "strtype": "typing.Type[str]"
                }
            }
        ],
        "test_repr_roundtrip_bytes": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core.tests.test_machar": {
        "TestMachAr._run_machar_highprec": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMachAr.test_underlow": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_multiarray": {
        "pathlib": [
            {
                "type": "var",
                "anno": "pathlib"
            }
        ],
        "TestFlags.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestFlags.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.frominterface.arr": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestFlags.frominterface.__array_interface__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.ArrayInterface"
            }
        ],
        "TestFlags.test_writeable_from_readonly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHash.test_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.one": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestAttributes.two": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestAttributes.three": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestAttributes.test_int_subclassing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_stridesattr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayConstruction.test_array_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayConstruction.test_array_copy_false": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayConstruction.test_array_copy_true": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssignment.test_assignment_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssignment.test_unicode_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssignment.test_stringlike_empty_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssignment.bad_sequence.__getitem__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssignment.bad_sequence.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssignment.test_cast_to_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDtypedescr.test_construction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDtypedescr.test_byteorders": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDtypedescr.test_structured_non_void": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestZeroRank.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_invalid_subscript": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_ellipsis_subscript_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_empty_subscript_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_invalid_subscript_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_invalid_newaxis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_constructor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarIndexing.d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestScalarIndexing.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarIndexing.test_invalid_subscript": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarIndexing.test_invalid_subscript_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarIndexing.test_invalid_newaxis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_from_attribute": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.x.__array__": [
            {
                "type": "method",
                "args": {
                    "dtype": "_dtype_from_pep3118"
                }
            }
        ],
        "TestCreation.test_from_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_zeros_obj": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_zeros_obj_obj": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_empty_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.Fail.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.Fail.__getitem__": [
            {
                "type": "method",
                "args": {
                    "index": "int"
                }
            }
        ],
        "TestCreation.Map.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.Map.__getitem__": [
            {
                "type": "method",
                "args": {
                    "index": "int"
                }
            }
        ],
        "TestCreation.Point2.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.Point2.__getitem__": [
            {
                "type": "method",
                "args": {
                    "ind": "int"
                }
            }
        ],
        "TestCreation.test_false_len_sequence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.C.__getitem__": [
            {
                "type": "method",
                "args": {
                    "i": "int"
                }
            }
        ],
        "TestCreation.C.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.A._data": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCreation._ragged_creation": [
            {
                "type": "method",
                "args": {
                    "seq": "list"
                }
            }
        ],
        "TestCreation.test_deep_nonragged_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_objview": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_setfield": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_setfield_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_structuredscalar_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_multiindex_titles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_test_interning": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible._zeros": [
            {
                "type": "method",
                "args": {
                    "shape": "tuple",
                    "dtype": "str"
                }
            }
        ],
        "TestZeroSizeFlexible.test_create": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible._test_sort_partition": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "kinds": "str",
                    "kwargs": "Any"
                }
            }
        ],
        "TestZeroSizeFlexible.test_sort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible.test_argsort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible.test_partition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible.test_argpartition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible.test_dumps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible.test_pickle_with_buffercallback": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.sort_kinds": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "TestMethods.test_choose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.Boom.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestMethods.Raiser.raises_anything": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TestMethods.Raiser.__eq__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Callable"
            }
        ],
        "TestMethods.Raiser.__ne__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Callable"
            }
        ],
        "TestMethods.Raiser.__lt__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Callable"
            }
        ],
        "TestMethods.Raiser.__gt__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Callable"
            }
        ],
        "TestMethods.Raiser.__ge__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Callable"
            }
        ],
        "TestMethods.Raiser.__le__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Callable"
            }
        ],
        "TestMethods.test_searchsorted_with_invalid_sorter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_partition_cdtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_partition_fuzz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_dot_type_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_dot_matmul_inner_array_casting_fails": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.A.__array__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TestMethods.test_size_zero_memleak": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test__complex__should_not_work": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.test_inplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.test_ufunc_override_normalize_signature": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.test_array_ufunc_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.CheckIndex.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "_multiarray_tests.CheckIndex",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "kw": "np.ndarray"
                }
            }
        ],
        "TestBinop.PowerOnly.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "np.ndarray",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "kw": "np.ndarray"
                }
            }
        ],
        "TestBinop.SomeClass.num": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestBinop.SomeClass.__init__": [
            {
                "type": "method",
                "args": {
                    "num": "int"
                }
            }
        ],
        "TestBinop.SomeClass.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "SomeClass"
                }
            }
        ],
        "TestBinop.SomeClass.__div__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestBinop.SomeClass.__pow__": [
            {
                "type": "method",
                "args": {
                    "exp": "int"
                }
            }
        ],
        "TestBinop.SomeClass.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestBinop.SomeClass.__rpow__": [
            {
                "type": "attr",
                "anno": "AnyClass"
            }
        ],
        "TestTemporaryElide.test_extension_incref_elide": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTemporaryElide.test_extension_incref_elide_stack": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTemporaryElide.test_elide_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCAPI.test_IsPythonScalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubscripting.test_test_zero_rank": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_correct_protocol5_error_message": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_f_contiguous_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling._loads": [
            {
                "type": "method",
                "args": {
                    "obj": "str"
                }
            }
        ],
        "TestPickling.test_version0_int8": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_version0_float32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_version0_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_version1_int8": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_version1_float32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_version1_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_subarray_int_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexing.test_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexing.test_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexing.test_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexing.test_mask2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexing.test_assign_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringCompare.test_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringCompare.test_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmax.nan_arr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestArgmin.nan_arr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestArgmin.test_minimum_signed_integers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinMax.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinMax.test_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip._check_range": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "cmin": "float",
                    "cmax": "float"
                }
            }
        ],
        "TestPutmask.tst_basic": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "T": "np.ndarray",
                    "mask": "np.ndarray",
                    "val": "np.ndarray"
                }
            }
        ],
        "TestPutmask.test_mask_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPutmask.test_byteorder": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "TestPutmask.test_record_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPutmask.test_overlaps": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_out_overlap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLexsort.test_basic": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestLexsort.test_mixed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLexsort.test_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestIO.dtype": [
            {
                "type": "attr",
                "anno": "np.dtype"
            }
        ],
        "TestIO.tempdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestIO.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestIO.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_bool_fromstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_uint64_fromstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_int64_fromstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_empty_files_binary": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_empty_files_text": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_roundtrip_dump_pathlib": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_load_object_array_fromfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromBuffer.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlat.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestFlat.b": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestFlat.a0": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestFlat.b0": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestRecord.test_multiple_field_name_occurrence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_bytes_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_multiple_field_name_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_fromarrays_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_record_no_hash": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_empty_structure_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.rmat": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestStats.cmat": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestStats.omat": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestStats.test_python_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.TestArray.info": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestVdot.test_vdot_array_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestDot.b1": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestDot.b2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestDot.b3": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestDot.b4": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestDot.N": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestDot.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotmatvec": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotmatvec2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotvecmat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotvecvecouter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotvecvecinner": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotcolumnvect1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotvecscalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotvecscalar2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.Vec.array": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestDot.Vec.__rmul__": [
            {
                "type": "method",
                "args": {
                    "other": "Vec"
                }
            }
        ],
        "TestDot.test_dot_2args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dot_array_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MatmulCommon.types": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestMatmul.matmul": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatmul.vc": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatmul.vr": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatmul.m0": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatmul.test_matmul_object_type_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmul.test_matmul_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmul.test_matmul_exception_multiply": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmul.add_not_multiply.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestMatmul.test_matmul_exception_add": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmul.multiply_not_add.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestMatmulOperator.matmul": [
            {
                "type": "attr",
                "anno": "operator.Callable"
            }
        ],
        "MatmulCommon.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmulOperator.test_array_priority_override": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmulOperator.A.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestMatmulOperator.A.__matmul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestMatmulOperator.A.__rmatmul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestMatmulOperator.test_matmul_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_matmul_inplace": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestInner.test_inner_type_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInner.test_inner_scalar_and_vector": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInner.test_vecself": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlen.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlen.test_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestChoose.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestChoose.y": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestChoose.x2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestChoose.y2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestChoose.ind": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestChoose.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestChoose.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestChoose.test_broadcast1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestChoose.test_broadcast2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepeat.m": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestRepeat.m_rect": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestRepeat.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepeat.test_broadcast1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepeat.test_axis_spec": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepeat.test_broadcast2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NEIGH_MODE": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "TestNeighborhoodIter.test_simple2d": [
            {
                "type": "method",
                "args": {
                    "dt": "Decimal"
                }
            }
        ],
        "TestNeighborhoodIter.test_mirror2d": [
            {
                "type": "method",
                "args": {
                    "dt": "Decimal"
                }
            }
        ],
        "TestStackedNeighborhoodIter.test_simple_const": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackedNeighborhoodIter.test_simple_mirror": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackedNeighborhoodIter.test_simple_circular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackedNeighborhoodIter.test_simple_strict_within": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWarnings.test_complex_warning": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinScalarType.test_usigned_shortshort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinScalarType.test_usigned_short": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinScalarType.test_usigned_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinScalarType.test_usigned_longlong": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinScalarType.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype._check": [
            {
                "type": "method",
                "args": {
                    "spec": "str",
                    "wanted": "str"
                }
            }
        ],
        "TestPEP3118Dtype.test_native_padding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_native_padding_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_trailing_padding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_native_padding_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_padding_with_array_inside_struct": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_byteorder_inside_struct": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_intra_padding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_char_vs_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_field_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPEP3118Dtype.test_unnamed_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_invalid_buffer_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_export_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_reference_leak": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_out_of_order_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_error_too_many_dims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_error_message_unsupported": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_ctypes_integer_via_memoryview": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.foo._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestArrayAttributeDeletion.test_multiarray_not_writable_attributes_deletion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayInterface.Foo.value": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TestArrayInterface.Foo.iface": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestArrayInterface.Foo.__init__": [
            {
                "type": "method",
                "args": {
                    "value": "float"
                }
            }
        ],
        "TestArrayInterface.Foo.__float__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayInterface.Foo.__array_interface__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayInterface.f": [
            {
                "type": "attr",
                "anno": "Foo"
            }
        ],
        "test_array_interface_itemsize": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_array_interface_offset": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_scalar_element_deletion": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMemEventHook.test_mem_seteventhook": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCArray.test_1darray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_array_scalar_relational_operation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_to_bool_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_to_int_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.HasTrunc.__trunc__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.NotConvertible.__int__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhere.test_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhere.test_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhere.test_empty_result": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_empty_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.check_array": [
            {
                "type": "method",
                "args": {
                    "dtype": "_dtype_from_pep3118"
                }
            }
        ],
        "TestSizeOf.test_array_int32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_array_int64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_array_float32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_array_float64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHashing.test_arrays_not_hashable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHashing.test_collections_hashable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayPriority.op": [
            {
                "type": "attr",
                "anno": "operator.Foo"
            }
        ],
        "TestArrayPriority.Foo.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestArrayPriority.Bar.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestArrayPriority.Other.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestArrayPriority.Other.__le__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other._all": [
            {
                "type": "method",
                "args": {
                    "other": "_multiarray_tests.Foo"
                }
            }
        ],
        "TestArrayPriority.Other.__lt__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__ge__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__gt__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__ne__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__eq__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rrshift__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rshift__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rlshift__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__lshift__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__ror__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__or__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rxor__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__xor__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rand__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__and__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rfloordiv__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__floordiv__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rtruediv__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__truediv__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rmod__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__mod__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rdiv__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__div__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rpow__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__pow__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rmul__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__mul__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__rsub__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__sub__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__radd__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestArrayPriority.Other.__add__": [
            {
                "type": "attr",
                "anno": "_multiarray_tests.Foo"
            }
        ],
        "TestBytestringArrayNonzero.test_empty_bstring_array_is_falsey": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBytestringArrayNonzero.test_whitespace_bstring_array_is_falsey": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBytestringArrayNonzero.test_all_null_bstring_array_is_falsey": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBytestringArrayNonzero.test_null_inside_bstring_array_is_truthy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnicodeEncoding.test_round_trip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnicodeEncoding.test_assign_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnicodeArrayNonzero.test_empty_ustring_array_is_falsey": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnicodeArrayNonzero.test_whitespace_ustring_array_is_falsey": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnicodeArrayNonzero.test_all_null_ustring_array_is_falsey": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnicodeArrayNonzero.test_null_inside_ustring_array_is_truthy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_argmax_with_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_argmin_with_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_take_mode_raise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_choose_mod_raise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArange.test_infinite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArange.test_nan_step": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArange.test_zero_step": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFinalize.SavesBase.saved_base": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestArrayFinalize.RaisesInFinalize.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "test_equal_override": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_npymath_complex": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_npymath_real": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_getfield": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestClip.test_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_max_or_min": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_record_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFormat.test_1d_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFormat.test_1d_no_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFormat.test_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_error_pointer_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_export_endian": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test__complex__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnicodeEncoding.test_fill_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_fill_struct_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_fill_max_uint64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_fill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_aligned_zeros": [
            {
                "type": "func",
                "args": {
                    "shape": "tuple",
                    "dtype": "np.dtype",
                    "order": "str",
                    "align": "int"
                }
            }
        ],
        "TestMethods.test_argpartition_integer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_argpartition_out_of_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_nofile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_resize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_check_weakref": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_empty_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_zeros_appended": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_invalid_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_none_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_int_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_check_reference": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible.test_resize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.A.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.A.__getitem__": [
            {
                "type": "method",
                "args": {
                    "item": "int"
                }
            }
        ],
        "TestCreation.A.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "np.ndarray"
                }
            }
        ],
        "TestCreation.test_failed_len_sequence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_searchsorted_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_set_stridesattr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_ctypes_struct_via_memoryview": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_roundtrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_field_rename": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFinalize.SavesBase.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "TestStructured.test_base_attr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_ellipsis_subscript": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_tofile_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_unseekable_fromfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.TestArray.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "TestIO._check_from": [
            {
                "type": "method",
                "args": {
                    "s": "bytes",
                    "value": "np.ndarray",
                    "kw": "Any"
                }
            }
        ],
        "TestIO.test_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_long_sep": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_malformed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_ascii": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_counted_string_with_ws": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_string_with_ws": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_counted_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_binary": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_numbers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_inf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_file_position_after_tofile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_file_position_after_fromfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_tofile_sep": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_locale": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_interface_no_shape": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestDot.Vec.__sub__": [
            {
                "type": "method",
                "args": {
                    "other": "Vec"
                }
            }
        ],
        "TestDot.Vec.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "Vec"
                }
            }
        ],
        "TestDot.Vec.__init__": [
            {
                "type": "method",
                "args": {
                    "sequence": "typing.List[int]"
                }
            }
        ],
        "TestWhere.test_foreign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhere.test_dtype_mix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhere.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNeighborhoodIter.test_circular": [
            {
                "type": "method",
                "args": {
                    "dt": "Decimal"
                }
            }
        ],
        "TestNeighborhoodIter.test_simple": [
            {
                "type": "method",
                "args": {
                    "dt": "Decimal"
                }
            }
        ],
        "TestMatmul.test_matmul_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MatmulCommon.test_matrix_matrix_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MatmulCommon.test_matrix_vector_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MatmulCommon.test_vector_matrix_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVdot.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLexsort.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinMax.test_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool._test_cast_from_flexible": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestBool.test_cast_from_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_cast_from_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_cast_from_void": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssignment.test_longdouble_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_largish_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_uintalignment_and_alignment": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestCTypes._make_readonly": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "TestArrayAttributeDeletion.test_multiarray_flags_not_writable_attribute_deletion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAttributeDeletion.test_multiarray_flags_writable_attribute_deletion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_record_hash": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayConstruction.test_array_cont": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_void_align": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_string_align": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_otherflags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_warnonwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_writeable_from_c_data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_writeable_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_writeable_from_buffer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_writeable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.frominterface.__init__": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "TestStringCompare.test_mixed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.test_pow_array_object_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhere.test_largedim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTemporaryElide.test_elide_scalar_readonly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_conjugate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_real_imag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayInterface.test_scalar_interface": [
            {
                "type": "method",
                "args": {
                    "val": "typing.Any",
                    "iface": "dict",
                    "expected": "typing.Any"
                }
            }
        ],
        "TestNeighborhoodIter.test_mirror": [
            {
                "type": "method",
                "args": {
                    "dt": "type"
                }
            }
        ],
        "TestChoose.test_output_dtype": [
            {
                "type": "method",
                "args": {
                    "ops": "tuple"
                }
            }
        ],
        "MatmulCommon.test_result_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_multifield_indexing_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_dtype_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip._clip_type": [
            {
                "type": "method",
                "args": {
                    "type_group": "str",
                    "array_max": "float",
                    "clip_min": "float",
                    "clip_max": "float",
                    "inplace": "bool",
                    "expected_min": "float",
                    "expected_max": "float"
                }
            }
        ],
        "TestClip.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_record_array_with_object_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTemporaryElide.test_temporary_with_cast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible.test_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_casting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_no_len_object_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_sequence_non_homogenous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_zeros_like_like_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_void": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_empty_subscript": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_dtypeattr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlignment.check": [
            {
                "type": "method",
                "args": {
                    "shape": "tuple",
                    "dtype": "np.dtype",
                    "order": "str",
                    "align": "int"
                }
            }
        ],
        "TestAlignment.test_various_alignments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCTypes.test_ctypes_is_not_available": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCTypes.test_ctypes_is_available": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_export_subarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_export_discontiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_export_simple_nd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_export_simple_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol._check_roundtrip": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "TestNewBufferProtocol.test_max_dims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_padding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_roundtrip_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_roundtrip_single_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_roundtrip_half": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_roundtrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MatmulCommon.test_shapes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_obj_obj": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_freeform_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_0d_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTemporaryElide.test_elide_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_array_of_ragged_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_ragged_shape_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_ragged_ndim_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_non_sequence_sequence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarIndexing.test_newaxis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarIndexing.test_empty_subscript": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarIndexing.test_ellipsis_subscript": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroRank.test_newaxis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.test_attributes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFinalize.test_lifetime_on_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFinalize.test_receives_base": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayPriority.Bar.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestArrayPriority.Foo.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestNewBufferProtocol.test_padded_struct_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.TestArray.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "typing.Type[np.ndarray]",
                    "data": "np.ndarray",
                    "info": "dict"
                }
            }
        ],
        "TestView.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.A.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "np.ndarray",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestBinop.test_pos_array_ufunc_override": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.test_pow_override_with_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_dot_matmul_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_searchsorted_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestZeroSizeFlexible.test_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.check_count_nonzero": [
            {
                "type": "method",
                "args": {
                    "power": "int",
                    "length": "int"
                }
            }
        ],
        "TestBool.test_count_nonzero_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_count_nonzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlags.test_writeable_any_base": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_dot_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhere.test_exotic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCArray.test_3darray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCArray.test_2darray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMapIter.test_mapiter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_array_interface_empty_shape": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestRepeat.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_matmul_axes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMatmul.test_matmul_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmul.m3": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatmul.m2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatmul.m1": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "MatmulCommon.test_vector_vector_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_accelerate_framework_sgemv_fix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlat.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_fromfile_subarray_binary": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLexsort.test_invalid_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompress.test_flatten": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompress.test_truncate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompress.test_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_non_contiguous_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.test_ufunc_binop_interaction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCequenceMethods.test_array_contains": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_matmul_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_zero_width_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarIndexing.test_overlapping_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssignment.test_assignment_broadcasting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAttributes.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_flat_element_deletion": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestStats.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlat.test_refcount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlat.test___array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlat.test_discontiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlat.test_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromBuffer.test_basic": [
            {
                "type": "method",
                "args": {
                    "byteorder": "str",
                    "dtype": "str"
                }
            }
        ],
        "TestIO.test_fromfile_offset": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_io_open_buffered_fromfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_io_open_unbuffered_fromfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_roundtrip_pathlib": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_roundtrip_filename": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_roundtrip_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTemporaryElide.test_elide_updateifcopy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTemporaryElide.test_elide_readonly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewaxis.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_ravel_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_argpartition_empty_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_partition_empty_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_compress": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInner.test_3d_tensor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotcolumnvect2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotvecmat3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotvecmat2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dotmatmat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_transpose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_view_assign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_flatiter__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_putmask_noncontiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_put_noncontiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_insert_noncontiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWhere.test_ndim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_relaxed_strides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmul.test_out_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MatmulCommon.test_scalar_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.test_dot_3args_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_dot_out_mem_overlap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_reshape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayConstruction.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmin.test_object_argmin_with_NULLs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmin.test_np_vs_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmin.test_argmin_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmin.test_output_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmax.test_object_argmax_with_NULLs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmax.test_np_vs_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmax.test_argmax_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmax.test_output_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_ravel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_squeeze": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_repeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_orderconverter_with_nonASCII_unicode_ordering": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestIO.test_roundtrip_binary_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_flatten_invalid_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_flatten": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_unicode_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_sort_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_sort_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_void_sort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_round": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_diagonal_memleak": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_diagonal_view_notwriteable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_diagonal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_prod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_mean": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "args": "Any"
                }
            }
        ],
        "TestStats.test_mean_float16": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_mean_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_zeros_big": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_big_binary": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.assert_partitioned": [
            {
                "type": "method",
                "args": {
                    "d": "np.ndarray",
                    "kth": "tuple"
                }
            }
        ],
        "TestMethods.test_argpartition_gh5524": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_dot": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNewBufferProtocol.test_export_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmax.test_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_array_too_big": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreation.test_too_big_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmin.test_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayPriority.binary_ops": [
            {
                "type": "attr",
                "anno": "list[operator.Foo]"
            }
        ],
        "TestArrayPriority.test_subclass_other": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayPriority.test_subclass_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayPriority.test_ndarray_other": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayPriority.test_ndarray_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_dealloc_warning": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAttributeDeletion.test_multiarray_writable_attributes_deletion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmul.test_out_arg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmin.test_combinations": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgmax.test_combinations": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_partition_iterative": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_partition_integer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_partition_out_of_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_roundtrip_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIO.test_roundtrip_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_searchsorted": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_partition_unicode_kind": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_sort_unicode_kind": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBool.test_count_nonzero_unaligned": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_record_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_byteorder": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "TestTake.test_wrap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_clip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_raise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.tst_basic": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "TestMethods.test_trace_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_trace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_put": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_std": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "args": "Any"
                }
            }
        ],
        "TestStats.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_var": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "args": "Any"
                }
            }
        ],
        "TestStats.test_std_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_var_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_var_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_ddof_too_big": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_ddof": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.funcs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestStats.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_dtype_from_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_dtype_from_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlignment.test_strided_loop_alignments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWritebackIfCopy.test_view_discard_refcount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_reshape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInner.test_inner_product_with_various_contiguities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatmul.test_dot_equivalent": [
            {
                "type": "method",
                "args": {
                    "args": "tuple"
                }
            }
        ],
        "TestDot.test_dot_3args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDot.Vec.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "TestDot.test_vecobject": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVdot.test_vdot_uncontiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_var_complex_byteorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStats.test_var_complex_values": [
            {
                "type": "method",
                "args": {
                    "complex_dtype": "str",
                    "ndec": "int"
                }
            }
        ],
        "TestRecord.test_field_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_ip_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPutmask.test_ip_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexing.test_assign_mask2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_datetime64_byteorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinop.OutClass.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "Callable",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "kw": "np.ndarray"
                }
            }
        ],
        "TestBinop.test_out_override": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_swapaxes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_no_dgemv": [
            {
                "type": "method",
                "args": {
                    "func": "Callable",
                    "dtype": "str"
                }
            }
        ],
        "TestMethods.test_arr_mult": [
            {
                "type": "method",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "TestMethods.test_partition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_searchsorted_with_sorter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_argsort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_sort_degraded": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMethods.test_sort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_subarray_comparison": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructured.test_subarray_field_access": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCTypes.test_ctypes_as_parameter_holds_reference": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCTypes.test_ctypes_data_as_holds_reference": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ]
    },
    "core.tests.test__exceptions": {
        "_ArrayMemoryError": [
            {
                "type": "var",
                "anno": "_ArrayMemoryError"
            }
        ],
        "TestArrayMemoryError.test_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMemoryError.test__total_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMemoryError.test__size_to_string": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_umath_accuracy": {
        "IS_AVX": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "runtest": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "platform_skip": [
            {
                "type": "var",
                "anno": "pytest.Mark"
            }
        ],
        "files": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "convert": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "str_to_float": [
            {
                "type": "var",
                "anno": "np.vectorize"
            }
        ],
        "TestAccuracy.test_ignore_nan_ulperror": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAccuracy.test_validate_transcendentals": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_numerictypes": {
        "Pdescr": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "PbufferT": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "Ndescr": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "NbufferT": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "byteorder": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "normalize_descr": [
            {
                "type": "func",
                "args": {
                    "descr": "list"
                }
            }
        ],
        "TestCreateZerosPlain._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateZerosNested._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateValuesPlainSingle._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateValuesPlainSingle.multiple_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValuesPlainSingle._buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateValuesPlainMultiple._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateValuesPlainMultiple.multiple_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValuesPlainMultiple._buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateValuesNestedSingle._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateValuesNestedSingle.multiple_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValuesNestedSingle._buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateValuesNestedMultiple._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCreateValuesNestedMultiple.multiple_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValuesNestedMultiple._buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestReadValuesPlainSingle._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestReadValuesPlainSingle.multiple_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestReadValuesPlainSingle._buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestReadValuesPlainMultiple._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestReadValuesPlainMultiple.multiple_rows": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestReadValuesPlainMultiple._buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestReadValuesNestedSingle._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestReadValuesNestedSingle.multiple_rows": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TestReadValuesNestedSingle._buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestReadValuesNestedMultiple._descr": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestReadValuesNestedMultiple.multiple_rows": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TestReadValuesNestedMultiple._buffer": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "ReadValuesNested.test_nested2_acessors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadValuesNested.test_nested1_acessors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommonType.test_scalar_loses1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommonType.test_scalar_loses2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommonType.test_scalar_wins": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommonType.test_scalar_wins2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCommonType.test_scalar_wins3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultipleFields.ary": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMultipleFields.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultipleFields._bad_call": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultipleFields.test_no_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsSubDType.wrappers": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "TestIsSubDType.test_both_abstract": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsSubDType.test_same": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsSubDType.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsSubDType.test_subclass_backwards": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsSubDType.test_sibling_class": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSctypeDict.test_longdouble": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBitName.test_abstract": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaximumSctype.test_int": [
            {
                "type": "method",
                "args": {
                    "t": "np.int_"
                }
            }
        ],
        "TestMaximumSctype.test_uint": [
            {
                "type": "method",
                "args": {
                    "t": "np.ulonglong"
                }
            }
        ],
        "TestMaximumSctype.test_float": [
            {
                "type": "method",
                "args": {
                    "t": "np.ndarray"
                }
            }
        ],
        "TestMaximumSctype.test_complex": [
            {
                "type": "method",
                "args": {
                    "t": "np.ndarray"
                }
            }
        ],
        "TestMaximumSctype.test_other": [
            {
                "type": "method",
                "args": {
                    "t": "np.int64"
                }
            }
        ],
        "Test_sctype2char.test_scalar_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_sctype2char.test_other_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_sctype2char.test_third_party_scalar_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_sctype2char.test_array_instance": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_sctype2char.test_abstract_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_sctype2char.test_non_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_issctype": [
            {
                "type": "func",
                "args": {
                    "rep": "np.ndarray",
                    "expected": "bool"
                }
            }
        ],
        "TestDocStrings.test_platform_dependent_aliases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarTypeNames.numeric_types": [
            {
                "type": "attr",
                "anno": "typing.List[type]"
            }
        ],
        "TestScalarTypeNames.test_names_reflect_attributes": [
            {
                "type": "method",
                "args": {
                    "t": "type"
                }
            }
        ],
        "TestScalarTypeNames.test_names_are_unique": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestScalarTypeNames.test_names_are_undersood_by_dtype": [
            {
                "type": "method",
                "args": {
                    "t": "type"
                }
            }
        ],
        "ReadValuesNested.test_nested2_descriptor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadValuesNested.test_nested1_descriptor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateZeros.test_zerosMD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateZeros.test_zerosSD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateZeros.test_zeros0D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEmptyField.test_assign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadValuesNested.test_access_top_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ReadValuesPlain.test_access_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateValues.test_list_of_list_of_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateValues.test_list_of_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateValues.test_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultipleFields.test_return": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_scalarmath": {
        "types": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "floating_types": [
            {
                "type": "var",
                "anno": "np.floating"
            }
        ],
        "complex_floating_types": [
            {
                "type": "var",
                "anno": "np.complexfloating"
            }
        ],
        "TestTypes.test_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_type_create": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_leak": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBaseMath.test_blocked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_small_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_large_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_mixed_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_modular_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "floordiv_and_mod": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "_signs": [
            {
                "type": "func",
                "args": {
                    "dt": "int"
                }
            }
        ],
        "TestModulus.test_modulus_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestModulus.test_float_modulus_roundoff": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestModulus.test_inplace_floordiv_handling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexDivision.test_zero_division": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_int_from_long": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_int_from_longdouble": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_numpy_scalar_relational_operators": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_scalar_comparison_to_none": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_equal_nbytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeOf.test_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiply.ArrayLike.arr": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestNegative.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubtract.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_int_from_huge_longdouble": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBitShifts.test_shift_all_bits": [
            {
                "type": "method",
                "args": {
                    "type_code": "np.typecodes[int]",
                    "op": "operator.Operator"
                }
            }
        ],
        "TestMultiply.test_seq_repeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiply.ArrayLike.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiply.ArrayLike.__init__": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "TestMultiply.test_no_seq_repeat_basic_array_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexDivision.test_branches": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexDivision.test_signed_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPower.test_integers_to_negative_integer_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_type_add": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr._test_type_repr": [
            {
                "type": "method",
                "args": {
                    "t": "type"
                }
            }
        ],
        "TestRepr.test_float_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBaseMath.test_lower_align": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestModulus.test_float_modulus_exact": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_int_raise_behaviour": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAbs._test_abs_func": [
            {
                "type": "method",
                "args": {
                    "absfunc": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestAbs.test_numpy_abs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAbs.test_builtin_abs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_iinfo_long_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_int_from_infinite_longdouble___int__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConversion.test_int_from_infinite_longdouble": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubtract.test_result": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNegative.test_result": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestModulus.test_float_modulus_corner_cases": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_dtype": {
        "assert_dtype_equal": [
            {
                "type": "func",
                "args": {
                    "a": "np.dtype",
                    "b": "np.dtype"
                }
            }
        ],
        "assert_dtype_not_equal": [
            {
                "type": "func",
                "args": {
                    "a": "np.dtype",
                    "b": "np.dtype"
                }
            }
        ],
        "TestBuiltin.test_run": [
            {
                "type": "method",
                "args": {
                    "t": "int"
                }
            }
        ],
        "TestBuiltin.test_equivalent_dtype_hashing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBuiltin.test_invalid_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBuiltin.test_dtype_from_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBuiltin.test_bad_param": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBuiltin.test_field_order_equality": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_equivalent_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_different_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_different_titles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_refcount_dictionary_setting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_not_lists": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_aligned_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_comma_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_from_dictproxy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_from_dict_with_zero_width_field": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_nonint_offsets": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_fields_by_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_multifield_index": [
            {
                "type": "method",
                "args": {
                    "align_flag": "bool"
                }
            }
        ],
        "TestRecord.test_partial_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_single_subarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_equivalent_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_nonequivalent_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_shape_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_shape_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_shape_monster": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.IntLike.__index__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.IntLike.__int__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_alignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "iter_struct_object_dtypes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestStructuredObjectRefcounting.test_structured_object_create_delete": [
            {
                "type": "method",
                "args": {
                    "dt": "int",
                    "pat": "int",
                    "count": "int",
                    "singleton": "bool",
                    "creation_func": "Callable[[int, int], np.ndarray]",
                    "creation_obj": "np.ndarray"
                }
            }
        ],
        "TestStructuredObjectRefcounting.test_structured_object_item_setting": [
            {
                "type": "method",
                "args": {
                    "dt": "int",
                    "pat": "int",
                    "count": "int",
                    "singleton": "int"
                }
            }
        ],
        "TestStructuredObjectRefcounting.test_structured_object_indexing": [
            {
                "type": "method",
                "args": {
                    "shape": "int",
                    "index": "int",
                    "items_changed": "int",
                    "dt": "int",
                    "pat": "int",
                    "count": "int",
                    "singleton": "bool"
                }
            }
        ],
        "TestStructuredDtypeSparseFields.dtype": [
            {
                "type": "attr",
                "anno": "np.dtype"
            }
        ],
        "TestStructuredDtypeSparseFields.sparse_dtype": [
            {
                "type": "attr",
                "anno": "np.dtype"
            }
        ],
        "TestMonsterType.test1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMetadata.test_metadata_rejects_nondict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_complex_dtype_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_repr_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_repr_structured_not_packed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_repr_structured_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_repr_str_subarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDtypeAttributeDeletion.test_dtype_writable_attributes_deletion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDtypeAttributes.test_descr_has_trailing_void": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_dtypes_are_true": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_invalid_dtype_string": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestFromCTypes.check": [
            {
                "type": "method",
                "args": {
                    "ctype": "ctypes.Type",
                    "dtype": "ctypes.Type"
                }
            }
        ],
        "TestFromCTypes.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.BitfieldStruct._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestFromCTypes.test_pointer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_void_pointer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.Struct._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestFromCTypes.Struct._pack_": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestFromCTypes.Union._pack_": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestFromCTypes.Union._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestFromCTypes.PackedStructure._pack_": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestFromCTypes.PackedStructure._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestFromCTypes.BigEndStruct._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestFromCTypes.BigEndStruct._pack_": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestFromCTypes.LittleEndStruct._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestFromCTypes.LittleEndStruct._pack_": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestFromCTypes.PaddedStruct._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestFromCTypes.test_simple_endian_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.all_types": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "TestFromCTypes.all_pairs": [
            {
                "type": "attr",
                "anno": "permutations"
            }
        ],
        "TestBuiltin.test_dtype": [
            {
                "type": "method",
                "args": {
                    "t": "(int, float)"
                }
            }
        ],
        "TestFromCTypes.test_pairs": [
            {
                "type": "method",
                "args": {
                    "pair": "tuple"
                }
            }
        ],
        "TestFromCTypes.test_big_endian_structure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_little_endian_structure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_little_endian_structure_packed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_big_endian_structure_packed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_large_packed_structure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_packed_structure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_union_packed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_union_with_struct_packed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_union": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_bit_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromCTypes.test_padded_structure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDtypeAttributes.test_name_dtype_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_void_subclass_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_void_subclass_sized": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_void_subclass_unsized": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_bool_commastring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_mutate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.check_pickling": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestPickling.test_metadata": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_datetime": [
            {
                "type": "method",
                "args": {
                    "base": "str",
                    "unit": "str"
                }
            }
        ],
        "TestPickling.test_structured_titles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_structured_padded": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_structured_unaligned": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_structured_aligned": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPickling.test_builtin": [
            {
                "type": "method",
                "args": {
                    "t": "int"
                }
            }
        ],
        "TestMetadata.test_base_metadata_copied": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMetadata.test_nested_metadata": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMetadata.test_metadata_takes_dict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMetadata.test_no_metadata": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_empty_string_to_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestString.test_base_dtype_with_object_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromDTypeAttribute.test_void_subtype_recursion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromDTypeAttribute.test_void_subtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromDTypeAttribute.test_recursion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromDTypeAttribute.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_rational_dtype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestSubarray.test_shape_matches_ndim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_shape_sequence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_fieldless_views": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_union_struct": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructuredDtypeSparseFields.test_sparse_field_assignment_fancy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStructuredDtypeSparseFields.test_sparse_field_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubarray.test_shape_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBuiltin.test_dtype_bytes_str_equivalence": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "TestStructuredObjectRefcounting.test_structured_object_take_and_repeat": [
            {
                "type": "method",
                "args": {
                    "dt": "int",
                    "pat": "int",
                    "count": "int",
                    "singleton": "int"
                }
            }
        ]
    },
    "core.tests.test_unicode": {
        "ucs2_value": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ucs4_value": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "TestCreateZeros_1.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateZeros_2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateZeros_1009.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValues_1_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValues_1_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCreateValues_1_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValues_1_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCreateValues_2_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValues_2_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCreateValues_2_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValues_2_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCreateValues_1009_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValues_1009_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCreateValues_1009_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreateValues_1009_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestAssignValues_1_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestAssignValues_1_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestAssignValues_1_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestAssignValues_1_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestAssignValues_2_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestAssignValues_2_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestAssignValues_2_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestAssignValues_2_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestAssignValues_1009_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestAssignValues_1009_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestAssignValues_1009_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestAssignValues_1009_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestByteorder_1_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestByteorder_1_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestByteorder_1_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestByteorder_1_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestByteorder_2_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestByteorder_2_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestByteorder_2_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestByteorder_2_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestByteorder_1009_UCS2.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestByteorder_1009_UCS2.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestByteorder_1009_UCS4.ulen": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestByteorder_1009_UCS4.ucs_value": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ByteorderValues.test_values0D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_string_cast": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "buffer_length": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "ByteorderValues.test_values_updowncast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ByteorderValues.test_values_cast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ByteorderValues.test_valuesMD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ByteorderValues.test_valuesSD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AssignValues.content_check": [
            {
                "type": "method",
                "args": {
                    "ua": "np.ndarray",
                    "ua_scalar": "np.ndarray",
                    "nbytes": "int"
                }
            }
        ],
        "AssignValues.test_valuesMD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AssignValues.test_valuesSD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AssignValues.test_values0D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateValues.content_check": [
            {
                "type": "method",
                "args": {
                    "ua": "np.ndarray",
                    "ua_scalar": "np.ndarray",
                    "nbytes": "int"
                }
            }
        ],
        "CreateValues.test_valuesMD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateValues.test_valuesSD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateValues.test_values0D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateZeros.content_check": [
            {
                "type": "method",
                "args": {
                    "ua": "np.ndarray",
                    "ua_scalar": "str",
                    "nbytes": "int"
                }
            }
        ],
        "CreateZeros.test_zerosMD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateZeros.test_zerosSD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CreateZeros.test_zeros0D": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_scalarinherit": {
        "HasNew.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TestInherit.test_init": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInherit.test_init2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInherit.test_gh_15395": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCharacter.test_char_radd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCharacter.test_char_repeat": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_records": {
        "TestFromrecords.test_fromrecords_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_method_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_method_array2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_slices": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_0d_recarray_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_zero_width_strings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.data": [
            {
                "type": "attr",
                "anno": "np.rec.Record"
            }
        ],
        "TestRecord.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_assignment1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_assignment2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_invalid_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_pickle_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_pickle_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_pickle_void": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_missing_field": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_fromarrays_nested_structured_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_find_duplicate": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_from_obj": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_fromarrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_fromrecords_with_explicit_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_fromfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_pickle_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_record_scalar_setitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_out_of_order_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_nonwriteable_setfield": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_fromrecords": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_from_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_fromrecords_0len": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_nested_dtype_padding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecord.test_nested_fields_are_records": [
            {
                "type": "method",
                "args": {
                    "nfields": "int"
                }
            }
        ],
        "TestRecord.test_assign_dtype_attribute": [
            {
                "type": "method",
                "args": {
                    "nfields": "int"
                }
            }
        ],
        "TestRecord.test_objview_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_stringtypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_views": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_from_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_returntypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_tofile_fromfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromrecords.test_recarray_conflict_fields": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_api": {
        "test_broadcast_arrays": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_array_astype_warning": [
            {
                "type": "func",
                "args": {
                    "t": "str"
                }
            }
        ],
        "NPY_RELAXED_STRIDES_CHECKING": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "test_array_array": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_copyto": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_copyto_fromscalar": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_array_astype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_fastCopyAndTranspose": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_contiguous_flags": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_copyto_permut": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_copy_order": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core.tests.test_half": {
        "TestHalf.all_f16": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.all_f32": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.all_f64": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.nonan_f16": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.nonan_f32": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.nonan_f64": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.finite_f16": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.finite_f32": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.finite_f64": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestHalf.test_half_rounding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_ufuncs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "assert_raises_fpe": [
            {
                "type": "func",
                "args": {
                    "strmatch": "str",
                    "callable": "typing.Callable",
                    "args": "typing.Any",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "TestHalf.test_half_fpe": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_array_interface": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_coercion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_spacing_nextafter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_correctness": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_conversion_denormal_round_even": [
            {
                "type": "method",
                "args": {
                    "float_t": "float",
                    "uint_t": "uint_t",
                    "bits": "int"
                }
            }
        ],
        "TestHalf.test_half_conversions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_nans_infs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_ordering": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHalf.test_half_conversion_rounding": [
            {
                "type": "method",
                "args": {
                    "float_t": "float",
                    "shift": "str",
                    "offset": "str"
                }
            }
        ]
    },
    "core.tests.test_indexing": {
        "TestIndexing.test_index_no_floats": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_slicing_no_floats": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_index_no_array_to_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_none_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_single_int_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_single_bool_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_boolean_shape_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_boolean_indexing_onedim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_boolean_assignment_value_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_boolean_assignment_needs_api": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_boolean_indexing_twodim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_boolean_indexing_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_too_many_fancy_indices_special_case": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_scalar_array_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_everything_returns_views": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_broaderrors_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_trivial_fancy_out_of_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_scalar_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.Zero.__index__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.ArrayLike.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_small_regressions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_broken_sequence_not_nd_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.SequenceLike.__index__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.SequenceLike.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.SequenceLike.__getitem__": [
            {
                "type": "method",
                "args": {
                    "item": "int"
                }
            }
        ],
        "TestIndexing.test_indexing_array_negative_strides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFieldIndexing.test_scalar_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcastedAssignments.assign": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "ind": "int",
                    "val": "np.ndarray"
                }
            }
        ],
        "TestBroadcastedAssignments.test_prepending_ones": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcastedAssignments.test_prepend_not_one": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcastedAssignments.test_simple_broadcasting_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclasses.SubClass.finalize_status": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSubclasses.SubClass.old": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSubclasses.SubClass.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "old": "np.ndarray"
                }
            }
        ],
        "TestMultiIndexingAutomated.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMultiIndexingAutomated.b": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMultiIndexingAutomated.complex_indices": [
            {
                "type": "attr",
                "anno": "list[int]"
            }
        ],
        "TestMultiIndexingAutomated.simple_indices": [
            {
                "type": "attr",
                "anno": "list[int]"
            }
        ],
        "TestMultiIndexingAutomated.fill_indices": [
            {
                "type": "attr",
                "anno": "list[int]"
            }
        ],
        "TestFloatNonIntegerArgument.test_valid_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFloatNonIntegerArgument.test_valid_slicing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFloatNonIntegerArgument.test_non_integer_argument_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFloatNonIntegerArgument.test_reduce_axis_float_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBooleanIndexing.test_bool_as_int_argument_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayToIndexDeprecation.test_array_to_index_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonIntegerArrayLike.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultipleEllipsisError.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.SubClass.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "old": "np.ndarray"
                }
            }
        ],
        "TestIndexing.test_ellipsis_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_empty_tuple_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexingCast.test_boolean_index_cast_assign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_subclass_writeable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_empty_fancy_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_void_scalar_empty_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBooleanIndexing.test_boolean_indexing_weirdness": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_tuple_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclasses.test_finalize_gets_full_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclasses.test_fancy_on_read_only": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclasses.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_unaligned": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCApiAccess.test_setitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCApiAccess.test_getitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiIndexingAutomated.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_trivial_fancy_not_possible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_reverse_strides_and_subspace_bufferinit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_memory_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_same_kind_index_casting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcastedAssignments.test_broadcast_subspace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcastedAssignments.test_index_is_larger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiIndexingAutomated._compare_index_result": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "index": "int",
                    "mimic_get": "int",
                    "no_copy": "bool"
                }
            }
        ],
        "TestMultiIndexingAutomated._get_multi_index": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "indices": "np.ndarray"
                }
            }
        ],
        "TestMultiIndexingAutomated._check_single_index": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "index": "int"
                }
            }
        ],
        "TestMultiIndexingAutomated.test_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiIndexingAutomated._check_multi_index": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "index": "int"
                }
            }
        ],
        "TestMultiIndexingAutomated.test_multidim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiIndexingAutomated.test_boolean": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexingEquivalence.test_cast_equivalence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFancyIndexingEquivalence.test_object_assign": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_indexing_array_weird_strides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_nonbaseclass_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_uncontiguous_subspace_assignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexing.test_reversed_strides_result_allocation": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_overrides": {
        "requires_array_function": [
            {
                "type": "var",
                "anno": "None"
            }
        ],
        "_return_not_implemented": [
            {
                "type": "func",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "dispatched_one_arg": [
            {
                "type": "func",
                "args": {
                    "array": "int"
                }
            }
        ],
        "dispatched_two_arg": [
            {
                "type": "func",
                "args": {
                    "array1": "np.ndarray",
                    "array2": "np.ndarray"
                }
            }
        ],
        "TestGetImplementingArgs.test_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGetImplementingArgs.test_ndarray_and_duck_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGetImplementingArgs.OverrideSub.__array_function__": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray], np.ndarray]"
            }
        ],
        "TestGetImplementingArgs.Other.__array_function__": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "TestGetImplementingArgs.test_many_duck_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGetImplementingArgs.A.__array_function__": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "TestGetImplementingArgs.B.__array_function__": [
            {
                "type": "attr",
                "anno": "Callable[[], Any]"
            }
        ],
        "TestGetImplementingArgs.C.__array_function__": [
            {
                "type": "attr",
                "anno": "Callable[[], Any]"
            }
        ],
        "TestGetImplementingArgs.D.__array_function__": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "TestNDArrayArrayFunction.Other.__array_function__": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "TestNDArrayArrayFunction.OverrideSub.__array_function__": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray], np.ndarray]"
            }
        ],
        "TestNDArrayArrayFunction.test_no_wrapper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFunctionDispatch.test_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFunctionDispatch.test_name_and_docstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFunctionDispatch.test_interface": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFunctionDispatch.test_not_implemented": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFunctionDispatch.MyArray.__array_function__": [
            {
                "type": "method",
                "args": {
                    "func": "Callable",
                    "types": "types.Type",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestVerifyMatchingSignatures.test_verify_matching_signatures": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVerifyMatchingSignatures.test_array_function_dispatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayMethods.MyArray.__array_function__": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestNumPyFunctions.test_set_module": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNumPyFunctions.test_inspect_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNumPyFunctions.ArrayProxy.value": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestNumPyFunctions.MyArray.sum": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "np.ndarray"
                }
            }
        ],
        "TestNumPyFunctions.MyArray.__array_function__": [
            {
                "type": "method",
                "args": {
                    "func": "np.ndarray",
                    "types": "np.ndarray",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "_new_duck_type_and_implements": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestNumPyFunctions.test_override_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFunctionImplementation.test_not_implemented": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFunctionImplementation.test_optional_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayFunctionImplementation.test_one_arg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGetImplementingArgs.test_too_many_duck_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNumPyFunctions.ArrayProxy.__array__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TestNumPyFunctions.ArrayProxy.__array_function__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "TestNumPyFunctions.ArrayProxy.__init__": [
            {
                "type": "method",
                "args": {
                    "value": "np.ndarray"
                }
            }
        ],
        "TestNumPyFunctions.test_sum_on_mock_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayMethods.test_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayArrayFunction.test_method": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGetImplementingArgs.test_ndarray_subclass_and_duck_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGetImplementingArgs.test_ndarray_subclasses": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNumPyFunctions.test_sum_forwarding_implementation": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_umath_complex": {
        "TestClog.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCpow.olderr": [
            {
                "type": "attr",
                "anno": "np.errstate"
            }
        ],
        "TestCpow.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCpow.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCpow.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCpow.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCpow.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCabs.olderr": [
            {
                "type": "attr",
                "anno": "np.errstate"
            }
        ],
        "TestCabs.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCabs.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCabs.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCabs.test_fabs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "check_real_value": [
            {
                "type": "func",
                "args": {
                    "f": "Callable[[np.ndarray], np.ndarray]",
                    "x1": "np.ndarray",
                    "y1": "np.ndarray",
                    "x": "np.ndarray",
                    "exact": "bool"
                }
            }
        ],
        "TestCarg.test_special_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCarg.test_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCarg.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCabs.test_cabs_inf_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "check_complex_value": [
            {
                "type": "func",
                "args": {
                    "f": "np.ndarray",
                    "x1": "int",
                    "y1": "int",
                    "x2": "int",
                    "y2": "int",
                    "exact": "bool"
                }
            }
        ],
        "TestCsqrt.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCexp.test_special_values2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCsqrt.test_simple_conjugate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCexp.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "functions_seem_flaky": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "xfail_complex_tests": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "platform_skip": [
            {
                "type": "var",
                "anno": "pytest.Mark"
            }
        ],
        "TestCsqrt.test_special_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClog.test_special_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCexp.test_special_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexAbsoluteAVX.test_array": [
            {
                "type": "method",
                "args": {
                    "arraysize": "int",
                    "stride": "int",
                    "astype": "np.dtype"
                }
            }
        ],
        "TestSpecialComplexAVX.test_array": [
            {
                "type": "method",
                "args": {
                    "stride": "int",
                    "astype": "np.dtype"
                }
            }
        ]
    },
    "core.tests.test_datetime": {
        "_has_pytz": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "RecursionError": [
            {
                "type": "var",
                "anno": "RecursionError"
            }
        ],
        "TestDateTime.test_datetime_dtype_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_casting_rules": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_compare_generic_nat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_nat_argsort_stability": [
            {
                "type": "method",
                "args": {
                    "size": "int"
                }
            }
        ],
        "TestDateTime.test_timedelta_nat_argsort_stability": [
            {
                "type": "method",
                "args": {
                    "size": "int"
                }
            }
        ],
        "TestDateTime.test_datetime_scalar_construction_timezone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_np_int_construction": [
            {
                "type": "method",
                "args": {
                    "unit": "str"
                }
            }
        ],
        "TestDateTime.test_timedelta_object_array_conversion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_dtype_comparison": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_pydatetime_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_array_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_setstate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_dtype_promotion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_floor_divide": [
            {
                "type": "method",
                "args": {
                    "op1": "np.timedelta64",
                    "op2": "np.timedelta64",
                    "exp": "int"
                }
            }
        ],
        "TestDateTime.test_timedelta_floor_div_precision": [
            {
                "type": "method",
                "args": {
                    "val1": "int",
                    "val2": "int"
                }
            }
        ],
        "TestDateTime.test_timedelta_floor_div_error": [
            {
                "type": "method",
                "args": {
                    "val1": "np.timedelta64",
                    "val2": "np.timedelta64"
                }
            }
        ],
        "TestDateTime.test_timedelta_divmod": [
            {
                "type": "method",
                "args": {
                    "op1": "np.timedelta64",
                    "op2": "np.timedelta64"
                }
            }
        ],
        "TestDateTime.test_datetime_compare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_compare_nat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_hours": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_year": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_month": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_week": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_day": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_hour": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_minute": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_second": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_fs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_divisor_conversion_as": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_string_parser_variants": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_string_parser_error_check": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_as_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_as_string_timezone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_arange_no_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_modulus": [
            {
                "type": "method",
                "args": {
                    "val1": "np.timedelta64",
                    "val2": "np.timedelta64",
                    "expected": "np.timedelta64"
                }
            }
        ],
        "TestDateTime.test_timedelta_modulus_error": [
            {
                "type": "method",
                "args": {
                    "val1": "np.timedelta64",
                    "val2": "np.timedelta64"
                }
            }
        ],
        "TestDateTime.test_timedelta_modulus_div_by_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_modulus_type_resolution": [
            {
                "type": "method",
                "args": {
                    "val1": "np.timedelta64",
                    "val2": "np.timedelta64"
                }
            }
        ],
        "TestDateTime.test_timedelta_arange_no_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_busday_offset": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_busdaycalendar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_busday_holidays_offset": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_busday_holidays_count": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_is_busday": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_isnat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_isnat_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_isfinite_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_isfinite_isinf_isnan_units": [
            {
                "type": "method",
                "args": {
                    "unit": "str",
                    "dstr": "str"
                }
            }
        ],
        "TestDateTime.test_assert_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_corecursive_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_creation_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_different_unit_comparison": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_month_truncation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_cast_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_array_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_days_to_pydate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_days_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_nat_casting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_0_dim_object_array_conversion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTimeData.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_maximum_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_arange": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_arange": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_subtract": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_add": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_unary": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_scalar_construction_units": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_timedelta_scalar_construction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_array_find_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_scalar_construction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_string_conversion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_y2038": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_minmax": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_timedelta_sort_nat": [
            {
                "type": "method",
                "args": {
                    "arr": "typing.List[int]",
                    "expected": "typing.List[int]",
                    "dtype": "str"
                }
            }
        ],
        "TestDateTime.test_limit_str_roundtrip": [
            {
                "type": "method",
                "args": {
                    "time_unit": "str",
                    "sign": "int"
                }
            }
        ],
        "TestDateTime.test_limit_symmetry": [
            {
                "type": "method",
                "args": {
                    "time_unit": "str"
                }
            }
        ],
        "TestDateTime.test_timedelta_divmod_warnings": [
            {
                "type": "method",
                "args": {
                    "op1": "np.timedelta64",
                    "op2": "np.timedelta64"
                }
            }
        ],
        "TestDateTime.test_timedelta_floor_div_warnings": [
            {
                "type": "method",
                "args": {
                    "op1": "np.timedelta64",
                    "op2": "np.timedelta64"
                }
            }
        ],
        "TestDateTime.test_datetime_divide": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_datetime_multiply": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDateTime.test_pyobject_roundtrip": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_nditer": {
        "iter_multi_index": [
            {
                "type": "func",
                "args": {
                    "i": "nditer"
                }
            }
        ],
        "iter_iterindices": [
            {
                "type": "func",
                "args": {
                    "i": "nditer"
                }
            }
        ],
        "test_iter_best_order_multi_index_1d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_slice": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_array_cast_errors": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_scalar_cast_errors": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_object_arrays_conversions": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_buffered_readwrite": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffered_cast_simple": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffering_growinner": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_writemasked_badinput": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_writemasked": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_non_writable_attribute_deletion": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_writable_attribute_deletion": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_element_deletion": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocated_array_dtypes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_0d_iter": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_types_byte_order": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_types_promotion": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "iter_indices": [
            {
                "type": "func",
                "args": {
                    "i": "nditer"
                }
            }
        ],
        "test_iter_best_order_f_index_1d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_best_order_c_index_1d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_common_dtype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffered_cast_byteswapped_complex": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_close_raises": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_close_equivalent": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_flags_errors": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffering_delayed_alloc": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_writebacks": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffering_string": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_types_scalar": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_scalar_cast": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_nbo_align_contig": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffering_reduction_reuse_reduce_loops": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_simple": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_reduction_error": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestIterNested.test_iter_nested_iters_dtype_buffered": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIterNested.test_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIterNested.test_dtype_buffered": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIterNested.test_dtype_copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIterNested.test_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIterNested.test_flip_axes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIterNested.test_reorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIterNested.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_iter_no_broadcast": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffering_badwriteback": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffered_cast_subarray": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_iterindex": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_remove_multi_index_inner_loop": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_errors": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_opaxes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_op_axes_errors": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_broadcasting_errors": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_broadcasting": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_no_inner_dim_coalescing": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_iterrange": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_remove_axis": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_write_buffering": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_subtype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_op_axes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_copy_if_overlap": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_object_arrays_basic": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_assign_mapping": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_itershape": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_allocate_output_itorder": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_array_cast": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_dim_coalescing": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_no_inner_full_coalesce": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_c_or_f_order": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_f_order": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_c_order": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_best_order": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_reduction": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_too_large_with_multiindex": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_too_large": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_warn_noclose": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffered_cast_byteswapped": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffering_reduction": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffered_reduce_reuse": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffered_cast_structured_type": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_buffering": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_copy": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_best_order_f_index_3d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_best_order_f_index_2d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_best_order_c_index_3d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_best_order_c_index_2d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_best_order_multi_index_3d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_best_order_multi_index_2d": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_iter_refcount": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core.tests.test_cpu_features": {
        "AbstractTest.features": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "AbstractTest.features_groups": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AbstractTest.features_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AbstractTest.features_flags": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "AbstractTest.load_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "is_linux": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "machine": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "is_x86": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "Test_X86_Features.features": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "Test_X86_Features.features_groups": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Test_X86_Features.features_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "is_power": [
            {
                "type": "var",
                "anno": "re.Match"
            }
        ],
        "Test_POWER_Features.features": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "Test_POWER_Features.features_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "is_arm": [
            {
                "type": "var",
                "anno": "re.Match"
            }
        ],
        "Test_ARM_Features.features": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "Test_ARM_Features.features_groups": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Test_ARM_Features.features_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "AbstractTest.test_features": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractTest.load_flags_proc": [
            {
                "type": "method",
                "args": {
                    "magic_key": "str"
                }
            }
        ],
        "Test_ARM_Features.load_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_X86_Features.load_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbstractTest.load_flags_auxv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_POWER_Features.load_flags": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_scalar_methods": {
        "TestAsIntegerRatio.test_small": [
            {
                "type": "method",
                "args": {
                    "ftype": "type[np.ndarray]",
                    "f": "np.ndarray",
                    "ratio": "float"
                }
            }
        ],
        "TestAsIntegerRatio.test_simple_fractions": [
            {
                "type": "method",
                "args": {
                    "ftype": "platform.Type[np.float64]"
                }
            }
        ],
        "TestAsIntegerRatio.test_errors": [
            {
                "type": "method",
                "args": {
                    "ftype": "platform.Type[np.ndarray]"
                }
            }
        ],
        "TestAsIntegerRatio.test_against_known_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsIntegerRatio.test_roundtrip": [
            {
                "type": "method",
                "args": {
                    "ftype": "typing.Type[np.longdouble]",
                    "frac_vals": "fractions.Fractions",
                    "exp_vals": "fractions.Fractions"
                }
            }
        ]
    },
    "core.tests.test_memmap": {
        "TestMemmap.tmpfp": [
            {
                "type": "attr",
                "anno": "TempFile"
            }
        ],
        "TestMemmap.tempdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestMemmap.shape": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMemmap.dtype": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestMemmap.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMemmap.test_open_with_filename": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_unnamed_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_attributes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_del": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_arithmetic_drops_references": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_indexing_drops_references": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_slicing_keeps_references": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_getitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_memmap_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_mmap_offset_greater_than_allocation_granularity": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_path": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_filename": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_filename_fileobj": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_empty_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_roundtrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_no_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMemmap.test_ufunc_return_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_arrayprint": {
        "TestArrayRepr.test_nan_inf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.sub.__getitem__": [
            {
                "type": "method",
                "args": {
                    "ind": "int"
                }
            }
        ],
        "TestArrayRepr.test_self_containing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.test_containing_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.test_void_scalar_recursion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.test_fieldless_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_unexpected_kwarg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_format_function": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_edgeitems_kwarg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_summarize_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_linewidth": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_wide_element": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_refcount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.oldopts": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestPrintOptions.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_precision_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_formatter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_formatter_reset": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_0d_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_float_spacing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_bool_spacing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_sign_spacing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_float_overflow_nowarn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_sign_spacing_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_legacy_mode_scalars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_legacy_stray_comma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_linewidth_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_linewidth_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_bad_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_unicode_object_array": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestContextManager.test_ctx_mgr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestContextManager.test_ctx_mgr_restores": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestContextManager.test_ctx_mgr_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_dtype_linewidth_wrapping": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_floatmode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_any_text": [
            {
                "type": "method",
                "args": {
                    "text": "str"
                }
            }
        ],
        "TestArray2String.test_structure_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.DuckCounter.to_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestComplexArray.test_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.DuckCounter.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_unstructured_void_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.DuckCounter.__getitem__": [
            {
                "type": "method",
                "args": {
                    "item": "int"
                }
            }
        ],
        "TestArrayRepr.sub.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type[np.ndarray]",
                    "inp": "np.ndarray"
                }
            }
        ],
        "TestArrayRepr.test_0d_object_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.test_object_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayRepr.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrintOptions.test_edgeitems": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArray2String.test_summarize_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestContextManager.test_ctx_mgr_as_smth": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_numeric": {
        "TestResize.test_copies": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_choose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_clip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_compress": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_count_nonzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_cumproduct": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_diagonal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_mean": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_ptp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_prod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_ravel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_repeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_reshape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_round": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_searchsorted": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_std": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_swapaxes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_sum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_take": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_trace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_transpose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_var": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsscalar.test_isscalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolScalar.test_logical": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolScalar.test_bitwise_or": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolScalar.test_bitwise_and": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolScalar.test_bitwise_xor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolArray.t": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolArray.f": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolArray.o": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolArray.nm": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolArray.im": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolArray.test_logical_not_abs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolArray.test_logical_and_or_xor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolCmp.f": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.ef": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.ed": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.nf": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.nd": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.inff": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.infd": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.efnonan": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.ednonan": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.signf": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestBoolCmp.signd": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSeterr.test_default": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeterr.test_set": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeterr.test_divide_err": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeterr.called": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestSeterr.test_errobj": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeterr.test_errobj_noerrmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.check_promotion_cases": [
            {
                "type": "method",
                "args": {
                    "promote_func": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "TestTypes.test_result_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_promote_types_endian": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_promote_types_strings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_can_cast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_can_cast_simple_to_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_can_cast_structured_to_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromiter.load_data": [
            {
                "type": "method",
                "args": {
                    "n": "int",
                    "eindex": "int"
                }
            }
        ],
        "TestFromiter.test_2592": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromiter.test_2592_edge": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_nonzero_trivial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_nonzero_zerod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_nonzero_onedim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_sparse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_count_nonzero_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_nonzero_invalid_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.BoolErrors.__bool__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.FalseThenTrue._val": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TestNonzero.TrueThenFalse._val": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TestNonzero.ThrowsAfter.iters_left": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestNonzero.ThrowsAfter.__init__": [
            {
                "type": "method",
                "args": {
                    "iters": "int"
                }
            }
        ],
        "TestNonzero.test_nonzero_exception_safe": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.ThrowsAfter.__bool__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinaryRepr.test_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinaryRepr.test_positive": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinaryRepr.test_negative": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinaryRepr.test_sufficient_width": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinaryRepr.test_neg_width_boundaries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinaryRepr.test_large_neg_int64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBaseRepr.test_base3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBaseRepr.test_positive": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBaseRepr.test_negative": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBaseRepr.test_base_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayComparisons.test_array_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayComparisons.test_none_compares_elementwise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayComparisons.test_array_equiv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.nr": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestClip.nc": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestClip.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.clip": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "m": "np.ndarray",
                    "M": "np.ndarray",
                    "out": "np.ndarray"
                }
            }
        ],
        "TestClip.fastclip": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "m": "np.ndarray",
                    "M": "np.ndarray",
                    "out": "np.ndarray",
                    "casting": "bool"
                }
            }
        ],
        "TestClip._generate_data": [
            {
                "type": "method",
                "args": {
                    "n": "int",
                    "m": "int"
                }
            }
        ],
        "TestClip._generate_data_complex": [
            {
                "type": "method",
                "args": {
                    "n": "int",
                    "m": "int"
                }
            }
        ],
        "TestClip.test_clip_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_all_none": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_invalid_casting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_value_min_max_flip": [
            {
                "type": "method",
                "args": {
                    "amin": "float",
                    "amax": "float"
                }
            }
        ],
        "TestClip.test_clip_problem_cases": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "amin": "np.ndarray",
                    "amax": "np.ndarray",
                    "exp": "np.ndarray"
                }
            }
        ],
        "TestClip.test_clip_scalar_nan_propagation": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "amin": "np.ndarray",
                    "amax": "np.ndarray"
                }
            }
        ],
        "TestClip.test_NaT_propagation": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "amin": "np.ndarray",
                    "amax": "np.ndarray"
                }
            }
        ],
        "TestClip.test_clip_property": [
            {
                "type": "method",
                "args": {
                    "data": "st.Data",
                    "shape": "hynp.ArrayShape"
                }
            }
        ],
        "TestAllclose.rtol": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TestAllclose.atol": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TestAllclose.olderr": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestAllclose.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAllclose.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAllclose.tst_allclose": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray"
                }
            }
        ],
        "TestAllclose.tst_not_allclose": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray"
                }
            }
        ],
        "TestAllclose.test_no_parameter_modification": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAllclose.test_equalnan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.rtol": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TestIsclose.atol": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TestIsclose.all_close_tests": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestIsclose.none_close_tests": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestIsclose.some_close_tests": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestIsclose.some_close_results": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestIsclose.tst_all_isclose": [
            {
                "type": "method",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "TestIsclose.tst_none_isclose": [
            {
                "type": "method",
                "args": {
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "TestIsclose.test_equal_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.test_scalar_return": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.test_no_parameter_modification": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.test_non_finite_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStdVar.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestStdVar.real_var": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestStdVar.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStdVar.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStdVar.test_scalars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStdVar.test_ddof1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStdVar.test_ddof2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStdVar.test_out_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStdVarComplex.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStdVarComplex.test_scalars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreationFuncs.dtypes": [
            {
                "type": "attr",
                "anno": "list[np.dtype]"
            }
        ],
        "TestCreationFuncs.orders": [
            {
                "type": "attr",
                "anno": "dict[str, str]"
            }
        ],
        "TestCreationFuncs.ndims": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestCreationFuncs.test_for_reference_leak": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLikeFuncs.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestLikeFuncs.shapes": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestCorrelate.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate.xs": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate.y": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate.z1": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate.z1_4": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate.z1r": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate.z2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate.z2r": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate.zs": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrelate._setup": [
            {
                "type": "method",
                "args": {
                    "dt": "str"
                }
            }
        ],
        "TestCorrelate.test_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrelate.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrelate.test_no_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrelate.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrelate.test_zero_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConvolve.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConvolve.test_no_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgwhere.test_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringFunction.test_set_string_function": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRoll.test_roll1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRoll.test_roll2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRoll.test_roll_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRollaxis.tgtshape": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestMoveaxis.test_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCross.test_2x2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCross.test_2x3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCross.test_3x3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_outer_out_param": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestIndices.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndices.test_single_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndices.test_scalar_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndices.test_sparse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRequire.flag_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestRequire.test_ensure_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_number_of_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestKeepdims.sub_array.sum": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "str",
                    "out": "np.ndarray"
                }
            }
        ],
        "TestTensordot.test_zero_dimension": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTensordot.test_zero_dimensional": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFloatExceptions.assert_raises_fpe": [
            {
                "type": "method",
                "args": {
                    "fpeerr": "str",
                    "flop": "typing.Callable",
                    "x": "typing.Any",
                    "y": "typing.Any"
                }
            }
        ],
        "TestFloatExceptions.assert_op_raises_fpe": [
            {
                "type": "method",
                "args": {
                    "fpeerr": "str",
                    "flop": "typing.Callable",
                    "sc1": "typing.List[typing.Any]",
                    "sc2": "typing.List[typing.Any]"
                }
            }
        ],
        "TestFloatExceptions.test_warnings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip._generate_int32_data": [
            {
                "type": "method",
                "args": {
                    "n": "int",
                    "m": "int"
                }
            }
        ],
        "TestClip._generate_int_data": [
            {
                "type": "method",
                "args": {
                    "n": "int",
                    "m": "int"
                }
            }
        ],
        "TestClip._generate_flt_data": [
            {
                "type": "method",
                "args": {
                    "n": "int",
                    "m": "int"
                }
            }
        ],
        "TestNonzero.test_countnonzero_axis_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_count_nonzero_axis_consistent": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRequire.generate_all_false": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestRequire.test_C_and_F_simul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRequire.test_unknown_requirement": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromiter.makegen": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromiter.test_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromiter.test_lengths": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_array_method": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRequire.test_non_array_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRequire.set_and_check_flag": [
            {
                "type": "method",
                "args": {
                    "flag": "str",
                    "dtype": "np.dtype",
                    "arr": "np.ndarray"
                }
            }
        ],
        "TestRequire.test_preserve_subtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRequire.test_require_each": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndices.test_return_type": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype",
                    "dims": "tuple"
                }
            }
        ],
        "TestLikeFuncs.compare_array_value": [
            {
                "type": "method",
                "args": {
                    "dz": "np.ndarray",
                    "value": "np.ndarray",
                    "fill_value": "bool"
                }
            }
        ],
        "TestCreationFuncs.check_function": [
            {
                "type": "method",
                "args": {
                    "func": "typing.Callable",
                    "fill_value": "np.dtype"
                }
            }
        ],
        "TestCreationFuncs.test_full": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreationFuncs.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreationFuncs.test_ones": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreationFuncs.test_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip._neg_byteorder": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "TestClip._generate_non_native_data": [
            {
                "type": "method",
                "args": {
                    "n": "int",
                    "m": "int"
                }
            }
        ],
        "TestClip.test_simple_nonnative": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "assert_array_strict_equal": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray"
                }
            }
        ],
        "TestClip.test_type_cast_08": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_06": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_04": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_03": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_02": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_01": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_non_contig": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_double": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndex.test_boolean_edgecase": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromiter.test_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_coercion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_reshape_from_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_broadcast_error_kwargs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_broadcast_single_arg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_broadcast_in_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCross.test_broadcasting_shapes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMoveaxis.test_array_likes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMoveaxis.test_move_multiples": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMoveaxis.test_preserve_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMoveaxis.test_move_new_position": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMoveaxis.test_move_to_end": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_with_out_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_12": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_10": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_09": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_07": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_05": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_array_double": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonarrayArgs.test_squeeze": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestResize.test_zeroresize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestKeepdims.test_raise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLikeFuncs.check_like_function": [
            {
                "type": "method",
                "args": {
                    "like_function": "Callable[[np.ndarray], np.ndarray]",
                    "value": "np.ndarray",
                    "fill_value": "bool"
                }
            }
        ],
        "TestLikeFuncs.test_filled_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLikeFuncs.test_empty_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLikeFuncs.test_zeros_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLikeFuncs.test_ones_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAllclose.Foo.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestAllclose.test_return_class_is_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolCmp.test_double": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolCmp.test_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRollaxis.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgwhere.test_2D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.test_ip_none_isclose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.test_ip_all_isclose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.test_ip_isclose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAllclose.test_ip_not_allclose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAllclose.test_ip_allclose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_count_nonzero_axis_all_dtypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgwhere.test_nd": [
            {
                "type": "method",
                "args": {
                    "nd": "int"
                }
            }
        ],
        "TestCross.test_broadcasting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_with_out_transposed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_nonzero_twodim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLikeFuncs.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.test_masked_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsclose.tst_isclose_allclose": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray"
                }
            }
        ],
        "TestIsclose.test_ip_isclose_allclose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndex.test_boolean": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolArray.test_all_any": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFloatExceptions.test_floating_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAllclose.test_min_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTypes.test_can_cast_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCreationFuncs.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_object_clip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_ones_pathological": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "TestRollaxis.test_results": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_func_takes_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_inplace_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_inplace_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_with_out_memory_overlap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_with_out_array_outint32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_with_out_array_int32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_with_out_simple_int32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_clip_with_out_simple2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_type_cast_11": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_noncontig_inplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_inplace_02": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_inplace_01": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_int32_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_int64_inout": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_int64_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestClip.test_simple_int32_inout": [
            {
                "type": "method",
                "args": {
                    "casting": "bool"
                }
            }
        ],
        "TestBoolCmp.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBoolArray.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.TrueThenFalse.__bool__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.FalseThenTrue.__bool__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNonzero.test_nonzero_sideeffect_safety": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests._locales": {
        "__ALL__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "find_comma_decimal_point_locale": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "CommaDecimalPointLocale.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CommaDecimalPointLocale.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CommaDecimalPointLocale.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CommaDecimalPointLocale.__exit__": [
            {
                "type": "method",
                "args": {
                    "type": "str",
                    "value": "str",
                    "traceback": "str"
                }
            }
        ]
    },
    "core.tests.test_einsum": {
        "chars": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "sizes": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "global_size_dict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "TestEinsum.test_subscript_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_fixed_collapsingbug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_small_boolean_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsumPath.assert_path_equal": [
            {
                "type": "method",
                "args": {
                    "comp": "list",
                    "benchmark": "list"
                }
            }
        ],
        "TestEinsumPath.test_spaces": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_all_contig_non_contig_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsumPath.build_operands": [
            {
                "type": "method",
                "args": {
                    "string": "str",
                    "size_dict": "dict"
                }
            }
        ],
        "TestEinsumPath.test_path_type_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsumPath.test_edge_paths": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsumPath.test_long_paths": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsumPath.test_memory_contraints": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.optimize_compare": [
            {
                "type": "method",
                "args": {
                    "subscripts": "str",
                    "operands": "typing.Optional[typing.List[int]]"
                }
            }
        ],
        "TestEinsum.test_random_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_inner_product": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_edge_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_expand": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_collapse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_index_transformations": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_hadamard_like_products": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_overlap": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestEinsum.test_broadcasting_dot_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_combined_views_mapping": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_out_is_res": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_fixedstridebug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_misc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_views": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.check_einsum_sums": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype",
                    "do_opt": "bool"
                }
            }
        ],
        "TestEinsum.test_einsum_sums_clongdouble": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_cfloat128": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_cfloat64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_longdouble": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_float64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_float32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_float16": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_uint64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_int64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_uint32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_int32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_uint16": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_int16": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_uint8": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_sums_int8": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEinsum.test_einsum_failed_on_p9_and_s390x": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core._asarray": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "asarray": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "dtype": "str",
                    "order": "str"
                }
            }
        ],
        "asanyarray": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "dtype": "str",
                    "order": "str"
                }
            }
        ],
        "ascontiguousarray": [
            {
                "type": "func",
                "args": {
                    "a": "list",
                    "dtype": "str"
                }
            }
        ],
        "asfortranarray": [
            {
                "type": "func",
                "args": {
                    "a": "list",
                    "dtype": "str"
                }
            }
        ],
        "require": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "dtype": "str",
                    "requirements": "set"
                }
            }
        ]
    },
    "core.getlimits": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "MachArLike.title": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachArLike.epsilon": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike.eps": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike.epsneg": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike.xmax": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike.huge": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike.xmin": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike.tiny": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike.ibeta": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike.precision": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MachArLike.resolution": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachArLike._str_eps": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachArLike._str_epsneg": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachArLike._str_xmin": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachArLike._str_xmax": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachArLike._str_resolution": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_convert_to_float": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_title_fmt": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_KNOWN_TYPES": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_register_type": [
            {
                "type": "func",
                "args": {
                    "machar": "MachAr",
                    "bytepat": "bytes"
                }
            }
        ],
        "_float_ma": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "finfo._finfo_cache": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "finfo.dtype": [
            {
                "type": "attr",
                "anno": "numeric.dtype"
            }
        ],
        "finfo.bits": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "finfo.max": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "finfo.min": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "finfo.eps": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "finfo.nexp": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "finfo.nmant": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "finfo.machar": [
            {
                "type": "attr",
                "anno": "MachAr"
            }
        ],
        "finfo._str_tiny": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "finfo._str_max": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "finfo._str_epsneg": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "finfo._str_eps": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "finfo._str_resolution": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "finfo.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "iinfo._min_vals": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "iinfo._max_vals": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "iinfo.dtype": [
            {
                "type": "attr",
                "anno": "numeric.dtype"
            }
        ],
        "iinfo.kind": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "iinfo.bits": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "iinfo.key": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "iinfo.min": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "iinfo.max": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "iinfo.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "iinfo.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_MACHAR_PARAMS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "iinfo.__init__": [
            {
                "type": "method",
                "args": {
                    "int_type": "int"
                }
            }
        ],
        "finfo.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_fr1": [
            {
                "type": "func",
                "args": {
                    "a": "MachAr"
                }
            }
        ],
        "_fr0": [
            {
                "type": "func",
                "args": {
                    "a": "MachAr"
                }
            }
        ],
        "_discovered_machar": [
            {
                "type": "func",
                "args": {
                    "ftype": "int"
                }
            }
        ],
        "_get_machar": [
            {
                "type": "func",
                "args": {
                    "ftype": "int"
                }
            }
        ],
        "finfo._init": [
            {
                "type": "method",
                "args": {
                    "dtype": "numeric.dtype"
                }
            }
        ],
        "finfo.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "dtype": "numeric.dtype"
                }
            }
        ],
        "MachArLike.__init__": [
            {
                "type": "method",
                "args": {
                    "ftype": "int",
                    "eps": "float",
                    "epsneg": "float",
                    "huge": "float",
                    "tiny": "float",
                    "ibeta": "float",
                    "kwargs": "dict"
                }
            }
        ],
        "_register_known_types": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core._string_helpers": {
        "_all_chars": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_ascii_upper": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_ascii_lower": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "UPPER_TABLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "english_upper": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "english_capitalize": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "LOWER_TABLE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "english_lower": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ]
    },
    "core._exceptions": {
        "_unpack_tuple": [
            {
                "type": "func",
                "args": {
                    "tup": "tuple"
                }
            }
        ],
        "_display_as_base": [
            {
                "type": "func",
                "args": {
                    "cls": "Exception"
                }
            }
        ],
        "UFuncTypeError.ufunc": [
            {
                "type": "attr",
                "anno": "UFunc"
            }
        ],
        "UFuncTypeError.__init__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "UFunc"
                }
            }
        ],
        "_UFuncBinaryResolutionError.dtypes": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "_UFuncBinaryResolutionError.__init__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "UFunc",
                    "dtypes": "tuple"
                }
            }
        ],
        "_UFuncNoLoopError.dtypes": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "_UFuncNoLoopError.__init__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "UFunc",
                    "dtypes": "tuple"
                }
            }
        ],
        "_UFuncCastingError.casting": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_UFuncCastingError.from_": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_UFuncCastingError.to": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_UFuncCastingError.__init__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "UFunc",
                    "casting": "str",
                    "from_": "str",
                    "to": "str"
                }
            }
        ],
        "_UFuncInputCastingError.in_i": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_UFuncInputCastingError.__init__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "UFunc",
                    "casting": "UFunc",
                    "from_": "int",
                    "to": "int",
                    "i": "int"
                }
            }
        ],
        "_UFuncOutputCastingError.out_i": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_UFuncOutputCastingError.__init__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "UFunc",
                    "casting": "UFunc",
                    "from_": "int",
                    "to": "int",
                    "i": "int"
                }
            }
        ],
        "_ArrayMemoryError.shape": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "_ArrayMemoryError.dtype": [
            {
                "type": "attr",
                "anno": "dtype"
            }
        ],
        "_ArrayMemoryError.__init__": [
            {
                "type": "method",
                "args": {
                    "shape": "tuple",
                    "dtype": "dtype"
                }
            }
        ],
        "_ArrayMemoryError._total_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_ArrayMemoryError._size_to_string": [
            {
                "type": "method",
                "args": {
                    "num_bytes": "int"
                }
            }
        ],
        "_ArrayMemoryError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AxisError.__init__": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "ndim": "int",
                    "msg_prefix": "str"
                }
            }
        ],
        "_UFuncOutputCastingError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_UFuncInputCastingError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_UFuncNoLoopError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_UFuncBinaryResolutionError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core._dtype": {
        "_kind_to_stem": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_unpack_field": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray",
                    "offset": "int",
                    "title": "str | None"
                }
            }
        ],
        "_isunsized": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "_byte_order_str": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "_datetime_metadata_str": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "_is_packed": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray"
                }
            }
        ],
        "_kind_name": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "_name_includes_bit_suffix": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "_name_get": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "_scalar_str": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray",
                    "short": "bool"
                }
            }
        ],
        "_struct_dict_str": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray",
                    "includealignedflag": "bool"
                }
            }
        ],
        "_struct_str": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray",
                    "include_align": "bool"
                }
            }
        ],
        "_construction_repr": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray",
                    "include_align": "bool",
                    "short": "bool"
                }
            }
        ],
        "_subarray_str": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray"
                }
            }
        ],
        "_struct_list_str": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray"
                }
            }
        ],
        "__repr__": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray"
                }
            }
        ],
        "__str__": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.ndarray"
                }
            }
        ]
    },
    "core.multiarray": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "array_function_from_c_func_and_dispatcher": [
            {
                "type": "var",
                "anno": "functools.Mapping[str, function]"
            }
        ],
        "datetime_as_string": [
            {
                "type": "func",
                "args": {
                    "arr": "_ARRAY_API",
                    "unit": "str",
                    "timezone": "str",
                    "casting": "str"
                }
            }
        ],
        "busday_count": [
            {
                "type": "func",
                "args": {
                    "begindates": "_ARRAY_API",
                    "enddates": "_ARRAY_API",
                    "weekmask": "str",
                    "holidays": "str",
                    "busdaycal": "str",
                    "out": "str"
                }
            }
        ],
        "busday_offset": [
            {
                "type": "func",
                "args": {
                    "dates": "_ARRAY_API",
                    "offsets": "_ARRAY_API",
                    "roll": "float",
                    "weekmask": "float",
                    "holidays": "float",
                    "busdaycal": "float",
                    "out": "str"
                }
            }
        ],
        "is_busday": [
            {
                "type": "func",
                "args": {
                    "dates": "_ARRAY_API",
                    "weekmask": "str",
                    "holidays": "str",
                    "busdaycal": "str",
                    "out": "str"
                }
            }
        ],
        "may_share_memory": [
            {
                "type": "func",
                "args": {
                    "a": "_ARRAY_API",
                    "b": "_ARRAY_API",
                    "max_work": "int"
                }
            }
        ],
        "shares_memory": [
            {
                "type": "func",
                "args": {
                    "a": "_ARRAY_API",
                    "b": "_ARRAY_API",
                    "max_work": "int"
                }
            }
        ],
        "unpackbits": [
            {
                "type": "func",
                "args": {
                    "a": "_ARRAY_API",
                    "axis": "int",
                    "count": "int",
                    "bitorder": "int"
                }
            }
        ],
        "packbits": [
            {
                "type": "func",
                "args": {
                    "a": "_ARRAY_API",
                    "axis": "int",
                    "bitorder": "int"
                }
            }
        ],
        "putmask": [
            {
                "type": "func",
                "args": {
                    "a": "_ARRAY_API",
                    "mask": "_ARRAY_API",
                    "values": "_ARRAY_API"
                }
            }
        ],
        "copyto": [
            {
                "type": "func",
                "args": {
                    "dst": "float",
                    "src": "float",
                    "casting": "str",
                    "where": "int"
                }
            }
        ],
        "unravel_index": [
            {
                "type": "func",
                "args": {
                    "indices": "tuple",
                    "shape": "tuple",
                    "order": "str",
                    "dims": "tuple"
                }
            }
        ],
        "ravel_multi_index": [
            {
                "type": "func",
                "args": {
                    "multi_index": "_ARRAY_API",
                    "dims": "tuple",
                    "mode": "str",
                    "order": "str"
                }
            }
        ],
        "bincount": [
            {
                "type": "func",
                "args": {
                    "x": "_ARRAY_API",
                    "weights": "_vec_string",
                    "minlength": "_vec_string"
                }
            }
        ],
        "vdot": [
            {
                "type": "func",
                "args": {
                    "a": "_ARRAY_API",
                    "b": "_ARRAY_API"
                }
            }
        ],
        "dot": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "out": "object"
                }
            }
        ],
        "result_type": [
            {
                "type": "func",
                "args": {
                    "arrays_and_dtypes": "object"
                }
            }
        ],
        "min_scalar_type": [
            {
                "type": "func",
                "args": {
                    "a": "_ARRAY_API"
                }
            }
        ],
        "can_cast": [
            {
                "type": "func",
                "args": {
                    "from_": "_ARRAY_API",
                    "to": "_ARRAY_API",
                    "casting": "str"
                }
            }
        ],
        "lexsort": [
            {
                "type": "func",
                "args": {
                    "keys": "tuple",
                    "axis": "int"
                }
            }
        ],
        "where": [
            {
                "type": "func",
                "args": {
                    "condition": "str",
                    "x": "float",
                    "y": "float"
                }
            }
        ],
        "inner": [
            {
                "type": "func",
                "args": {
                    "a": "_ARRAY_API",
                    "b": "_ARRAY_API"
                }
            }
        ],
        "concatenate": [
            {
                "type": "func",
                "args": {
                    "arrays": "tuple",
                    "axis": "int",
                    "out": "object"
                }
            }
        ],
        "empty_like": [
            {
                "type": "func",
                "args": {
                    "prototype": "float",
                    "dtype": "dtype",
                    "order": "order",
                    "subok": "bool",
                    "shape": "tuple"
                }
            }
        ]
    },
    "core.umath": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ]
    },
    "core.defchararray": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "_globalvar": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "typing.Mapping[typing.Any, typing.Callable]"
            }
        ],
        "_clean_args": [
            {
                "type": "func",
                "args": {
                    "args": "typing.Callable"
                }
            }
        ],
        "_binary_op_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x1": "typing.Any",
                    "x2": "typing.Any"
                }
            }
        ],
        "equal": [
            {
                "type": "func",
                "args": {
                    "x1": "typing.Any",
                    "x2": "typing.Any"
                }
            }
        ],
        "not_equal": [
            {
                "type": "func",
                "args": {
                    "x1": "typing.Any",
                    "x2": "typing.Any"
                }
            }
        ],
        "greater_equal": [
            {
                "type": "func",
                "args": {
                    "x1": "typing.Any",
                    "x2": "typing.Any"
                }
            }
        ],
        "less_equal": [
            {
                "type": "func",
                "args": {
                    "x1": "typing.Any",
                    "x2": "typing.Any"
                }
            }
        ],
        "greater": [
            {
                "type": "func",
                "args": {
                    "x1": "typing.Any",
                    "x2": "typing.Any"
                }
            }
        ],
        "less": [
            {
                "type": "func",
                "args": {
                    "x1": "typing.Any",
                    "x2": "typing.Any"
                }
            }
        ],
        "_unary_op_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "str_len": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "_multiply_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "i": "typing.Any"
                }
            }
        ],
        "_mod_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "values": "typing.List[str]"
                }
            }
        ],
        "_center_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "width": "typing.Any",
                    "fillchar": "typing.Any"
                }
            }
        ],
        "_count_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "count": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "_code_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "encoding": "typing.Optional[str]",
                    "errors": "typing.Optional[str]"
                }
            }
        ],
        "_endswith_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "suffix": "str",
                    "start": "int",
                    "end": "int"
                }
            }
        ],
        "endswith": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "suffix": "str",
                    "start": "int",
                    "end": "int"
                }
            }
        ],
        "_expandtabs_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "tabsize": "typing.Optional[int]"
                }
            }
        ],
        "find": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "index": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "isalnum": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "isalpha": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "isdigit": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "islower": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "isspace": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "istitle": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "isupper": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "_join_dispatcher": [
            {
                "type": "func",
                "args": {
                    "sep": "str",
                    "seq": "str"
                }
            }
        ],
        "_just_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "width": "typing.Any",
                    "fillchar": "typing.Any"
                }
            }
        ],
        "_partition_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "sep": "str"
                }
            }
        ],
        "_replace_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "old": "typing.Callable",
                    "new": "typing.Callable",
                    "count": "typing.Optional[int]"
                }
            }
        ],
        "rfind": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "rindex": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "_split_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sep": "typing.Callable",
                    "maxsplit": "typing.Callable"
                }
            }
        ],
        "rsplit": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sep": "typing.Callable",
                    "maxsplit": "typing.Callable"
                }
            }
        ],
        "_strip_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "chars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "split": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "sep": "typing.Callable",
                    "maxsplit": "typing.Callable"
                }
            }
        ],
        "_splitlines_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "keepends": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "splitlines": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "keepends": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "_startswith_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "prefix": "str",
                    "start": "int",
                    "end": "int"
                }
            }
        ],
        "startswith": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "prefix": "str",
                    "start": "int",
                    "end": "int"
                }
            }
        ],
        "_translate_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "table": "str",
                    "deletechars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "_zfill_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "width": "typing.Any"
                }
            }
        ],
        "chararray.__new__": [
            {
                "type": "method",
                "args": {
                    "subtype": "type[ndarray]",
                    "shape": "tuple",
                    "itemsize": "int",
                    "unicode": "bool",
                    "buffer": "str",
                    "offset": "int",
                    "strides": "int",
                    "order": "str"
                }
            }
        ],
        "chararray.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "typing.Any"
                }
            }
        ],
        "chararray.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "typing.Any"
                }
            }
        ],
        "chararray.__ge__": [
            {
                "type": "method",
                "args": {
                    "other": "typing.Any"
                }
            }
        ],
        "chararray.__le__": [
            {
                "type": "method",
                "args": {
                    "other": "typing.Any"
                }
            }
        ],
        "chararray.__gt__": [
            {
                "type": "method",
                "args": {
                    "other": "typing.Any"
                }
            }
        ],
        "chararray.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "typing.Any"
                }
            }
        ],
        "chararray.__rmod__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "chararray.count": [
            {
                "type": "method",
                "args": {
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "chararray.endswith": [
            {
                "type": "method",
                "args": {
                    "suffix": "str",
                    "start": "int",
                    "end": "int"
                }
            }
        ],
        "chararray.find": [
            {
                "type": "method",
                "args": {
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "chararray.index": [
            {
                "type": "method",
                "args": {
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "chararray.isalnum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.isalpha": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.isdigit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.islower": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.isspace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.istitle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.isupper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.rfind": [
            {
                "type": "method",
                "args": {
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "chararray.rindex": [
            {
                "type": "method",
                "args": {
                    "sub": "typing.Callable",
                    "start": "typing.Optional[int]",
                    "end": "typing.Optional[int]"
                }
            }
        ],
        "chararray.rsplit": [
            {
                "type": "method",
                "args": {
                    "sep": "typing.Callable",
                    "maxsplit": "typing.Callable"
                }
            }
        ],
        "chararray.split": [
            {
                "type": "method",
                "args": {
                    "sep": "typing.Callable",
                    "maxsplit": "typing.Callable"
                }
            }
        ],
        "chararray.splitlines": [
            {
                "type": "method",
                "args": {
                    "keepends": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "chararray.startswith": [
            {
                "type": "method",
                "args": {
                    "prefix": "str",
                    "start": "int",
                    "end": "int"
                }
            }
        ],
        "chararray.argsort": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "kind": "str",
                    "order": "str"
                }
            }
        ],
        "chararray.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "upper": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "translate": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "table": "str",
                    "deletechars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "title": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "swapcase": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "strip": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "chars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "rstrip": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "chars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "lstrip": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "chars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "lower": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "capitalize": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "_get_num_chars": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "_use_unicode": [
            {
                "type": "func",
                "args": {
                    "args": "typing.Any"
                }
            }
        ],
        "isdecimal": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "chararray.isdecimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "isnumeric": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any"
                }
            }
        ],
        "chararray.isnumeric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "add": [
            {
                "type": "func",
                "args": {
                    "x1": "typing.Any",
                    "x2": "typing.Any"
                }
            }
        ],
        "zfill": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "width": "typing.Any"
                }
            }
        ],
        "rjust": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "width": "typing.Any",
                    "fillchar": "typing.Any"
                }
            }
        ],
        "ljust": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "width": "typing.Any",
                    "fillchar": "typing.Any"
                }
            }
        ],
        "center": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "width": "typing.Any",
                    "fillchar": "typing.Any"
                }
            }
        ],
        "multiply": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Any",
                    "i": "typing.Any"
                }
            }
        ],
        "array": [
            {
                "type": "func",
                "args": {
                    "obj": "Union[bytes, str]",
                    "itemsize": "int",
                    "copy": "bool",
                    "unicode": "bool",
                    "order": "int"
                }
            }
        ],
        "asarray": [
            {
                "type": "func",
                "args": {
                    "obj": "Union[bytes, str]",
                    "itemsize": "int",
                    "unicode": "bool",
                    "order": "int"
                }
            }
        ],
        "chararray.zfill": [
            {
                "type": "method",
                "args": {
                    "width": "int"
                }
            }
        ],
        "chararray.upper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.translate": [
            {
                "type": "method",
                "args": {
                    "table": "str",
                    "deletechars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "chararray.title": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.swapcase": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.strip": [
            {
                "type": "method",
                "args": {
                    "chars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "chararray.rstrip": [
            {
                "type": "method",
                "args": {
                    "chars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "chararray.__getitem__": [
            {
                "type": "method",
                "args": {
                    "obj": "typing.Any"
                }
            }
        ],
        "chararray.rjust": [
            {
                "type": "method",
                "args": {
                    "width": "typing.Any",
                    "fillchar": "typing.Any"
                }
            }
        ],
        "chararray.lstrip": [
            {
                "type": "method",
                "args": {
                    "chars": "typing.Optional[typing.Callable]"
                }
            }
        ],
        "chararray.lower": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.ljust": [
            {
                "type": "method",
                "args": {
                    "width": "typing.Any",
                    "fillchar": "typing.Any"
                }
            }
        ],
        "chararray.center": [
            {
                "type": "method",
                "args": {
                    "width": "typing.Any",
                    "fillchar": "typing.Any"
                }
            }
        ],
        "chararray.capitalize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "chararray.__rmul__": [
            {
                "type": "method",
                "args": {
                    "i": "typing.Any"
                }
            }
        ],
        "chararray.__mul__": [
            {
                "type": "method",
                "args": {
                    "i": "typing.Any"
                }
            }
        ],
        "chararray.__radd__": [
            {
                "type": "method",
                "args": {
                    "other": "typing.Any"
                }
            }
        ],
        "chararray.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "typing.Any"
                }
            }
        ],
        "_to_string_or_unicode_array": [
            {
                "type": "func",
                "args": {
                    "result": "typing.List[str]"
                }
            }
        ],
        "rpartition": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "sep": "str"
                }
            }
        ],
        "chararray.rpartition": [
            {
                "type": "method",
                "args": {
                    "sep": "str"
                }
            }
        ],
        "replace": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "old": "typing.Callable",
                    "new": "typing.Callable",
                    "count": "typing.Optional[int]"
                }
            }
        ],
        "chararray.replace": [
            {
                "type": "method",
                "args": {
                    "old": "typing.Callable",
                    "new": "typing.Callable",
                    "count": "typing.Optional[int]"
                }
            }
        ],
        "partition": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "sep": "str"
                }
            }
        ],
        "chararray.partition": [
            {
                "type": "method",
                "args": {
                    "sep": "str"
                }
            }
        ],
        "join": [
            {
                "type": "func",
                "args": {
                    "sep": "str",
                    "seq": "str"
                }
            }
        ],
        "chararray.join": [
            {
                "type": "method",
                "args": {
                    "seq": "str"
                }
            }
        ],
        "expandtabs": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "tabsize": "int"
                }
            }
        ],
        "chararray.expandtabs": [
            {
                "type": "method",
                "args": {
                    "tabsize": "int"
                }
            }
        ],
        "encode": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "encoding": "typing.Optional[str]",
                    "errors": "typing.Optional[str]"
                }
            }
        ],
        "chararray.encode": [
            {
                "type": "method",
                "args": {
                    "encoding": "typing.Optional[str]",
                    "errors": "typing.Optional[str]"
                }
            }
        ],
        "decode": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "encoding": "typing.Optional[str]",
                    "errors": "typing.Optional[str]"
                }
            }
        ],
        "chararray.decode": [
            {
                "type": "method",
                "args": {
                    "encoding": "typing.Optional[str]",
                    "errors": "typing.Optional[str]"
                }
            }
        ],
        "mod": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "values": "typing.List[str]"
                }
            }
        ],
        "chararray.__mod__": [
            {
                "type": "method",
                "args": {
                    "i": "int"
                }
            }
        ]
    },
    "core.numerictypes": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "unicode": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "generic": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "genericTypeRank": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "issubclass_": [
            {
                "type": "func",
                "args": {
                    "arg1": "type",
                    "arg2": "type"
                }
            }
        ],
        "nbytes": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_alignment": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_maxvals": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_minvals": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "cast": [
            {
                "type": "var",
                "anno": "_typedict"
            }
        ],
        "ScalarType": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "typecodes": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "typeDict": [
            {
                "type": "var",
                "anno": "TypeNADict"
            }
        ],
        "typeNA": [
            {
                "type": "var",
                "anno": "TypeNADict"
            }
        ],
        "_kind_list": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "__test_types": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__len_test_types": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_register_types": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "issubdtype": [
            {
                "type": "func",
                "args": {
                    "arg1": "type",
                    "arg2": "type"
                }
            }
        ],
        "_can_coerce_all": [
            {
                "type": "func",
                "args": {
                    "dtypelist": "typing.List[typing.Callable]",
                    "start": "int"
                }
            }
        ],
        "_find_common_coerce": [
            {
                "type": "func",
                "args": {
                    "a": "typing.Callable",
                    "b": "typing.Callable"
                }
            }
        ],
        "find_common_type": [
            {
                "type": "func",
                "args": {
                    "array_types": "typing.List[typing.Callable]",
                    "scalar_types": "typing.List[typing.Callable]"
                }
            }
        ],
        "obj2sctype": [
            {
                "type": "func",
                "args": {
                    "rep": "object",
                    "default": "type"
                }
            }
        ],
        "sctype2char": [
            {
                "type": "func",
                "args": {
                    "sctype": "object"
                }
            }
        ],
        "_typedict.__getitem__": [
            {
                "type": "method",
                "args": {
                    "obj": "object"
                }
            }
        ],
        "issubsctype": [
            {
                "type": "func",
                "args": {
                    "arg1": "object",
                    "arg2": "object"
                }
            }
        ],
        "issctype": [
            {
                "type": "func",
                "args": {
                    "rep": "object"
                }
            }
        ],
        "maximum_sctype": [
            {
                "type": "func",
                "args": {
                    "t": "type"
                }
            }
        ],
        "_construct_lookups": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core._internal": {
        "ctypes": [
            {
                "type": "var",
                "anno": "ctypes"
            }
        ],
        "IS_PYPY": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "_nbo": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_reconstruct": [
            {
                "type": "func",
                "args": {
                    "subtype": "type",
                    "shape": "tuple",
                    "dtype": "dtype"
                }
            }
        ],
        "format_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "sep_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "space_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_convorder": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dummy_ctype._cls": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "dummy_ctype.__init__": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "dummy_ctype.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "dummy_ctype.__call__": [
            {
                "type": "method",
                "args": {
                    "other": "Any"
                }
            }
        ],
        "dummy_ctype.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "type"
                }
            }
        ],
        "dummy_ctype.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "type"
                }
            }
        ],
        "_missing_ctypes.c_void_p.value": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_missing_ctypes.c_void_p.__init__": [
            {
                "type": "method",
                "args": {
                    "ptr": "int"
                }
            }
        ],
        "_ctypes._arr": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "_ctypes._ctypes": [
            {
                "type": "attr",
                "anno": "_missing_ctypes"
            }
        ],
        "_ctypes._data": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "_ctypes._zerod": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "_ctypes.__init__": [
            {
                "type": "method",
                "args": {
                    "array": "ndarray",
                    "ptr": "int"
                }
            }
        ],
        "_view_is_safe": [
            {
                "type": "func",
                "args": {
                    "oldtype": "dtype.dtype",
                    "newtype": "dtype.dtype"
                }
            }
        ],
        "_pep3118_native_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_pep3118_standard_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_pep3118_unsupported_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_Stream.s": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_Stream.byteorder": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_Stream.__init__": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_Stream.advance": [
            {
                "type": "method",
                "args": {
                    "n": "int"
                }
            }
        ],
        "_Stream.consume": [
            {
                "type": "method",
                "args": {
                    "c": "str"
                }
            }
        ],
        "_Stream.next": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_Stream.__bool__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_prod": [
            {
                "type": "func",
                "args": {
                    "a": "tuple"
                }
            }
        ],
        "_gcd": [
            {
                "type": "func",
                "args": {
                    "a": "int",
                    "b": "int"
                }
            }
        ],
        "_lcm": [
            {
                "type": "func",
                "args": {
                    "a": "int",
                    "b": "int"
                }
            }
        ],
        "npy_ctypes_check": [
            {
                "type": "func",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "recursive.func": [
            {
                "type": "attr",
                "anno": "ast.Function"
            }
        ],
        "recursive.__init__": [
            {
                "type": "method",
                "args": {
                    "func": "ast.Function"
                }
            }
        ],
        "recursive.__call__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "_Stream.consume_until": [
            {
                "type": "method",
                "args": {
                    "c": "typing.Callable"
                }
            }
        ],
        "array_function_errmsg_formatter": [
            {
                "type": "func",
                "args": {
                    "public_api": "type",
                    "types": "list"
                }
            }
        ],
        "_fix_names": [
            {
                "type": "func",
                "args": {
                    "field_spec": "dict"
                }
            }
        ],
        "_commastring": [
            {
                "type": "func",
                "args": {
                    "astr": "str"
                }
            }
        ],
        "_getintp_ctype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_ctypes.strides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_ctypes.get_strides": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "_ctypes.strides_as": [
            {
                "type": "method",
                "args": {
                    "obj": "type"
                }
            }
        ],
        "_add_trailing_padding": [
            {
                "type": "func",
                "args": {
                    "value": "dtype",
                    "padding": "int"
                }
            }
        ],
        "_getfield_is_safe": [
            {
                "type": "func",
                "args": {
                    "oldtype": "PdDtype",
                    "newtype": "PdDtype",
                    "offset": "int"
                }
            }
        ],
        "_ctypes.data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_ctypes.get_data": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "_missing_ctypes.cast": [
            {
                "type": "method",
                "args": {
                    "num": "ctypes.PrimitiveType",
                    "obj": "ctypes.PrimitiveType"
                }
            }
        ],
        "_ctypes.shape_as": [
            {
                "type": "method",
                "args": {
                    "obj": "type"
                }
            }
        ],
        "_ctypes.shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_copy_fields": [
            {
                "type": "func",
                "args": {
                    "ary": "ndarray"
                }
            }
        ],
        "_ctypes.get_shape": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "_makenames_list": [
            {
                "type": "func",
                "args": {
                    "adict": "dict",
                    "align": "str"
                }
            }
        ],
        "_usefields": [
            {
                "type": "func",
                "args": {
                    "adict": "dict",
                    "align": "str"
                }
            }
        ],
        "_newnames": [
            {
                "type": "func",
                "args": {
                    "datatype": "PdDtype",
                    "order": "str | tuple"
                }
            }
        ],
        "_ufunc_doc_signature_formatter": [
            {
                "type": "func",
                "args": {
                    "ufunc": "Ufunc"
                }
            }
        ],
        "array_ufunc_errmsg_formatter": [
            {
                "type": "func",
                "args": {
                    "dummy": "ndarray",
                    "ufunc": "str",
                    "method": "str",
                    "inputs": "Union[int, str]",
                    "kwargs": "Union[int, str]"
                }
            }
        ],
        "_pep3118_standard_typechars": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_pep3118_native_typechars": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__dtype_from_pep3118": [
            {
                "type": "func",
                "args": {
                    "stream": "_Stream",
                    "is_subdtype": "bool"
                }
            }
        ],
        "_dtype_from_pep3118": [
            {
                "type": "func",
                "args": {
                    "spec": "str"
                }
            }
        ],
        "_array_descr": [
            {
                "type": "func",
                "args": {
                    "descriptor": "ndarray"
                }
            }
        ],
        "_ctypes.data_as": [
            {
                "type": "method",
                "args": {
                    "obj": "ctypes.PrimitiveType"
                }
            }
        ],
        "_ctypes._as_parameter_": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_ctypes.get_as_parameter": [
            {
                "type": "attr",
                "anno": "ctypes.PrimitiveType"
            }
        ]
    },
    "core.fromnumeric": {
        "__all__": [
            {
                "type": "var",
                "anno": "nt.List[str]"
            }
        ],
        "_gentype": [
            {
                "type": "var",
                "anno": "type"
            }
        ],
        "_sum_": [
            {
                "type": "var",
                "anno": "type"
            }
        ],
        "_wrapit": [
            {
                "type": "func",
                "args": {
                    "obj": "object",
                    "method": "str",
                    "args": "Any",
                    "kwds": "Any"
                }
            }
        ],
        "_wrapfunc": [
            {
                "type": "func",
                "args": {
                    "obj": "object",
                    "method": "str",
                    "args": "Any",
                    "kwds": "Any"
                }
            }
        ],
        "_take_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "indices": "list",
                    "axis": "int",
                    "out": "int",
                    "mode": "str"
                }
            }
        ],
        "_reshape_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "newshape": "tuple",
                    "order": "str"
                }
            }
        ],
        "_choose_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "choices": "list",
                    "out": "object",
                    "mode": "str"
                }
            }
        ],
        "_repeat_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "repeats": "int",
                    "axis": "int"
                }
            }
        ],
        "_put_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "numpy.ndarray",
                    "ind": "np.ndarray",
                    "v": "np.ndarray",
                    "mode": "str"
                }
            }
        ],
        "_swapaxes_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis1": "int",
                    "axis2": "int"
                }
            }
        ],
        "_transpose_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axes": "int"
                }
            }
        ],
        "_partition_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "kth": "int",
                    "axis": "int",
                    "kind": "str",
                    "order": "str"
                }
            }
        ],
        "_argpartition_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "kth": "int",
                    "axis": "int",
                    "kind": "str",
                    "order": "int"
                }
            }
        ],
        "_sort_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "kind": "str",
                    "order": "str"
                }
            }
        ],
        "_argsort_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "kind": "str",
                    "order": "int"
                }
            }
        ],
        "_argmax_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "out": "object"
                }
            }
        ],
        "_argmin_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "out": "object"
                }
            }
        ],
        "_searchsorted_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "v": "object",
                    "side": "str",
                    "sorter": "str"
                }
            }
        ],
        "_resize_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "new_shape": "tuple"
                }
            }
        ],
        "_squeeze_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int"
                }
            }
        ],
        "_diagonal_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "offset": "int",
                    "axis1": "int",
                    "axis2": "int"
                }
            }
        ],
        "_trace_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "offset": "int",
                    "axis1": "int",
                    "axis2": "int",
                    "dtype": "str",
                    "out": "str"
                }
            }
        ],
        "_ravel_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "order": "str"
                }
            }
        ],
        "_nonzero_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "_shape_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "_compress_dispatcher": [
            {
                "type": "func",
                "args": {
                    "condition": "str",
                    "a": "str",
                    "axis": "int",
                    "out": "str"
                }
            }
        ],
        "_clip_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "a_min": "float",
                    "a_max": "float",
                    "out": "None",
                    "kwargs": "object"
                }
            }
        ],
        "_sum_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray",
                    "initial": "np.ndarray",
                    "where": "np.ndarray"
                }
            }
        ],
        "_any_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np._NoValue"
                }
            }
        ],
        "_all_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_cumsum_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str"
                }
            }
        ],
        "_ptp_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "out": "int",
                    "keepdims": "bool"
                }
            }
        ],
        "_amax_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray",
                    "initial": "np.ndarray",
                    "where": "np.ndarray"
                }
            }
        ],
        "_amin_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray",
                    "initial": "np.ndarray",
                    "where": "np.ndarray"
                }
            }
        ],
        "_alen_dispathcer": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "_prod_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray",
                    "initial": "np.ndarray",
                    "where": "np.ndarray"
                }
            }
        ],
        "_cumprod_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "dtype": "int",
                    "out": "int"
                }
            }
        ],
        "_ndim_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "_size_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int"
                }
            }
        ],
        "_around_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "decimals": "int",
                    "out": "object"
                }
            }
        ],
        "_mean_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_std_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_var_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "function"
            }
        ],
        "around": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "decimals": "int",
                    "out": "object"
                }
            }
        ],
        "round_": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "decimals": "int",
                    "out": "object"
                }
            }
        ],
        "ndim": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "cumprod": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "dtype": "int",
                    "out": "int"
                }
            }
        ],
        "cumproduct": [
            {
                "type": "func",
                "args": {
                    "args": "object",
                    "kwargs": "object"
                }
            }
        ],
        "alen": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "cumsum": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str"
                }
            }
        ],
        "clip": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "a_min": "float",
                    "a_max": "float",
                    "out": "None",
                    "kwargs": "object"
                }
            }
        ],
        "compress": [
            {
                "type": "func",
                "args": {
                    "condition": "str",
                    "a": "str",
                    "axis": "int",
                    "out": "str"
                }
            }
        ],
        "nonzero": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "searchsorted": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "v": "object",
                    "side": "str",
                    "sorter": "str"
                }
            }
        ],
        "argmin": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "out": "object"
                }
            }
        ],
        "argmax": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "out": "object"
                }
            }
        ],
        "argsort": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "kind": "str",
                    "order": "int"
                }
            }
        ],
        "argpartition": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "kth": "int",
                    "axis": "int",
                    "kind": "str",
                    "order": "int"
                }
            }
        ],
        "transpose": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axes": "int"
                }
            }
        ],
        "swapaxes": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis1": "int",
                    "axis2": "int"
                }
            }
        ],
        "repeat": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "repeats": "int",
                    "axis": "int"
                }
            }
        ],
        "choose": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "choices": "list",
                    "out": "object",
                    "mode": "str"
                }
            }
        ],
        "reshape": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "newshape": "tuple",
                    "order": "str"
                }
            }
        ],
        "take": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "indices": "list",
                    "axis": "int",
                    "out": "int",
                    "mode": "str"
                }
            }
        ],
        "_dt_": [
            {
                "type": "var",
                "anno": "types.GeneratorType"
            }
        ],
        "shape": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "size": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int"
                }
            }
        ],
        "ravel": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "order": "str"
                }
            }
        ],
        "resize": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "new_shape": "nt.Union[int, nt.integer]"
                }
            }
        ],
        "squeeze": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int"
                }
            }
        ],
        "diagonal": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "offset": "int",
                    "axis1": "int",
                    "axis2": "int"
                }
            }
        ],
        "mean": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "ptp": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "out": "int",
                    "keepdims": "bool"
                }
            }
        ],
        "trace": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "offset": "int",
                    "axis1": "int",
                    "axis2": "int",
                    "dtype": "str",
                    "out": "str"
                }
            }
        ],
        "put": [
            {
                "type": "func",
                "args": {
                    "a": "numpy.ndarray",
                    "ind": "np.ndarray",
                    "v": "np.ndarray",
                    "mode": "str"
                }
            }
        ],
        "std": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "var": [
            {
                "type": "func",
                "args": {
                    "a": "mu.ndarray",
                    "axis": "int",
                    "dtype": "str",
                    "out": "str",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_wrapreduction": [
            {
                "type": "func",
                "args": {
                    "obj": "np.ndarray",
                    "ufunc": "type",
                    "method": "str",
                    "axis": "int",
                    "dtype": "int",
                    "out": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "prod": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray",
                    "initial": "np.ndarray",
                    "where": "np.ndarray"
                }
            }
        ],
        "product": [
            {
                "type": "func",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "amin": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray",
                    "initial": "np.ndarray",
                    "where": "np.ndarray"
                }
            }
        ],
        "amax": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray",
                    "initial": "np.ndarray",
                    "where": "np.ndarray"
                }
            }
        ],
        "all": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "alltrue": [
            {
                "type": "func",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "any": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np._NoValue"
                }
            }
        ],
        "sometrue": [
            {
                "type": "func",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "sum": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray",
                    "initial": "np.ndarray",
                    "where": "np.ndarray"
                }
            }
        ],
        "sort": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int",
                    "kind": "str",
                    "order": "str"
                }
            }
        ],
        "partition": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "kth": "int",
                    "axis": "int",
                    "kind": "str",
                    "order": "str"
                }
            }
        ]
    },
    "core.code_generators.numpy_api": {
        "multiarray_global_vars": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "multiarray_scalar_bool_values": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "multiarray_types_api": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "multiarray_funcs_api": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "ufunc_types_api": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "ufunc_funcs_api": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "multiarray_api": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "ufunc_api": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "full_api": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ]
    },
    "core.code_generators.ufunc_docstrings": {
        "docdict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "get": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "subst": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "add_newdoc": [
            {
                "type": "func",
                "args": {
                    "place": "str",
                    "name": "str",
                    "doc": "str"
                }
            }
        ]
    },
    "core.code_generators.generate_numpy_api": {
        "h_template": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "c_template": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "c_api_header": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "do_generate_api": [
            {
                "type": "func",
                "args": {
                    "targets": "tuple",
                    "sources": "tuple"
                }
            }
        ],
        "generate_api": [
            {
                "type": "func",
                "args": {
                    "output_dir": "str",
                    "force": "bool"
                }
            }
        ]
    },
    "core.code_generators.genapi": {
        "__docformat__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "THIS_DIR": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "file_in_this_dir": [
            {
                "type": "func",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "StealRef.arg": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "StealRef.__init__": [
            {
                "type": "method",
                "args": {
                    "arg": "int"
                }
            }
        ],
        "NonNull.arg": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NonNull.__init__": [
            {
                "type": "method",
                "args": {
                    "arg": "int"
                }
            }
        ],
        "Function.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Function.return_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Function.args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Function.doc": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Function._format_arg": [
            {
                "type": "method",
                "args": {
                    "typename": "str",
                    "name": "str"
                }
            }
        ],
        "ParseError.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ParseError.lineno": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ParseError.msg": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ParseError.__init__": [
            {
                "type": "method",
                "args": {
                    "filename": "str",
                    "lineno": "int",
                    "msg": "str"
                }
            }
        ],
        "ParseError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "skip_brackets": [
            {
                "type": "func",
                "args": {
                    "s": "str",
                    "lbrac": "str",
                    "rbrac": "str"
                }
            }
        ],
        "TypeApi.index": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TypeApi.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TypeApi.ptr_cast": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TypeApi.api_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TypeApi.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "index": "int",
                    "ptr_cast": "str",
                    "api_name": "str"
                }
            }
        ],
        "TypeApi.define_from_array_api_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TypeApi.array_api_define": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TypeApi.internal_define": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GlobalVarApi.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GlobalVarApi.index": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "GlobalVarApi.type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GlobalVarApi.api_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GlobalVarApi.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "index": "int",
                    "type": "str",
                    "api_name": "str"
                }
            }
        ],
        "GlobalVarApi.define_from_array_api_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GlobalVarApi.array_api_define": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GlobalVarApi.internal_define": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BoolValuesApi.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BoolValuesApi.index": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "BoolValuesApi.type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BoolValuesApi.api_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BoolValuesApi.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "index": "int",
                    "api_name": "str"
                }
            }
        ],
        "BoolValuesApi.define_from_array_api_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BoolValuesApi.array_api_define": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BoolValuesApi.internal_define": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FunctionApi.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FunctionApi.index": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "FunctionApi.annotations": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "FunctionApi.return_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FunctionApi.args": [
            {
                "type": "attr",
                "anno": "list[int]"
            }
        ],
        "FunctionApi.api_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FunctionApi.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "index": "int",
                    "annotations": "dict",
                    "return_type": "str",
                    "args": "list",
                    "api_name": "str"
                }
            }
        ],
        "FunctionApi.array_api_define": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "order_dict": [
            {
                "type": "func",
                "args": {
                    "d": "dict"
                }
            }
        ],
        "merge_api_dicts": [
            {
                "type": "func",
                "args": {
                    "dicts": "tuple"
                }
            }
        ],
        "VERRE": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "get_versions_hash": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "API_FILES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "should_rebuild": [
            {
                "type": "func",
                "args": {
                    "targets": "tuple",
                    "source_files": "list"
                }
            }
        ],
        "write_file": [
            {
                "type": "func",
                "args": {
                    "filename": "str",
                    "data": "str"
                }
            }
        ],
        "_repl": [
            {
                "type": "func",
                "args": {
                    "str": "str"
                }
            }
        ],
        "Function.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "return_type": "str",
                    "args": "list",
                    "doc": "str"
                }
            }
        ],
        "check_api_dict": [
            {
                "type": "func",
                "args": {
                    "d": "dict"
                }
            }
        ],
        "FunctionApi._argtypes_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FunctionApi.internal_define": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FunctionApi.define_from_array_api_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "split_arguments": [
            {
                "type": "func",
                "args": {
                    "argstr": "str"
                }
            }
        ],
        "find_functions": [
            {
                "type": "func",
                "args": {
                    "filename": "str",
                    "tag": "str"
                }
            }
        ],
        "get_api_functions": [
            {
                "type": "func",
                "args": {
                    "tagname": "str",
                    "api_dict": "dict"
                }
            }
        ],
        "Function.to_ReST": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Function.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NonNull.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "StealRef.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "remove_whitespace": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "Function.api_hash": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "fullapi_hash": [
            {
                "type": "func",
                "args": {
                    "api_dicts": "list"
                }
            }
        ]
    },
    "core.code_generators.generate_ufunc_api": {
        "h_template": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "c_template": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "do_generate_api": [
            {
                "type": "func",
                "args": {
                    "targets": "tuple",
                    "sources": "list"
                }
            }
        ],
        "generate_api": [
            {
                "type": "func",
                "args": {
                    "output_dir": "str",
                    "force": "bool"
                }
            }
        ]
    },
    "core.code_generators.generate_umath": {
        "Zero": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "One": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "True_": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "False_": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "None_": [
            {
                "type": "var",
                "anno": "typing.Any"
            }
        ],
        "AllOnes": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "MinusInfinity": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ReorderableNone": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FuncNameSuffix.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FuncNameSuffix.__init__": [
            {
                "type": "method",
                "args": {
                    "suffix": "str"
                }
            }
        ],
        "TypeDescription.type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TypeDescription.func_data": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "TypeDescription.astype_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TypeDescription.in_": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TypeDescription.out": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TypeDescription.simd": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TypeDescription.astype": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_fdata_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "Ufunc.nin": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Ufunc.nout": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Ufunc.identity": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "Ufunc.docstring": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Ufunc.typereso": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "Ufunc.type_descriptions": [
            {
                "type": "attr",
                "anno": "TypeDescription"
            }
        ],
        "Ufunc.signature": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "UPPER_TABLE": [
            {
                "type": "var",
                "anno": "bytes"
            }
        ],
        "chartoname": [
            {
                "type": "var",
                "anno": "typing.Dict[str, str]"
            }
        ],
        "noobj": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "all": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "O": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "P": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ints": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "times": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "timedeltaonly": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "intsO": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "bints": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "bintsO": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "flts": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "fltsO": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "fltsP": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "cmplx": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "cmplxvec": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "cmplxO": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "cmplxP": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "inexact": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "inexactvec": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "noint": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nointP": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "allP": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nobool_or_obj": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nobool_or_datetime": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "intflt": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "intfltcmplx": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nocmplx": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nocmplxO": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nocmplxP": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "notimes_or_obj": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nodatetime_or_obj": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "arity_lookup": [
            {
                "type": "var",
                "anno": "typing.Dict[int, str]"
            }
        ],
        "filename": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "build_func_data": [
            {
                "type": "func",
                "args": {
                    "types": "list",
                    "f": "str"
                }
            }
        ],
        "TypeDescription.finish_signature": [
            {
                "type": "method",
                "args": {
                    "nin": "int",
                    "nout": "int"
                }
            }
        ],
        "Ufunc.__init__": [
            {
                "type": "method",
                "args": {
                    "nin": "int",
                    "nout": "int",
                    "identity": "typing.Any",
                    "docstring": "str",
                    "typereso": "typing.Any",
                    "type_descriptions": "TypeDescription",
                    "signature": "typing.Any"
                }
            }
        ],
        "english_upper": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "indent": [
            {
                "type": "func",
                "args": {
                    "st": "str",
                    "spaces": "int"
                }
            }
        ],
        "TypeDescription.__init__": [
            {
                "type": "method",
                "args": {
                    "type": "str",
                    "f": "typing.Optional[str]",
                    "in_": "str",
                    "out": "str",
                    "astype": "dict",
                    "simd": "list"
                }
            }
        ],
        "TD": [
            {
                "type": "func",
                "args": {
                    "types": "list",
                    "f": "typing.Optional[str]",
                    "astype": "dict",
                    "in_": "str",
                    "out": "str",
                    "simd": "list"
                }
            }
        ],
        "defdict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "make_arrays": [
            {
                "type": "func",
                "args": {
                    "funcdict": "typing.Dict[str, Ufunc]"
                }
            }
        ],
        "make_ufuncs": [
            {
                "type": "func",
                "args": {
                    "funcdict": "typing.Dict[str, Ufunc]"
                }
            }
        ],
        "make_code": [
            {
                "type": "func",
                "args": {
                    "funcdict": "dict",
                    "filename": "str"
                }
            }
        ],
        "code": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "uint64": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "int64": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "core.einsumfunc": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "einsum_symbols": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "einsum_symbols_set": [
            {
                "type": "var",
                "anno": "set"
            }
        ],
        "_compute_size_by_dict": [
            {
                "type": "func",
                "args": {
                    "indices": "tuple",
                    "idx_dict": "dict"
                }
            }
        ],
        "_flop_count": [
            {
                "type": "func",
                "args": {
                    "idx_contraction": "tuple",
                    "inner": "bool",
                    "num_terms": "int",
                    "size_dictionary": "dict"
                }
            }
        ],
        "_update_other_results": [
            {
                "type": "func",
                "args": {
                    "results": "list",
                    "best": "tuple"
                }
            }
        ],
        "_einsum_path_dispatcher": [
            {
                "type": "func",
                "args": {
                    "operands": "typing.Any",
                    "optimize": "typing.Any",
                    "einsum_call": "bool"
                }
            }
        ],
        "_einsum_dispatcher": [
            {
                "type": "func",
                "args": {
                    "operands": "typing.Any",
                    "out": "typing.Any",
                    "optimize": "typing.Any",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "_can_dot": [
            {
                "type": "func",
                "args": {
                    "inputs": "tuple",
                    "result": "tuple",
                    "idx_removed": "tuple"
                }
            }
        ],
        "_parse_einsum_input": [
            {
                "type": "func",
                "args": {
                    "operands": "typing.Any"
                }
            }
        ],
        "_find_contraction": [
            {
                "type": "func",
                "args": {
                    "positions": "list",
                    "input_sets": "list",
                    "output_set": "set"
                }
            }
        ],
        "_parse_possible_contraction": [
            {
                "type": "func",
                "args": {
                    "positions": "list",
                    "input_sets": "list",
                    "output_set": "set",
                    "idx_dict": "dict",
                    "memory_limit": "int",
                    "path_cost": "int",
                    "naive_cost": "int"
                }
            }
        ],
        "_greedy_path": [
            {
                "type": "func",
                "args": {
                    "input_sets": "list",
                    "output_set": "set",
                    "idx_dict": "dict",
                    "memory_limit": "int"
                }
            }
        ],
        "_optimal_path": [
            {
                "type": "func",
                "args": {
                    "input_sets": "list",
                    "output_set": "set",
                    "idx_dict": "dict",
                    "memory_limit": "int"
                }
            }
        ],
        "einsum_path": [
            {
                "type": "func",
                "args": {
                    "operands": "typing.Any",
                    "optimize": "typing.Any",
                    "einsum_call": "bool"
                }
            }
        ],
        "einsum": [
            {
                "type": "func",
                "args": {
                    "operands": "typing.Any",
                    "out": "typing.Any",
                    "optimize": "typing.Any",
                    "kwargs": "typing.Any"
                }
            }
        ]
    },
    "core.numeric": {
        "bitwise_not": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ufunc": [
            {
                "type": "var",
                "anno": "type[sin]"
            }
        ],
        "newaxis": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_zeros_like_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "dtype": "dtype",
                    "order": "order",
                    "subok": "bool",
                    "shape": "tuple"
                }
            }
        ],
        "_ones_like_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "dtype": "dtype",
                    "order": "order",
                    "subok": "bool",
                    "shape": "tuple"
                }
            }
        ],
        "_full_like_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "Union[int, float, str]",
                    "fill_value": "int",
                    "dtype": "dtype",
                    "order": "str",
                    "subok": "bool",
                    "shape": "tuple"
                }
            }
        ],
        "_count_nonzero_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int"
                }
            }
        ],
        "_argwhere_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "_flatnonzero_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "_mode_from_name_dict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_correlate_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "v": "float",
                    "mode": "str"
                }
            }
        ],
        "_convolve_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "v": "float",
                    "mode": "str"
                }
            }
        ],
        "_outer_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "out": "object"
                }
            }
        ],
        "_tensordot_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "axes": "tuple"
                }
            }
        ],
        "_roll_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "shift": "slice",
                    "axis": "tuple"
                }
            }
        ],
        "_rollaxis_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "start": "int"
                }
            }
        ],
        "_moveaxis_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "source": "tuple",
                    "destination": "tuple"
                }
            }
        ],
        "_cross_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "axisa": "int",
                    "axisb": "int",
                    "axisc": "int",
                    "axis": "int"
                }
            }
        ],
        "little_endian": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "isscalar": [
            {
                "type": "func",
                "args": {
                    "element": "object"
                }
            }
        ],
        "identity": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "dtype": "dtype"
                }
            }
        ],
        "_allclose_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "rtol": "float",
                    "atol": "float",
                    "equal_nan": "bool"
                }
            }
        ],
        "_isclose_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "rtol": "float",
                    "atol": "float",
                    "equal_nan": "bool"
                }
            }
        ],
        "_array_equal_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a1": "object",
                    "a2": "object"
                }
            }
        ],
        "_array_equiv_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a1": "object",
                    "a2": "object"
                }
            }
        ],
        "Inf": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "inf": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "infty": [
            {
                "type": "var",
                "anno": "Infinity"
            }
        ],
        "Infinity": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "nan": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "NaN": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "False_": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "True_": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "extend_all": [
            {
                "type": "func",
                "args": {
                    "module": "object"
                }
            }
        ],
        "normalize_axis_tuple": [
            {
                "type": "func",
                "args": {
                    "axis": "tuple",
                    "ndim": "int",
                    "argname": "str",
                    "allow_duplicate": "bool"
                }
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "function"
            }
        ],
        "flatnonzero": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "ones": [
            {
                "type": "func",
                "args": {
                    "shape": "tuple",
                    "dtype": "str",
                    "order": "str"
                }
            }
        ],
        "_maketup": [
            {
                "type": "func",
                "args": {
                    "descr": "str",
                    "val": "float"
                }
            }
        ],
        "isfortran": [
            {
                "type": "func",
                "args": {
                    "a": "numpy.ndarray"
                }
            }
        ],
        "full": [
            {
                "type": "func",
                "args": {
                    "shape": "tuple",
                    "fill_value": "float",
                    "dtype": "np.dtype",
                    "order": "str"
                }
            }
        ],
        "full_like": [
            {
                "type": "func",
                "args": {
                    "a": "Union[int, float, str]",
                    "fill_value": "int",
                    "dtype": "str",
                    "order": "str",
                    "subok": "bool",
                    "shape": "tuple"
                }
            }
        ],
        "ones_like": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "dtype": "dtype",
                    "order": "order",
                    "subok": "bool",
                    "shape": "tuple"
                }
            }
        ],
        "zeros_like": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "dtype": "dtype",
                    "order": "order",
                    "subok": "bool",
                    "shape": "tuple"
                }
            }
        ],
        "isclose": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "rtol": "float",
                    "atol": "float",
                    "equal_nan": "bool"
                }
            }
        ],
        "allclose": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "rtol": "float",
                    "atol": "float",
                    "equal_nan": "bool"
                }
            }
        ],
        "_frombuffer": [
            {
                "type": "func",
                "args": {
                    "buf": "bytes",
                    "dtype": "dtype",
                    "shape": "tuple",
                    "order": "str"
                }
            }
        ],
        "indices": [
            {
                "type": "func",
                "args": {
                    "dimensions": "tuple",
                    "dtype": "float",
                    "sparse": "bool"
                }
            }
        ],
        "fromfunction": [
            {
                "type": "func",
                "args": {
                    "function": "Callable",
                    "shape": "tuple",
                    "dtype": "float",
                    "kwargs": "dict"
                }
            }
        ],
        "argwhere": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "roll": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "shift": "slice",
                    "axis": "tuple"
                }
            }
        ],
        "outer": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "out": "object"
                }
            }
        ],
        "moveaxis": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "source": "tuple",
                    "destination": "tuple"
                }
            }
        ],
        "cross": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "axisa": "int",
                    "axisb": "int",
                    "axisc": "int",
                    "axis": "int"
                }
            }
        ],
        "_move_axis_to_0": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "tuple"
                }
            }
        ],
        "rollaxis": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "start": "int"
                }
            }
        ],
        "tensordot": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "axes": "tuple"
                }
            }
        ],
        "count_nonzero": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "axis": "int"
                }
            }
        ],
        "binary_repr": [
            {
                "type": "func",
                "args": {
                    "num": "int",
                    "width": "typing.Optional[int]"
                }
            }
        ],
        "_mode_from_name": [
            {
                "type": "func",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "convolve": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "v": "float",
                    "mode": "str"
                }
            }
        ],
        "correlate": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "v": "float",
                    "mode": "str"
                }
            }
        ],
        "base_repr": [
            {
                "type": "func",
                "args": {
                    "number": "int",
                    "base": "int",
                    "padding": "int"
                }
            }
        ],
        "array_equiv": [
            {
                "type": "func",
                "args": {
                    "a1": "object",
                    "a2": "object"
                }
            }
        ],
        "array_equal": [
            {
                "type": "func",
                "args": {
                    "a1": "object",
                    "a2": "object"
                }
            }
        ]
    },
    "core.machar": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "MachAr.ibeta": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr.it": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MachAr.negep": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr.epsneg": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr._str_epsneg": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachAr.machep": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MachAr.eps": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr._str_eps": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachAr.ngrd": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MachAr.iexp": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MachAr.minexp": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MachAr.xmin": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr._str_xmin": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachAr.maxexp": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MachAr.xmax": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr._str_xmax": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachAr.irnd": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MachAr.title": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachAr.epsilon": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr.tiny": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr.huge": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr.precision": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr.resolution": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "MachAr._str_resolution": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MachAr.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MachAr._do_init": [
            {
                "type": "method",
                "args": {
                    "float_conv": "float",
                    "int_conv": "int",
                    "float_to_float": "float",
                    "float_to_str": "float",
                    "title": "str"
                }
            }
        ],
        "MachAr.__init__": [
            {
                "type": "method",
                "args": {
                    "float_conv": "float",
                    "int_conv": "int",
                    "float_to_float": "float",
                    "float_to_str": "float",
                    "title": "str"
                }
            }
        ]
    },
    "core.cversions": {
        "curdir": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "core": {
        "env_added": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "msg": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "path": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_ufunc_reconstruct": [
            {
                "type": "func",
                "args": {
                    "module": "str",
                    "name": "str"
                }
            }
        ],
        "_ufunc_reduce": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ]
    },
    "core.setup_common": {
        "C_ABI_VERSION": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "C_API_VERSION": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "get_api_versions": [
            {
                "type": "func",
                "args": {
                    "apiversion": "int",
                    "codegen_dir": "str"
                }
            }
        ],
        "check_api_version": [
            {
                "type": "func",
                "args": {
                    "apiversion": "int",
                    "codegen_dir": "str"
                }
            }
        ],
        "MANDATORY_FUNCS": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "OPTIONAL_STDFUNCS": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "OPTIONAL_HEADERS": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "OPTIONAL_INTRINSICS": [
            {
                "type": "var",
                "anno": "list[tuple[str, str]]"
            }
        ],
        "OPTIONAL_FUNCTION_ATTRIBUTES": [
            {
                "type": "var",
                "anno": "list[tuple[str, str]]"
            }
        ],
        "OPTIONAL_FUNCTION_ATTRIBUTES_WITH_INTRINSICS": [
            {
                "type": "var",
                "anno": "list[tuple[str, str]]"
            }
        ],
        "OPTIONAL_VARIABLE_ATTRIBUTES": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "OPTIONAL_STDFUNCS_MAYBE": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "C99_FUNCS": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "C99_COMPLEX_TYPES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "C99_COMPLEX_FUNCS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "LONG_DOUBLE_REPRESENTATION_SRC": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_BEFORE_SEQ": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_AFTER_SEQ": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_IEEE_DOUBLE_BE": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_IEEE_DOUBLE_LE": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_INTEL_EXTENDED_12B": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_INTEL_EXTENDED_16B": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_MOTOROLA_EXTENDED_12B": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_IEEE_QUAD_PREC_BE": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_IEEE_QUAD_PREC_LE": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_IBM_DOUBLE_DOUBLE_BE": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "_IBM_DOUBLE_DOUBLE_LE": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "long_double_representation": [
            {
                "type": "func",
                "args": {
                    "lines": "typing.List[str]"
                }
            }
        ],
        "C99_FUNCS_EXTENDED": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "C99_FUNCS_SINGLE": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "fname2def": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "type2def": [
            {
                "type": "func",
                "args": {
                    "symbol": "str"
                }
            }
        ],
        "sym2def": [
            {
                "type": "func",
                "args": {
                    "symbol": "str"
                }
            }
        ],
        "is_released": [
            {
                "type": "func",
                "args": {
                    "config": "Configuration"
                }
            }
        ],
        "check_for_right_shift_internal_compiler_error": [
            {
                "type": "func",
                "args": {
                    "cmd": "Command"
                }
            }
        ],
        "pyod": [
            {
                "type": "func",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "check_long_double_representation": [
            {
                "type": "func",
                "args": {
                    "cmd": "Command"
                }
            }
        ]
    },
    "core._ufunc_config": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "_errdict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "getbufsize": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "setbufsize": [
            {
                "type": "func",
                "args": {
                    "size": "int"
                }
            }
        ],
        "geterrcall": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_Unspecified": [
            {
                "type": "var",
                "anno": "umath.Unspecified"
            }
        ],
        "errstate.call": [
            {
                "type": "attr",
                "anno": "umath.Unspecified"
            }
        ],
        "errstate.kwargs": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "errstate.__init__": [
            {
                "type": "method",
                "args": {
                    "call": "umath.Unspecified",
                    "kwargs": "dict"
                }
            }
        ],
        "errstate.oldstate": [
            {
                "type": "attr",
                "anno": "umath.Callable"
            }
        ],
        "errstate.oldcall": [
            {
                "type": "attr",
                "anno": "umath.Callable"
            }
        ],
        "_setdef": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "seterrcall": [
            {
                "type": "func",
                "args": {
                    "func": "umath.Callable"
                }
            }
        ],
        "_errdict_rev": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "geterr": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "seterr": [
            {
                "type": "func",
                "args": {
                    "all": "umath.Unspecified",
                    "divide": "umath.Unspecified",
                    "over": "umath.Unspecified",
                    "under": "umath.Unspecified",
                    "invalid": "umath.Unspecified"
                }
            }
        ],
        "errstate.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_info": "umath.Unspecified"
                }
            }
        ],
        "errstate.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.arrayprint": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "__docformat__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_format_options": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "printoptions": [
            {
                "type": "func",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "repr_format": [
            {
                "type": "func",
                "args": {
                    "x": "Any"
                }
            }
        ],
        "str_format": [
            {
                "type": "func",
                "args": {
                    "x": "Any"
                }
            }
        ],
        "_array2string_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "max_line_width": "int",
                    "precision": "int",
                    "suppress_small": "int",
                    "separator": "str",
                    "prefix": "str",
                    "style": "np._NoValue",
                    "formatter": "np.dtype",
                    "threshold": "int",
                    "edgeitems": "int",
                    "sign": "int",
                    "floatmode": "int",
                    "suffix": "str",
                    "legacy": "bool"
                }
            }
        ],
        "FloatingFormat._legacy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FloatingFormat.floatmode": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FloatingFormat.precision": [
            {
                "type": "attr",
                "anno": "int | None"
            }
        ],
        "FloatingFormat.suppress_small": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "FloatingFormat.sign": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FloatingFormat.exp_format": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "FloatingFormat.large_exponent": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "FloatingFormat.pad_left": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "FloatingFormat.pad_right": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "FloatingFormat.trim": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FloatingFormat.exp_size": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "FloatingFormat.unique": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "FloatingFormat.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "float"
                }
            }
        ],
        "IntegerFormat.format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntegerFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "np.ndarray"
                }
            }
        ],
        "_none_or_positive_arg": [
            {
                "type": "func",
                "args": {
                    "x": "int | None",
                    "name": "str"
                }
            }
        ],
        "format_float_positional": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "precision": "int | None",
                    "unique": "bool",
                    "fractional": "bool",
                    "trim": "str",
                    "sign": "bool",
                    "pad_left": "int | None",
                    "pad_right": "int | None"
                }
            }
        ],
        "format_float_scientific": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "precision": "int | None",
                    "unique": "bool",
                    "trim": "str",
                    "sign": "bool",
                    "pad_left": "int | None",
                    "exp_digits": "int | None"
                }
            }
        ],
        "_object_format": [
            {
                "type": "func",
                "args": {
                    "o": "Any"
                }
            }
        ],
        "IntegerFormat.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "int"
                }
            }
        ],
        "BoolFormat.truestr": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BoolFormat.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "bool"
                }
            }
        ],
        "ComplexFloatingFormat.real_format": [
            {
                "type": "attr",
                "anno": "FloatingFormat"
            }
        ],
        "ComplexFloatingFormat.imag_format": [
            {
                "type": "attr",
                "anno": "FloatingFormat"
            }
        ],
        "_TimelikeFormat._format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_TimelikeFormat._nat": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_TimelikeFormat._format_non_nat": [
            {
                "type": "method",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "_TimelikeFormat.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "DatetimeFormat.timezone": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatetimeFormat.unit": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatetimeFormat.casting": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatetimeFormat.legacy": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DatetimeFormat._format_non_nat": [
            {
                "type": "method",
                "args": {
                    "x": "_ARRAY_API"
                }
            }
        ],
        "DatetimeFormat.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "_ARRAY_API"
                }
            }
        ],
        "SubArrayFormat.format_function": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray], str]"
            }
        ],
        "SubArrayFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "format_function": "Callable[[np.ndarray], str]"
                }
            }
        ],
        "StructuredVoidFormat.format_functions": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray], str]"
            }
        ],
        "StructuredVoidFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "format_functions": "Callable[[np.ndarray], str]"
                }
            }
        ],
        "_typelessdata": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_array_repr_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "max_line_width": "int",
                    "precision": "int",
                    "suppress_small": "bool"
                }
            }
        ],
        "_array_str_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "max_line_width": "int",
                    "precision": "int",
                    "suppress_small": "bool"
                }
            }
        ],
        "TimedeltaFormat._format_non_nat": [
            {
                "type": "method",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "dtype_short_repr": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "dtype_is_implied": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "DatetimeFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "unit": "str",
                    "timezone": "str",
                    "casting": "str",
                    "legacy": "str"
                }
            }
        ],
        "BoolFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "np.ndarray",
                    "kwargs": "Any"
                }
            }
        ],
        "_leading_trailing": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "edgeitems": "int",
                    "index": "int"
                }
            }
        ],
        "_recursive_guard": [
            {
                "type": "func",
                "args": {
                    "fillvalue": "str"
                }
            }
        ],
        "_guarded_repr_or_str": [
            {
                "type": "func",
                "args": {
                    "v": "np.ndarray"
                }
            }
        ],
        "ComplexFloatingFormat.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "ComplexFloatingFormat"
                }
            }
        ],
        "_extendLine": [
            {
                "type": "func",
                "args": {
                    "s": "str",
                    "line": "str",
                    "word": "str",
                    "line_width": "int",
                    "next_line_prefix": "str",
                    "legacy": "str"
                }
            }
        ],
        "_formatArray": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "format_function": "Callable",
                    "line_width": "int",
                    "next_line_prefix": "str",
                    "separator": "str",
                    "edge_items": "int",
                    "summary_insert": "str",
                    "legacy": "str"
                }
            }
        ],
        "_TimelikeFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "np.ndarray"
                }
            }
        ],
        "StructuredVoidFormat.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "SubArrayFormat.__call__": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "_make_options_dict": [
            {
                "type": "func",
                "args": {
                    "precision": "int",
                    "threshold": "int",
                    "edgeitems": "int",
                    "linewidth": "int",
                    "suppress": "bool",
                    "nanstr": "str",
                    "infstr": "str",
                    "sign": "str",
                    "formatter": "np.dtype",
                    "floatmode": "int",
                    "legacy": "bool"
                }
            }
        ],
        "set_printoptions": [
            {
                "type": "func",
                "args": {
                    "precision": "int",
                    "threshold": "int",
                    "edgeitems": "int",
                    "linewidth": "int",
                    "suppress": "bool",
                    "nanstr": "str",
                    "infstr": "str",
                    "formatter": "np.dtype",
                    "sign": "str",
                    "floatmode": "int",
                    "legacy": "bool"
                }
            }
        ],
        "FloatingFormat.fillFormat": [
            {
                "type": "method",
                "args": {
                    "data": "np.ndarray"
                }
            }
        ],
        "FloatingFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "np.ndarray",
                    "precision": "int | None",
                    "floatmode": "str",
                    "suppress_small": "bool",
                    "sign": "bool",
                    "legacy": "str"
                }
            }
        ],
        "ComplexFloatingFormat.__init__": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "precision": "int | None",
                    "floatmode": "str",
                    "suppress_small": "bool",
                    "sign": "bool",
                    "legacy": "str"
                }
            }
        ],
        "_get_formatdict": [
            {
                "type": "func",
                "args": {
                    "data": "np.ndarray",
                    "precision": "int | None",
                    "floatmode": "str",
                    "suppress": "bool",
                    "sign": "bool",
                    "legacy": "str",
                    "formatter": "dict | None",
                    "kwargs": "Any"
                }
            }
        ],
        "_get_format_function": [
            {
                "type": "func",
                "args": {
                    "data": "np.ndarray",
                    "options": "Any"
                }
            }
        ],
        "StructuredVoidFormat.from_data": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[StructuredVoidFormat]",
                    "data": "np.ndarray",
                    "options": "Any"
                }
            }
        ],
        "_void_scalar_repr": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "_array2string": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "options": "dict",
                    "separator": "str",
                    "prefix": "str"
                }
            }
        ],
        "array2string": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "max_line_width": "int",
                    "precision": "int",
                    "suppress_small": "int",
                    "separator": "str",
                    "prefix": "str",
                    "style": "np._NoValue",
                    "formatter": "np.dtype",
                    "threshold": "int",
                    "edgeitems": "int",
                    "sign": "int",
                    "floatmode": "int",
                    "suffix": "str",
                    "legacy": "bool"
                }
            }
        ],
        "_array2string_impl": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "_array_str_implementation": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "max_line_width": "int",
                    "precision": "int",
                    "suppress_small": "bool",
                    "array2string": "Callable"
                }
            }
        ],
        "_default_array_str": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "array_str": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "max_line_width": "int",
                    "precision": "int",
                    "suppress_small": "bool"
                }
            }
        ],
        "_array_repr_implementation": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "max_line_width": "int",
                    "precision": "int",
                    "suppress_small": "bool",
                    "array2string": "Callable"
                }
            }
        ],
        "_default_array_repr": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "set_string_function": [
            {
                "type": "func",
                "args": {
                    "f": "Callable",
                    "repr": "bool"
                }
            }
        ],
        "array_repr": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "max_line_width": "int",
                    "precision": "int",
                    "suppress_small": "bool"
                }
            }
        ],
        "get_printoptions": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "core.shape_base": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "function"
            }
        ],
        "_atleast_1d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arys": "object"
                }
            }
        ],
        "_atleast_2d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arys": "object"
                }
            }
        ],
        "_atleast_3d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arys": "object"
                }
            }
        ],
        "_arrays_for_stack_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arrays": "tuple",
                    "stacklevel": "int"
                }
            }
        ],
        "_vhstack_dispatcher": [
            {
                "type": "func",
                "args": {
                    "tup": "tuple"
                }
            }
        ],
        "_stack_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arrays": "tuple",
                    "axis": "int",
                    "out": "object"
                }
            }
        ],
        "_ndim": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "_concatenate": [
            {
                "type": "var",
                "anno": "object"
            }
        ],
        "_atleast_nd": [
            {
                "type": "func",
                "args": {
                    "a": "list",
                    "ndim": "int"
                }
            }
        ],
        "_accumulate": [
            {
                "type": "func",
                "args": {
                    "values": "list"
                }
            }
        ],
        "_block_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arrays": "list"
                }
            }
        ],
        "_block": [
            {
                "type": "func",
                "args": {
                    "arrays": "list",
                    "max_depth": "int",
                    "result_ndim": "int",
                    "depth": "int"
                }
            }
        ],
        "_concatenate_shapes": [
            {
                "type": "func",
                "args": {
                    "shapes": "list",
                    "axis": "int"
                }
            }
        ],
        "_block_info_recursion": [
            {
                "type": "func",
                "args": {
                    "arrays": "list",
                    "max_depth": "int",
                    "result_ndim": "int",
                    "depth": "int"
                }
            }
        ],
        "_block_slicing": [
            {
                "type": "func",
                "args": {
                    "arrays": "list",
                    "list_ndim": "int",
                    "result_ndim": "int"
                }
            }
        ],
        "stack": [
            {
                "type": "func",
                "args": {
                    "arrays": "tuple",
                    "axis": "int",
                    "out": "object"
                }
            }
        ],
        "_size": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "atleast_3d": [
            {
                "type": "func",
                "args": {
                    "arys": "object"
                }
            }
        ],
        "atleast_2d": [
            {
                "type": "func",
                "args": {
                    "arys": "object"
                }
            }
        ],
        "vstack": [
            {
                "type": "func",
                "args": {
                    "tup": "tuple"
                }
            }
        ],
        "atleast_1d": [
            {
                "type": "func",
                "args": {
                    "arys": "object"
                }
            }
        ],
        "hstack": [
            {
                "type": "func",
                "args": {
                    "tup": "tuple"
                }
            }
        ],
        "_block_format_index": [
            {
                "type": "func",
                "args": {
                    "index": "list"
                }
            }
        ],
        "_block_check_depths_match": [
            {
                "type": "func",
                "args": {
                    "arrays": "list",
                    "parent_index": "list"
                }
            }
        ],
        "_block_setup": [
            {
                "type": "func",
                "args": {
                    "arrays": "list"
                }
            }
        ],
        "_block_concatenate": [
            {
                "type": "func",
                "args": {
                    "arrays": "list",
                    "list_ndim": "int",
                    "result_ndim": "int"
                }
            }
        ],
        "block": [
            {
                "type": "func",
                "args": {
                    "arrays": "list"
                }
            }
        ]
    },
    "conftest": {
        "_old_fpu_mode": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_collect_results": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "pytest_configure": [
            {
                "type": "func",
                "args": {
                    "config": "pytest.Config"
                }
            }
        ],
        "pytest_addoption": [
            {
                "type": "func",
                "args": {
                    "parser": "pytest.Parser"
                }
            }
        ],
        "pytest_sessionstart": [
            {
                "type": "func",
                "args": {
                    "session": "pytest.Session"
                }
            }
        ],
        "pytest_itemcollected": [
            {
                "type": "func",
                "args": {
                    "item": "str"
                }
            }
        ],
        "add_np": [
            {
                "type": "func",
                "args": {
                    "doctest_namespace": "dict"
                }
            }
        ],
        "check_fpu_mode": [
            {
                "type": "func",
                "args": {
                    "request": "pytest.Request"
                }
            }
        ]
    },
    "tests.test_public_api": {
        "ctypes": [
            {
                "type": "var",
                "anno": "ctypes"
            }
        ],
        "check_dir": [
            {
                "type": "func",
                "args": {
                    "module": "types.Module",
                    "module_name": "str"
                }
            }
        ],
        "test_numpy_namespace": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_import_lazy_import": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "test_dir_testing": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_numpy_linalg": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_numpy_fft": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_NPY_NO_EXPORT": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "PUBLIC_MODULES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "PUBLIC_ALIASED_MODULES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "PRIVATE_BUT_PRESENT_MODULES": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "is_unexpected": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "SKIP_LIST": [
            {
                "type": "var",
                "anno": "types.List[str]"
            }
        ],
        "test_all_modules_are_expected": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "SKIP_LIST_2": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "test_all_modules_are_expected_2": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_api_importable": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "tests.test_warnings": {
        "ParseCall.ls": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "ParseCall.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ParseCall.visit_Attribute": [
            {
                "type": "method",
                "args": {
                    "node": "ast.Attribute"
                }
            }
        ],
        "FindFuncs.__filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FindFuncs.__init__": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "ParseCall.visit_Name": [
            {
                "type": "method",
                "args": {
                    "node": "ast.Name"
                }
            }
        ],
        "test_warning_calls": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "FindFuncs.visit_Call": [
            {
                "type": "method",
                "args": {
                    "node": "ast.Call"
                }
            }
        ]
    },
    "tests.test_numpy_version": {
        "test_valid_numpy_version": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "tests.test_ctypeslib": {
        "ctypes": [
            {
                "type": "var",
                "anno": "ctypes.Any"
            }
        ],
        "cdll": [
            {
                "type": "var",
                "anno": "ctypes"
            }
        ],
        "test_cdll": [
            {
                "type": "var",
                "anno": "ctypes.Any"
            }
        ],
        "c_forward_pointer": [
            {
                "type": "var",
                "anno": "ctypes.Any"
            }
        ],
        "TestLoadLibrary.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadLibrary.test_basic2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdpointer.test_cache": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdpointerCFunc.test_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsArray.Struct._fields_": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestAsArray.test_reference_cycles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsArray.test_segmentation_fault": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCtypesType.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCtypesType.test_subarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCtypesType.test_structure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCtypesType.test_structure_aligned": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCtypesType.test_union": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCtypesType.test_padded_union": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsCtypesType.test_overlapping": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsArray.test_struct_array_pointer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdpointerCFunc.test_vague_return_value": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdpointer.test_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdpointer.test_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdpointer.test_ndim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdpointer.test_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsArray.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdpointerCFunc.test_return": [
            {
                "type": "method",
                "args": {
                    "dt": "np.dtype"
                }
            }
        ],
        "TestAsArray.test_pointer": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "tests.test_scripts": {
        "is_inplace": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "find_f2py_commands": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_pep338": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_f2py": [
            {
                "type": "func",
                "args": {
                    "f2py_cmd": "str"
                }
            }
        ]
    },
    "tests.test_matlib": {
        "test_ones": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_zeros": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_identity": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_rand": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_randn": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_repmat": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_eye": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_empty": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "tests.test_reloading": {
        "test_numpy_reloading": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_novalue": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "linalg.tests.test_regression": {
        "TestRegression.test_eigh_build": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_norm_vector_badarg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_lapack_endian": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_large_svd_32bit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_svd_no_uv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_norm_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_svd_build": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_eig_build": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_lstsq_complex_larger_rhs": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "linalg.tests.test_linalg": {
        "consistent_subclass": [
            {
                "type": "func",
                "args": {
                    "out": "np.ndarray",
                    "in_": "np.ndarray"
                }
            }
        ],
        "old_assert_almost_equal": [
            {
                "type": "var",
                "anno": "typing.Callable"
            }
        ],
        "get_real_dtype": [
            {
                "type": "func",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "get_complex_dtype": [
            {
                "type": "func",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "get_rtol": [
            {
                "type": "func",
                "args": {
                    "dtype": "type"
                }
            }
        ],
        "all_tags": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "LinalgCase.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LinalgCase.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "LinalgCase.b": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "LinalgCase.tags": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "LinalgCase.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "LinalgCase.check": [
            {
                "type": "method",
                "args": {
                    "do": "Callable[[np.ndarray, np.ndarray], None]"
                }
            }
        ],
        "LinalgCase.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "apply_tag": [
            {
                "type": "func",
                "args": {
                    "tag": "str",
                    "cases": "list[LinalgCase]"
                }
            }
        ],
        "CASES": [
            {
                "type": "var",
                "anno": "list[LinalgCase]"
            }
        ],
        "LinalgTestCase.TEST_CASES": [
            {
                "type": "attr",
                "anno": "list[LinalgCase]"
            }
        ],
        "SVDBaseTests.hermitian": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TestSVDHermitian.hermitian": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TestCond.test_singular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCond.test_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCond.test_stacked_singular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDet.test_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatrixPower.rshft_0": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatrixPower.rshft_1": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatrixPower.rshft_2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatrixPower.rshft_3": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatrixPower.rshft_all": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestMatrixPower.noninv": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatrixPower.stacked": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMatrixPower.dtnoinv": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestMatrixPower.test_exceptions_non_square": [
            {
                "type": "method",
                "args": {
                    "dt": "np.dtype"
                }
            }
        ],
        "TestEigvalsh.test_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEigvalsh.test_UPLO": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEigh.test_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEigh.test_UPLO": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNormBase.dt": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_TestNormBase.dec": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_TestNormGeneral.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNormGeneral.test_vector": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNorm2D.array": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "_TestNorm2D.test_matrix_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNorm_NonSystematic.test_longdouble_norm": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNorm_NonSystematic.test_intmin": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNormDoubleBase.dt": [
            {
                "type": "attr",
                "anno": "np.dtype"
            }
        ],
        "_TestNormDoubleBase.dec": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_TestNormSingleBase.dt": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_TestNormSingleBase.dec": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_TestNormInt64Base.dt": [
            {
                "type": "attr",
                "anno": "np.dtype"
            }
        ],
        "_TestNormInt64Base.dec": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestMatrixRank.test_matrix_rank": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatrixRank.test_symmetric_rank": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_reduced_rank": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestQR.array": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "test_generalized_raise_multiloop": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_xerbla_override": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_sdot_bug_8577": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMultiDot.test_too_few_input_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTensorinv.test_non_square_handling": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray",
                    "ind": "int"
                }
            }
        ],
        "test_unsupported_commontype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_blas64_dot": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_blas64_geqrf_lwork_smoketest": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestNorm_NonSystematic.test_complex_high_ord": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMatrixPower.test_exceptions_not_invertible": [
            {
                "type": "method",
                "args": {
                    "dt": "np.dtype"
                }
            }
        ],
        "TestMatrixPower.test_exceptions_bad_power": [
            {
                "type": "method",
                "args": {
                    "dt": "np.dtype"
                }
            }
        ],
        "TestMatrixPower.test_large_power": [
            {
                "type": "method",
                "args": {
                    "dt": "np.dtype"
                }
            }
        ],
        "test_byteorder_check": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestEigh.test_types": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "TestEigvalsh.test_types": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "TestMatrixPower.test_power_is_two": [
            {
                "type": "method",
                "args": {
                    "dt": "np.dtype"
                }
            }
        ],
        "TestMatrixPower.test_power_is_one": [
            {
                "type": "method",
                "args": {
                    "dt": "type"
                }
            }
        ],
        "TestDet.test_0_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDet.test_types": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "SVDBaseTests.test_types": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "TestEig.test_types": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "TestEigvals.test_types": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "TestInv.test_types": [
            {
                "type": "method",
                "args": {
                    "dtype": "type"
                }
            }
        ],
        "TestSolve.test_types": [
            {
                "type": "method",
                "args": {
                    "dtype": "type"
                }
            }
        ],
        "assert_almost_equal": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "single_decimal": "int",
                    "double_decimal": "int",
                    "kw": "float"
                }
            }
        ],
        "TestMultiDot.test_dynamic_programming_logic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNorm2D.test_matrix_3x3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNorm2D.test_matrix_2x2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DetCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "TestCond.test_basic_nonsvd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "EigvalsCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "TestTensorinv.test_tensorinv_result": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTensorinv.test_tensorinv_ind_limit": [
            {
                "type": "method",
                "args": {
                    "ind": "int"
                }
            }
        ],
        "TestTensorinv.test_tensorinv_shape": [
            {
                "type": "method",
                "args": {
                    "shape": "tuple",
                    "ind": "int"
                }
            }
        ],
        "TestMultiDot.test_vector_as_first_and_last_argument": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiDot.test_vector_as_last_argument": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiDot.test_vector_as_first_argument": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSVD.test_empty_identity": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "identity_like_generalized": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "TestMatrixPower.test_power_is_minus_one": [
            {
                "type": "method",
                "args": {
                    "dt": "np.dtype"
                }
            }
        ],
        "TestMatrixPower.test_power_is_zero": [
            {
                "type": "method",
                "args": {
                    "dt": "type"
                }
            }
        ],
        "dot_generalized": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray"
                }
            }
        ],
        "PinvHermitianCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "PinvCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "SVDHermitianCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "SVDCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "EigCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "InvCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "SolveCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "TestCholesky.test_0_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEigh.test_0_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEigvalsh.test_0_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEig.test_0_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEigvals.test_0_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInv.test_0_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNorm2D.test_bad_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNormGeneral.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSolve.test_0_size_k": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSolve.test_0_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_make_generalized_cases": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestCholesky.test_basic_property": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestQR.test_mode_raw": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestQR.check_qr": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "TestQR.test_mode_all_but_economic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestQR.test_qr_empty": [
            {
                "type": "method",
                "args": {
                    "m": "int",
                    "n": "int"
                }
            }
        ],
        "TestLstsq.test_incompatible_dims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEighCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "TestEigvalshCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "TestLstsq.test_empty_a_b": [
            {
                "type": "method",
                "args": {
                    "m": "int",
                    "n": "int",
                    "n_rhs": "int"
                }
            }
        ],
        "LstsqCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "TestMultiDot.test_basic_function_with_dynamic_programing_optimization": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiDot.test_basic_function_with_two_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultiDot.test_basic_function_with_three_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CondCases.do": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "tags": "set[str]"
                }
            }
        ],
        "LinalgTestCase.check_cases": [
            {
                "type": "method",
                "args": {
                    "require": "set[str]",
                    "exclude": "set[str]"
                }
            }
        ],
        "HermitianGeneralizedTestCase.test_generalized_empty_herm_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HermitianGeneralizedTestCase.test_generalized_herm_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinalgGeneralizedNonsquareTestCase.test_generalized_empty_nonsq_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinalgGeneralizedSquareTestCase.test_generalized_empty_sq_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinalgGeneralizedSquareTestCase.test_generalized_sq_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HermitianTestCase.test_empty_herm_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HermitianTestCase.test_herm_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinalgNonsquareTestCase.test_empty_nonsq_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinalgNonsquareTestCase.test_nonsq_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinalgSquareTestCase.test_empty_sq_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinalgSquareTestCase.test_sq_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLstsq.test_future_rcond": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNorm2D.test_matrix_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_TestNormGeneral.test_vector_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_stride_comb_iter": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "_make_strided_cases": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_TestNormGeneral.test_axis": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "linalg.tests.test_deprecations": {
        "test_qr_mode_full_future_warning": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "linalg.tests.test_build": {
        "FindDependenciesLdd.cmd": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "FindDependenciesLdd.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FindDependenciesLdd.get_dependencies": [
            {
                "type": "method",
                "args": {
                    "lfile": "str"
                }
            }
        ],
        "FindDependenciesLdd.grep_dependencies": [
            {
                "type": "method",
                "args": {
                    "lfile": "str",
                    "deps": "typing.List[bytes]"
                }
            }
        ],
        "TestF77Mismatch.test_lapack": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "linalg.linalg": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "Callable[[], tuple]"
            }
        ],
        "fortran_int": [
            {
                "type": "var",
                "anno": "_fastCT"
            }
        ],
        "_determine_error_states": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_linalg_error_extobj": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_raise_linalgerror_singular": [
            {
                "type": "func",
                "args": {
                    "err": "Exception",
                    "flag": "bool"
                }
            }
        ],
        "_raise_linalgerror_nonposdef": [
            {
                "type": "func",
                "args": {
                    "err": "Exception",
                    "flag": "bool"
                }
            }
        ],
        "_raise_linalgerror_eigenvalues_nonconvergence": [
            {
                "type": "func",
                "args": {
                    "err": "Exception",
                    "flag": "bool"
                }
            }
        ],
        "_raise_linalgerror_svd_nonconvergence": [
            {
                "type": "func",
                "args": {
                    "err": "Exception",
                    "flag": "bool"
                }
            }
        ],
        "_raise_linalgerror_lstsq": [
            {
                "type": "func",
                "args": {
                    "err": "Exception",
                    "flag": "bool"
                }
            }
        ],
        "get_linalg_error_extobj": [
            {
                "type": "func",
                "args": {
                    "callback": "Callable[[], object]"
                }
            }
        ],
        "_makearray": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "isComplexType": [
            {
                "type": "func",
                "args": {
                    "t": "type"
                }
            }
        ],
        "_real_types_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_complex_types_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_linalgRealType": [
            {
                "type": "func",
                "args": {
                    "t": "type"
                }
            }
        ],
        "_fastCT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "_assert_2d": [
            {
                "type": "func",
                "args": {
                    "arrays": "object"
                }
            }
        ],
        "_assert_stacked_2d": [
            {
                "type": "func",
                "args": {
                    "arrays": "object"
                }
            }
        ],
        "transpose": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "_tensorsolve_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "axes": "tuple"
                }
            }
        ],
        "_solve_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object"
                }
            }
        ],
        "_tensorinv_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "ind": "int"
                }
            }
        ],
        "_unary_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "_matrix_power_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "n": "int"
                }
            }
        ],
        "_qr_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "mode": "str"
                }
            }
        ],
        "_eigvalsh_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "UPLO": "str"
                }
            }
        ],
        "_svd_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "full_matrices": "bool",
                    "compute_uv": "bool",
                    "hermitian": "bool"
                }
            }
        ],
        "_cond_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "object",
                    "p": "int"
                }
            }
        ],
        "_matrix_rank_dispatcher": [
            {
                "type": "func",
                "args": {
                    "M": "object",
                    "tol": "float",
                    "hermitian": "bool"
                }
            }
        ],
        "_pinv_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "rcond": "float",
                    "hermitian": "bool"
                }
            }
        ],
        "_lstsq_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "rcond": "str"
                }
            }
        ],
        "_norm_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "ord": "int",
                    "axis": "int",
                    "keepdims": "bool"
                }
            }
        ],
        "_multidot_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arrays": "list"
                }
            }
        ],
        "_multi_dot": [
            {
                "type": "func",
                "args": {
                    "arrays": "list",
                    "order": "tuple",
                    "i": "int",
                    "j": "int"
                }
            }
        ],
        "_complexType": [
            {
                "type": "func",
                "args": {
                    "t": "type",
                    "default": "type"
                }
            }
        ],
        "_realType": [
            {
                "type": "func",
                "args": {
                    "t": "type",
                    "default": "type"
                }
            }
        ],
        "_fastCopyAndTranspose": [
            {
                "type": "func",
                "args": {
                    "type": "type",
                    "arrays": "object"
                }
            }
        ],
        "_to_native_byte_order": [
            {
                "type": "func",
                "args": {
                    "arrays": "object"
                }
            }
        ],
        "_commonType": [
            {
                "type": "func",
                "args": {
                    "arrays": "object"
                }
            }
        ],
        "_convertarray": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "_multi_dot_matrix_chain_order": [
            {
                "type": "func",
                "args": {
                    "arrays": "list",
                    "return_costs": "bool"
                }
            }
        ],
        "_multi_dot_three": [
            {
                "type": "func",
                "args": {
                    "A": "object",
                    "B": "object",
                    "C": "object"
                }
            }
        ],
        "_is_empty_2d": [
            {
                "type": "func",
                "args": {
                    "arr": "object"
                }
            }
        ],
        "_assert_stacked_square": [
            {
                "type": "func",
                "args": {
                    "arrays": "object"
                }
            }
        ],
        "det": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "slogdet": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "cholesky": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "inv": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "matrix_power": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "n": "int"
                }
            }
        ],
        "solve": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object"
                }
            }
        ],
        "tensorinv": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "ind": "int"
                }
            }
        ],
        "tensorsolve": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "axes": "tuple"
                }
            }
        ],
        "multi_dot": [
            {
                "type": "func",
                "args": {
                    "arrays": "list"
                }
            }
        ],
        "lstsq": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "b": "object",
                    "rcond": "str"
                }
            }
        ],
        "_assert_finite": [
            {
                "type": "func",
                "args": {
                    "arrays": "object"
                }
            }
        ],
        "eig": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "eigvals": [
            {
                "type": "func",
                "args": {
                    "a": "object"
                }
            }
        ],
        "eigh": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "UPLO": "str"
                }
            }
        ],
        "eigvalsh": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "UPLO": "str"
                }
            }
        ],
        "svd": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "full_matrices": "bool",
                    "compute_uv": "bool",
                    "hermitian": "bool"
                }
            }
        ],
        "_multi_svd_norm": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "row_axis": "int",
                    "col_axis": "int",
                    "op": "operator"
                }
            }
        ],
        "norm": [
            {
                "type": "func",
                "args": {
                    "x": "object",
                    "ord": "int",
                    "axis": "int",
                    "keepdims": "bool"
                }
            }
        ],
        "pinv": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "rcond": "float",
                    "hermitian": "bool"
                }
            }
        ],
        "matrix_rank": [
            {
                "type": "func",
                "args": {
                    "M": "array",
                    "tol": "float",
                    "hermitian": "bool"
                }
            }
        ],
        "cond": [
            {
                "type": "func",
                "args": {
                    "x": "object",
                    "p": "int"
                }
            }
        ],
        "qr": [
            {
                "type": "func",
                "args": {
                    "a": "object",
                    "mode": "str"
                }
            }
        ]
    },
    "linalg": {
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ]
    },
    "linalg.lapack_lite.make_lite": {
        "F2C_ARGS": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "HEADER_BLURB": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "HEADER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FortranRoutine.type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FortranRoutine.filename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FortranRoutine.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FortranRoutine._dependencies": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "FortranRoutine.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "filename": "str"
                }
            }
        ],
        "FortranRoutine.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "UnknownFortranRoutine.type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "UnknownFortranRoutine.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "UnknownFortranRoutine.dependencies": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FortranLibrary._src_dirs": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "FortranLibrary.names_to_routines": [
            {
                "type": "attr",
                "anno": "dict[str, FortranRoutine]"
            }
        ],
        "FortranLibrary.__init__": [
            {
                "type": "method",
                "args": {
                    "src_dirs": "list[str]"
                }
            }
        ],
        "FortranLibrary._newFortranRoutine": [
            {
                "type": "method",
                "args": {
                    "rname": "str",
                    "filename": "str"
                }
            }
        ],
        "FortranLibrary.allRoutines": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "types": [
            {
                "type": "var",
                "anno": "typing.Set[str]"
            }
        ],
        "ensure_executable": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "printRoutineNames": [
            {
                "type": "func",
                "args": {
                    "desc": "str",
                    "routines": "list"
                }
            }
        ],
        "concatenateRoutines": [
            {
                "type": "func",
                "args": {
                    "routines": "typing.List[FortranRoutine]",
                    "output_file": "str"
                }
            }
        ],
        "FortranLibrary.allRoutineNames": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LapackLibrary.allRoutinesByType": [
            {
                "type": "method",
                "args": {
                    "typename": "str"
                }
            }
        ],
        "getWrappedRoutineNames": [
            {
                "type": "func",
                "args": {
                    "wrapped_routines_file": "str"
                }
            }
        ],
        "create_name_header": [
            {
                "type": "func",
                "args": {
                    "output_dir": "str"
                }
            }
        ],
        "LapackLibrary._newFortranRoutine": [
            {
                "type": "method",
                "args": {
                    "rname": "str",
                    "filename": "str"
                }
            }
        ],
        "FortranLibrary.addIgnorableRoutine": [
            {
                "type": "method",
                "args": {
                    "rname": "str"
                }
            }
        ],
        "FortranLibrary._findRoutine": [
            {
                "type": "method",
                "args": {
                    "rname": "str"
                }
            }
        ],
        "FortranLibrary.getRoutine": [
            {
                "type": "method",
                "args": {
                    "rname": "str"
                }
            }
        ],
        "FortranLibrary.addRoutine": [
            {
                "type": "method",
                "args": {
                    "rname": "str"
                }
            }
        ],
        "runF2C": [
            {
                "type": "func",
                "args": {
                    "fortran_filename": "str",
                    "output_dir": "str"
                }
            }
        ],
        "FortranRoutine.dependencies": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "dumpRoutineNames": [
            {
                "type": "func",
                "args": {
                    "library": "LapackLibrary",
                    "output_dir": "str"
                }
            }
        ],
        "FortranLibrary.resolveAllDependencies": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "getLapackRoutines": [
            {
                "type": "func",
                "args": {
                    "wrapped_routines": "typing.List[FortranRoutine]",
                    "ignores": "typing.List[str]",
                    "lapack_dir": "str"
                }
            }
        ],
        "scrubF2CSource": [
            {
                "type": "func",
                "args": {
                    "c_file": "str"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "linalg.lapack_lite.clapack_scrub": {
        "MyScanner.begin": [
            {
                "type": "method",
                "args": {
                    "state_name": "str"
                }
            }
        ],
        "sep_seq": [
            {
                "type": "func",
                "args": {
                    "sequence": "Sequence[Str]",
                    "sep": "Str"
                }
            }
        ],
        "LenSubsScanner.paren_count": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LenSubsScanner.beginArgs": [
            {
                "type": "method",
                "args": {
                    "text": "Str"
                }
            }
        ],
        "LenSubsScanner.endArgs": [
            {
                "type": "method",
                "args": {
                    "text": "Str"
                }
            }
        ],
        "LenSubsScanner.digits": [
            {
                "type": "attr",
                "anno": "Re"
            }
        ],
        "LenSubsScanner.iofun": [
            {
                "type": "attr",
                "anno": "Re"
            }
        ],
        "LenSubsScanner.decl": [
            {
                "type": "attr",
                "anno": "Re"
            }
        ],
        "LenSubsScanner.any": [
            {
                "type": "attr",
                "anno": "Re"
            }
        ],
        "LenSubsScanner.S": [
            {
                "type": "attr",
                "anno": "Re"
            }
        ],
        "LenSubsScanner.cS": [
            {
                "type": "attr",
                "anno": "Str"
            }
        ],
        "LenSubsScanner.len_": [
            {
                "type": "attr",
                "anno": "Re"
            }
        ],
        "LenSubsScanner.iofunctions": [
            {
                "type": "attr",
                "anno": "Str"
            }
        ],
        "LenSubsScanner.keep_ftnlen": [
            {
                "type": "attr",
                "anno": "Str"
            }
        ],
        "LenSubsScanner.lexicon": [
            {
                "type": "attr",
                "anno": "Lexicon"
            }
        ],
        "MyScanner.__init__": [
            {
                "type": "method",
                "args": {
                    "info": "str",
                    "name": "str"
                }
            }
        ],
        "LenSubsScanner.__init__": [
            {
                "type": "method",
                "args": {
                    "info": "str",
                    "name": "str"
                }
            }
        ],
        "cleanSource": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "LineQueue._queue": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "LineQueue.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LineQueue.add": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "LineQueue.clear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CommentQueue.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "replaceDlamch": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "filename": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "outfilename": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nsteps": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "writefo": [
            {
                "type": "var",
                "anno": "StringIO"
            }
        ],
        "source": [
            {
                "type": "var",
                "anno": "bytes"
            }
        ],
        "runScanner": [
            {
                "type": "func",
                "args": {
                    "data": "str",
                    "scanner_class": "Scanner",
                    "lexicon": "Opt[Str]"
                }
            }
        ],
        "scrubFtnlen": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "CommentQueue.add": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "LineQueue.flushTo": [
            {
                "type": "method",
                "args": {
                    "other_queue": "LineQueue"
                }
            }
        ],
        "CommentQueue.flushTo": [
            {
                "type": "method",
                "args": {
                    "other_queue": "LineQueue"
                }
            }
        ],
        "LineQueue.getValue": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "removeBuiltinFunctions": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "removeSubroutinePrototypes": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "removeHeader": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "cleanComments": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "scrubSource": [
            {
                "type": "func",
                "args": {
                    "source": "str",
                    "nsteps": "int",
                    "verbose": "bool"
                }
            }
        ]
    },
    "linalg.lapack_lite.fortran": {
        "isBlank": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "isLabel": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "isComment": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "isContinuation": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "lineType": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "LineIterator.iterable": [
            {
                "type": "attr",
                "anno": "Iterable[str]"
            }
        ],
        "LineIterator.lineno": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LineIterator.__init__": [
            {
                "type": "method",
                "args": {
                    "iterable": "Iterable[str]"
                }
            }
        ],
        "LineIterator.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PushbackIterator.iterable": [
            {
                "type": "attr",
                "anno": "Iterable[int]"
            }
        ],
        "PushbackIterator.buffer": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "PushbackIterator.__init__": [
            {
                "type": "method",
                "args": {
                    "iterable": "Iterable[int]"
                }
            }
        ],
        "PushbackIterator.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PushbackIterator.__next__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PushbackIterator.pushback": [
            {
                "type": "method",
                "args": {
                    "item": "str"
                }
            }
        ],
        "PushbackIterator.next": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "LineIterator.__next__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LineIterator.next": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fortranSourceLines": [
            {
                "type": "func",
                "args": {
                    "fo": "open"
                }
            }
        ],
        "getDependencies": [
            {
                "type": "func",
                "args": {
                    "filename": "str"
                }
            }
        ]
    },
    "ctypeslib": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "ctypes": [
            {
                "type": "var",
                "anno": "ctypes.Type | None"
            }
        ],
        "_dummy": [
            {
                "type": "func",
                "args": {
                    "args": "Any",
                    "kwds": "Any"
                }
            }
        ],
        "_ndptr_base": [
            {
                "type": "var",
                "anno": "ctypes.Type"
            }
        ],
        "c_intp": [
            {
                "type": "var",
                "anno": "c_intp"
            }
        ],
        "load_library": [
            {
                "type": "func",
                "args": {
                    "libname": "str",
                    "loader_path": "str"
                }
            }
        ],
        "ctypes_load_library": [
            {
                "type": "var",
                "anno": "ctypes.Type"
            }
        ],
        "_num_fromflags": [
            {
                "type": "func",
                "args": {
                    "flaglist": "list"
                }
            }
        ],
        "_flagnames": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_flags_fromnum": [
            {
                "type": "func",
                "args": {
                    "num": "int"
                }
            }
        ],
        "_pointer_type_cache": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_ctype_ndarray": [
            {
                "type": "func",
                "args": {
                    "element_type": "ctypes.Type",
                    "shape": "tuple"
                }
            }
        ],
        "_get_scalar_type_map": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_scalar_type_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_ctype_from_dtype_scalar": [
            {
                "type": "func",
                "args": {
                    "dtype": "_dtype"
                }
            }
        ],
        "_ctype_from_dtype_structured": [
            {
                "type": "func",
                "args": {
                    "dtype": "_dtype"
                }
            }
        ],
        "_ctype_from_dtype": [
            {
                "type": "func",
                "args": {
                    "dtype": "_dtype"
                }
            }
        ],
        "as_ctypes_type": [
            {
                "type": "func",
                "args": {
                    "dtype": "_dtype"
                }
            }
        ],
        "as_ctypes": [
            {
                "type": "func",
                "args": {
                    "obj": "_dtype"
                }
            }
        ],
        "_ctype_from_dtype_subarray": [
            {
                "type": "func",
                "args": {
                    "dtype": "_dtype"
                }
            }
        ],
        "_ndptr.from_param": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "obj": "ndarray"
                }
            }
        ],
        "ndpointer": [
            {
                "type": "func",
                "args": {
                    "dtype": "str | None",
                    "ndim": "int",
                    "shape": "tuple",
                    "flags": "int | flags | flagsobj"
                }
            }
        ],
        "_concrete_ndptr.contents": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "as_array": [
            {
                "type": "func",
                "args": {
                    "obj": "Union[ctypes._Pointer, ndarray]",
                    "shape": "tuple"
                }
            }
        ],
        "_concrete_ndptr._check_retval_": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.tests.test_subclassing": {
        "assert_startswith": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "b": "str"
                }
            }
        ],
        "SubArray.info": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "subarray": [
            {
                "type": "var",
                "anno": "Type[SubArray]"
            }
        ],
        "SubMaskedArray.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type[SubArray]",
                    "info": "str",
                    "kwargs": "object"
                }
            }
        ],
        "msubarray": [
            {
                "type": "var",
                "anno": "Type[MSubArray]"
            }
        ],
        "CSAIterator._original": [
            {
                "type": "attr",
                "anno": "SubArray"
            }
        ],
        "CSAIterator._dataiter": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "CSAIterator.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ComplicatedSubArray.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ComplicatedSubArray._validate_input": [
            {
                "type": "method",
                "args": {
                    "value": "ComplicatedSubArray"
                }
            }
        ],
        "CSAIterator.__setitem__": [
            {
                "type": "method",
                "args": {
                    "index": "int",
                    "value": "ComplicatedSubArray"
                }
            }
        ],
        "ComplicatedSubArray.__setitem__": [
            {
                "type": "method",
                "args": {
                    "item": "int",
                    "value": "ComplicatedSubArray"
                }
            }
        ],
        "TestSubclassing.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestSubclassing.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_masked_unary_operations": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_subclass_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_subclass_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_pure_subclass_info_preservation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_masked_binary_operations": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_maskedarray_subclassing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_data_subclassing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_subclasspreservation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ComplicatedSubArray.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray",
                    "context": "tuple"
                }
            }
        ],
        "MSubArray.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "typing.Type[MaskedArray]",
                    "data": "np.ndarray",
                    "info": "dict",
                    "mask": "np.ndarray"
                }
            }
        ],
        "SubArray.__iadd__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "SubArray.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "SubArray"
                }
            }
        ],
        "TestSubclassing.test_subclass_nomask_items": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ComplicatedSubArray.__getitem__": [
            {
                "type": "method",
                "args": {
                    "item": "int"
                }
            }
        ],
        "ComplicatedSubArray.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CSAIterator.__next__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CSAIterator.next": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "CSAIterator.__getitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int"
                }
            }
        ],
        "MSubArray._series": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ComplicatedSubArray.flat": [
            {
                "type": "method",
                "args": {
                    "value": "np.ndarray"
                }
            }
        ],
        "TestSubclassing.test_subclass_items": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CSAIterator.__init__": [
            {
                "type": "method",
                "args": {
                    "a": "SubArray"
                }
            }
        ],
        "TestSubclassing.test_masked_binary_operations2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSubclassing.test_attributepropagation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SubArray.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "SubArray.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "typing.Type[SubArray]",
                    "arr": "np.ndarray",
                    "info": "dict"
                }
            }
        ]
    },
    "ma.tests.test_regression": {
        "TestRegression.test_masked_array_create": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_masked_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_masked_array_multiply": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_masked_array_repr_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_empty_list_on_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_set_fill_value_unicode_py3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_masked_where": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_masked_array_tostring_fortran": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_masked_array_repeat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mask_not_backmangled": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_atleast_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ddof_corrcoef": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_var_sets_maskedarray_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.tests.test_extras": {
        "TestGeneric.test_masked_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeneric.test_masked_all_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_onintegers_with_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompressFunctions.test_dot_returns_maskedarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompressFunctions.test_dot_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_pytype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_axis_argument_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_masked_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_out_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_single_non_masked_value_on_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_out_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestCov.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_1d_without_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrcoef.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestCorrcoef.data2": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestCorrcoef.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_unique_onlist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_unique_allmasked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_intersect1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_setxor1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_in1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_in1d_invert": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_union1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_setdiff1d_char_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_unique_onmaskedarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_setdiff1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_1d_shape_consistency": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_masked_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_testAverage3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_polyfit_with_masked_NaNs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_2d_without_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_neg_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_docstring_examples": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_non_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyOverAxes.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_3d_kwargs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompressFunctions.test_mask_row_cols_axis_deprecation": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "func": "Callable",
                    "rowcols_axis": "int"
                }
            }
        ],
        "TestCompressFunctions.test_compress_rowcols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompressFunctions.test_compress_nd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNotMasked.test_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNotMasked.test_edges": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStack.test_stack_nd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStack.test_stack_masks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStack.test_stack_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShapeBase.test_shape_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestShapeBase.test_atleast_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_isin": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_special": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_ambigous_fill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_2d_waxis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_inf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_masked_constant": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_testAverage2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_testAverage1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeneric.test_flatnotmasked_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_1d_with_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeneric.check_clump": [
            {
                "type": "method",
                "args": {
                    "f": "Callable[[MaskedArray], np.ndarray]"
                }
            }
        ],
        "TestGeneric.test_clump_unmasked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGeneric.test_clump_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompressFunctions.test_mask_rowcols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrcoef.test_2d_with_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrcoef.test_1d_with_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrcoef.test_2d_without_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrcoef.test_1d_without_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrcoef.test_bias": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrcoef.test_ddof": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_ediff1d_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_ediff1d_tobegin_toend": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_ediff1d_toend": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_ediff1d_tobegin": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySetOps.test_ediff1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_2d_with_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompressFunctions.test_dot": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_polyfit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_nan_behavior": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.tests.test_deprecations": {
        "TestMinimumMaximum.test_minimum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimumMaximum.test_maximum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgsort._test_base": [
            {
                "type": "method",
                "args": {
                    "argsort": "np.ndarray",
                    "cls": "type"
                }
            }
        ],
        "TestArgsort.test_method": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgsort.test_function_maskedarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArgsort.test_function_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMinimumMaximum.test_axis_default": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.tests.test_core": {
        "__author__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "pi": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "suppress_copy_mask_on_assignment": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "num_dts": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "num_ids": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "TestMaskedArray.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArray.test_concatenate_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_concatenate_flexible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_creation_from_ndarray_with_padding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_maskedelement": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_set_element_as_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_copy_on_python_builtins": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_str_repr_legacy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_0d_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_oddfeatures_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_optinfo_forward_propagation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_fancy_printoptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_mvoid_getitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_mvoid_iter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_mvoid_print": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_mvoid_multidim_print": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayArithmetic.err_status": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestMaskedArrayArithmetic.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_mixed_arithmetic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_limits_arithmetic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_masked_singleton_equality": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_basic_ufuncs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_count_on_python_builtins": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_minimummaximum_func": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_minmax_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_eq_with_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_check_on_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_check_on_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_default_fill_value_void": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue_datetime_timedelta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestUfuncs.err_status": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestUfuncs.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_treatment_of_NotImplemented": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.MyClass.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestUfuncs.MyClass.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "MyClass"
                }
            }
        ],
        "TestUfuncs.MyClass.__rmul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestUfuncs.MyClass2.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestUfuncs.MyClass2.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "MyClass2"
                }
            }
        ],
        "TestUfuncs.MyClass2.__rmul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestUfuncs.MyClass2.__rdiv__": [
            {
                "type": "method",
                "args": {
                    "other": "MyClass2"
                }
            }
        ],
        "TestUfuncs.MyClass2.__rtruediv__": [
            {
                "type": "attr",
                "anno": "pytest.Function"
            }
        ],
        "TestUfuncs.test_no_masked_nan_warnings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.intdata": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.floatdata": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.othertypes": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.uint8data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayMethods.test_stable_sort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_argsort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayMathMethodsComplex.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayFunctions.info": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedArrayFunctions.test_masked_where_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_masked_where_condition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_masked_where_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_identity": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_make_mask_descr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_mask_or": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_flatten_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.M.compressed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_convolve": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.data": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestMaskedFields.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_getmaskarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_element_len": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedView.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMaskedConstant.test_ctor": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test__copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_deepcopy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_coercion_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_coercion_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_coercion_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_coercion_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_attributes_readonly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_masked_array": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_default_fill_value_complex": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_ufunc_with_output": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_masked_equal_wlist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayAttributes.test_smallmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_pickling_wstructured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_argsort_matches_sort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayAttributes.test_hardmask_again": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_void0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_pickling_maskedconstant": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayAttributes.test_hardmask_oncemore_yay": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_masked_equal_fill_value": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue_bytes_or_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue_as_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue_individual_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_fix_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_asarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedObjectArray.test_nested_ma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_floor_division_scalar_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue_exotic_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_str_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue_conversion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_toflex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_astype_basic": [
            {
                "type": "func",
                "args": {
                    "dt1": "np.dtype",
                    "dt2": "np.dtype"
                }
            }
        ],
        "TestMaskedFields.test_set_record_slice": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_set_record_element": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_make_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_where_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_where_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_where_with_masked_choice": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_extremum_fill_value_subdtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_extremum_fill_value": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_default_fill_value_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_default_fill_value": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_fieldless_void": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMaskedConstant._do_add_test": [
            {
                "type": "method",
                "args": {
                    "add": "np.ma.core.MaskedConstant"
                }
            }
        ],
        "TestMaskedConstant.test_operator": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_ufunc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_compress": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_masked_where_oddities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_shape_argument": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue_implicit_structured_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_addsumprod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_single_element_subscript": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_creation_ndmin_from_maskedarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_creation_ndmin": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_basic2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_basicattributes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedView.test_view_to_dtype_and_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedView.test_view_to_nothing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_fillvalue_in_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayAttributes.test_assign_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_pickling_subbaseclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOptionalArgs.test_count": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOptionalArgs.test_ndarrayfuncs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_reshape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_where_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethodsComplex.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_cumsumprod_with_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_reshape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_methods_with_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_TakeTransposeInnerOuter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_minmax_func": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_basic_arithmetic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_ravel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayAttributes.test_flat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_oddfeatures_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_compressed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_compressed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_compress": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_pickling_keepalignment": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_asarray_enforce_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_asarray_default_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_argmax_argmin": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_swapaxes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedView.test_view_to_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_sort": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_round_with_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_round_with_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_round": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_minmax_funcs_with_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_arraymethod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_mask_shape_assignment_does_not_break_masked": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_astype_mask_ordering": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_append_masked_array_along_axis": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_append_masked_array": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMaskedWhereAliases.test_masked_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedConstant.test_immutable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedView.test_view_to_subdtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedView.test_view_to_flexible_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedView.test_view_to_simple_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedView.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedObjectArray.test_getitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_setitem_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_setitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_getitem": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_mask_element": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedFields.test_set_records_masks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_choose_with_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_choose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_where_structured_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_power_with_broadcasting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_masked_otherfunctions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_masked_where_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_masked_where_shape_constraint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_diag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_varstd_specialcases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_add_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_transpose_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_arraymethod_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_fromflex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_take_masked_indices": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_squeeze": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_sort_flexible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_clip_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_clip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_pow_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_floor_division_array_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_datafriendly_add_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_datafriendly_pow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_datafriendly_div": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_datafriendly_add": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_ndarray_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayAttributes.test_hardmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayAttributes.test_keepmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_numpyarithmetics": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_eq_different_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_ne_for_numeric": [
            {
                "type": "method",
                "args": {
                    "dt1": "np.dtype",
                    "dt2": "np.dtype",
                    "fill": "float"
                }
            }
        ],
        "TestMaskedArrayArithmetic.test_eq_for_numeric": [
            {
                "type": "method",
                "args": {
                    "dt1": "np.dtype",
                    "dt2": "np.dtype",
                    "fill": "float"
                }
            }
        ],
        "TestMaskedArrayArithmetic.test_ne_for_strings": [
            {
                "type": "method",
                "args": {
                    "dt": "list",
                    "fill": "str"
                }
            }
        ],
        "TestMaskedArrayArithmetic.test_eq_for_strings": [
            {
                "type": "method",
                "args": {
                    "dt": "list",
                    "fill": "str"
                }
            }
        ],
        "TestMaskedArrayArithmetic.test_ne_on_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_eq_on_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_mod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_noshink_on_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_ufunc_nomask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_noshrinking": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_domained_binops_d2D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_binops_d2D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton_on_1d_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_masked_singleton_arithmetic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_divide_on_different_shapes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_object_with_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_flatten_structured_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_oddfeatures_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_pickling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_deepcopy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_creation_with_list_of_maskedarrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_creation_maskcreation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_concatenate_alongaxis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_diagonal_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_prod_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_on_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_meananom_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_count_func": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_sum_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_allany_oddities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_allany": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_eq_ne_structured_extra": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_ptp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_axis_methods_nomask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_allclose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_minmax": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_minmax_methods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_tolist_specialcase": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_tolist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillingValues.test_subarray_fillvalue": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_eq_with_None": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_topython": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_take": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_generic_methods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_trace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_put_hardmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_put_nomask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_put": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethodsComplex.test_varstd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_varstd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_varmean_nomask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_where_with_masked_condition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_varstd_ddof": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_dot_shape_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_dot": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMathMethods.test_cumsumprod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_testUfuncRegression": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_imag_real": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayArithmetic.test_scalar_arithmetic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_filled_with_f_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_filled_with_nested_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_filled_with_mvoid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_filled_with_flexible_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_filled_with_object_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_basic1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_basic0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_ufunc_with_out_varied": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_where_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayFunctions.test_where": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_sort_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayMethods.test_putmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayInPlaceArithmetics.test_inplace_division_misc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArrayAttributes.test_shrink_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_optinfo_propagation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_copy_immutable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_copy_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMaskedArray.test_copy": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.tests.test_mrecords": {
        "TestMRecords.ilist": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestMRecords.flist": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestMRecords.slist": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestMRecords.ddtype": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestMRecords.mask": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestMRecords.base": [
            {
                "type": "attr",
                "anno": "ma.ndarray"
            }
        ],
        "TestMRecords.test_withnames": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestView.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMRecordsImport._a": [
            {
                "type": "attr",
                "anno": "ma.ndarray"
            }
        ],
        "TestMRecordsImport._b": [
            {
                "type": "attr",
                "anno": "ma.ndarray"
            }
        ],
        "TestMRecordsImport._c": [
            {
                "type": "attr",
                "anno": "ma.ndarray"
            }
        ],
        "TestMRecordsImport.ddtype": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMRecordsImport.mrec": [
            {
                "type": "attr",
                "anno": "recarray"
            }
        ],
        "test_record_array_with_object_field": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMRecordsImport.nrec": [
            {
                "type": "attr",
                "anno": "recarray"
            }
        ],
        "TestMRecordsImport.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMRecordsImport.test_addfield": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecordsImport.test_fromtextfile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecordsImport.test_fromarrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestView.test_view_flexible_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestView.test_view_simple_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestView.test_view_by_itself": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_byview": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestView.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecordsImport.test_fromrecords_wmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_tolist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecordsImport.test_fromrecords": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_exotic_formats": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_filled": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_pickling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_hardmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_setslices_hardmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_set_elements": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_set_mask_fromfields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_set_mask_fromarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_set_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_set_fields_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_set_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMRecords.test_get": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.tests.test_old_ma": {
        "pi": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "eq": [
            {
                "type": "func",
                "args": {
                    "v": "np.ndarray",
                    "w": "np.ndarray",
                    "msg": "str"
                }
            }
        ],
        "TestMa.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMa.test_testMixedArithmetic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testUfuncs1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testMinMax": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testAddSumProd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testPut2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testMaPut": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testMinMax2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testMasked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testToPython": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testArrayAttributes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestUfuncs.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_reduce": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_nonzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMethods.d": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMa.test_testAPI": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testInplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testSingleElementSubscript": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testAverage2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testBasic1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testBasic2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMethods.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testAverage1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testPickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testTakeTransposeInnerOuter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_xtestCount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testArithmetic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMethods.test_swapaxes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMethods.test_clip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testCopySize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testCI": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "eqmask": [
            {
                "type": "func",
                "args": {
                    "m1": "np.ndarray",
                    "m2": "np.ndarray"
                }
            }
        ],
        "TestArrayMethods.test_ptp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_minmax": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testArrayMethods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMethods.test_trace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMethods.test_varstd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMethods.test_cumsum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayMethods.test_cumprod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfuncs.test_testUfuncRegression": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testScalarArithmetic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testOddFeatures": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMa.test_testPut": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.extras": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "issequence": [
            {
                "type": "func",
                "args": {
                    "seq": "Union[ndarray, tuple, list]"
                }
            }
        ],
        "_fromnxfunction.__name__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_fromnxfunction.__doc__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_fromnxfunction.__call__": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "params": "Any"
                }
            }
        ],
        "flatten_inplace": [
            {
                "type": "func",
                "args": {
                    "seq": "list"
                }
            }
        ],
        "MAxisConcatenator.__getitem__": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "vander": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "n": "int"
                }
            }
        ],
        "flatnotmasked_edges": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "masked_all": [
            {
                "type": "func",
                "args": {
                    "shape": "int",
                    "dtype": "np.dtype"
                }
            }
        ],
        "_fromnxfunction_allargs.__call__": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "params": "np.ndarray"
                }
            }
        ],
        "_fromnxfunction_args.__call__": [
            {
                "type": "method",
                "args": {
                    "args": "int",
                    "params": "int"
                }
            }
        ],
        "_fromnxfunction_seq.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "nxarray.Sequence",
                    "args": "tuple",
                    "params": "dict"
                }
            }
        ],
        "_fromnxfunction_single.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "Union[np.ndarray, MaskType]",
                    "args": "Any",
                    "params": "Any"
                }
            }
        ],
        "unique": [
            {
                "type": "func",
                "args": {
                    "ar1": "ndarray",
                    "return_index": "bool",
                    "return_inverse": "bool"
                }
            }
        ],
        "masked_all_like": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray"
                }
            }
        ],
        "_ezclump": [
            {
                "type": "func",
                "args": {
                    "mask": "np.ndarray"
                }
            }
        ],
        "clump_masked": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "clump_unmasked": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "flatnotmasked_contiguous": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "notmasked_contiguous": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "MAxisConcatenator.makemat": [
            {
                "type": "method",
                "args": {
                    "cls": "typing.Type[MAxisConcatenator]",
                    "arr": "axisConcatenator.AxisConcatenator"
                }
            }
        ],
        "apply_over_axes": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "a": "ndarray",
                    "axes": "tuple"
                }
            }
        ],
        "count_masked": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "_median": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "out": "str",
                    "overwrite_input": "bool"
                }
            }
        ],
        "median": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "out": "str",
                    "overwrite_input": "bool",
                    "keepdims": "bool"
                }
            }
        ],
        "average": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "weights": "np.ndarray",
                    "returned": "bool"
                }
            }
        ],
        "compress_nd": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "compress_rowcols": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "compress_cols": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "compress_rows": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "mask_cols": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "mask_rows": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "MAxisConcatenator.concatenate": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "mr_class.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mr_": [
            {
                "type": "var",
                "anno": "MAxisConcatenator"
            }
        ],
        "_covhelper": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "np.ndarray",
                    "rowvar": "bool",
                    "allow_masked": "bool"
                }
            }
        ],
        "union1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "ndarray",
                    "ar2": "ndarray"
                }
            }
        ],
        "in1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "ndarray",
                    "ar2": "ndarray",
                    "assume_unique": "bool",
                    "invert": "bool"
                }
            }
        ],
        "setdiff1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "ndarray",
                    "ar2": "ndarray",
                    "assume_unique": "bool"
                }
            }
        ],
        "isin": [
            {
                "type": "func",
                "args": {
                    "element": "ndarray",
                    "test_elements": "ndarray",
                    "assume_unique": "bool",
                    "invert": "bool"
                }
            }
        ],
        "intersect1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "ndarray",
                    "ar2": "ndarray",
                    "assume_unique": "bool"
                }
            }
        ],
        "cov": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "np.ndarray",
                    "rowvar": "bool",
                    "bias": "bool",
                    "allow_masked": "bool",
                    "ddof": "int"
                }
            }
        ],
        "notmasked_edges": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "_fromnxfunction.getdoc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_fromnxfunction.__init__": [
            {
                "type": "method",
                "args": {
                    "funcname": "str"
                }
            }
        ],
        "diagflat": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "hsplit": [
            {
                "type": "var",
                "anno": "_fromnxfunction"
            }
        ],
        "stack": [
            {
                "type": "var",
                "anno": "_fromnxfunction"
            }
        ],
        "dstack": [
            {
                "type": "var",
                "anno": "_fromnxfunction"
            }
        ],
        "column_stack": [
            {
                "type": "var",
                "anno": "_fromnxfunction"
            }
        ],
        "hstack": [
            {
                "type": "var",
                "anno": "_fromnxfunction"
            }
        ],
        "ediff1d": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "to_end": "np.ndarray",
                    "to_begin": "np.ndarray"
                }
            }
        ],
        "row_stack": [
            {
                "type": "var",
                "anno": "_fromnxfunction_seq"
            }
        ],
        "vstack": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "atleast_3d": [
            {
                "type": "var",
                "anno": "_fromnxfunction"
            }
        ],
        "atleast_2d": [
            {
                "type": "var",
                "anno": "_fromnxfunction"
            }
        ],
        "atleast_1d": [
            {
                "type": "var",
                "anno": "_fromnxfunction"
            }
        ],
        "setxor1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "ndarray",
                    "ar2": "ndarray",
                    "assume_unique": "bool"
                }
            }
        ],
        "apply_along_axis": [
            {
                "type": "func",
                "args": {
                    "func1d": "Callable",
                    "axis": "int",
                    "arr": "ndarray",
                    "args": "tuple",
                    "kwargs": "tuple"
                }
            }
        ],
        "polyfit": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "deg": "int",
                    "rcond": "int",
                    "full": "bool",
                    "w": "ndarray",
                    "cov": "bool"
                }
            }
        ],
        "corrcoef": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "np.ndarray",
                    "rowvar": "bool",
                    "bias": "np.ndarray",
                    "allow_masked": "bool",
                    "ddof": "np.ndarray"
                }
            }
        ]
    },
    "ma.core": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "MaskType": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "nomask": [
            {
                "type": "var",
                "anno": "MaskType"
            }
        ],
        "_deprecate_argsort_axis": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray"
                }
            }
        ],
        "get_object_signature": [
            {
                "type": "func",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "default_filler": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "max_filler": [
            {
                "type": "var",
                "anno": "ntypes.Type[np.float64]"
            }
        ],
        "min_filler": [
            {
                "type": "var",
                "anno": "ntypes.Type[np.float64]"
            }
        ],
        "is_string_or_list_of_strings": [
            {
                "type": "func",
                "args": {
                    "val": "int"
                }
            }
        ],
        "ufunc_domain": [
            {
                "type": "var",
                "anno": "dict[umath.Ufunc, umath.Domain]"
            }
        ],
        "ufunc_fills": [
            {
                "type": "var",
                "anno": "dict[umath.Ufunc, tuple[int, int]]"
            }
        ],
        "_DomainCheckInterval.a": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_DomainCheckInterval.b": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_DomainCheckInterval.__init__": [
            {
                "type": "method",
                "args": {
                    "a": "float",
                    "b": "float"
                }
            }
        ],
        "_DomainCheckInterval.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "int"
                }
            }
        ],
        "_DomainTan.eps": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_DomainTan.__init__": [
            {
                "type": "method",
                "args": {
                    "eps": "float"
                }
            }
        ],
        "_DomainTan.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "float"
                }
            }
        ],
        "_DomainSafeDivide.tolerance": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_DomainSafeDivide.__init__": [
            {
                "type": "method",
                "args": {
                    "tolerance": "float"
                }
            }
        ],
        "_DomainSafeDivide.__call__": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray"
                }
            }
        ],
        "_DomainGreater.critical_value": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_DomainGreater.__init__": [
            {
                "type": "method",
                "args": {
                    "critical_value": "float"
                }
            }
        ],
        "_DomainGreater.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "float"
                }
            }
        ],
        "_DomainGreaterEqual.critical_value": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "_DomainGreaterEqual.__init__": [
            {
                "type": "method",
                "args": {
                    "critical_value": "float"
                }
            }
        ],
        "_DomainGreaterEqual.__call__": [
            {
                "type": "method",
                "args": {
                    "x": "float"
                }
            }
        ],
        "_MaskedUFunc.f": [
            {
                "type": "attr",
                "anno": "Ufunc"
            }
        ],
        "_MaskedUFunc.__doc__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_MaskedUFunc.__name__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_MaskedUFunc.__init__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "Ufunc"
                }
            }
        ],
        "_MaskedUFunc.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_MaskedUnaryOperation.fill": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_MaskedUnaryOperation.domain": [
            {
                "type": "attr",
                "anno": "umath.Domain"
            }
        ],
        "_MaskedUnaryOperation.__init__": [
            {
                "type": "method",
                "args": {
                    "mufunc": "Ufunc",
                    "fill": "int",
                    "domain": "umath.Domain"
                }
            }
        ],
        "_MaskedBinaryOperation.fillx": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_MaskedBinaryOperation.filly": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_MaskedBinaryOperation.__init__": [
            {
                "type": "method",
                "args": {
                    "mbfunc": "umath.Ufunc",
                    "fillx": "int",
                    "filly": "int"
                }
            }
        ],
        "_DomainedBinaryOperation.domain": [
            {
                "type": "attr",
                "anno": "umath.Domain"
            }
        ],
        "_DomainedBinaryOperation.fillx": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DomainedBinaryOperation.filly": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "_DomainedBinaryOperation.__init__": [
            {
                "type": "method",
                "args": {
                    "dbfunc": "Ufunc",
                    "domain": "umath.Domain",
                    "fillx": "int",
                    "filly": "int"
                }
            }
        ],
        "exp": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "conjugate": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "sin": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "cos": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "arctan": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "arcsinh": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "sinh": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "cosh": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "tanh": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "abs": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "absolute": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "angle": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "fabs": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "negative": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "floor": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "ceil": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "around": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "logical_not": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "sqrt": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "log": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "log2": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "log10": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "tan": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "arcsin": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "arccos": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "arccosh": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "arctanh": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "add": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "subtract": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "multiply": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "arctan2": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "equal": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "not_equal": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "less_equal": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "greater_equal": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "less": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "greater": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "logical_and": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "logical_or": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "logical_xor": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "bitwise_and": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "bitwise_or": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "bitwise_xor": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "hypot": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "divide": [
            {
                "type": "var",
                "anno": "_DomainedBinaryOperation"
            }
        ],
        "true_divide": [
            {
                "type": "var",
                "anno": "_DomainedBinaryOperation"
            }
        ],
        "floor_divide": [
            {
                "type": "var",
                "anno": "_DomainedBinaryOperation"
            }
        ],
        "remainder": [
            {
                "type": "var",
                "anno": "_DomainedBinaryOperation"
            }
        ],
        "fmod": [
            {
                "type": "var",
                "anno": "_DomainedBinaryOperation"
            }
        ],
        "mod": [
            {
                "type": "var",
                "anno": "_DomainedBinaryOperation"
            }
        ],
        "getmask": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "get_mask": [
            {
                "type": "var",
                "anno": "MaskType"
            }
        ],
        "_MaskedPrintOption._display": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_MaskedPrintOption._enabled": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "_MaskedPrintOption.__init__": [
            {
                "type": "method",
                "args": {
                    "display": "str"
                }
            }
        ],
        "_MaskedPrintOption.display": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_MaskedPrintOption.set_display": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_MaskedPrintOption.enabled": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_MaskedPrintOption.enable": [
            {
                "type": "method",
                "args": {
                    "shrink": "int"
                }
            }
        ],
        "_MaskedPrintOption.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_MaskedPrintOption.__repr__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "masked_print_option": [
            {
                "type": "var",
                "anno": "_MaskedPrintOption"
            }
        ],
        "_legacy_print_templates": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "MaskedIterator.ma": [
            {
                "type": "attr",
                "anno": "MaskedArray"
            }
        ],
        "MaskedIterator.dataiter": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "MaskedIterator.maskiter": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "MaskedIterator.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.__array_priority__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MaskedArray._defaultmask": [
            {
                "type": "attr",
                "anno": "MaskType"
            }
        ],
        "MaskedArray._defaulthardmask": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MaskedArray._baseclass": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MaskedArray._print_width": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MaskedArray._print_width_1d": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MaskedArray._mask": [
            {
                "type": "attr",
                "anno": "MaskType"
            }
        ],
        "MaskedArray._fill_value": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "MaskedArray.recordmask": [
            {
                "type": "method",
                "args": {
                    "mask": "MaskType"
                }
            }
        ],
        "MaskedArray._hardmask": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MaskedArray.harden_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.soften_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.hardmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray._sharedmask": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MaskedArray.sharedmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.baseclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray._get_data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray._data": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "MaskedArray.data": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "MaskedArray._delegate_binop": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "MaskedArray.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "MaskedArray.__radd__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[int, np.ndarray]"
                }
            }
        ],
        "MaskedArray.__sub__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "MaskedArray.__rsub__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[int, np.ndarray]"
                }
            }
        ],
        "MaskedArray.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "MaskedArray.__rmul__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[int, np.ndarray]"
                }
            }
        ],
        "MaskedArray.__div__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "MaskedArray.__truediv__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "MaskedArray.__rtruediv__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[int, np.ndarray]"
                }
            }
        ],
        "MaskedArray.__floordiv__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "MaskedArray.__rfloordiv__": [
            {
                "type": "method",
                "args": {
                    "other": "Union[int, np.ndarray]"
                }
            }
        ],
        "MaskedArray.resize": [
            {
                "type": "method",
                "args": {
                    "newshape": "tuple",
                    "refcheck": "bool",
                    "order": "bool"
                }
            }
        ],
        "MaskedArray.argpartition": [
            {
                "type": "method",
                "args": {
                    "args": "int",
                    "kwargs": "int"
                }
            }
        ],
        "MaskedArray.tofile": [
            {
                "type": "method",
                "args": {
                    "fid": "str",
                    "sep": "str",
                    "format": "str"
                }
            }
        ],
        "MaskedArray.fill_value": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "MaskedArray.set_fill_value": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "set_fill_value": [
            {
                "type": "func",
                "args": {
                    "a": "Union[MaskedArray, ndarray]",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "MaskedArray.get_fill_value": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "isMaskedArray": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "isarray": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "isMA": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "MaskedConstant.__singleton": [
            {
                "type": "attr",
                "anno": "typing.Optional[type]"
            }
        ],
        "MaskedConstant.__has_singleton": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "MaskedConstant.__class__": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MaskedConstant.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedConstant.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedConstant.__reduce__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedConstant.__iop__": [
            {
                "type": "method",
                "args": {
                    "other": "type"
                }
            }
        ],
        "MaskedConstant.__iadd__": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MaskedConstant.__isub__": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MaskedConstant.__imul__": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MaskedConstant.__ifloordiv__": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MaskedConstant.__itruediv__": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MaskedConstant.__ipow__": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "MaskedConstant.copy": [
            {
                "type": "method",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "MaskedConstant.__copy__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedConstant.__deepcopy__": [
            {
                "type": "method",
                "args": {
                    "memo": "object"
                }
            }
        ],
        "MaskedConstant.__setattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "value": "typing.Any"
                }
            }
        ],
        "masked_array": [
            {
                "type": "var",
                "anno": "MaskedArray"
            }
        ],
        "_extrema_operation.compare": [
            {
                "type": "attr",
                "anno": "Callable[[str, str], np.ndarray]"
            }
        ],
        "_extrema_operation.fill_value_func": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray], np.ndarray]"
            }
        ],
        "_extrema_operation.__init__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "umath.UFunc",
                    "compare": "Callable[[str, str], np.ndarray]",
                    "fill_value": "Callable[[np.ndarray], np.ndarray]"
                }
            }
        ],
        "_frommethod.__name__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_frommethod.__doc__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_frommethod.reversed": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "_frommethod.getdoc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_frommethod.__init__": [
            {
                "type": "method",
                "args": {
                    "methodname": "str",
                    "reversed": "bool"
                }
            }
        ],
        "all": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "anomalies": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "anom": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "any": [
            {
                "type": "var",
                "anno": "_frommethod"
            }
        ],
        "compress": [
            {
                "type": "var",
                "anno": "_FromMethod"
            }
        ],
        "cumprod": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "cumsum": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "copy": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "diagonal": [
            {
                "type": "var",
                "anno": "_MaskedUnaryOperation"
            }
        ],
        "harden_mask": [
            {
                "type": "var",
                "anno": "_MaskedUFunc"
            }
        ],
        "ids": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "mean": [
            {
                "type": "var",
                "anno": "_frommethod"
            }
        ],
        "nonzero": [
            {
                "type": "var",
                "anno": "_arraymethod"
            }
        ],
        "prod": [
            {
                "type": "var",
                "anno": "_frommethod"
            }
        ],
        "product": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "ravel": [
            {
                "type": "var",
                "anno": "_arraymethod"
            }
        ],
        "repeat": [
            {
                "type": "var",
                "anno": "_FromMethod"
            }
        ],
        "shrink_mask": [
            {
                "type": "var",
                "anno": "_MaskedUFunc"
            }
        ],
        "soften_mask": [
            {
                "type": "var",
                "anno": "_MaskedUFunc"
            }
        ],
        "std": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "sum": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "swapaxes": [
            {
                "type": "var",
                "anno": "_FromMethod"
            }
        ],
        "trace": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "var": [
            {
                "type": "var",
                "anno": "_frommethod"
            }
        ],
        "count": [
            {
                "type": "var",
                "anno": "_arraymethod"
            }
        ],
        "argmin": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "argmax": [
            {
                "type": "var",
                "anno": "_FuncCall_"
            }
        ],
        "asarray": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "dtype": "str",
                    "order": "str"
                }
            }
        ],
        "_pickle_warn": [
            {
                "type": "func",
                "args": {
                    "method": "str"
                }
            }
        ],
        "fromfile": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "dtype": "type",
                    "count": "int",
                    "sep": "str"
                }
            }
        ],
        "fromflex": [
            {
                "type": "func",
                "args": {
                    "fxarray": "dict"
                }
            }
        ],
        "_convert2ma.__doc__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_convert2ma._func": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "_convert2ma._extras": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "_convert2ma.getdoc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_convert2ma.__init__": [
            {
                "type": "method",
                "args": {
                    "funcname": "str",
                    "params": "dict"
                }
            }
        ],
        "arange": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "clip": [
            {
                "type": "var",
                "anno": "np.clip"
            }
        ],
        "diff": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "empty": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "empty_like": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "frombuffer": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "fromfunction": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "identity": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "indices": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "ones": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "ones_like": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "squeeze": [
            {
                "type": "var",
                "anno": "Callable[[], np.ndarray]"
            }
        ],
        "zeros": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "zeros_like": [
            {
                "type": "var",
                "anno": "Callable[[], np.ndarray]"
            }
        ],
        "mvoid._data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mvoid.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mvoid.__setitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int",
                    "value": "np.ndarray"
                }
            }
        ],
        "get_masked_subclass": [
            {
                "type": "func",
                "args": {
                    "arrays": "ndarray"
                }
            }
        ],
        "_replace_dtype_fields_recursive": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype",
                    "primitive_dtype": "np.dtype"
                }
            }
        ],
        "_replace_dtype_fields": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype",
                    "primitive_dtype": "np.dtype"
                }
            }
        ],
        "make_mask_descr": [
            {
                "type": "func",
                "args": {
                    "ndtype": "np.dtype"
                }
            }
        ],
        "_mareconstruct": [
            {
                "type": "func",
                "args": {
                    "subtype": "type",
                    "baseclass": "type",
                    "baseshape": "tuple",
                    "basetype": "np.dtype"
                }
            }
        ],
        "MaskedArray.__setstate__": [
            {
                "type": "method",
                "args": {
                    "state": "tuple"
                }
            }
        ],
        "make_mask_none": [
            {
                "type": "func",
                "args": {
                    "newshape": "tuple[int, ...]",
                    "dtype": "np.dtype"
                }
            }
        ],
        "getmaskarray": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray"
                }
            }
        ],
        "_recursive_set_fill_value": [
            {
                "type": "func",
                "args": {
                    "fillvalue": "np.ndarray",
                    "dt": "np.dtype"
                }
            }
        ],
        "_recursive_fill_value": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype",
                    "f": "Callable[[np.dtype], np.ndarray]"
                }
            }
        ],
        "MaskedArray.ids": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.iscontiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.filled": [
            {
                "type": "method",
                "args": {
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "MaskedArray.tobytes": [
            {
                "type": "method",
                "args": {
                    "fill_value": "np.ndarray",
                    "order": "str"
                }
            }
        ],
        "MaskedArray.__getstate__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.__reduce__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.tostring": [
            {
                "type": "method",
                "args": {
                    "fill_value": "np.ndarray",
                    "order": "str"
                }
            }
        ],
        "MaskedArray.nonzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.all": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_check_mask_axis": [
            {
                "type": "func",
                "args": {
                    "mask": "MaskType",
                    "axis": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.prod": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "Union[ndarray, MaskType]",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.product": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "MaskedArray._update_from": [
            {
                "type": "method",
                "args": {
                    "obj": "ndarray"
                }
            }
        ],
        "MaskedArray.view": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype",
                    "type": "np.dtype",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "_convert2ma.__call__": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "params": "np.ndarray"
                }
            }
        ],
        "resize": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "new_shape": "tuple[int, ...]"
                }
            }
        ],
        "diag": [
            {
                "type": "func",
                "args": {
                    "v": "ndarray",
                    "k": "int"
                }
            }
        ],
        "MaskedConstant.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray",
                    "context": "np.ndarray"
                }
            }
        ],
        "MaskedConstant.__array_prepare__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray",
                    "context": "np.ndarray"
                }
            }
        ],
        "mvoid.__new__": [
            {
                "type": "method",
                "args": {
                    "data": "ndarray",
                    "mask": "MaskType",
                    "dtype": "np.dtype",
                    "fill_value": "np.ndarray",
                    "hardmask": "bool",
                    "copy": "bool",
                    "subok": "bool"
                }
            }
        ],
        "MaskedArray.cumprod": [
            {
                "type": "method",
                "args": {
                    "axis": "np.ndarray",
                    "dtype": "np.dtype",
                    "out": "np.ndarray"
                }
            }
        ],
        "MaskedArray.real": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.get_real": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "MaskedArray.imag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.get_imag": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "getdata": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "subok": "bool"
                }
            }
        ],
        "round_": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "decimals": "int",
                    "out": "np.ndarray"
                }
            }
        ],
        "round": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "size": [
            {
                "type": "func",
                "args": {
                    "obj": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "shape": [
            {
                "type": "func",
                "args": {
                    "obj": "ndarray"
                }
            }
        ],
        "MaskedArray.shape": [
            {
                "type": "method",
                "args": {
                    "shape": "tuple[int, ...]"
                }
            }
        ],
        "MaskedArray.dtype": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "asanyarray": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "dtype": "np.dtype"
                }
            }
        ],
        "_frommethod.__call__": [
            {
                "type": "method",
                "args": {
                    "a": "ndarray",
                    "args": "np.ndarray",
                    "params": "np.ndarray"
                }
            }
        ],
        "MaskedArray.toflex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.torecords": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "flatten_mask": [
            {
                "type": "func",
                "args": {
                    "mask": "np.ndarray"
                }
            }
        ],
        "is_mask": [
            {
                "type": "func",
                "args": {
                    "m": "MaskType"
                }
            }
        ],
        "_get_dtype_of": [
            {
                "type": "func",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "_extremum_fill_value": [
            {
                "type": "func",
                "args": {
                    "obj": "np.ndarray",
                    "extremum": "np.ndarray",
                    "extremum_name": "str"
                }
            }
        ],
        "maximum_fill_value": [
            {
                "type": "func",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "maximum": [
            {
                "type": "var",
                "anno": "_ExtremaOperation"
            }
        ],
        "minimum_fill_value": [
            {
                "type": "func",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "minimum": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "MaskedArray.argsort": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "kind": "str",
                    "order": "str",
                    "endwith": "bool",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "argsort": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "kind": "str",
                    "order": "str",
                    "endwith": "bool",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "default_fill_value": [
            {
                "type": "func",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "get_fill_value": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "common_fill_value": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray"
                }
            }
        ],
        "_check_fill_value": [
            {
                "type": "func",
                "args": {
                    "fill_value": "np.ndarray",
                    "ndtype": "np.dtype"
                }
            }
        ],
        "ndim": [
            {
                "type": "func",
                "args": {
                    "obj": "ndarray"
                }
            }
        ],
        "MaskedIterator.__setitem__": [
            {
                "type": "method",
                "args": {
                    "index": "int",
                    "value": "ndarray"
                }
            }
        ],
        "masked_invalid": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "copy": "bool"
                }
            }
        ],
        "get_data": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "MaskedArray.reshape": [
            {
                "type": "method",
                "args": {
                    "s": "int",
                    "kwargs": "int"
                }
            }
        ],
        "reshape": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "new_shape": "tuple[int, ...]",
                    "order": "str"
                }
            }
        ],
        "MaskedArray.ravel": [
            {
                "type": "method",
                "args": {
                    "order": "str"
                }
            }
        ],
        "MaskedArray.flat": [
            {
                "type": "method",
                "args": {
                    "value": "int"
                }
            }
        ],
        "flatten_structured_array": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "MaskedIterator.__init__": [
            {
                "type": "method",
                "args": {
                    "ma": "MaskedArray"
                }
            }
        ],
        "MaskedArray.compress": [
            {
                "type": "method",
                "args": {
                    "condition": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray"
                }
            }
        ],
        "MaskedArray.compressed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "compressed": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "MaskedArray.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "ndarray"
                }
            }
        ],
        "MaskedConstant.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "ndarray"
                }
            }
        ],
        "_arraymethod": [
            {
                "type": "func",
                "args": {
                    "funcname": "str",
                    "onmask": "bool"
                }
            }
        ],
        "MaskedArray.transpose": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "transpose": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axes": "int"
                }
            }
        ],
        "MaskedArray.T": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "MaskedArray.argmin": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "fill_value": "np.ndarray",
                    "out": "np.ndarray"
                }
            }
        ],
        "MaskedArray.argmax": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "fill_value": "np.ndarray",
                    "out": "int"
                }
            }
        ],
        "MaskedArray.swapaxes": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "MaskedArray.squeeze": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "MaskedArray.repeat": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "MaskedArray.flatten": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "MaskedArray.diagonal": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "masked": [
            {
                "type": "var",
                "anno": "MaskedConstant"
            }
        ],
        "mvoid.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mvoid.__getitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int"
                }
            }
        ],
        "MaskedArray.sort": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "kind": "str",
                    "order": "str",
                    "endwith": "bool",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "sort": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "kind": "str",
                    "order": "str",
                    "endwith": "bool",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "MaskedArray.round": [
            {
                "type": "method",
                "args": {
                    "decimals": "int",
                    "out": "np.ndarray"
                }
            }
        ],
        "MaskedArray.__setmask__": [
            {
                "type": "method",
                "args": {
                    "mask": "np.ndarray",
                    "copy": "bool"
                }
            }
        ],
        "MaskedArray.mask": [
            {
                "type": "method",
                "args": {
                    "value": "np.ndarray"
                }
            }
        ],
        "MaskedArray.cumsum": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "ndarray"
                }
            }
        ],
        "MaskedArray._set_mask": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "masked_singleton": [
            {
                "type": "var",
                "anno": "MaskedConstant"
            }
        ],
        "MaskedArray.copy": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "array": [
            {
                "type": "func",
                "args": {
                    "data": "ndarray",
                    "dtype": "str",
                    "copy": "bool",
                    "order": "str",
                    "mask": "MaskType",
                    "fill_value": "np.ndarray",
                    "keep_mask": "bool",
                    "hard_mask": "bool",
                    "shrink": "bool",
                    "subok": "bool",
                    "ndmin": "int"
                }
            }
        ],
        "MaskedConstant.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "MaskedArray.__long__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.__int__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.__float__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.sum": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "np.ndarray",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.count": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.mean": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "np.ndarray",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.anom": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "np.ndarray"
                }
            }
        ],
        "MaskedArray.any": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "mask_rowcols": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "is_masked": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "MaskedArray.__imul__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "MaskedArray.__isub__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "MaskedArray.__iadd__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "_shrink_mask": [
            {
                "type": "func",
                "args": {
                    "m": "MaskType"
                }
            }
        ],
        "concatenate": [
            {
                "type": "func",
                "args": {
                    "arrays": "tuple[ndarray, ...]",
                    "axis": "int"
                }
            }
        ],
        "append": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "MaskedArray.shrink_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "fix_invalid": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "mask": "MaskType",
                    "copy": "bool",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "filled": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "_convolve_or_correlate": [
            {
                "type": "func",
                "args": {
                    "f": "Callable[[ndarray, ndarray], MaskedArray]",
                    "a": "ndarray",
                    "v": "ndarray",
                    "mode": "str",
                    "propagate_mask": "bool"
                }
            }
        ],
        "convolve": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "v": "ndarray",
                    "mode": "str",
                    "propagate_mask": "bool"
                }
            }
        ],
        "correlate": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "v": "ndarray",
                    "mode": "str",
                    "propagate_mask": "bool"
                }
            }
        ],
        "inner": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray"
                }
            }
        ],
        "innerproduct": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "dot": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "strict": "bool",
                    "out": "MaskedArray"
                }
            }
        ],
        "MaskedArray.dot": [
            {
                "type": "method",
                "args": {
                    "b": "ndarray",
                    "out": "MaskedArray",
                    "strict": "bool"
                }
            }
        ],
        "where": [
            {
                "type": "func",
                "args": {
                    "condition": "np.ndarray",
                    "x": "np.ndarray",
                    "y": "np.ndarray"
                }
            }
        ],
        "putmask": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "mask": "MaskType",
                    "values": "np.ndarray"
                }
            }
        ],
        "MaskedArray.max": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "np.ndarray",
                    "fill_value": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "max": [
            {
                "type": "func",
                "args": {
                    "obj": "ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "fill_value": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.min": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "np.ndarray",
                    "fill_value": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "min": [
            {
                "type": "func",
                "args": {
                    "obj": "ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "fill_value": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.ptp": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "out": "np.ndarray",
                    "fill_value": "np.ndarray",
                    "keepdims": "bool"
                }
            }
        ],
        "ptp": [
            {
                "type": "func",
                "args": {
                    "obj": "MaskedArray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "fill_value": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_recursive_filled": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "mask": "np.ndarray",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "_recursive_printoption": [
            {
                "type": "func",
                "args": {
                    "result": "np.ndarray",
                    "mask": "np.ndarray",
                    "printopt": "_MaskedPrintOption"
                }
            }
        ],
        "mvoid.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mvoid.__repr__": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "MaskedArray.__getitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int"
                }
            }
        ],
        "MaskedIterator.__next__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedIterator.next": [
            {
                "type": "attr",
                "anno": "Callable[[], ndarray]"
            }
        ],
        "MaskedIterator.__getitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int"
                }
            }
        ],
        "MaskedArray._insert_masked_print": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_DomainedBinaryOperation.__call__": [
            {
                "type": "method",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "args": "int",
                    "kwargs": "int"
                }
            }
        ],
        "_MaskedBinaryOperation.__call__": [
            {
                "type": "method",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "_MaskedUnaryOperation.__call__": [
            {
                "type": "method",
                "args": {
                    "a": "ndarray",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "right_shift": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "n": "int"
                }
            }
        ],
        "left_shift": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "n": "int"
                }
            }
        ],
        "_extrema_operation.outer": [
            {
                "type": "method",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray"
                }
            }
        ],
        "_MaskedBinaryOperation.outer": [
            {
                "type": "method",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray"
                }
            }
        ],
        "mvoid.filled": [
            {
                "type": "method",
                "args": {
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "MaskedArray.tolist": [
            {
                "type": "method",
                "args": {
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "mvoid.tolist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.partition": [
            {
                "type": "method",
                "args": {
                    "args": "int",
                    "kwargs": "int"
                }
            }
        ],
        "MaskedArray.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "doc_note": [
            {
                "type": "func",
                "args": {
                    "initialdoc": "str",
                    "note": "str"
                }
            }
        ],
        "MaskedArray.take": [
            {
                "type": "method",
                "args": {
                    "indices": "np.ndarray",
                    "axis": "int",
                    "out": "ndarray",
                    "mode": "str"
                }
            }
        ],
        "take": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "indices": "np.ndarray",
                    "axis": "int",
                    "out": "ndarray",
                    "mode": "str"
                }
            }
        ],
        "MaskedArray.trace": [
            {
                "type": "method",
                "args": {
                    "offset": "int",
                    "axis1": "int",
                    "axis2": "int",
                    "dtype": "np.ndarray",
                    "out": "str"
                }
            }
        ],
        "masked_values": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "value": "np.ndarray",
                    "rtol": "float",
                    "atol": "float",
                    "copy": "bool",
                    "shrink": "bool"
                }
            }
        ],
        "make_mask": [
            {
                "type": "func",
                "args": {
                    "m": "MaskType",
                    "copy": "bool",
                    "shrink": "bool",
                    "dtype": "np.dtype"
                }
            }
        ],
        "outer": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray"
                }
            }
        ],
        "outerproduct": [
            {
                "type": "var",
                "anno": "Callable[[ndarray, ndarray], MaskedArray]"
            }
        ],
        "MaskedArray.put": [
            {
                "type": "method",
                "args": {
                    "indices": "np.ndarray",
                    "values": "np.ndarray",
                    "mode": "str"
                }
            }
        ],
        "put": [
            {
                "type": "func",
                "args": {
                    "a": "MaskedArray",
                    "indices": "np.ndarray",
                    "values": "np.ndarray",
                    "mode": "str"
                }
            }
        ],
        "mask_or": [
            {
                "type": "func",
                "args": {
                    "m1": "MaskType",
                    "m2": "MaskType",
                    "copy": "bool",
                    "shrink": "bool"
                }
            }
        ],
        "allclose": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "masked_equal": "bool",
                    "rtol": "float",
                    "atol": "float"
                }
            }
        ],
        "allequal": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "fill_value": "bool"
                }
            }
        ],
        "choose": [
            {
                "type": "func",
                "args": {
                    "indices": "np.ndarray",
                    "choices": "np.ndarray",
                    "out": "MaskedArray",
                    "mode": "str"
                }
            }
        ],
        "power": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "third": "int"
                }
            }
        ],
        "MaskedArray.__rpow__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "MaskedArray.__pow__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "MaskedArray.var": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "np.ndarray",
                    "out": "np.ndarray",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.std": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "np.ndarray",
                    "out": "np.ndarray",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "MaskedArray.__ipow__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "MaskedArray.__itruediv__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "MaskedArray.__ifloordiv__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "MaskedArray.__idiv__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "MaskedArray._comparison": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray",
                    "compare": "Callable"
                }
            }
        ],
        "MaskedArray.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "MaskedArray.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "ndarray"
                }
            }
        ],
        "MaskedArray.__setitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int",
                    "value": "np.ndarray"
                }
            }
        ],
        "masked_object": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "value": "np.ndarray",
                    "copy": "bool",
                    "shrink": "bool"
                }
            }
        ],
        "masked_where": [
            {
                "type": "func",
                "args": {
                    "condition": "maskType",
                    "a": "ndarray",
                    "copy": "bool"
                }
            }
        ],
        "masked_outside": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "v1": "np.ndarray",
                    "v2": "np.ndarray",
                    "copy": "bool"
                }
            }
        ],
        "masked_inside": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "v1": "np.ndarray",
                    "v2": "np.ndarray",
                    "copy": "bool"
                }
            }
        ],
        "masked_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "value": "maskType",
                    "copy": "bool"
                }
            }
        ],
        "masked_not_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "value": "maskType",
                    "copy": "bool"
                }
            }
        ],
        "masked_less_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "value": "maskType",
                    "copy": "bool"
                }
            }
        ],
        "masked_less": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "value": "maskType",
                    "copy": "bool"
                }
            }
        ],
        "masked_greater_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "value": "maskType",
                    "copy": "bool"
                }
            }
        ],
        "masked_greater": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "value": "maskType",
                    "copy": "bool"
                }
            }
        ],
        "_MaskedBinaryOperation.accumulate": [
            {
                "type": "method",
                "args": {
                    "target": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "_MaskedBinaryOperation.reduce": [
            {
                "type": "method",
                "args": {
                    "target": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype"
                }
            }
        ],
        "_extrema_operation.reduce": [
            {
                "type": "method",
                "args": {
                    "target": "np.ndarray",
                    "axis": "np.ndarray"
                }
            }
        ],
        "_extrema_operation.__call__": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray"
                }
            }
        ],
        "MaskedArray.mini": [
            {
                "type": "method",
                "args": {
                    "axis": "np.ndarray"
                }
            }
        ],
        "sometrue": [
            {
                "type": "var",
                "anno": "_MaskedBinaryOperation"
            }
        ],
        "alltrue": [
            {
                "type": "var",
                "anno": "umath.Ufunc"
            }
        ],
        "MaskedArray.unshare_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedArray.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "obj": "ndarray",
                    "context": "tuple[Ufunc, ...]"
                }
            }
        ],
        "MaskedArray.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "data": "ndarray",
                    "mask": "MaskType",
                    "dtype": "np.dtype",
                    "copy": "bool",
                    "subok": "bool",
                    "ndmin": "int",
                    "fill_value": "np.ndarray",
                    "keep_mask": "bool",
                    "hard_mask": "bool",
                    "shrink": "bool",
                    "order": "int",
                    "options": "object"
                }
            }
        ],
        "MaskedArray.__deepcopy__": [
            {
                "type": "method",
                "args": {
                    "memo": "dict"
                }
            }
        ]
    },
    "core.tests.test_item_selection": {
        "TestTake.test_empty_argpartition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_unicode_mode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_refcounting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_empty_partition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTake.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.testutils": {
        "__all__masked": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "__some__from_testing": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "assert_array_compare": [
            {
                "type": "func",
                "args": {
                    "comparison": "Callable",
                    "x": "ndarray",
                    "y": "ndarray",
                    "err_msg": "str",
                    "verbose": "bool",
                    "header": "str",
                    "fill_value": "bool"
                }
            }
        ],
        "assert_array_less": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_array_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_mask_equal": [
            {
                "type": "func",
                "args": {
                    "m1": "mask_or_mask",
                    "m2": "mask_or_mask",
                    "err_msg": "str"
                }
            }
        ],
        "assert_equal": [
            {
                "type": "func",
                "args": {
                    "actual": "ndarray",
                    "desired": "ndarray",
                    "err_msg": "str"
                }
            }
        ],
        "assert_equal_records": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray"
                }
            }
        ],
        "_assert_equal_on_sequences": [
            {
                "type": "func",
                "args": {
                    "actual": "ndarray",
                    "desired": "ndarray",
                    "err_msg": "str"
                }
            }
        ],
        "almost": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "decimal": "int",
                    "fill_value": "bool"
                }
            }
        ],
        "assert_array_almost_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "decimal": "int",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_almost_equal": [
            {
                "type": "func",
                "args": {
                    "actual": "ndarray",
                    "desired": "ndarray",
                    "decimal": "int",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_close": [
            {
                "type": "var",
                "anno": "TestCase"
            }
        ],
        "approx": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "b": "ndarray",
                    "fill_value": "bool",
                    "rtol": "float",
                    "atol": "float"
                }
            }
        ],
        "assert_array_approx_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "decimal": "int",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "fail_if_array_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "fail_if_equal": [
            {
                "type": "func",
                "args": {
                    "actual": "Union[ndarray, np.ndarray]",
                    "desired": "Union[ndarray, np.ndarray]",
                    "err_msg": "str"
                }
            }
        ],
        "assert_not_equal": [
            {
                "type": "var",
                "anno": "TestCase"
            }
        ]
    },
    "ma.timer_comparison": {
        "pi": [
            {
                "type": "var",
                "anno": "float_"
            }
        ],
        "ModuleTester.module": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "ModuleTester.allequal": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.arange": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.array": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.concatenate": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.count": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.equal": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.filled": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.getmask": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.getmaskarray": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.id": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "ModuleTester.inner": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.make_mask": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.masked": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "ModuleTester.masked_array": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.masked_values": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.mask_or": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.nomask": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "ModuleTester.ones": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.outer": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.repeat": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.resize": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.sort": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.take": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.transpose": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.zeros": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.MaskType": [
            {
                "type": "attr",
                "anno": "typing.Type[typing.Any]"
            }
        ],
        "ModuleTester.umath": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "ModuleTester.testnames": [
            {
                "type": "attr",
                "anno": "typing.List[typing.Any]"
            }
        ],
        "ModuleTester.test_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "setup_base": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "setup_cur": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "func": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "ModuleTester.test_A": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ModuleTester.test_4": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "cur": [
            {
                "type": "var",
                "anno": "float_"
            }
        ],
        "ModuleTester.test_6": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ModuleTester.assert_array_compare": [
            {
                "type": "method",
                "args": {
                    "comparison": "typing.Callable",
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "err_msg": "str",
                    "header": "str",
                    "fill_value": "bool"
                }
            }
        ],
        "ModuleTester.assert_array_equal": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "err_msg": "str"
                }
            }
        ],
        "ModuleTester.test_5": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ModuleTester.test_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ModuleTester.test_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ModuleTester.test_7": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ModuleTester.test_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ModuleTester.__init__": [
            {
                "type": "method",
                "args": {
                    "module": "typing.Any"
                }
            }
        ],
        "ModuleTester.test_99": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "ma.bench": {
        "m1": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "m2": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "yl": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "masky": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "nmyl": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "xl": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "maskx": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "nmxl": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "zl": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "nmzl": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "ys": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "nmys": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "xs": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "nmxs": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "zs": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "nmzs": [
            {
                "type": "var",
                "anno": "numpy.ndarray"
            }
        ],
        "timer": [
            {
                "type": "func",
                "args": {
                    "s": "str",
                    "v": "str",
                    "nloop": "int",
                    "nrep": "int"
                }
            }
        ],
        "compare_functions_2v": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "nloop": "int",
                    "test": "bool",
                    "xs": "numpy.ndarray",
                    "nmxs": "numpy.ndarray",
                    "ys": "numpy.ndarray",
                    "nmys": "numpy.ndarray",
                    "xl": "numpy.ndarray",
                    "nmxl": "numpy.ndarray",
                    "yl": "numpy.ndarray",
                    "nmyl": "numpy.ndarray"
                }
            }
        ],
        "compare_methods": [
            {
                "type": "func",
                "args": {
                    "methodname": "str",
                    "args": "tuple",
                    "vars": "str",
                    "nloop": "int",
                    "test": "bool",
                    "xs": "numpy.ndarray",
                    "nmxs": "numpy.ndarray",
                    "xl": "numpy.ndarray",
                    "nmxl": "numpy.ndarray"
                }
            }
        ],
        "compare_functions_1v": [
            {
                "type": "func",
                "args": {
                    "func": "numpy.ndarray",
                    "nloop": "int",
                    "xs": "numpy.ndarray",
                    "nmxs": "numpy.ndarray",
                    "xl": "numpy.ndarray",
                    "nmxl": "numpy.ndarray"
                }
            }
        ]
    },
    "ma": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ]
    },
    "ma.mrecords": {
        "_byteorderconv": [
            {
                "type": "var",
                "anno": "Callable[[], int]"
            }
        ],
        "_check_fill_value": [
            {
                "type": "var",
                "anno": "Callable[[], ma.core.Record]"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "reserved_fields": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "MaskedRecords._mask": [
            {
                "type": "attr",
                "anno": "tuple[bool, ...]"
            }
        ],
        "MaskedRecords._sharedmask": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MaskedRecords._data": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords._fieldmask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords.__setitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int",
                    "value": "int"
                }
            }
        ],
        "MaskedRecords._hardmask": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "MaskedRecords.harden_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords.soften_mask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords.fill_value": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "MaskedRecords.__setattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "val": "int"
                }
            }
        ],
        "mrecarray": [
            {
                "type": "var",
                "anno": "maskedrecords"
            }
        ],
        "_checknames": [
            {
                "type": "func",
                "args": {
                    "descr": "ma.Series",
                    "names": "typing.Union[str, tuple, list, str]"
                }
            }
        ],
        "openfile": [
            {
                "type": "func",
                "args": {
                    "fname": "str"
                }
            }
        ],
        "MaskedRecords.view": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype",
                    "type": "np.dtype"
                }
            }
        ],
        "_mrreconstruct": [
            {
                "type": "func",
                "args": {
                    "subtype": "type",
                    "baseclass": "type",
                    "baseshape": "tuple",
                    "basetype": "str"
                }
            }
        ],
        "MaskedRecords.__getitem__": [
            {
                "type": "method",
                "args": {
                    "indx": "int"
                }
            }
        ],
        "addfield": [
            {
                "type": "func",
                "args": {
                    "mrecord": "MaskedRecords",
                    "newfield": "np.ndarray",
                    "newfieldname": "str"
                }
            }
        ],
        "_guessvartypes": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "MaskedRecords.__setstate__": [
            {
                "type": "method",
                "args": {
                    "state": "tuple"
                }
            }
        ],
        "MaskedRecords.__getstate__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords.__reduce__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "shape": "tuple[int, ...]",
                    "dtype": "np.dtype",
                    "buf": "np.ndarray",
                    "offset": "int",
                    "strides": "tuple[int, ...]",
                    "formats": "tuple[str, ...]",
                    "names": "tuple[str, ...]",
                    "titles": "tuple[str, ...]",
                    "byteorder": "byteorder",
                    "aligned": "bool",
                    "mask": "np.ndarray",
                    "hard_mask": "bool",
                    "fill_value": "np.ndarray",
                    "keep_mask": "bool",
                    "copy": "bool",
                    "options": "object"
                }
            }
        ],
        "MaskedRecords.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "ndarray"
                }
            }
        ],
        "fromarrays": [
            {
                "type": "func",
                "args": {
                    "arraylist": "list",
                    "dtype": "np.dtype",
                    "shape": "tuple[int, ...]",
                    "formats": "tuple[str, ...]",
                    "names": "tuple[str, ...]",
                    "titles": "tuple[str, ...]",
                    "aligned": "bool",
                    "byteorder": "int",
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "_get_fieldmask": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "MaskedRecords.copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "MaskedRecords.tolist": [
            {
                "type": "method",
                "args": {
                    "fill_value": "np.ndarray"
                }
            }
        ],
        "fromrecords": [
            {
                "type": "func",
                "args": {
                    "reclist": "Union[ndarray, MaskedArray]",
                    "dtype": "np.dtype",
                    "shape": "np.ndarray",
                    "formats": "np.ndarray",
                    "names": "np.ndarray",
                    "titles": "np.ndarray",
                    "aligned": "bool",
                    "byteorder": "np.byteorder",
                    "fill_value": "np.ndarray",
                    "mask": "np.ndarray"
                }
            }
        ],
        "fromtextfile": [
            {
                "type": "func",
                "args": {
                    "fname": "str",
                    "delimitor": "typing.Callable",
                    "commentchar": "str",
                    "missingchar": "str",
                    "varnames": "tuple[str, ...]",
                    "vartypes": "list"
                }
            }
        ],
        "MaskedRecords.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MaskedRecords.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "compat._inspect": {
        "__all__": [
            {
                "type": "var",
                "anno": "types.List[str]"
            }
        ],
        "ismethod": [
            {
                "type": "func",
                "args": {
                    "object": "types.CallableType"
                }
            }
        ],
        "isfunction": [
            {
                "type": "func",
                "args": {
                    "object": "types.CallableType"
                }
            }
        ],
        "iscode": [
            {
                "type": "func",
                "args": {
                    "object": "types.CodeType"
                }
            }
        ],
        "getargs": [
            {
                "type": "func",
                "args": {
                    "co": "types.CodeType"
                }
            }
        ],
        "getargspec": [
            {
                "type": "func",
                "args": {
                    "func": "types.CallableType"
                }
            }
        ],
        "getargvalues": [
            {
                "type": "func",
                "args": {
                    "frame": "types.CodeType"
                }
            }
        ],
        "joinseq": [
            {
                "type": "func",
                "args": {
                    "seq": "list"
                }
            }
        ],
        "strseq": [
            {
                "type": "func",
                "args": {
                    "object": "str",
                    "convert": "types.Type[str]",
                    "join": "str"
                }
            }
        ],
        "formatargvalues": [
            {
                "type": "func",
                "args": {
                    "args": "list",
                    "varargs": "bool",
                    "varkw": "bool",
                    "locals": "dict",
                    "formatarg": "types.Type[str]",
                    "formatvarargs": "types.Type[str]",
                    "formatvarkw": "types.Type[str]",
                    "formatvalue": "types.Type[str]",
                    "join": "str"
                }
            }
        ],
        "formatargspec": [
            {
                "type": "func",
                "args": {
                    "args": "list",
                    "varargs": "types.Optional[types.Type[str]]",
                    "varkw": "types.Optional[types.Type[str]]",
                    "defaults": "types.Optional[types.Type[str]]",
                    "formatarg": "Any",
                    "formatvarargs": "types.Type[str]",
                    "formatvarkw": "types.Type[str]",
                    "formatvalue": "types.Type[str]",
                    "join": "str"
                }
            }
        ]
    },
    "compat.tests.test_compat": {
        "test_isfileobj": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "compat.py3k": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "long": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "integer_types": [
            {
                "type": "var",
                "anno": "tuple[type, ...]"
            }
        ],
        "basestring": [
            {
                "type": "var",
                "anno": "basestring"
            }
        ],
        "unicode": [
            {
                "type": "var",
                "anno": "basestring"
            }
        ],
        "bytes": [
            {
                "type": "var",
                "anno": "bytes"
            }
        ],
        "isfileobj": [
            {
                "type": "func",
                "args": {
                    "f": "object"
                }
            }
        ],
        "open_latin1": [
            {
                "type": "func",
                "args": {
                    "filename": "str",
                    "mode": "str"
                }
            }
        ],
        "sixu": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "strchar": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "getexception": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "is_pathlib_path": [
            {
                "type": "func",
                "args": {
                    "obj": "PurePath"
                }
            }
        ],
        "contextlib_nullcontext.enter_result": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "contextlib_nullcontext.__init__": [
            {
                "type": "method",
                "args": {
                    "enter_result": "str"
                }
            }
        ],
        "contextlib_nullcontext.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "contextlib_nullcontext.__exit__": [
            {
                "type": "method",
                "args": {
                    "excinfo": "str"
                }
            }
        ],
        "npy_load_module": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "fn": "str",
                    "info": "str"
                }
            }
        ],
        "_PurePath__fspath__": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "os_PathLike.__fspath__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "os_PathLike.__subclasshook__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "subclass": "type"
                }
            }
        ],
        "os_fspath": [
            {
                "type": "func",
                "args": {
                    "path": "Union[str, bytes, os.PathLike]"
                }
            }
        ],
        "asbytes": [
            {
                "type": "func",
                "args": {
                    "s": "Union[bytes, unicode]"
                }
            }
        ],
        "asbytes_nested": [
            {
                "type": "func",
                "args": {
                    "x": "Union[bytes, unicode]"
                }
            }
        ],
        "asstr": [
            {
                "type": "func",
                "args": {
                    "s": "typing.Union[bytes, str]"
                }
            }
        ],
        "asunicode": [
            {
                "type": "func",
                "args": {
                    "s": "Union[bytes, unicode]"
                }
            }
        ],
        "asunicode_nested": [
            {
                "type": "func",
                "args": {
                    "x": "Union[bytes, unicode]"
                }
            }
        ]
    },
    "compat": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ]
    },
    "_globals": {
        "__ALL__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_is_loaded": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "_NoValueType.__instance": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "_NoValueType.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "_NoValueType.__reduce__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_NoValueType.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_NoValue": [
            {
                "type": "var",
                "anno": "_NoValueType"
            }
        ]
    },
    "testing.utils": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ]
    },
    "testing.tests.test_utils": {
        "TestArrayEqual._assert_func": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray, np.ndarray], np.ndarray]"
            }
        ],
        "TestArrayEqual.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.test_0_ndim_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.MyArray.__array_function__": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestBuildErrorMessage.test_build_err_msg_defaults": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBuildErrorMessage.test_build_err_msg_no_verbose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBuildErrorMessage.test_build_err_msg_custom_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBuildErrorMessage.test_build_err_msg_custom_precision": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual._assert_func": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray], np.ndarray]"
            }
        ],
        "TestEqual.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqual._assert_func": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "TestArrayAlmostEqual.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqual.test_closeness": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqual.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqual.test_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqual.MyArray.all": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestAlmostEqual._assert_func": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "TestAlmostEqual.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.test_closeness": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.test_nan_item": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.test_inf_item": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.MyArray.all": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestApproxEqual._assert_func": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray, np.ndarray], np.ndarray]"
            }
        ],
        "TestApproxEqual.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApproxEqual.test_simple_0d_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApproxEqual.test_simple_items": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApproxEqual.test_nan_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApproxEqual.test_nan_items": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess._assert_func": [
            {
                "type": "attr",
                "anno": "Callable[[np.ndarray, np.ndarray], np.ndarray]"
            }
        ],
        "TestArrayAssertLess.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_GenericTest._test_not_equal": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray"
                }
            }
        ],
        "TestAlmostEqual.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.test_complex_item": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.test_simple_item": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_negative_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_complex_item": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_non_numeric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_nat_items": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_inf_items": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_nan_items": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_GenericTest.test_array_diffshape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_GenericTest.test_array_rank1_noteq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_GenericTest._test_equal": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray"
                }
            }
        ],
        "TestArrayAlmostEqual.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEqual.test_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.test_masked_nan_inf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.test_string_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.test_nan_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_GenericTest.test_array_likes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_GenericTest.test_objarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_GenericTest.test_array_rank2_eq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_GenericTest.test_array_rank1_eq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess.test_simple_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess.test_rank2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess.test_rank3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess.test_simple_items": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess.test_nan_noncompare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess.test_nan_noncompare_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess.test_inf_compare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAssertLess.test_inf_compare_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRaises.e": [
            {
                "type": "attr",
                "anno": "Exception"
            }
        ],
        "TestRaises.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRaises.raises_exception": [
            {
                "type": "method",
                "args": {
                    "e": "Exception"
                }
            }
        ],
        "TestRaises.does_not_raise_exception": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRaises.test_correct_catch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRaises.test_wrong_exception": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRaises.test_catch_no_raise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWarns.test_warn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWarns.test_context_manager": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWarns.test_warn_wrong_warning": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertAllclose.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertAllclose.test_equal_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertAllclose.test_not_equal_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertAllclose.test_equal_nan_default": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestULP.test_equal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringEqual.test_regex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "assert_warn_len_equal": [
            {
                "type": "func",
                "args": {
                    "mod": "np.ndarray",
                    "n_in_context": "int",
                    "py34": "int",
                    "py37": "int"
                }
            }
        ],
        "test_warn_len_equal_call_scenarios": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_get_fresh_mod": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_clear_and_catch_warnings": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_tempdir": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_temppath": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "my_cacw.class_modules": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "test_clear_and_catch_warnings_inherit": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestAssertNoGcCycles.test_passes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertNoGcCycles.test_asserts": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertNoGcCycles.ReferenceCycleInDel.make_cycle": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "TestAssertNoGcCycles.ReferenceCycleInDel.cycle": [
            {
                "type": "attr",
                "anno": "weakref.ReferenceCycle"
            }
        ],
        "TestAssertNoGcCycles.ReferenceCycleInDel.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertNoGcCycles.test_fails": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertNoGcCycles.ReferenceCycleInDel.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringEqual.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertAllclose.test_report_max_relative_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertAllclose.test_report_fail_percentage": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.test_error_message_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.test_error_message": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestULP.test_double": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestULP.test_single": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAlmostEqual.MyArray.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "TestAlmostEqual.MyArray.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestAlmostEqual.test_subclass_that_cannot_be_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqual.MyArray.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "TestArrayAlmostEqual.MyArray.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestArrayAlmostEqual.test_subclass_that_cannot_be_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.test_subclass_that_does_not_implement_npall": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.test_subclass_that_overrides_eq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_complex64_fail": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_complex64_pass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_complex128_fail": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_complex128_pass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_float16_fail": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_float16_pass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_float32_fail": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_float32_pass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_float64_fail": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqualNulp.test_float64_pass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayAlmostEqual.test_inf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.test_generic_rank3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayEqual.test_generic_rank1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestULP.test_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestULP.test_inf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssertAllclose.test_min_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_suppress_warnings_forwarding": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestArrayEqual.test_recarrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_suppress_warnings_record": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_suppress_warnings_decorate_no_record": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_suppress_warnings_type": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_suppress_warnings_module": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "testing.tests.test_doctesting": {
        "check_random_directive": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "check_implicit_np": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "check_whitespace_enabled": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "check_empty_output": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "check_skip": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "argv": [
            {
                "type": "var",
                "anno": "list"
            }
        ]
    },
    "testing.tests.test_decorators": {
        "HAVE_NOSE": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "TestNoseDecorators.test_slow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNoseDecorators.test_setastest": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNoseDecorators.test_skip_functions_hardcoded": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNoseDecorators.test_skip_functions_callable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNoseDecorators.test_skip_generators_hardcoded": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNoseDecorators.test_skip_generators_callable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNoseDecorators.test_deprecated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNoseDecorators.test_parametrize": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "testing.print_coercion_tables": {
        "GenericObject.v": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "GenericObject.__init__": [
            {
                "type": "method",
                "args": {
                    "v": "np.ndarray"
                }
            }
        ],
        "GenericObject.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "GenericObject"
                }
            }
        ],
        "GenericObject.__radd__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "GenericObject.dtype": [
            {
                "type": "attr",
                "anno": "np.dtype"
            }
        ],
        "print_cancast_table": [
            {
                "type": "func",
                "args": {
                    "ntypes": "np.typecodes"
                }
            }
        ],
        "print_coercion_table": [
            {
                "type": "func",
                "args": {
                    "ntypes": "np.typecodes",
                    "inputfirstvalue": "np.ndarray",
                    "inputsecondvalue": "np.ndarray",
                    "firstarray": "bool",
                    "use_promote_types": "bool"
                }
            }
        ]
    },
    "testing": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "TestCase"
            }
        ]
    },
    "testing._private.utils": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "KnownFailureTest": [
            {
                "type": "var",
                "anno": "unittest.TestCase"
            }
        ],
        "verbose": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "IS_PYPY": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "HAS_REFCOUNT": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "HAS_LAPACK64": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "import_nose": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "assert_": [
            {
                "type": "func",
                "args": {
                    "val": "bool",
                    "msg": "WarningMessage"
                }
            }
        ],
        "gisnan": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "gisfinite": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "gisinf": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "GetPerformanceAttributes": [
            {
                "type": "func",
                "args": {
                    "object": "str",
                    "counter": "str",
                    "instance": "str",
                    "inum": "int",
                    "format": "str",
                    "machine": "str"
                }
            }
        ],
        "memusage": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "jiffies": [
            {
                "type": "func",
                "args": {
                    "_load_time": "list"
                }
            }
        ],
        "runstring": [
            {
                "type": "func",
                "args": {
                    "astr": "str",
                    "dict": "dict"
                }
            }
        ],
        "raises": [
            {
                "type": "func",
                "args": {
                    "args": "str"
                }
            }
        ],
        "_Dummy.nop": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_d": [
            {
                "type": "var",
                "anno": "_Dummy"
            }
        ],
        "assert_raises": [
            {
                "type": "func",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "assert_raises_regex": [
            {
                "type": "func",
                "args": {
                    "exception_class": "type[Exception]",
                    "expected_regexp": "str",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "decorate_methods": [
            {
                "type": "func",
                "args": {
                    "cls": "typing.Any",
                    "decorator": "typing.Callable",
                    "testmatch": "str"
                }
            }
        ],
        "measure": [
            {
                "type": "func",
                "args": {
                    "code_str": "str",
                    "times": "int",
                    "label": "str"
                }
            }
        ],
        "_assert_no_warnings_context": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "assert_no_warnings": [
            {
                "type": "func",
                "args": {
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "_gen_alignment_data": [
            {
                "type": "func",
                "args": {
                    "dtype": "float",
                    "type": "str",
                    "max_size": "int"
                }
            }
        ],
        "tempdir": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "temppath": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "clear_and_catch_warnings.class_modules": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "clear_and_catch_warnings.modules": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "clear_and_catch_warnings._warnreg_copies": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "clear_and_catch_warnings.__init__": [
            {
                "type": "method",
                "args": {
                    "record": "bool",
                    "modules": "tuple"
                }
            }
        ],
        "suppress_warnings._entered": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "suppress_warnings._suppressions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "suppress_warnings._forwarding_rule": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "suppress_warnings.__init__": [
            {
                "type": "method",
                "args": {
                    "forwarding_rule": "str"
                }
            }
        ],
        "suppress_warnings._orig_show": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "suppress_warnings._filters": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "suppress_warnings._tmp_suppressions": [
            {
                "type": "attr",
                "anno": "list[tuple[str, str, str, str]]"
            }
        ],
        "suppress_warnings._tmp_modules": [
            {
                "type": "attr",
                "anno": "set[str]"
            }
        ],
        "suppress_warnings._clear_registries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "suppress_warnings._forwarded": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "suppress_warnings.log": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "suppress_warnings.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_info": "typing.Any"
                }
            }
        ],
        "suppress_warnings.__call__": [
            {
                "type": "method",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "break_cycles": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_no_tracing": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "print_assert_equal": [
            {
                "type": "func",
                "args": {
                    "test_string": "str",
                    "actual": "str",
                    "desired": "str"
                }
            }
        ],
        "_integer_repr": [
            {
                "type": "func",
                "args": {
                    "x": "numpy.ndarray",
                    "vdt": "np.dtype",
                    "comp": "np.ndarray"
                }
            }
        ],
        "clear_and_catch_warnings.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_info": "typing.Any"
                }
            }
        ],
        "integer_repr": [
            {
                "type": "func",
                "args": {
                    "x": "numpy.ndarray"
                }
            }
        ],
        "nulp_diff": [
            {
                "type": "func",
                "args": {
                    "x": "numpy.ndarray",
                    "y": "numpy.ndarray",
                    "dtype": "np.ndarray"
                }
            }
        ],
        "assert_array_max_ulp": [
            {
                "type": "func",
                "args": {
                    "a": "numpy.ndarray",
                    "b": "numpy.ndarray",
                    "maxulp": "int",
                    "dtype": "np.ndarray"
                }
            }
        ],
        "assert_array_almost_equal_nulp": [
            {
                "type": "func",
                "args": {
                    "x": "numpy.ndarray",
                    "y": "numpy.ndarray",
                    "nulp": "int"
                }
            }
        ],
        "_assert_valid_refcount": [
            {
                "type": "func",
                "args": {
                    "op": "Callable[[ndarray, ndarray], ndarray]"
                }
            }
        ],
        "clear_and_catch_warnings.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "suppress_warnings._showwarning": [
            {
                "type": "method",
                "args": {
                    "message": "WarningMessage",
                    "category": "str",
                    "filename": "str",
                    "lineno": "int",
                    "args": "int",
                    "use_warnmsg": "typing.Optional[str]",
                    "kwargs": "str"
                }
            }
        ],
        "_get_mem_available": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "suppress_warnings.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "suppress_warnings._filter": [
            {
                "type": "method",
                "args": {
                    "category": "WarningMessage",
                    "message": "str",
                    "module": "str",
                    "record": "bool"
                }
            }
        ],
        "suppress_warnings.record": [
            {
                "type": "method",
                "args": {
                    "category": "WarningMessage",
                    "message": "str",
                    "module": "str"
                }
            }
        ],
        "_assert_warns_context": [
            {
                "type": "func",
                "args": {
                    "warning_class": "WarningMessage",
                    "name": "str"
                }
            }
        ],
        "assert_warns": [
            {
                "type": "func",
                "args": {
                    "warning_class": "WarningMessage",
                    "args": "Any",
                    "kwargs": "Any"
                }
            }
        ],
        "suppress_warnings.filter": [
            {
                "type": "method",
                "args": {
                    "category": "WarningMessage",
                    "message": "str",
                    "module": "str"
                }
            }
        ],
        "_parse_size": [
            {
                "type": "func",
                "args": {
                    "size_str": "str"
                }
            }
        ],
        "check_free_memory": [
            {
                "type": "func",
                "args": {
                    "free_bytes": "int"
                }
            }
        ],
        "requires_memory": [
            {
                "type": "func",
                "args": {
                    "free_bytes": "int"
                }
            }
        ],
        "_assert_no_gc_cycles_context": [
            {
                "type": "func",
                "args": {
                    "name": "typing.Optional[str]"
                }
            }
        ],
        "assert_no_gc_cycles": [
            {
                "type": "func",
                "args": {
                    "args": "typing.Any",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "rundocs": [
            {
                "type": "func",
                "args": {
                    "filename": "typing.Optional[str]",
                    "raise_on_error": "bool"
                }
            }
        ],
        "assert_string_equal": [
            {
                "type": "func",
                "args": {
                    "actual": "str",
                    "desired": "str"
                }
            }
        ],
        "build_err_msg": [
            {
                "type": "func",
                "args": {
                    "arrays": "list",
                    "err_msg": "str",
                    "header": "str",
                    "verbose": "bool",
                    "names": "tuple",
                    "precision": "int"
                }
            }
        ],
        "assert_array_compare": [
            {
                "type": "func",
                "args": {
                    "comparison": "operator",
                    "x": "ndarray",
                    "y": "ndarray",
                    "err_msg": "str",
                    "verbose": "bool",
                    "header": "str",
                    "precision": "int",
                    "equal_nan": "bool",
                    "equal_inf": "bool"
                }
            }
        ],
        "assert_allclose": [
            {
                "type": "func",
                "args": {
                    "actual": "ndarray",
                    "desired": "ndarray",
                    "rtol": "float",
                    "atol": "float",
                    "equal_nan": "bool",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_array_less": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_array_almost_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "decimal": "int",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_array_equal": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_approx_equal": [
            {
                "type": "func",
                "args": {
                    "actual": "float",
                    "desired": "float",
                    "significant": "int",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_almost_equal": [
            {
                "type": "func",
                "args": {
                    "actual": "ndarray",
                    "desired": "ndarray",
                    "decimal": "int",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ],
        "assert_equal": [
            {
                "type": "func",
                "args": {
                    "actual": "object",
                    "desired": "object",
                    "err_msg": "str",
                    "verbose": "bool"
                }
            }
        ]
    },
    "testing._private.noseclasses": {
        "NumpyDocTestFinder._from_module": [
            {
                "type": "method",
                "args": {
                    "module": "str",
                    "object": "object"
                }
            }
        ],
        "NumpyDocTestFinder._find": [
            {
                "type": "method",
                "args": {
                    "tests": "dict",
                    "obj": "object",
                    "name": "str",
                    "module": "str",
                    "source_lines": "str",
                    "globs": "str",
                    "seen": "str"
                }
            }
        ],
        "NumpyDocTestCase._result_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NumpyDocTestCase._nose_obj": [
            {
                "type": "attr",
                "anno": "npd.DocTest"
            }
        ],
        "NumpyDocTestCase.__init__": [
            {
                "type": "method",
                "args": {
                    "test": "str",
                    "optionflags": "int",
                    "setUp": "str",
                    "tearDown": "str",
                    "checker": "str",
                    "obj": "npd.DocTest",
                    "result_var": "str"
                }
            }
        ],
        "print_state": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "NumpyDoctest.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NumpyDoctest.score": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NumpyDoctest.doctest_optflags": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NumpyDoctest.doctest_ignore": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "NumpyDoctest.doctest_case_class": [
            {
                "type": "attr",
                "anno": "typing.Type[npd.DocTestCase]"
            }
        ],
        "NumpyDoctest.out_check_class": [
            {
                "type": "attr",
                "anno": "typing.Type[npd.DocTestChecker]"
            }
        ],
        "NumpyDoctest.test_finder_class": [
            {
                "type": "attr",
                "anno": "typing.Type[npd.DocTestFinder]"
            }
        ],
        "NumpyDoctest.doctest_tests": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NumpyDoctest.doctest_result_var": [
            {
                "type": "attr",
                "anno": "typing.Optional[npd.DocTestResult]"
            }
        ],
        "NumpyDoctest.options": [
            {
                "type": "method",
                "args": {
                    "parser": "typing.Any",
                    "env": "typing.Any"
                }
            }
        ],
        "NumpyDoctest.finder": [
            {
                "type": "attr",
                "anno": "NumpyDocTestFinder"
            }
        ],
        "NumpyDoctest.parser": [
            {
                "type": "attr",
                "anno": "doctest.DocTestParser"
            }
        ],
        "NumpyDoctest.afterContext": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NumpyDoctest.wantFile": [
            {
                "type": "method",
                "args": {
                    "file": "str"
                }
            }
        ],
        "Unplugger.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Unplugger.enabled": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "Unplugger.score": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Unplugger.to_unplug": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Unplugger.__init__": [
            {
                "type": "method",
                "args": {
                    "to_unplug": "str"
                }
            }
        ],
        "Unplugger.options": [
            {
                "type": "method",
                "args": {
                    "parser": "typing.Any",
                    "env": "typing.Any"
                }
            }
        ],
        "KnownFailurePlugin.enabled": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KnownFailurePlugin.knownfail": [
            {
                "type": "attr",
                "anno": "ErrorClass"
            }
        ],
        "KnownFailurePlugin.conf": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "KnownFailurePlugin.configure": [
            {
                "type": "method",
                "args": {
                    "options": "dict",
                    "conf": "str"
                }
            }
        ],
        "KnownFailure": [
            {
                "type": "var",
                "anno": "Plugin"
            }
        ],
        "NumpyTestProgram.testRunner": [
            {
                "type": "attr",
                "anno": "nose.core.TextTestRunner"
            }
        ],
        "NumpyTestProgram.result": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "NumpyTestProgram.success": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "KnownFailurePlugin.options": [
            {
                "type": "method",
                "args": {
                    "parser": "Any",
                    "env": "dict"
                }
            }
        ],
        "Unplugger.configure": [
            {
                "type": "method",
                "args": {
                    "options": "dict",
                    "config": "nose.config.Config"
                }
            }
        ],
        "NumpyDoctest.configure": [
            {
                "type": "method",
                "args": {
                    "options": "dict",
                    "config": "npd.Doctest"
                }
            }
        ],
        "NumpyOutputChecker.check_output": [
            {
                "type": "method",
                "args": {
                    "want": "str",
                    "got": "str",
                    "optionflags": "int"
                }
            }
        ],
        "FPUModeCheckPlugin.prepareTestCase": [
            {
                "type": "method",
                "args": {
                    "test": "NumpyTestProgram"
                }
            }
        ],
        "NumpyTestProgram.runTests": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NumpyDoctest.set_test_context": [
            {
                "type": "method",
                "args": {
                    "test": "npd.DocTest"
                }
            }
        ],
        "NumpyDoctest.loadTestsFromModule": [
            {
                "type": "method",
                "args": {
                    "module": "typing.Callable"
                }
            }
        ]
    },
    "testing._private.parameterized": {
        "MaybeOrderedDict": [
            {
                "type": "var",
                "anno": "MaybeOrderedDict"
            }
        ],
        "_param": [
            {
                "type": "var",
                "anno": "namedtuple"
            }
        ],
        "param.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[param]",
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "param.explicit": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[param.param]",
                    "args": "Union[list, tuple, None]",
                    "kwargs": "Union[dict, dict, None]"
                }
            }
        ],
        "param.from_decorator": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "args": "Callable"
                }
            }
        ],
        "param.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "QuietOrderedDict.__str__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "QuietOrderedDict.__repr__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "short_repr": [
            {
                "type": "func",
                "args": {
                    "x": "typing.Any",
                    "n": "int"
                }
            }
        ],
        "_test_runner_override": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_test_runner_guess": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "_test_runners": [
            {
                "type": "var",
                "anno": "set[str]"
            }
        ],
        "_test_runner_aliases": [
            {
                "type": "var",
                "anno": "dict[str, str]"
            }
        ],
        "parameterized.get_input": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "parameterized.doc_func": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "parameterized.param_as_nose_tuple": [
            {
                "type": "method",
                "args": {
                    "test_self": "TestCase",
                    "func": "Callable",
                    "num": "int",
                    "p": "param"
                }
            }
        ],
        "parameterized.check_input_values": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "input_values": "Callable"
                }
            }
        ],
        "parameterized.input_as_callable": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "input": "Callable"
                }
            }
        ],
        "parameterized.param_as_standalone_func": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "p": "param.Parameter",
                    "func": "Callable",
                    "name": "str"
                }
            }
        ],
        "parameterized.to_safe_name": [
            {
                "type": "method",
                "args": {
                    "cls": "Type[param.Parameter]",
                    "s": "str"
                }
            }
        ],
        "default_name_func": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "num": "int",
                    "p": "param.Parameter"
                }
            }
        ],
        "parameterized_argument_value_pairs": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "p": "param.Parameter"
                }
            }
        ],
        "parameterized._terrible_magic_get_defining_classes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "parameterized.assert_not_in_testcase_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "parameterized.__call__": [
            {
                "type": "method",
                "args": {
                    "test_func": "Callable"
                }
            }
        ],
        "detect_runner": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "set_test_runner": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "default_doc_func": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "num": "int",
                    "p": "param.Parameter"
                }
            }
        ],
        "parameterized.expand": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "input": "Callable",
                    "name_func": "typing.Optional[str]",
                    "doc_func": "typing.Optional[str]",
                    "legacy": "typing.Any"
                }
            }
        ],
        "parameterized.__init__": [
            {
                "type": "method",
                "args": {
                    "input": "Callable",
                    "doc_func": "typing.Optional[str]"
                }
            }
        ]
    },
    "testing._private.decorators": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "slow": [
            {
                "type": "func",
                "args": {
                    "t": "SkipTest"
                }
            }
        ],
        "setastest": [
            {
                "type": "func",
                "args": {
                    "tf": "bool"
                }
            }
        ],
        "skipif": [
            {
                "type": "func",
                "args": {
                    "skip_condition": "Union[bool, collections.abc.Callable]",
                    "msg": "str"
                }
            }
        ],
        "knownfailureif": [
            {
                "type": "func",
                "args": {
                    "fail_condition": "Union[bool, collections.abc.Callable]",
                    "msg": "str"
                }
            }
        ],
        "_needs_refcount": [
            {
                "type": "var",
                "anno": "SkipTest"
            }
        ],
        "deprecated": [
            {
                "type": "func",
                "args": {
                    "conditional": "bool"
                }
            }
        ],
        "parametrize": [
            {
                "type": "func",
                "args": {
                    "vars": "typing.List[str]",
                    "input": "Callable"
                }
            }
        ]
    },
    "testing._private.nosetester": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "NoseTester.package_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NoseTester.package_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NoseTester.raise_warnings": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NoseTester.check_fpu_mode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NoseTester._test_argv": [
            {
                "type": "method",
                "args": {
                    "label": "str",
                    "verbose": "int",
                    "extra_argv": "list"
                }
            }
        ],
        "NoseTester._get_custom_doctester": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NoseTester.prepare_test_args": [
            {
                "type": "method",
                "args": {
                    "label": "str",
                    "verbose": "int",
                    "extra_argv": "list",
                    "doctests": "bool",
                    "coverage": "bool",
                    "timer": "int"
                }
            }
        ],
        "NoseTester._show_system_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NoseTester.test": [
            {
                "type": "method",
                "args": {
                    "label": "str",
                    "verbose": "int",
                    "extra_argv": "list",
                    "doctests": "bool",
                    "coverage": "bool",
                    "raise_warnings": "str",
                    "timer": "int"
                }
            }
        ],
        "NoseTester.bench": [
            {
                "type": "method",
                "args": {
                    "label": "str",
                    "verbose": "int",
                    "extra_argv": "list"
                }
            }
        ],
        "run_module_suite": [
            {
                "type": "func",
                "args": {
                    "file_to_run": "str",
                    "argv": "list"
                }
            }
        ],
        "get_package_name": [
            {
                "type": "func",
                "args": {
                    "filepath": "str"
                }
            }
        ],
        "NoseTester.__init__": [
            {
                "type": "method",
                "args": {
                    "package": "str",
                    "raise_warnings": "str",
                    "depth": "int",
                    "check_fpu_mode": "bool"
                }
            }
        ],
        "_numpy_tester": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "matlib": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "empty": [
            {
                "type": "func",
                "args": {
                    "shape": "tuple",
                    "dtype": "dtype",
                    "order": "str"
                }
            }
        ],
        "ones": [
            {
                "type": "func",
                "args": {
                    "shape": "tuple",
                    "dtype": "str",
                    "order": "str"
                }
            }
        ],
        "zeros": [
            {
                "type": "func",
                "args": {
                    "shape": "tuple",
                    "dtype": "str",
                    "order": "str"
                }
            }
        ],
        "eye": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "M": "np.ndarray",
                    "k": "int",
                    "dtype": "str",
                    "order": "str"
                }
            }
        ],
        "rand": [
            {
                "type": "func",
                "args": {
                    "args": "int"
                }
            }
        ],
        "randn": [
            {
                "type": "func",
                "args": {
                    "args": "int"
                }
            }
        ],
        "identity": [
            {
                "type": "func",
                "args": {
                    "n": "tuple",
                    "dtype": "dtype"
                }
            }
        ],
        "repmat": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "m": "int",
                    "n": "int"
                }
            }
        ]
    },
    "_pytesttester": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "PytestTester.module_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PytestTester.__init__": [
            {
                "type": "method",
                "args": {
                    "module_name": "str"
                }
            }
        ],
        "_show_numpy_info": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "PytestTester.__call__": [
            {
                "type": "method",
                "args": {
                    "label": "str",
                    "verbose": "int",
                    "extra_argv": "list",
                    "doctests": "bool",
                    "coverage": "bool",
                    "durations": "int",
                    "tests": "list"
                }
            }
        ]
    },
    "distutils.ccompiler": {
        "_job_semaphore": [
            {
                "type": "var",
                "anno": "threading.Semaphore"
            }
        ],
        "_global_lock": [
            {
                "type": "var",
                "anno": "threading.Lock"
            }
        ],
        "_processing_files": [
            {
                "type": "var",
                "anno": "set"
            }
        ],
        "replace_method": [
            {
                "type": "func",
                "args": {
                    "klass": "compiler_class",
                    "method_name": "str",
                    "func": "compiler_class"
                }
            }
        ],
        "CCompiler_find_executables": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "new_compiler": [
            {
                "type": "func",
                "args": {
                    "plat": "str",
                    "compiler": "str",
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ],
        "_distutils_new_compiler": [
            {
                "type": "var",
                "anno": "CCompiler"
            }
        ],
        "gen_lib_options": [
            {
                "type": "func",
                "args": {
                    "compiler": "CCompiler",
                    "library_dirs": "str",
                    "runtime_library_dirs": "str",
                    "libraries": "str"
                }
            }
        ],
        "_distutils_gen_lib_options": [
            {
                "type": "var",
                "anno": "compiler_class"
            }
        ],
        "_m": [
            {
                "type": "var",
                "anno": "compiler_class"
            }
        ],
        "CCompiler_customize_cmd": [
            {
                "type": "func",
                "args": {
                    "cmd": "CCompiler",
                    "ignore": "typing.List[str]"
                }
            }
        ],
        "CCompiler_object_filenames": [
            {
                "type": "func",
                "args": {
                    "source_filenames": "typing.List[str]",
                    "strip_dir": "int",
                    "output_dir": "str"
                }
            }
        ],
        "CCompiler_cxx_compiler": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "CCompiler_get_version": [
            {
                "type": "func",
                "args": {
                    "force": "bool",
                    "ok_status": "list"
                }
            }
        ],
        "simple_version_match": [
            {
                "type": "func",
                "args": {
                    "pat": "str",
                    "ignore": "str",
                    "start": "str"
                }
            }
        ],
        "CCompiler_customize": [
            {
                "type": "func",
                "args": {
                    "dist": "dist.dist",
                    "need_cxx": "int"
                }
            }
        ],
        "_compiler_to_string": [
            {
                "type": "func",
                "args": {
                    "compiler": "CCompiler"
                }
            }
        ],
        "CCompiler_show_customization": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "CCompiler_spawn": [
            {
                "type": "func",
                "args": {
                    "cmd": "str",
                    "display": "list"
                }
            }
        ],
        "_needs_build": [
            {
                "type": "func",
                "args": {
                    "obj": "str",
                    "cc_args": "list",
                    "extra_postargs": "list",
                    "pp_opts": "str"
                }
            }
        ],
        "CCompiler_compile": [
            {
                "type": "func",
                "args": {
                    "sources": "list",
                    "output_dir": "str",
                    "macros": "str",
                    "include_dirs": "str",
                    "debug": "int",
                    "extra_preargs": "list",
                    "extra_postargs": "list",
                    "depends": "list"
                }
            }
        ]
    },
    "distutils.msvc9compiler": {
        "MSVCCompiler.__init__": [
            {
                "type": "method",
                "args": {
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ],
        "MSVCCompiler.manifest_setup_ldargs": [
            {
                "type": "method",
                "args": {
                    "output_filename": "str",
                    "build_temp": "str",
                    "ld_args": "list"
                }
            }
        ],
        "_merge": [
            {
                "type": "func",
                "args": {
                    "old": "str",
                    "new": "str"
                }
            }
        ],
        "MSVCCompiler.initialize": [
            {
                "type": "method",
                "args": {
                    "plat_name": "str"
                }
            }
        ]
    },
    "distutils.misc_util": {
        "_tdata": [
            {
                "type": "var",
                "anno": "tlocal"
            }
        ],
        "_tmpdirs": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "clean_up_temporary_directory": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "tlist"
            }
        ],
        "InstallableLib.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "InstallableLib.build_info": [
            {
                "type": "attr",
                "anno": "distutils.BuildInfo"
            }
        ],
        "InstallableLib.target_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "InstallableLib.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "build_info": "distutils.BuildInfo",
                    "target_dir": "str"
                }
            }
        ],
        "quote_args": [
            {
                "type": "func",
                "args": {
                    "args": "list"
                }
            }
        ],
        "rel_path": [
            {
                "type": "func",
                "args": {
                    "path": "str",
                    "parent_path": "str"
                }
            }
        ],
        "get_path_from_frame": [
            {
                "type": "func",
                "args": {
                    "frame": "typing.Any",
                    "parent_path": "str"
                }
            }
        ],
        "sorted_glob": [
            {
                "type": "func",
                "args": {
                    "fileglob": "str"
                }
            }
        ],
        "make_temp_file": [
            {
                "type": "func",
                "args": {
                    "suffix": "str",
                    "prefix": "str",
                    "text": "bool"
                }
            }
        ],
        "terminal_has_colors": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_colour_codes": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "colour_text": [
            {
                "type": "func",
                "args": {
                    "s": "str",
                    "fg": "str",
                    "bg": "str"
                }
            }
        ],
        "default_text": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "red_text": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "green_text": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "yellow_text": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "cyan_text": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "blue_text": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "cyg2win32": [
            {
                "type": "func",
                "args": {
                    "path": "str"
                }
            }
        ],
        "mingw32": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "msvc_runtime_version": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "cxx_ext_match": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "fortran_ext_match": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "f90_ext_match": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "f90_module_name_match": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_get_f90_modules": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "is_string": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "all_strings": [
            {
                "type": "func",
                "args": {
                    "lst": "list"
                }
            }
        ],
        "is_sequence": [
            {
                "type": "func",
                "args": {
                    "seq": "typing.Union[str, typing.List[str]]"
                }
            }
        ],
        "is_glob_pattern": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "as_list": [
            {
                "type": "func",
                "args": {
                    "seq": "typing.Union[str, typing.List[str]]"
                }
            }
        ],
        "get_language": [
            {
                "type": "func",
                "args": {
                    "sources": "tlocal.List[str]"
                }
            }
        ],
        "has_f_sources": [
            {
                "type": "func",
                "args": {
                    "sources": "list"
                }
            }
        ],
        "has_cxx_sources": [
            {
                "type": "func",
                "args": {
                    "sources": "tlocal.List[str]"
                }
            }
        ],
        "filter_sources": [
            {
                "type": "func",
                "args": {
                    "sources": "list[str]"
                }
            }
        ],
        "_get_headers": [
            {
                "type": "func",
                "args": {
                    "directory_list": "typing.List[str]"
                }
            }
        ],
        "_get_directories": [
            {
                "type": "func",
                "args": {
                    "list_of_sources": "typing.List[str]"
                }
            }
        ],
        "get_dependencies": [
            {
                "type": "func",
                "args": {
                    "sources": "typing.List[str]"
                }
            }
        ],
        "general_source_files": [
            {
                "type": "func",
                "args": {
                    "top_path": "str"
                }
            }
        ],
        "get_script_files": [
            {
                "type": "func",
                "args": {
                    "scripts": "list"
                }
            }
        ],
        "get_frame": [
            {
                "type": "func",
                "args": {
                    "level": "int"
                }
            }
        ],
        "Configuration._list_keys": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Configuration._dict_keys": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Configuration._extra_keys": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Configuration.numpy_include_dirs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Configuration.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Configuration.version": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "Configuration.local_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Configuration.top_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Configuration.package_path": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Configuration.path_in_package": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Configuration.list_keys": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Configuration.dict_keys": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Configuration.extra_keys": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Configuration.options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Configuration.setup_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Configuration.info": [
            {
                "type": "method",
                "args": {
                    "message": "str"
                }
            }
        ],
        "Configuration.warn": [
            {
                "type": "method",
                "args": {
                    "message": "str"
                }
            }
        ],
        "Configuration.set_options": [
            {
                "type": "method",
                "args": {
                    "options": "typing.Any"
                }
            }
        ],
        "Configuration.get_distribution": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_cmd": [
            {
                "type": "func",
                "args": {
                    "cmdname": "str",
                    "_cache": "dict"
                }
            }
        ],
        "Configuration.get_build_temp_dir": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Configuration.get_config_cmd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Configuration.have_f90c": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Configuration.have_f77c": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_numpy_include_dirs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_npy_pkg_dir": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_pkg_info": [
            {
                "type": "func",
                "args": {
                    "pkgname": "str",
                    "dirs": "tlocal.List[str]"
                }
            }
        ],
        "is_bootstrapping": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "dict_append": [
            {
                "type": "func",
                "args": {
                    "d": "dict",
                    "kws": "str"
                }
            }
        ],
        "get_build_architecture": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "Configuration.append_to": [
            {
                "type": "method",
                "args": {
                    "extlib": "typing.Union[str, Extension]"
                }
            }
        ],
        "msvc_runtime_major": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "msvc_runtime_library": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "Configuration.add_npy_pkg_config": [
            {
                "type": "method",
                "args": {
                    "template": "str",
                    "install_dir": "str",
                    "subst_dict": "dict"
                }
            }
        ],
        "msvc_version": [
            {
                "type": "func",
                "args": {
                    "compiler": "distutils.fcompiler.MSVCCompiler"
                }
            }
        ],
        "generate_config_py": [
            {
                "type": "func",
                "args": {
                    "target": "str"
                }
            }
        ],
        "is_local_src_dir": [
            {
                "type": "func",
                "args": {
                    "directory": "str"
                }
            }
        ],
        "get_data_files": [
            {
                "type": "func",
                "args": {
                    "data": "str"
                }
            }
        ],
        "get_lib_source_files": [
            {
                "type": "func",
                "args": {
                    "lib": "InstallableLib"
                }
            }
        ],
        "minrelpath": [
            {
                "type": "func",
                "args": {
                    "path": "str"
                }
            }
        ],
        "allpath": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "get_ext_source_files": [
            {
                "type": "func",
                "args": {
                    "ext": "distutils.extension.Extension"
                }
            }
        ],
        "general_source_directories_files": [
            {
                "type": "func",
                "args": {
                    "top_path": "str"
                }
            }
        ],
        "get_num_build_jobs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "Configuration.dict_append": [
            {
                "type": "method",
                "args": {
                    "dict": "dict"
                }
            }
        ],
        "Configuration.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_mathlibs": [
            {
                "type": "func",
                "args": {
                    "path": "typing.Optional[str]"
                }
            }
        ],
        "Configuration._optimize_data_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Configuration.todict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_shared_lib_extension": [
            {
                "type": "func",
                "args": {
                    "is_python_ext": "bool"
                }
            }
        ],
        "njoin": [
            {
                "type": "func",
                "args": {
                    "path": "str"
                }
            }
        ],
        "appendpath": [
            {
                "type": "func",
                "args": {
                    "prefix": "str",
                    "path": "str"
                }
            }
        ],
        "Configuration._get_hg_revision": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "Configuration._get_svn_revision": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "_fix_paths": [
            {
                "type": "func",
                "args": {
                    "paths": "typing.Union[str, typing.List[str]]",
                    "local_path": "str",
                    "include_non_existing": "bool"
                }
            }
        ],
        "gpaths": [
            {
                "type": "func",
                "args": {
                    "paths": "typing.Union[str, typing.List[str]]",
                    "local_path": "str",
                    "include_non_existing": "bool"
                }
            }
        ],
        "Configuration.paths": [
            {
                "type": "method",
                "args": {
                    "paths": "str",
                    "kws": "typing.Any"
                }
            }
        ],
        "Configuration._fix_paths_dict": [
            {
                "type": "method",
                "args": {
                    "kw": "dict"
                }
            }
        ],
        "Configuration.add_data_files": [
            {
                "type": "method",
                "args": {
                    "files": "typing.Union[str, typing.List[str]]"
                }
            }
        ],
        "Configuration.make_hg_version_py": [
            {
                "type": "method",
                "args": {
                    "delete": "bool"
                }
            }
        ],
        "Configuration.make_svn_version_py": [
            {
                "type": "method",
                "args": {
                    "delete": "bool"
                }
            }
        ],
        "Configuration.add_data_dir": [
            {
                "type": "method",
                "args": {
                    "data_path": "typing.Union[str, typing.List[str]]"
                }
            }
        ],
        "dot_join": [
            {
                "type": "func",
                "args": {
                    "args": "str"
                }
            }
        ],
        "Configuration.get_version": [
            {
                "type": "method",
                "args": {
                    "version_file": "str",
                    "version_variable": "str"
                }
            }
        ],
        "Configuration.__init__": [
            {
                "type": "method",
                "args": {
                    "package_name": "str",
                    "parent_name": "str",
                    "top_path": "str",
                    "package_path": "str",
                    "caller_level": "int",
                    "setup_name": "str",
                    "attrs": "typing.Any"
                }
            }
        ],
        "default_config_dict": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "parent_name": "str",
                    "local_path": "str"
                }
            }
        ],
        "Configuration.make_config_py": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Configuration.add_scripts": [
            {
                "type": "method",
                "args": {
                    "files": "str"
                }
            }
        ],
        "Configuration._add_library": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "sources": "str",
                    "install_dir": "str",
                    "build_info": "dict"
                }
            }
        ],
        "Configuration.add_installed_library": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "sources": "str",
                    "install_dir": "str",
                    "build_info": "distutils.BuildInfo"
                }
            }
        ],
        "Configuration.add_library": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "sources": "str",
                    "build_info": "dict"
                }
            }
        ],
        "Configuration.add_headers": [
            {
                "type": "method",
                "args": {
                    "files": "str"
                }
            }
        ],
        "Configuration.add_include_dirs": [
            {
                "type": "method",
                "args": {
                    "paths": "str"
                }
            }
        ],
        "Configuration.add_define_macros": [
            {
                "type": "method",
                "args": {
                    "macros": "list"
                }
            }
        ],
        "Configuration._get_configuration_from_setup_py": [
            {
                "type": "method",
                "args": {
                    "setup_py": "str",
                    "subpackage_name": "str",
                    "subpackage_path": "str",
                    "parent_name": "str",
                    "caller_level": "int"
                }
            }
        ],
        "Configuration.get_subpackage": [
            {
                "type": "method",
                "args": {
                    "subpackage_name": "str",
                    "subpackage_path": "str",
                    "parent_name": "str",
                    "caller_level": "int"
                }
            }
        ],
        "Configuration.add_extension": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "sources": "list",
                    "kw": "typing.Union[str, typing.List[str]]"
                }
            }
        ],
        "Configuration.add_subpackage": [
            {
                "type": "method",
                "args": {
                    "subpackage_name": "str",
                    "subpackage_path": "str",
                    "standalone": "bool"
                }
            }
        ],
        "Configuration._wildcard_get_subpackage": [
            {
                "type": "method",
                "args": {
                    "subpackage_name": "str",
                    "parent_name": "str",
                    "caller_level": "int"
                }
            }
        ],
        "_commandline_dep_string": [
            {
                "type": "func",
                "args": {
                    "cc_args": "list",
                    "extra_postargs": "list",
                    "pp_opts": "list"
                }
            }
        ],
        "get_info": [
            {
                "type": "func",
                "args": {
                    "pkgname": "str",
                    "dirs": "tlocal.List[str]"
                }
            }
        ],
        "Configuration.get_info": [
            {
                "type": "method",
                "args": {
                    "names": "str"
                }
            }
        ]
    },
    "distutils.intelccompiler": {
        "IntelCCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompiler.cc_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompiler.cc_args": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelItaniumCCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64TCCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64TCCompiler.cc_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64TCCompiler.cc_args": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompilerW.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompilerW.compiler_cxx": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompilerW.__version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompilerW.__init__": [
            {
                "type": "method",
                "args": {
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ],
        "IntelCCompilerW.cc": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompilerW.lib": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompilerW.linker": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelCCompilerW.compile_options": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "IntelCCompilerW.compile_options_debug": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "IntelCCompilerW.initialize": [
            {
                "type": "method",
                "args": {
                    "plat_name": "str"
                }
            }
        ],
        "IntelEM64TCCompilerW.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64TCCompilerW.__version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64TCCompilerW.__init__": [
            {
                "type": "method",
                "args": {
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ],
        "IntelEM64TCCompiler.__init__": [
            {
                "type": "method",
                "args": {
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ],
        "IntelCCompiler.__init__": [
            {
                "type": "method",
                "args": {
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ]
    },
    "distutils.extension": {
        "cxx_ext_re": [
            {
                "type": "var",
                "anno": "typing.Pattern"
            }
        ],
        "fortran_pyf_ext_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "Extension.sources": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Extension.swig_opts": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Extension.depends": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Extension.language": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Extension.f2py_options": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Extension.module_dirs": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Extension.extra_f77_compile_args": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Extension.extra_f90_compile_args": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "Extension.has_cxx_sources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Extension.has_f2py_sources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Extension.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "sources": "typing.List[str]",
                    "include_dirs": "typing.Optional[str]",
                    "define_macros": "typing.Optional[str]",
                    "undef_macros": "typing.Optional[str]",
                    "library_dirs": "typing.Optional[str]",
                    "libraries": "typing.Optional[typing.List[str]]",
                    "runtime_library_dirs": "typing.Optional[str]",
                    "extra_objects": "typing.Optional[typing.Dict[str, typing.Any]]",
                    "extra_compile_args": "typing.Optional[typing.List[str]]",
                    "extra_link_args": "typing.Optional[typing.List[str]]",
                    "export_symbols": "typing.Optional[str]",
                    "swig_opts": "Any",
                    "depends": "Any",
                    "language": "Any",
                    "f2py_options": "Any",
                    "module_dirs": "typing.List[str]",
                    "extra_f77_compile_args": "typing.List[str]",
                    "extra_f90_compile_args": "typing.List[str]"
                }
            }
        ]
    },
    "distutils.npy_pkg_config": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "_VAR": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "FormatError.msg": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FormatError.__init__": [
            {
                "type": "method",
                "args": {
                    "msg": "str"
                }
            }
        ],
        "FormatError.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PkgNotFound.msg": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PkgNotFound.__init__": [
            {
                "type": "method",
                "args": {
                    "msg": "str"
                }
            }
        ],
        "PkgNotFound.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LibraryInfo.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LibraryInfo.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LibraryInfo.requires": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "LibraryInfo.version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LibraryInfo._sections": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "LibraryInfo.vars": [
            {
                "type": "attr",
                "anno": "VariableSet"
            }
        ],
        "LibraryInfo.__init__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "description": "str",
                    "version": "str",
                    "sections": "dict",
                    "vars": "VariableSet",
                    "requires": "list[str]"
                }
            }
        ],
        "VariableSet._raw_data": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableSet._re": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableSet._re_sub": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "VariableSet._init_parse_var": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "str"
                }
            }
        ],
        "VariableSet._init_parse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VariableSet.__init__": [
            {
                "type": "method",
                "args": {
                    "d": "dict"
                }
            }
        ],
        "VariableSet.__getitem__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "VariableSet.__setitem__": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "value": "str"
                }
            }
        ],
        "parse_meta": [
            {
                "type": "func",
                "args": {
                    "config": "RawConfigParser"
                }
            }
        ],
        "parse_variables": [
            {
                "type": "func",
                "args": {
                    "config": "RawConfigParser"
                }
            }
        ],
        "parse_sections": [
            {
                "type": "func",
                "args": {
                    "config": "RawConfigParser"
                }
            }
        ],
        "pkg_to_filename": [
            {
                "type": "func",
                "args": {
                    "pkg_name": "str"
                }
            }
        ],
        "_CACHE": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "parser": [
            {
                "type": "var",
                "anno": "OptionParser"
            }
        ],
        "files": [
            {
                "type": "var",
                "anno": "glob.Glob"
            }
        ],
        "pkg_name": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "d": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "m": [
            {
                "type": "var",
                "anno": "re.Match"
            }
        ],
        "name": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "value": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "section": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "VariableSet.variables": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VariableSet.interpolate": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "LibraryInfo.sections": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "parse_flags": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "_escape_backslash": [
            {
                "type": "func",
                "args": {
                    "val": "str"
                }
            }
        ],
        "parse_config": [
            {
                "type": "func",
                "args": {
                    "filename": "str",
                    "dirs": "list"
                }
            }
        ],
        "_read_config_imp": [
            {
                "type": "func",
                "args": {
                    "filenames": "str",
                    "dirs": "list"
                }
            }
        ],
        "read_config": [
            {
                "type": "func",
                "args": {
                    "pkgname": "str",
                    "dirs": "list"
                }
            }
        ],
        "info": [
            {
                "type": "var",
                "anno": "LibraryInfo"
            }
        ],
        "LibraryInfo.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LibraryInfo.libs": [
            {
                "type": "method",
                "args": {
                    "section": "str"
                }
            }
        ],
        "LibraryInfo.cflags": [
            {
                "type": "method",
                "args": {
                    "section": "str"
                }
            }
        ]
    },
    "distutils.msvccompiler": {
        "MSVCCompiler.__init__": [
            {
                "type": "method",
                "args": {
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ],
        "_merge": [
            {
                "type": "func",
                "args": {
                    "old": "str",
                    "new": "str"
                }
            }
        ],
        "MSVCCompiler.initialize": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.lib2def": {
        "__doc__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "py_ver": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "DEFAULT_NM": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "DEF_HEADER": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "FUNC_RE": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "DATA_RE": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "parse_cmd": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "deffile": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "nm_cmd": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "output_def": [
            {
                "type": "func",
                "args": {
                    "dlist": "list",
                    "flist": "list",
                    "header": "str",
                    "file": "subprocess.Popen"
                }
            }
        ],
        "parse_nm": [
            {
                "type": "func",
                "args": {
                    "nm_output": "str"
                }
            }
        ],
        "getnm": [
            {
                "type": "func",
                "args": {
                    "nm_cmd": "list",
                    "shell": "bool"
                }
            }
        ],
        "nm_output": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "distutils.tests.test_system_info": {
        "simple_site": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "site_cfg": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "fakelib_c_text": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_system_info.local_prefixes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "_system_info.cp": [
            {
                "type": "attr",
                "anno": "ConfigParser"
            }
        ],
        "_system_info._check_libs": [
            {
                "type": "method",
                "args": {
                    "lib_dirs": "dict",
                    "libs": "dict",
                    "opt_libs": "dict",
                    "exts": "dict"
                }
            }
        ],
        "Temp1Info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Temp2Info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DuplicateOptionInfo.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading._dir1": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading._src1": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading._lib1": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading._dir2": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading._src2": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading._lib2": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading.c_default": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading.c_temp1": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading.c_temp2": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestSystemInfoReading.c_dup_options": [
            {
                "type": "attr",
                "anno": "DuplicateOptionInfo"
            }
        ],
        "TestSystemInfoReading.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_system_info.__init__": [
            {
                "type": "method",
                "args": {
                    "default_lib_dirs": "dict",
                    "default_include_dirs": "dict",
                    "verbosity": "int"
                }
            }
        ],
        "get_class": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "notfound_action": "int"
                }
            }
        ],
        "TestSystemInfoReading.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "have_compiler": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "HAVE_COMPILER": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "TestSystemInfoReading.test_compile2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSystemInfoReading.test_compile1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSystemInfoReading.test_overrides": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSystemInfoReading.test_temp2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSystemInfoReading.test_temp1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSystemInfoReading.test_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSystemInfoReading.test_duplicate_options": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.tests.test_from_template": {
        "pyf_src": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "expected_pyf": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "normalize_whitespace": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "test_from_template": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "distutils.tests.test_fcompiler": {
        "customizable_flags": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "test_fcompiler_flags": [
            {
                "type": "func",
                "args": {
                    "monkeypatch": "monkeypatch.MonkeyPatch"
                }
            }
        ]
    },
    "distutils.tests.test_misc_util": {
        "ajoin": [
            {
                "type": "var",
                "anno": "Callable[[], str]"
            }
        ],
        "TestAppendpath.test_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendpath.test_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendpath.test_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGpaths.test_gpaths": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedExtension.test_get_shared_lib_extension": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_installed_npymath_ini": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestMinrelpath.test_1": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.tests.test_npy_pkg_config": {
        "simple": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "simple_d": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "simple_variable": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "simple_variable_d": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "TestParseFlags.test_simple_cflags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParseFlags.test_simple_lflags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLibraryInfo.test_simple_variable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLibraryInfo.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.tests.test_fcompiler_gnu": {
        "g77_version_strings": [
            {
                "type": "var",
                "anno": "typing.List[typing.Tuple[str, str]]"
            }
        ],
        "gfortran_version_strings": [
            {
                "type": "var",
                "anno": "typing.List[typing.Tuple[str, str]]"
            }
        ],
        "TestGFortranVersions.test_not_gfortran": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGFortranVersions.test_gfortran_version": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestG77Versions.test_not_g77": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestG77Versions.test_g77_version": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.tests.test_fcompiler_nagfor": {
        "nag_version_strings": [
            {
                "type": "var",
                "anno": "typing.List[typing.Tuple[str, str, str]]"
            }
        ],
        "TestNagFCompilerVersions.test_version_match": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.tests.test_shell_utils": {
        "argv_cases": [
            {
                "type": "var",
                "anno": "typing.List[typing.Union[str, int]]"
            }
        ],
        "Parser": [
            {
                "type": "func",
                "args": {
                    "request": "pytest.Request"
                }
            }
        ],
        "runner": [
            {
                "type": "func",
                "args": {
                    "Parser": "_shell_utils.Parser"
                }
            }
        ],
        "test_roundtrip": [
            {
                "type": "func",
                "args": {
                    "Parser": "typing.Type[_shell_utils.Parser]",
                    "argv": "list"
                }
            }
        ],
        "test_join_matches_subprocess": [
            {
                "type": "func",
                "args": {
                    "Parser": "_shell_utils.Parser",
                    "runner": "typing.Callable",
                    "argv": "typing.List[typing.Union[str, int]]"
                }
            }
        ]
    },
    "distutils.tests.test_exec_command": {
        "redirect_stdout._stdout": [
            {
                "type": "attr",
                "anno": "sys.stdout"
            }
        ],
        "redirect_stdout.__init__": [
            {
                "type": "method",
                "args": {
                    "stdout": "str"
                }
            }
        ],
        "redirect_stdout.old_stdout": [
            {
                "type": "attr",
                "anno": "sys.stdout"
            }
        ],
        "redirect_stdout.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "redirect_stderr._stderr": [
            {
                "type": "attr",
                "anno": "sys.stderr"
            }
        ],
        "redirect_stderr.__init__": [
            {
                "type": "method",
                "args": {
                    "stderr": "str"
                }
            }
        ],
        "redirect_stderr.old_stderr": [
            {
                "type": "attr",
                "anno": "sys.stderr"
            }
        ],
        "redirect_stderr.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "emulate_nonposix._new_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "emulate_nonposix.__init__": [
            {
                "type": "method",
                "args": {
                    "osname": "str"
                }
            }
        ],
        "emulate_nonposix._old_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "emulate_nonposix.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "emulate_nonposix.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "str",
                    "exc_value": "str",
                    "traceback": "str"
                }
            }
        ],
        "test_exec_command_stdout": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_exec_command_stderr": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestExecCommand.pyexe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestExecCommand.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExecCommand.check_nt": [
            {
                "type": "method",
                "args": {
                    "kws": "str"
                }
            }
        ],
        "TestExecCommand.check_posix": [
            {
                "type": "method",
                "args": {
                    "kws": "str"
                }
            }
        ],
        "TestExecCommand.check_basic": [
            {
                "type": "method",
                "args": {
                    "kws": "str"
                }
            }
        ],
        "TestExecCommand.check_execute_in": [
            {
                "type": "method",
                "args": {
                    "kws": "str"
                }
            }
        ],
        "TestExecCommand.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "redirect_stderr.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "Any",
                    "exc_value": "Any",
                    "traceback": "Any"
                }
            }
        ],
        "redirect_stdout.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "Any",
                    "exc_value": "Any",
                    "traceback": "Any"
                }
            }
        ]
    },
    "distutils.tests.test_fcompiler_intel": {
        "intel_32bit_version_strings": [
            {
                "type": "var",
                "anno": "typing.List[typing.Tuple[str, str]]"
            }
        ],
        "intel_64bit_version_strings": [
            {
                "type": "var",
                "anno": "typing.List[typing.Tuple[str, str]]"
            }
        ],
        "TestIntelEM64TFCompilerVersions.test_64bit_version": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntelFCompilerVersions.test_32bit_version": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.tests.test_mingw32ccompiler": {
        "test_build_import": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "distutils.conv_template": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "global_names": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "header": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "parenrep": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "plainrep": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "stripast": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "named_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "exclude_vars_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "exclude_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "replace_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "include_src_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "resolve_includes": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "parse_structure": [
            {
                "type": "func",
                "args": {
                    "astr": "str",
                    "level": "int"
                }
            }
        ],
        "unique_key": [
            {
                "type": "func",
                "args": {
                    "adict": "dict"
                }
            }
        ],
        "paren_repl": [
            {
                "type": "func",
                "args": {
                    "obj": "typing.Match"
                }
            }
        ],
        "parse_values": [
            {
                "type": "func",
                "args": {
                    "astr": "str"
                }
            }
        ],
        "parse_loop_header": [
            {
                "type": "func",
                "args": {
                    "loophead": "str"
                }
            }
        ],
        "parse_string": [
            {
                "type": "func",
                "args": {
                    "astr": "str",
                    "env": "dict",
                    "level": "int",
                    "line": "int"
                }
            }
        ],
        "process_str": [
            {
                "type": "func",
                "args": {
                    "astr": "str"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "process_file": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ]
    },
    "distutils.command.install": {
        "have_setuptools": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "old_install": [
            {
                "type": "var",
                "anno": "old_install_mod.Install"
            }
        ],
        "install.install_lib": [
            {
                "type": "attr",
                "anno": "old_install_mod.Install"
            }
        ],
        "install.sub_commands": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "install.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "install.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "install.setuptools_run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.install_data": {
        "have_setuptools": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "install_data.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "install_data.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.build_py": {
        "build_py.packages": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "build_py.find_modules": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_py.find_package_modules": [
            {
                "type": "method",
                "args": {
                    "package": "str",
                    "package_dir": "str"
                }
            }
        ],
        "build_py.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.egg_info": {
        "egg_info.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.build_scripts": {
        "build_scripts.scripts": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "build_scripts.generate_scripts": [
            {
                "type": "method",
                "args": {
                    "scripts": "list"
                }
            }
        ],
        "build_scripts.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_scripts.get_source_files": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.config": {
        "config.fcompiler": [
            {
                "type": "attr",
                "anno": "FCompiler"
            }
        ],
        "config.initialize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config.compiler": [
            {
                "type": "attr",
                "anno": "CCompiler"
            }
        ],
        "config._wrap_method": [
            {
                "type": "method",
                "args": {
                    "mth": "typing.Callable",
                    "lang": "str",
                    "args": "typing.Any"
                }
            }
        ],
        "config._compile": [
            {
                "type": "method",
                "args": {
                    "body": "typing.Any",
                    "headers": "typing.Any",
                    "include_dirs": "typing.Any",
                    "lang": "str"
                }
            }
        ],
        "config.check_inline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config.check_restrict": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config.check_compiler_gcc4": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config.check_gcc_function_attribute": [
            {
                "type": "method",
                "args": {
                    "attribute": "str",
                    "name": "str"
                }
            }
        ],
        "config.check_gcc_function_attribute_with_intrinsics": [
            {
                "type": "method",
                "args": {
                    "attribute": "str",
                    "name": "str",
                    "code": "str",
                    "include": "str"
                }
            }
        ],
        "config.check_gcc_variable_attribute": [
            {
                "type": "method",
                "args": {
                    "attribute": "str"
                }
            }
        ],
        "GrabStdout.sys_stdout": [
            {
                "type": "attr",
                "anno": "sys.stdout"
            }
        ],
        "GrabStdout.data": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GrabStdout.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GrabStdout.restore": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config._link": [
            {
                "type": "method",
                "args": {
                    "body": "typing.Any",
                    "headers": "typing.List[typing.Any]",
                    "include_dirs": "typing.List[typing.Any]",
                    "libraries": "typing.List[str]",
                    "library_dirs": "typing.List[str]",
                    "lang": "str"
                }
            }
        ],
        "GrabStdout.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GrabStdout.write": [
            {
                "type": "method",
                "args": {
                    "data": "str"
                }
            }
        ],
        "config._check_compiler": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config.get_output": [
            {
                "type": "method",
                "args": {
                    "body": "typing.Any",
                    "headers": "typing.List[typing.Any]",
                    "include_dirs": "typing.List[typing.Any]",
                    "libraries": "typing.List[str]",
                    "library_dirs": "typing.List[str]",
                    "lang": "str",
                    "use_tee": "typing.Optional[bool]"
                }
            }
        ],
        "config.check_funcs_once": [
            {
                "type": "method",
                "args": {
                    "funcs": "list",
                    "headers": "list",
                    "include_dirs": "list",
                    "libraries": "list",
                    "library_dirs": "list",
                    "decl": "bool",
                    "call": "bool",
                    "call_args": "list"
                }
            }
        ],
        "config.check_func": [
            {
                "type": "method",
                "args": {
                    "func": "str",
                    "headers": "list",
                    "include_dirs": "list",
                    "libraries": "list",
                    "library_dirs": "list",
                    "decl": "bool",
                    "call": "bool",
                    "call_args": "str"
                }
            }
        ],
        "config.check_type_size": [
            {
                "type": "method",
                "args": {
                    "type_name": "str",
                    "headers": "typing.Any",
                    "include_dirs": "typing.Any",
                    "library_dirs": "typing.Any",
                    "expected": "typing.List[int]"
                }
            }
        ],
        "config.check_type": [
            {
                "type": "method",
                "args": {
                    "type_name": "str",
                    "headers": "typing.Any",
                    "include_dirs": "typing.Any",
                    "library_dirs": "typing.Any"
                }
            }
        ],
        "config.check_macro_true": [
            {
                "type": "method",
                "args": {
                    "symbol": "str",
                    "headers": "list",
                    "include_dirs": "list"
                }
            }
        ],
        "config.check_decl": [
            {
                "type": "method",
                "args": {
                    "symbol": "str",
                    "headers": "list",
                    "include_dirs": "list"
                }
            }
        ],
        "config.check_header": [
            {
                "type": "method",
                "args": {
                    "header": "str",
                    "include_dirs": "list",
                    "library_dirs": "list",
                    "lang": "str"
                }
            }
        ]
    },
    "distutils.command.build_ext": {
        "build_ext.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "build_ext.user_options": [
            {
                "type": "attr",
                "anno": "typing.List[typing.Tuple[str, typing.Optional[str]]]"
            }
        ],
        "build_ext.help_options": [
            {
                "type": "attr",
                "anno": "typing.List[typing.Tuple[str, typing.Optional[str]]]"
            }
        ],
        "build_ext.boolean_options": [
            {
                "type": "attr",
                "anno": "typing.List[typing.Tuple[str, typing.Optional[str]]]"
            }
        ],
        "build_ext.fcompiler": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_ext.parallel": [
            {
                "type": "attr",
                "anno": "typing.Optional[int]"
            }
        ],
        "build_ext.warn_error": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_ext.initialize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_ext.include_dirs": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "build_ext.compiler": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_ext.extra_dll_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "build_ext._cxx_compiler": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "build_ext._f77_compiler": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "build_ext._f90_compiler": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "build_ext.swig_sources": [
            {
                "type": "method",
                "args": {
                    "sources": "list",
                    "extensions": "list"
                }
            }
        ],
        "build_ext.get_source_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_ext._libs_with_msvc_and_fortran": [
            {
                "type": "method",
                "args": {
                    "fcompiler": "typing.Optional[str]",
                    "c_libraries": "list",
                    "c_library_dirs": "typing.List[str]"
                }
            }
        ],
        "build_ext._add_dummy_mingwex_sym": [
            {
                "type": "method",
                "args": {
                    "c_sources": "typing.List[str]"
                }
            }
        ],
        "build_ext.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_ext.get_outputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_ext.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_ext._process_unlinkable_fobjects": [
            {
                "type": "method",
                "args": {
                    "objects": "list",
                    "libraries": "list",
                    "fcompiler": "typing.Optional[str]",
                    "library_dirs": "typing.List[str]",
                    "unlinkable_fobjects": "typing.List[str]"
                }
            }
        ],
        "build_ext.build_extension": [
            {
                "type": "method",
                "args": {
                    "ext": "typing.Extension"
                }
            }
        ]
    },
    "distutils.command.build": {
        "build.sub_commands": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "build.user_options": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "build.help_options": [
            {
                "type": "attr",
                "anno": "list[tuple[str, str]]"
            }
        ],
        "build.fcompiler": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build.warn_error": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "build.initialize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build.build_scripts": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.develop": {
        "develop.__doc__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "develop.install_for_development": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.install_clib": {
        "install_clib.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "install_clib.user_options": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "install_clib.install_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "install_clib.outfiles": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "install_clib.initialize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "install_clib.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "install_clib.get_outputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "install_clib.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.build_src": {
        "build_src.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "build_src.user_options": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "build_src.boolean_options": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "build_src.help_options": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "build_src.extensions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "build_src.package": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.py_modules": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "build_src.py_modules_dict": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "build_src.build_src": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.build_lib": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.build_base": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.force": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.inplace": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "build_src.package_dir": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.f2pyflags": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.f2py_opts": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.swigflags": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.swig_opts": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.swig_cpp": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.swig": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.verbose_cfg": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_src.initialize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_src.libraries": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "build_src.data_files": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "build_src.get_package_dir": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "build_src.ext_target_dir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "build_src.filter_files": [
            {
                "type": "method",
                "args": {
                    "sources": "list",
                    "exts": "list"
                }
            }
        ],
        "build_src.filter_h_files": [
            {
                "type": "method",
                "args": {
                    "sources": "list"
                }
            }
        ],
        "build_src.filter_py_files": [
            {
                "type": "method",
                "args": {
                    "sources": "list"
                }
            }
        ],
        "build_src.generate_a_pyrex_source": [
            {
                "type": "method",
                "args": {
                    "base": "str",
                    "ext_name": "str",
                    "source": "str",
                    "extension": "build_ext.BuildExt"
                }
            }
        ],
        "_f_pyf_ext_match": [
            {
                "type": "var",
                "anno": "typing.Match[str]"
            }
        ],
        "_header_ext_match": [
            {
                "type": "var",
                "anno": "typing.Match[str]"
            }
        ],
        "_swig_module_name_match": [
            {
                "type": "var",
                "anno": "typing.Match[str]"
            }
        ],
        "_has_c_header": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_has_cpp_header": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "get_swig_target": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "get_swig_modulename": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "_find_swig_target": [
            {
                "type": "func",
                "args": {
                    "target_dir": "str",
                    "name": "str"
                }
            }
        ],
        "_f2py_module_name_match": [
            {
                "type": "var",
                "anno": "re.Match"
            }
        ],
        "_f2py_user_module_name_match": [
            {
                "type": "var",
                "anno": "re.Match"
            }
        ],
        "get_f2py_modulename": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "build_src.template_sources": [
            {
                "type": "method",
                "args": {
                    "sources": "list",
                    "extension": "build_ext.BuildExt"
                }
            }
        ],
        "build_src.swig_sources": [
            {
                "type": "method",
                "args": {
                    "sources": "list",
                    "extension": "build_ext.BuildExt"
                }
            }
        ],
        "build_src.f2py_sources": [
            {
                "type": "method",
                "args": {
                    "sources": "list",
                    "extension": "build_ext.BuildExt"
                }
            }
        ],
        "build_src.pyrex_sources": [
            {
                "type": "method",
                "args": {
                    "sources": "list",
                    "extension": "build_ext.BuildExt"
                }
            }
        ],
        "build_src.generate_sources": [
            {
                "type": "method",
                "args": {
                    "sources": "list",
                    "extension": "build_ext.BuildExt"
                }
            }
        ],
        "build_src.build_library_sources": [
            {
                "type": "method",
                "args": {
                    "lib_name": "str",
                    "build_info": "dict"
                }
            }
        ],
        "build_src.build_py_modules_sources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_src.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "subst_vars": [
            {
                "type": "func",
                "args": {
                    "target": "str",
                    "source": "str",
                    "d": "dict"
                }
            }
        ],
        "build_src._build_npy_pkg_config": [
            {
                "type": "method",
                "args": {
                    "info": "typing.List[str]",
                    "gd": "dict"
                }
            }
        ],
        "build_src.build_npy_pkg_config": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_src.build_extension_sources": [
            {
                "type": "method",
                "args": {
                    "ext": "build_ext.BuildExt"
                }
            }
        ],
        "build_src.build_data_files_sources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_src.build_sources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_src.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.sdist": {
        "sdist.add_defaults": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command.build_clib": {
        "build_clib.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "build_clib.user_options": [
            {
                "type": "attr",
                "anno": "typing.List[typing.Tuple[str, typing.Optional[str]]]"
            }
        ],
        "_l": [
            {
                "type": "var",
                "anno": "typing.List[typing.Tuple[str, typing.Optional[str]]]"
            }
        ],
        "build_clib.boolean_options": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "build_clib.fcompiler": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_clib.inplace": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "build_clib.parallel": [
            {
                "type": "attr",
                "anno": "typing.Optional[int]"
            }
        ],
        "build_clib.warn_error": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_clib.initialize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_clib.compiler": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_clib.libraries": [
            {
                "type": "attr",
                "anno": "typing.Optional[list]"
            }
        ],
        "build_clib._f_compiler": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "build_clib.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_clib.get_source_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_clib.have_cxx_sources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_clib.have_f_sources": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_clib.build_a_library": [
            {
                "type": "method",
                "args": {
                    "build_info": "dict",
                    "lib_name": "str",
                    "libraries": "list"
                }
            }
        ],
        "build_clib.build_libraries": [
            {
                "type": "method",
                "args": {
                    "libraries": "list"
                }
            }
        ],
        "build_clib.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.command": {
        "test_na_writable_attributes_deletion": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "__revision__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "distutils_all": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ]
    },
    "distutils.command.config_compiler": {
        "config_fc.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "config_fc.user_options": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "config_fc.boolean_options": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "config_fc.fcompiler": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "show_fortran_compilers": [
            {
                "type": "func",
                "args": {
                    "_cache": "list"
                }
            }
        ],
        "config_fc.help_options": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "config_fc.f77exec": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.f90exec": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.f77flags": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.f90flags": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.opt": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.arch": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.debug": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.noopt": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.noarch": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "config_fc.initialize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config_fc.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config_cc.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "config_cc.user_options": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "config_cc.compiler": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "config_cc.initialize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config_cc.run": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config_cc.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "config_fc.finalize_options": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils._shell_utils": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "CommandLineParser.join": [
            {
                "type": "method",
                "args": {
                    "argv": "list"
                }
            }
        ],
        "CommandLineParser.split": [
            {
                "type": "method",
                "args": {
                    "cmd": "Command"
                }
            }
        ],
        "WindowsParser.join": [
            {
                "type": "method",
                "args": {
                    "argv": "list"
                }
            }
        ],
        "PosixParser.split": [
            {
                "type": "method",
                "args": {
                    "cmd": "str"
                }
            }
        ],
        "NativeParser": [
            {
                "type": "var",
                "anno": "NativeParser"
            }
        ],
        "WindowsParser.split": [
            {
                "type": "method",
                "args": {
                    "cmd": "str"
                }
            }
        ],
        "PosixParser.join": [
            {
                "type": "method",
                "args": {
                    "argv": "list"
                }
            }
        ]
    },
    "distutils.fcompiler.gnu": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "TARGET_R": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "is_win64": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_EXTRAFLAGS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "GnuFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GnuFCompiler.compiler_aliases": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GnuFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GnuFCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GnuFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "GnuFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "GnuFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "GnuFCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "GnuFCompiler.g2c": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GnuFCompiler.suggested_f90_compiler": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "GnuFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler._c_arch_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.runtime_library_dir_option": [
            {
                "type": "method",
                "args": {
                    "dir": "str"
                }
            }
        ],
        "Gnu95FCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Gnu95FCompiler.compiler_aliases": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Gnu95FCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Gnu95FCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Gnu95FCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Gnu95FCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Gnu95FCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Gnu95FCompiler.g2c": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_can_target": [
            {
                "type": "func",
                "args": {
                    "cmd": "typing.List[str]",
                    "arch": "str"
                }
            }
        ],
        "Gnu95FCompiler._universal_flags": [
            {
                "type": "method",
                "args": {
                    "cmd": "typing.List[str]"
                }
            }
        ],
        "Gnu95FCompiler.get_target": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.get_libgfortran_dir": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.get_libgcc_dir": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.get_library_dirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Gnu95FCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Gnu95FCompiler.can_ccompiler_link": [
            {
                "type": "method",
                "args": {
                    "compiler": "FCompiler"
                }
            }
        ],
        "Gnu95FCompiler.get_library_dirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.get_libraries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Gnu95FCompiler.get_libraries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.gnu_version_match": [
            {
                "type": "method",
                "args": {
                    "version_string": "str"
                }
            }
        ],
        "Gnu95FCompiler.version_match": [
            {
                "type": "method",
                "args": {
                    "version_string": "str"
                }
            }
        ],
        "GnuFCompiler.version_match": [
            {
                "type": "method",
                "args": {
                    "version_string": "str"
                }
            }
        ],
        "Gnu95FCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "GnuFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Gnu95FCompiler._hash_files": [
            {
                "type": "method",
                "args": {
                    "filenames": "typing.List[str]"
                }
            }
        ],
        "Gnu95FCompiler._link_wrapper_lib": [
            {
                "type": "method",
                "args": {
                    "objects": "typing.List[str]",
                    "output_dir": "str",
                    "extra_dll_dir": "str",
                    "chained_dlls": "typing.List[str]",
                    "is_archive": "bool"
                }
            }
        ],
        "Gnu95FCompiler.wrap_unlinkable_objects": [
            {
                "type": "method",
                "args": {
                    "objects": "typing.List[str]",
                    "output_dir": "str",
                    "extra_dll_dir": "str"
                }
            }
        ]
    },
    "distutils.fcompiler.nag": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "BaseNAGFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "BaseNAGFCompiler.version_match": [
            {
                "type": "method",
                "args": {
                    "version_string": "str"
                }
            }
        ],
        "BaseNAGFCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseNAGFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseNAGFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NAGFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NAGFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NAGFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "NAGFCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NAGFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NAGFORCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NAGFORCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NAGFORCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "compiler": [
            {
                "type": "var",
                "anno": "FCompiler"
            }
        ],
        "NAGFORCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NAGFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.hpux": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "HPUXFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HPUXFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HPUXFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HPUXFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "HPUXFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[bool]"
            }
        ],
        "HPUXFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "HPUXFCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "HPUXFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HPUXFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HPUXFCompiler.get_libraries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HPUXFCompiler.get_library_dirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "HPUXFCompiler.get_version": [
            {
                "type": "method",
                "args": {
                    "force": "int",
                    "ok_status": "list"
                }
            }
        ]
    },
    "distutils.fcompiler.environment": {
        "__metaclass__": [
            {
                "type": "var",
                "anno": "type"
            }
        ],
        "EnvironmentConfig._distutils_section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "EnvironmentConfig._conf_keys": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "EnvironmentConfig._conf": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "EnvironmentConfig._hook_handler": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "EnvironmentConfig.__init__": [
            {
                "type": "method",
                "args": {
                    "distutils_section": "str",
                    "kw": "dict"
                }
            }
        ],
        "EnvironmentConfig._get_var": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "conf_desc": "str"
                }
            }
        ],
        "EnvironmentConfig.get": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "default": "type"
                }
            }
        ],
        "EnvironmentConfig.dump_variable": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "EnvironmentConfig.dump_variables": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "EnvironmentConfig.__getattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "EnvironmentConfig.clone": [
            {
                "type": "method",
                "args": {
                    "hook_handler": "type"
                }
            }
        ],
        "EnvironmentConfig.use_distribution": [
            {
                "type": "method",
                "args": {
                    "dist": "Distribution"
                }
            }
        ]
    },
    "distutils.fcompiler.intel": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "intel_version_match": [
            {
                "type": "func",
                "args": {
                    "type": "str"
                }
            }
        ],
        "BaseIntelFCompiler.runtime_library_dir_option": [
            {
                "type": "method",
                "args": {
                    "dir": "str"
                }
            }
        ],
        "IntelFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelFCompiler.compiler_aliases": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "IntelFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelFCompiler.version_match": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelFCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "IntelFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict[str, list[str]]"
            }
        ],
        "IntelFCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "IntelFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelFCompiler.get_flags_free": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelItaniumFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelItaniumFCompiler.compiler_aliases": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "IntelItaniumFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelItaniumFCompiler.version_match": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelItaniumFCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "IntelItaniumFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "IntelEM64TFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64TFCompiler.compiler_aliases": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "IntelEM64TFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64TFCompiler.version_match": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64TFCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "IntelEM64TFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict[str, list[str]]"
            }
        ],
        "IntelEM64TFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelEM64TFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelVisualFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.version_match": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.ar_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "IntelVisualFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "IntelVisualFCompiler.update_executables": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelVisualFCompiler.compile_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.object_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.library_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelVisualFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelVisualFCompiler.get_flags_free": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelVisualFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelVisualFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelVisualFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelVisualFCompiler.runtime_library_dir_option": [
            {
                "type": "method",
                "args": {
                    "dir": "str"
                }
            }
        ],
        "IntelItaniumVisualFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelItaniumVisualFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelItaniumVisualFCompiler.version_match": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelItaniumVisualFCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "IntelItaniumVisualFCompiler.ar_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelItaniumVisualFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "IntelEM64VisualFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64VisualFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IntelEM64VisualFCompiler.version_match": [
            {
                "type": "attr",
                "anno": "typing.Match[str]"
            }
        ],
        "IntelEM64VisualFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "BaseIntelFCompiler.update_executables": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelEM64TFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelFCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IntelFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.none": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "NoneFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NoneFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NoneFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "NoneFCompiler.find_executables": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.pathf95": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "PathScaleFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PathScaleFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PathScaleFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PathScaleFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PathScaleFCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "PathScaleFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PathScaleFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PathScaleFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PathScaleFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.ibm": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "IBMFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IBMFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IBMFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IBMFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "IBMFCompiler.version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "IBMFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IBMFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IBMFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IBMFCompiler.get_version": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kwds": "str"
                }
            }
        ],
        "IBMFCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.absoft": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "AbsoftFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AbsoftFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AbsoftFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AbsoftFCompiler.executables": [
            {
                "type": "attr",
                "anno": "Any"
            }
        ],
        "AbsoftFCompiler.library_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AbsoftFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "AbsoftFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "AbsoftFCompiler.update_executables": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbsoftFCompiler.library_dir_option": [
            {
                "type": "method",
                "args": {
                    "dir": "str"
                }
            }
        ],
        "AbsoftFCompiler.library_option": [
            {
                "type": "method",
                "args": {
                    "lib": "str"
                }
            }
        ],
        "AbsoftFCompiler.get_flags_fix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbsoftFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbsoftFCompiler.get_flags_f90": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbsoftFCompiler.get_flags_f77": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbsoftFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbsoftFCompiler.get_libraries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbsoftFCompiler.get_library_dirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "AbsoftFCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.compaq": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "CompaqFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqFCompiler.fc_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CompaqFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompaqFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompaqFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompaqFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompaqFCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompaqVisualFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.compile_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.object_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.library_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.static_lib_extension": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.static_lib_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.fc_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.m": [
            {
                "type": "attr",
                "anno": "MSVCCompiler"
            }
        ],
        "CompaqVisualFCompiler.ar_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "CompaqVisualFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "CompaqVisualFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompaqVisualFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompaqVisualFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CompaqVisualFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.sun": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "SunFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SunFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SunFCompiler.version_match": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SunFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "SunFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SunFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SunFCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SunFCompiler.get_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunFCompiler.get_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunFCompiler.get_libraries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunFCompiler.runtime_library_dir_option": [
            {
                "type": "method",
                "args": {
                    "dir": "str"
                }
            }
        ],
        "SunFCompiler.get_flags_f77": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "__metaclass__": [
            {
                "type": "var",
                "anno": "type"
            }
        ],
        "flaglist": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "str2bool": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "is_sequence_of_strings": [
            {
                "type": "func",
                "args": {
                    "seq": "str"
                }
            }
        ],
        "FCompiler.distutils_vars": [
            {
                "type": "attr",
                "anno": "EnvironmentConfig"
            }
        ],
        "FCompiler.command_vars": [
            {
                "type": "attr",
                "anno": "EnvironmentConfig"
            }
        ],
        "FCompiler.flag_vars": [
            {
                "type": "attr",
                "anno": "EnvironmentConfig"
            }
        ],
        "FCompiler.language_map": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "FCompiler.language_order": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "FCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.compiler_aliases": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "FCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "FCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "FCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "FCompiler.suggested_f90_compiler": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.compile_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.object_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.library_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "FCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "FCompiler.src_extensions": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "FCompiler.obj_extension": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.shared_lib_extension": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.static_lib_extension": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.static_lib_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.shared_lib_format": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.exe_extension": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler._exe_cache": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "FCompiler._executable_keys": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "FCompiler.c_compiler": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "FCompiler.extra_f77_compile_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "FCompiler.extra_f90_compile_args": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "FCompiler._is_customised": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "FCompiler._command_property": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "FCompiler.version_cmd": [
            {
                "type": "attr",
                "anno": "property"
            }
        ],
        "FCompiler.compiler_f77": [
            {
                "type": "attr",
                "anno": "property"
            }
        ],
        "FCompiler.compiler_f90": [
            {
                "type": "attr",
                "anno": "property"
            }
        ],
        "FCompiler.compiler_fix": [
            {
                "type": "attr",
                "anno": "property"
            }
        ],
        "FCompiler.linker_so": [
            {
                "type": "attr",
                "anno": "property"
            }
        ],
        "FCompiler.linker_exe": [
            {
                "type": "attr",
                "anno": "property"
            }
        ],
        "FCompiler.archiver": [
            {
                "type": "attr",
                "anno": "property"
            }
        ],
        "FCompiler.ranlib": [
            {
                "type": "attr",
                "anno": "property"
            }
        ],
        "FCompiler.set_command": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "value": "str"
                }
            }
        ],
        "FCompiler.set_commands": [
            {
                "type": "method",
                "args": {
                    "kw": "str"
                }
            }
        ],
        "FCompiler.set_executable": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "value": "str"
                }
            }
        ],
        "FCompiler.update_executables": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler._get_command_flags": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "FCompiler.get_flags_f77": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_f90": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_free": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_fix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_linker_exe": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_ar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_flags_opt_f77": [
            {
                "type": "attr",
                "anno": "FancyGetopt"
            }
        ],
        "FCompiler.get_flags_opt_f90": [
            {
                "type": "attr",
                "anno": "FancyGetopt"
            }
        ],
        "FCompiler.get_flags_arch_f77": [
            {
                "type": "attr",
                "anno": "FancyGetopt"
            }
        ],
        "FCompiler.get_flags_arch_f90": [
            {
                "type": "attr",
                "anno": "type[FancyGetopt]"
            }
        ],
        "FCompiler.get_flags_debug_f77": [
            {
                "type": "attr",
                "anno": "FancyGetopt"
            }
        ],
        "FCompiler.get_flags_debug_f90": [
            {
                "type": "attr",
                "anno": "type[FancyGetopt]"
            }
        ],
        "FCompiler.get_libraries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_library_dirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.get_version": [
            {
                "type": "method",
                "args": {
                    "force": "bool",
                    "ok_status": "list"
                }
            }
        ],
        "FCompiler.library_option": [
            {
                "type": "method",
                "args": {
                    "lib": "str"
                }
            }
        ],
        "FCompiler.library_dir_option": [
            {
                "type": "method",
                "args": {
                    "dir": "str"
                }
            }
        ],
        "FCompiler._environment_hook": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "hook_name": "str"
                }
            }
        ],
        "FCompiler.can_ccompiler_link": [
            {
                "type": "method",
                "args": {
                    "ccompiler": "str"
                }
            }
        ],
        "FCompiler.wrap_unlinkable_objects": [
            {
                "type": "method",
                "args": {
                    "objects": "list",
                    "output_dir": "str",
                    "extra_dll_dir": "str"
                }
            }
        ],
        "_default_compilers": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "fcompiler_class": [
            {
                "type": "var",
                "anno": "dict[str, str]"
            }
        ],
        "fcompiler_aliases": [
            {
                "type": "var",
                "anno": "dict[str, str]"
            }
        ],
        "available_fcompilers_for_platform": [
            {
                "type": "func",
                "args": {
                    "osname": "str",
                    "platform": "str"
                }
            }
        ],
        "failed_fcompilers": [
            {
                "type": "var",
                "anno": "set"
            }
        ],
        "is_f_file": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "_has_f_header": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_has_f90_header": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_has_fix_header": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_free_f90_start": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_f77flags_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "load_all_fcompiler_classes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "has_f90_header": [
            {
                "type": "func",
                "args": {
                    "src": "str"
                }
            }
        ],
        "dummy_fortran_file": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "FCompiler.dump_properties": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.__init__": [
            {
                "type": "method",
                "args": {
                    "args": "str",
                    "kw": "str"
                }
            }
        ],
        "FCompiler.__copy__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "get_f77flags": [
            {
                "type": "func",
                "args": {
                    "src": "str"
                }
            }
        ],
        "FCompiler.link": [
            {
                "type": "method",
                "args": {
                    "target_desc": "str",
                    "objects": "typing.List[str]",
                    "output_filename": "str",
                    "output_dir": "typing.Optional[str]",
                    "libraries": "typing.List[str]",
                    "library_dirs": "typing.List[str]",
                    "runtime_library_dirs": "Any",
                    "export_symbols": "typing.Optional[str]",
                    "debug": "int",
                    "extra_preargs": "typing.List[str]",
                    "extra_postargs": "typing.List[str]",
                    "build_temp": "typing.Optional[str]",
                    "target_lang": "typing.Optional[str]"
                }
            }
        ],
        "FCompiler.module_options": [
            {
                "type": "method",
                "args": {
                    "module_dirs": "list",
                    "module_build_dir": "str"
                }
            }
        ],
        "is_free_format": [
            {
                "type": "func",
                "args": {
                    "file": "str"
                }
            }
        ],
        "FCompiler.find_executables": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "FCompiler.customize": [
            {
                "type": "method",
                "args": {
                    "dist": "Distribution"
                }
            }
        ],
        "FCompiler._compile": [
            {
                "type": "method",
                "args": {
                    "obj": "str",
                    "src": "str",
                    "ext": "str",
                    "cc_args": "list",
                    "extra_postargs": "list",
                    "pp_opts": "str"
                }
            }
        ],
        "_find_existing_fcompiler": [
            {
                "type": "func",
                "args": {
                    "compiler_types": "list",
                    "osname": "str",
                    "platform": "str",
                    "requiref90": "bool",
                    "c_compiler": "str"
                }
            }
        ],
        "get_default_fcompiler": [
            {
                "type": "func",
                "args": {
                    "osname": "str",
                    "platform": "str",
                    "requiref90": "bool",
                    "c_compiler": "str"
                }
            }
        ],
        "new_fcompiler": [
            {
                "type": "func",
                "args": {
                    "plat": "str",
                    "compiler": "str",
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int",
                    "requiref90": "bool",
                    "c_compiler": "str"
                }
            }
        ],
        "show_fcompilers": [
            {
                "type": "func",
                "args": {
                    "dist": "Distribution"
                }
            }
        ]
    },
    "distutils.fcompiler.pg": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "PGroupFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PGroupFCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "PGroupFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFCompiler.get_flags_linker_so": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFCompiler.runtime_library_dir_option": [
            {
                "type": "method",
                "args": {
                    "dir": "str"
                }
            }
        ],
        "PGroupFlangCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFlangCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFlangCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFlangCompiler.ar_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFlangCompiler.possible_executables": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "PGroupFlangCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "PGroupFlangCompiler.library_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFlangCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PGroupFlangCompiler.get_libraries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFlangCompiler.get_library_dirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFlangCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFlangCompiler.get_flags_free": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFlangCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFlangCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFlangCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "PGroupFlangCompiler.runtime_library_dir_option": [
            {
                "type": "method",
                "args": {
                    "dir": "str"
                }
            }
        ]
    },
    "distutils.fcompiler.mips": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "MIPSFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MIPSFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MIPSFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "MIPSFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "MIPSFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[bool]"
            }
        ],
        "MIPSFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "MIPSFCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "MIPSFCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MIPSFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MIPSFCompiler.get_flags_arch_f77": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MIPSFCompiler.get_flags_arch_f90": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "MIPSFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.lahey": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "LaheyFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LaheyFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LaheyFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LaheyFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "LaheyFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[bool]"
            }
        ],
        "LaheyFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str | None"
            }
        ],
        "LaheyFCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LaheyFCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LaheyFCompiler.get_library_dirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LaheyFCompiler.get_libraries": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.g95": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "G95FCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "G95FCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "G95FCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "G95FCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "G95FCompiler.pic_flags": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "G95FCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "G95FCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "G95FCompiler.get_flags": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "G95FCompiler.get_flags_opt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "G95FCompiler.get_flags_debug": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.fcompiler.vast": {
        "compilers": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "VastFCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VastFCompiler.compiler_aliases": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VastFCompiler.description": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VastFCompiler.version_pattern": [
            {
                "type": "attr",
                "anno": "tuple[str, ...]"
            }
        ],
        "VastFCompiler.object_switch": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VastFCompiler.executables": [
            {
                "type": "attr",
                "anno": "dict[str, list[str]]"
            }
        ],
        "VastFCompiler.module_dir_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "VastFCompiler.module_include_switch": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "VastFCompiler.find_executables": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VastFCompiler.get_version_cmd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "VastFCompiler.version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "VastFCompiler.get_flags_arch": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.exec_command": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_update_environment": [
            {
                "type": "func",
                "args": {
                    "env": "str"
                }
            }
        ],
        "_quote_arg": [
            {
                "type": "func",
                "args": {
                    "arg": "str"
                }
            }
        ],
        "_preserve_environment": [
            {
                "type": "func",
                "args": {
                    "names": "list"
                }
            }
        ],
        "temp_file_name": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "find_executable": [
            {
                "type": "func",
                "args": {
                    "exe": "str",
                    "path": "typing.Optional[str]",
                    "_cache": "typing.Dict[str, typing.Callable]"
                }
            }
        ],
        "get_pythonexe": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_exec_command": [
            {
                "type": "func",
                "args": {
                    "command": "str",
                    "use_shell": "typing.Optional[bool]",
                    "use_tee": "typing.Optional[str]",
                    "env": "str"
                }
            }
        ],
        "exec_command": [
            {
                "type": "func",
                "args": {
                    "command": "str",
                    "execute_in": "str",
                    "use_shell": "typing.Optional[bool]",
                    "use_tee": "typing.Optional[str]",
                    "_with_python": "int",
                    "env": "str"
                }
            }
        ],
        "forward_bytes_to_stdout": [
            {
                "type": "func",
                "args": {
                    "val": "bytes"
                }
            }
        ],
        "filepath_from_subprocess_output": [
            {
                "type": "func",
                "args": {
                    "output": "subprocess.CompletedProcess"
                }
            }
        ]
    },
    "distutils.from_template": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "routine_start_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "routine_end_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "function_start_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "template_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "named_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "list_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "item_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "template_name_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "include_src_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "resolve_includes": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "unique_key": [
            {
                "type": "func",
                "args": {
                    "adict": "dict"
                }
            }
        ],
        "parse_structure": [
            {
                "type": "func",
                "args": {
                    "astr": "str"
                }
            }
        ],
        "conv": [
            {
                "type": "func",
                "args": {
                    "astr": "str"
                }
            }
        ],
        "find_repl_patterns": [
            {
                "type": "func",
                "args": {
                    "astr": "str"
                }
            }
        ],
        "_special_names": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "expand_sub": [
            {
                "type": "func",
                "args": {
                    "substr": "str",
                    "names": "dict"
                }
            }
        ],
        "find_and_remove_repl_patterns": [
            {
                "type": "func",
                "args": {
                    "astr": "str"
                }
            }
        ],
        "process_str": [
            {
                "type": "func",
                "args": {
                    "allstr": "str"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "process_file": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ]
    },
    "distutils.cpuinfo": {
        "__all__": [
            {
                "type": "var",
                "anno": "types.List[str]"
            }
        ],
        "getoutput": [
            {
                "type": "func",
                "args": {
                    "cmd": "str",
                    "successful_status": "tuple",
                    "stacklevel": "int"
                }
            }
        ],
        "CPUInfoBase._try_call": [
            {
                "type": "method",
                "args": {
                    "func": "typing.Callable"
                }
            }
        ],
        "CPUInfoBase.__getattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "CPUInfoBase._getNCPUs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CPUInfoBase.__get_nbits": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CPUInfoBase._is_32bit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "CPUInfoBase._is_64bit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo.info": [
            {
                "type": "attr",
                "anno": "typing.Optional[dict]"
            }
        ],
        "LinuxCPUInfo._not_impl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_AMD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_AthlonK6_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_AthlonK6_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_AthlonK6": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_AthlonK7": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_AthlonMP": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Athlon64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_AthlonHX": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Opteron": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Hammer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Alpha": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_i386": [
            {
                "type": "attr",
                "anno": "types.Type[None]"
            }
        ],
        "LinuxCPUInfo._is_Intel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_i486": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Celeron": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Pentium": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_PentiumII": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_PentiumPro": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_PentiumMMX": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_PentiumIII": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_PentiumIV": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_PentiumM": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Itanium": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_XEON": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Xeon": [
            {
                "type": "attr",
                "anno": "types.Callable[[], bool]"
            }
        ],
        "LinuxCPUInfo._is_singleCPU": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._getNCPUs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_fdiv_bug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_f00f_bug": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_mmx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_sse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_sse2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_sse3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_ssse3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_3dnow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._has_3dnowext": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo.info": [
            {
                "type": "attr",
                "anno": "typing.Optional[dict]"
            }
        ],
        "IRIXCPUInfo._not_impl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_singleCPU": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._getNCPUs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo.get_ip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo.info": [
            {
                "type": "attr",
                "anno": "typing.Optional[dict]"
            }
        ],
        "DarwinCPUInfo._not_impl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._getNCPUs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_Power_Macintosh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_i386": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo.__machine": [
            {
                "type": "method",
                "args": {
                    "n": "int"
                }
            }
        ],
        "DarwinCPUInfo._is_ppc601": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc602": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc603": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc603e": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc604": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc604e": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc620": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc630": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc740": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc7400": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc7450": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc750": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc403": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc505": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc801": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc821": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc823": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo._is_ppc860": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo.info": [
            {
                "type": "attr",
                "anno": "typing.Optional[dict]"
            }
        ],
        "SunOSCPUInfo._not_impl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_i386": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_sparc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_sparcv9": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._getNCPUs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_sun4": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_SUNW": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_sparcstation5": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra250": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra30": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra4": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra5_10": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra5": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra60": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra80": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultraenterprice": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultraenterprice10k": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_sunfire": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_ultra": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_cpusparcv7": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_cpusparcv8": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SunOSCPUInfo._is_cpusparcv9": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo.info": [
            {
                "type": "attr",
                "anno": "typing.Optional[dict]"
            }
        ],
        "Win32CPUInfo.pkey": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Win32CPUInfo._not_impl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_AMD": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_Intel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_i386": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_i486": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_singleCPU": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._getNCPUs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "cpuinfo": [
            {
                "type": "var",
                "anno": "types.Type[CPUInfoBase]"
            }
        ],
        "cpu": [
            {
                "type": "var",
                "anno": "types.Type[CPUInfoBase]"
            }
        ],
        "Win32CPUInfo.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._has_3dnowext": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._has_3dnow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._has_sse2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._has_sse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._has_mmx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_Core2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_PentiumM": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_PentiumIV": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_PentiumIII": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_PentiumII": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_PentiumPro": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_PentiumMMX": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_Pentium": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_i686": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_i586": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_AMD64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_AMDK7": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_AMDK6_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_AMDK6_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_AMDK6": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_AMDK5": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_Am5x86": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Win32CPUInfo._is_Am486": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Core2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Nocona": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_Prescott": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_i686": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_i586": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_PCA56": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_EV56": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_EV5": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_EV4": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LinuxCPUInfo._is_AMD64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "command_by_line": [
            {
                "type": "func",
                "args": {
                    "cmd": "str",
                    "successful_status": "tuple",
                    "stacklevel": "int"
                }
            }
        ],
        "key_value_from_command": [
            {
                "type": "func",
                "args": {
                    "cmd": "str",
                    "sep": "str",
                    "successful_status": "tuple",
                    "stacklevel": "int"
                }
            }
        ],
        "IRIXCPUInfo.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "command_info": [
            {
                "type": "func",
                "args": {
                    "successful_status": "tuple",
                    "stacklevel": "int",
                    "kw": "str"
                }
            }
        ],
        "SunOSCPUInfo.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DarwinCPUInfo.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo.__machine": [
            {
                "type": "method",
                "args": {
                    "n": "int"
                }
            }
        ],
        "IRIXCPUInfo._is_IP32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP30": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP28": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP27": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP26": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP25": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP24": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP22": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP21": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP20": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP19": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo.__cputype": [
            {
                "type": "method",
                "args": {
                    "n": "int"
                }
            }
        ],
        "IRIXCPUInfo._is_rorion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r12000": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r10000": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP32_10k": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r8000": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r6000": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r5000": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP32_5k": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP22_5k": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r4650": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r4600": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r4400": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r4300": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r4100": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r4000": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_IP22_4k": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r3900": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r3000": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "IRIXCPUInfo._is_r2000": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.mingw32ccompiler": {
        "get_msvcr_replacement": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_START": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_TABLE": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "Mingw32CCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Mingw32CCompiler.gcc_version": [
            {
                "type": "attr",
                "anno": "StrictVersion"
            }
        ],
        "Mingw32CCompiler.linker": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Mingw32CCompiler.compiler_cxx": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Mingw32CCompiler.link": [
            {
                "type": "method",
                "args": {
                    "target_desc": "str",
                    "objects": "list",
                    "output_filename": "str",
                    "output_dir": "str",
                    "libraries": "list",
                    "library_dirs": "list",
                    "runtime_library_dirs": "list",
                    "export_symbols": "int",
                    "debug": "int",
                    "extra_preargs": "list",
                    "extra_postargs": "list",
                    "build_temp": "str",
                    "target_lang": "str"
                }
            }
        ],
        "Mingw32CCompiler.object_filenames": [
            {
                "type": "method",
                "args": {
                    "source_filenames": "list[str]",
                    "strip_dir": "int",
                    "output_dir": "str"
                }
            }
        ],
        "find_python_dll": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_check_for_import_lib": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_build_import_library_x86": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_MSVCRVER_TO_FULLVER": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "msvc_manifest_xml": [
            {
                "type": "func",
                "args": {
                    "maj": "int",
                    "min": "int"
                }
            }
        ],
        "manifest_rc": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "type": "str"
                }
            }
        ],
        "check_embedded_msvcr_match_linked": [
            {
                "type": "func",
                "args": {
                    "msver": "int"
                }
            }
        ],
        "configtest_name": [
            {
                "type": "func",
                "args": {
                    "config": "msvcrt.Config"
                }
            }
        ],
        "manifest_name": [
            {
                "type": "func",
                "args": {
                    "config": "msvcrt.Config"
                }
            }
        ],
        "rc_name": [
            {
                "type": "func",
                "args": {
                    "config": "msvcrt.Config"
                }
            }
        ],
        "find_dll": [
            {
                "type": "func",
                "args": {
                    "dll_name": "str"
                }
            }
        ],
        "dump_table": [
            {
                "type": "func",
                "args": {
                    "dll": "str"
                }
            }
        ],
        "generate_manifest": [
            {
                "type": "func",
                "args": {
                    "config": "msvcrt.Config"
                }
            }
        ],
        "generate_def": [
            {
                "type": "func",
                "args": {
                    "dll": "str",
                    "dfile": "str"
                }
            }
        ],
        "_build_import_library_amd64": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "build_import_library": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "build_msvcr_library": [
            {
                "type": "func",
                "args": {
                    "debug": "bool"
                }
            }
        ],
        "Mingw32CCompiler.__init__": [
            {
                "type": "method",
                "args": {
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ]
    },
    "distutils.numpy_distribution": {
        "NumpyDistribution.scons_data": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "NumpyDistribution.installed_libraries": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "NumpyDistribution.installed_pkg_config": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "NumpyDistribution.__init__": [
            {
                "type": "method",
                "args": {
                    "attrs": "dict"
                }
            }
        ],
        "NumpyDistribution.has_scons_scripts": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.log": {
        "good": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "set_threshold": [
            {
                "type": "func",
                "args": {
                    "level": "int",
                    "force": "bool"
                }
            }
        ],
        "get_threshold": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "set_verbosity": [
            {
                "type": "func",
                "args": {
                    "v": "int",
                    "force": "bool"
                }
            }
        ],
        "_global_color_map": [
            {
                "type": "var",
                "anno": "typing.Dict[int, typing.Callable]"
            }
        ],
        "_fix_args": [
            {
                "type": "func",
                "args": {
                    "args": "typing.Union[str, typing.Sequence[typing.Callable]]",
                    "flag": "int"
                }
            }
        ],
        "Log.good": [
            {
                "type": "method",
                "args": {
                    "msg": "str",
                    "args": "typing.Union[str, typing.Sequence[typing.Callable]]"
                }
            }
        ],
        "Log._log": [
            {
                "type": "method",
                "args": {
                    "level": "int",
                    "msg": "str",
                    "args": "typing.Sequence[typing.Callable]"
                }
            }
        ]
    },
    "distutils.pathccompiler": {
        "PathScaleCCompiler.compiler_type": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PathScaleCCompiler.cc_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PathScaleCCompiler.cxx_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "PathScaleCCompiler.__init__": [
            {
                "type": "method",
                "args": {
                    "verbose": "int",
                    "dry_run": "int",
                    "force": "int"
                }
            }
        ]
    },
    "distutils.unixccompiler": {
        "UnixCCompiler_create_static_lib": [
            {
                "type": "func",
                "args": {
                    "objects": "list",
                    "output_libname": "str",
                    "output_dir": "str",
                    "debug": "int",
                    "target_lang": "str"
                }
            }
        ],
        "UnixCCompiler__compile": [
            {
                "type": "func",
                "args": {
                    "obj": "str",
                    "src": "str",
                    "ext": "str",
                    "cc_args": "list",
                    "extra_postargs": "list",
                    "pp_opts": "list"
                }
            }
        ]
    },
    "distutils.core": {
        "have_setuptools": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "numpy_cmdclass": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_dict_append": [
            {
                "type": "func",
                "args": {
                    "d": "dict",
                    "kws": "typing.Any"
                }
            }
        ],
        "_command_line_ok": [
            {
                "type": "func",
                "args": {
                    "_cache": "typing.List[bool]"
                }
            }
        ],
        "get_distribution": [
            {
                "type": "func",
                "args": {
                    "always": "bool"
                }
            }
        ],
        "_check_append_library": [
            {
                "type": "func",
                "args": {
                    "libraries": "typing.List[str]",
                    "item": "str"
                }
            }
        ],
        "_check_append_ext_library": [
            {
                "type": "func",
                "args": {
                    "libraries": "typing.List[str]",
                    "lib_name": "str",
                    "build_info": "str"
                }
            }
        ],
        "setup": [
            {
                "type": "func",
                "args": {
                    "attr": "dict"
                }
            }
        ]
    },
    "distutils": {
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ],
        "customized_ccompiler": [
            {
                "type": "func",
                "args": {
                    "plat": "str",
                    "compiler": "str",
                    "verbose": "int"
                }
            }
        ],
        "customized_fcompiler": [
            {
                "type": "func",
                "args": {
                    "plat": "str",
                    "compiler": "str"
                }
            }
        ]
    },
    "distutils.system_info": {
        "_bits": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "platform_bits": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "global_compiler": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "customized_ccompiler": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "libpaths": [
            {
                "type": "func",
                "args": {
                    "paths": "list",
                    "bits": "int"
                }
            }
        ],
        "default_lib_dirs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "default_runtime_dirs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "default_include_dirs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "default_src_dirs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "default_x11_lib_dirs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "default_x11_include_dirs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "vcpkg": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "vcpkg_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "specifier": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "vcpkg_installed": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "conda": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "conda_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "globbed_x11_dir": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "x11_so_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "p": [
            {
                "type": "var",
                "anno": "subprocess.Popen"
            }
        ],
        "so_ext": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_standard_file": [
            {
                "type": "func",
                "args": {
                    "fname": "str"
                }
            }
        ],
        "system_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "system_info.search_static_first": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "system_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "system_info.saved_results": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "system_info.notfounderror": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "system_info.local_prefixes": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "system_info.cp": [
            {
                "type": "attr",
                "anno": "ConfigParser"
            }
        ],
        "system_info.files": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "system_info.has_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "system_info.library_extensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "fftw_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw_info.notfounderror": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw_info.ver_info": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "fftw2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw2_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw2_info.notfounderror": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw2_info.ver_info": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "fftw3_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw3_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw3_info.notfounderror": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw3_info.ver_info": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "dfftw_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "dfftw_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "dfftw_info.ver_info": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "sfftw_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "sfftw_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "sfftw_info.ver_info": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "fftw_threads_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw_threads_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "fftw_threads_info.ver_info": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "dfftw_threads_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "dfftw_threads_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "dfftw_threads_info.ver_info": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "sfftw_threads_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "sfftw_threads_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "sfftw_threads_info.ver_info": [
            {
                "type": "attr",
                "anno": "list[dict]"
            }
        ],
        "djbfft_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "djbfft_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "djbfft_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[Exception]"
            }
        ],
        "mkl_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "mkl_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "mkl_info._lib_mkl": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "atlas_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "atlas_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "atlas_info._lib_names": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "atlas_info._lib_atlas": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "atlas_info._lib_lapack": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "atlas_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[AtlasNotFoundError]"
            }
        ],
        "atlas_blas_info._lib_names": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "atlas_threads_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "atlas_threads_info._lib_names": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "atlas_blas_threads_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "atlas_blas_threads_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "lapack_atlas_info._lib_names": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "lapack_atlas_threads_info._lib_names": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "atlas_3_10_info._lib_names": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "atlas_3_10_info._lib_atlas": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "atlas_3_10_info._lib_lapack": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "atlas_3_10_blas_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "atlas_3_10_threads_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "atlas_3_10_threads_info._lib_names": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "atlas_3_10_threads_info._lib_atlas": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "atlas_3_10_threads_info._lib_lapack": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "atlas_3_10_blas_threads_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "atlas_3_10_blas_threads_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "lapack_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "lapack_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[LapackNotFoundError]"
            }
        ],
        "lapack_src_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack_src_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack_src_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[LapackSrcNotFoundError]"
            }
        ],
        "atlas_version_c_text": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_cached_atlas_version": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "lapack_opt_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[LapackNotFoundError]"
            }
        ],
        "lapack_opt_info.lapack_order": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "lapack_opt_info.order_env_var_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack_opt_info._calc_info": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "_ilp64_opt_info_mixin.symbol_suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_ilp64_opt_info_mixin.symbol_prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_ilp64_opt_info_mixin._check_info": [
            {
                "type": "method",
                "args": {
                    "info": "dict"
                }
            }
        ],
        "lapack_ilp64_opt_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[LapackILP64NotFoundError]"
            }
        ],
        "lapack_ilp64_opt_info.lapack_order": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "lapack_ilp64_opt_info.order_env_var_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack_ilp64_plain_opt_info.symbol_prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack_ilp64_plain_opt_info.symbol_suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack64__opt_info.symbol_prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lapack64__opt_info.symbol_suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_opt_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasNotFoundError]"
            }
        ],
        "blas_opt_info.blas_order": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "blas_opt_info.order_env_var_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_opt_info._calc_info": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "blas_ilp64_opt_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasILP64NotFoundError]"
            }
        ],
        "blas_ilp64_opt_info.blas_order": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "blas_ilp64_opt_info.order_env_var_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_ilp64_plain_opt_info.symbol_prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_ilp64_plain_opt_info.symbol_suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas64__opt_info.symbol_prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas64__opt_info.symbol_suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "blas_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasNotFoundError]"
            }
        ],
        "openblas_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "openblas_info._require_symbols": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "openblas_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasNotFoundError]"
            }
        ],
        "openblas_info.symbol_prefix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "openblas_info.symbol_suffix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "openblas_lapack_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas_lapack_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas_lapack_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "openblas_lapack_info._require_symbols": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "openblas_lapack_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasNotFoundError]"
            }
        ],
        "openblas_clapack_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "openblas_ilp64_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas_ilp64_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas_ilp64_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "openblas_ilp64_info._require_symbols": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "openblas_ilp64_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasILP64NotFoundError]"
            }
        ],
        "openblas_ilp64_lapack_info._require_symbols": [
            {
                "type": "attr",
                "anno": "list[str]"
            }
        ],
        "openblas64__info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas64__info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas64__info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "openblas64__info.symbol_suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "openblas64__info.symbol_prefix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blis_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blis_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blis_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "blis_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasNotFoundError]"
            }
        ],
        "flame_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "flame_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "flame_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[FlameNotFoundError]"
            }
        ],
        "accelerate_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "accelerate_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "accelerate_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasNotFoundError]"
            }
        ],
        "blas_src_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_src_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "blas_src_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[BlasSrcNotFoundError]"
            }
        ],
        "x11_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "x11_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[X11NotFoundError]"
            }
        ],
        "x11_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "_numpy_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_numpy_info.modulename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_numpy_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[NumericError]"
            }
        ],
        "numarray_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "numarray_info.modulename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Numeric_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Numeric_info.modulename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "numpy_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "numpy_info.modulename": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "numerix_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "boost_python_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "boost_python_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "agg2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "agg2_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_pkg_config_info.section": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "_pkg_config_info.config_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_pkg_config_info.default_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_pkg_config_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_pkg_config_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "_pkg_config_info.release_macro_name": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "_pkg_config_info.version_flag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_pkg_config_info.cflags_flag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_pkg_config_info.get_config_exe": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_pkg_config_info.get_config_output": [
            {
                "type": "method",
                "args": {
                    "config_exe": "str",
                    "option": "str"
                }
            }
        ],
        "wx_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "wx_info.config_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "wx_info.default_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "wx_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "wx_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "wx_info.release_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "wx_info.version_flag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "wx_info.cflags_flag": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_pixbuf_xlib_2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_pixbuf_xlib_2_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_pixbuf_xlib_2_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_pixbuf_2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_pixbuf_2_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_pixbuf_2_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_x11_2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_x11_2_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_x11_2_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_2_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_2_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gdk_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gtkp_x11_2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gtkp_x11_2_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gtkp_x11_2_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gtkp_2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gtkp_2_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "gtkp_2_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "xft_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "xft_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "xft_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "freetype2_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "freetype2_info.append_config_exe": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "freetype2_info.version_macro_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "amd_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "amd_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "amd_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "umfpack_info.section": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "umfpack_info.dir_env_var": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "umfpack_info.notfounderror": [
            {
                "type": "attr",
                "anno": "Type[UmfpackNotFoundError]"
            }
        ],
        "umfpack_info._lib_names": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "language_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "inv_language_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "dict_append": [
            {
                "type": "func",
                "args": {
                    "d": "dict",
                    "kws": "str"
                }
            }
        ],
        "system_info.calc_extra_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "parseCmdLine": [
            {
                "type": "func",
                "args": {
                    "argv": "typing.List[str]"
                }
            }
        ],
        "system_info.parse_config_files": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "system_info.__init__": [
            {
                "type": "method",
                "args": {
                    "default_lib_dirs": "list",
                    "default_include_dirs": "list"
                }
            }
        ],
        "x11_info.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "flame_info.check_embedded_lapack": [
            {
                "type": "method",
                "args": {
                    "info": "dict"
                }
            }
        ],
        "_numpy_info.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mkl_info.get_mkl_rootdir": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mkl_info.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "system_info.get_libs": [
            {
                "type": "method",
                "args": {
                    "key": "str",
                    "default": "list"
                }
            }
        ],
        "system_info.get_libraries": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "blas_opt_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_lib_dirs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_include_dirs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "add_system_root": [
            {
                "type": "func",
                "args": {
                    "library_root": "str"
                }
            }
        ],
        "_c_string_literal": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "get_atlas_version": [
            {
                "type": "func",
                "args": {
                    "config": "dict"
                }
            }
        ],
        "combine_paths": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kws": "str"
                }
            }
        ],
        "system_info.combine_paths": [
            {
                "type": "method",
                "args": {
                    "args": "str"
                }
            }
        ],
        "system_info._find_lib": [
            {
                "type": "method",
                "args": {
                    "lib_dir": "str",
                    "lib": "str",
                    "exts": "list"
                }
            }
        ],
        "system_info._find_libs": [
            {
                "type": "method",
                "args": {
                    "lib_dirs": "list",
                    "libs": "list",
                    "exts": "list"
                }
            }
        ],
        "system_info._check_libs": [
            {
                "type": "method",
                "args": {
                    "lib_dirs": "list",
                    "libs": "list",
                    "opt_libs": "list",
                    "exts": "list"
                }
            }
        ],
        "openblas_info.check_symbols": [
            {
                "type": "method",
                "args": {
                    "info": "dict"
                }
            }
        ],
        "openblas_info.check_msvc_gfortran_libs": [
            {
                "type": "method",
                "args": {
                    "library_dirs": "list",
                    "libraries": "list"
                }
            }
        ],
        "system_info.check_libs2": [
            {
                "type": "method",
                "args": {
                    "lib_dirs": "list",
                    "libs": "list",
                    "opt_libs": "list"
                }
            }
        ],
        "system_info.check_libs": [
            {
                "type": "method",
                "args": {
                    "lib_dirs": "list",
                    "libs": "list",
                    "opt_libs": "list"
                }
            }
        ],
        "system_info.get_paths": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "agg2_info.get_paths": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "boost_python_info.get_paths": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "blas_src_info.get_paths": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "lapack_src_info.get_paths": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "atlas_info.get_paths": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "djbfft_info.get_paths": [
            {
                "type": "method",
                "args": {
                    "section": "str",
                    "key": "str"
                }
            }
        ],
        "system_info.get_src_dirs": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "system_info.get_include_dirs": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "blas_info.get_cblas_libs": [
            {
                "type": "method",
                "args": {
                    "info": "dict"
                }
            }
        ],
        "system_info.get_runtime_lib_dirs": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "system_info.get_lib_dirs": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "system_info.calc_libraries_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "system_info.set_info": [
            {
                "type": "method",
                "args": {
                    "info": "dict"
                }
            }
        ],
        "_pkg_config_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "agg2_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "boost_python_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "f2py_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_numpy_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blas_src_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "accelerate_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_src_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "djbfft_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "system_info.get_option_single": [
            {
                "type": "method",
                "args": {
                    "options": "str"
                }
            }
        ],
        "amd_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "x11_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blis_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "openblas_info._calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "openblas_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blas_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "atlas_3_10_blas_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "atlas_blas_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "atlas_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mkl_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "fftw_info.calc_ver_info": [
            {
                "type": "method",
                "args": {
                    "ver_param": "dict"
                }
            }
        ],
        "fftw_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "triplet": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_info": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "notfound_action": "int"
                }
            }
        ],
        "umfpack_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "numerix_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "flame_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blas_ilp64_opt_info._calc_info": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "blas_opt_info._calc_info_blas": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blas_opt_info._calc_info_accelerate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blas_opt_info._calc_info_atlas": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blas_opt_info._calc_info_openblas": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blas_opt_info._calc_info_blis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "blas_opt_info._calc_info_mkl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_ilp64_opt_info._calc_info": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "openblas_ilp64_info._calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "openblas_ilp64_lapack_info._calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info._get_info_lapack": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info._get_info_blas": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info._calc_info_lapack": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info._calc_info_accelerate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info._calc_info_atlas": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info._calc_info_flame": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info._calc_info_openblas": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "lapack_opt_info._calc_info_mkl": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "fft_opt_info.calc_info": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "system_info.get_info": [
            {
                "type": "method",
                "args": {
                    "notfound_action": "int"
                }
            }
        ],
        "show_all": [
            {
                "type": "func",
                "args": {
                    "argv": "typing.List[str]"
                }
            }
        ]
    },
    "_build_utils.apple_accelerate": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "uses_accelerate_framework": [
            {
                "type": "func",
                "args": {
                    "info": "dict"
                }
            }
        ],
        "get_sgemv_fix": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "doc.constants": {
        "constants": [
            {
                "type": "var",
                "anno": "list[tuple[str, str]]"
            }
        ],
        "add_newdoc": [
            {
                "type": "func",
                "args": {
                    "module": "str",
                    "name": "str",
                    "doc": "str"
                }
            }
        ],
        "new_lines": [
            {
                "type": "var",
                "anno": "typing.List[str]"
            }
        ],
        "m": [
            {
                "type": "var",
                "anno": "m.Match"
            }
        ],
        "prev": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "s": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "lines": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "constants_str": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "__doc__": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "doc": {
        "ref_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "__doc__": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "": {
        "__NUMPY_SETUP__": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "unicode": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "oldnumeric": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "numarray": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__getattr__": [
            {
                "type": "func",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ],
        "_mac_os_check": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "error_message": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "msg": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__dir__": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_sanity_check": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "random._examples.numba.extending_distributions": {
        "ffi": [
            {
                "type": "var",
                "anno": "FFI"
            }
        ],
        "lib": [
            {
                "type": "var",
                "anno": "FFI"
            }
        ],
        "x": [
            {
                "type": "var",
                "anno": "PCG64"
            }
        ],
        "xffi": [
            {
                "type": "var",
                "anno": "FFI"
            }
        ],
        "random_standard_normal": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "normals": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "bit_generator": "PCG64"
                }
            }
        ],
        "normalsj": [
            {
                "type": "var",
                "anno": "nb.Jit"
            }
        ],
        "bit_generator": [
            {
                "type": "var",
                "anno": "PCG64"
            }
        ],
        "bit_generator_address": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "norm": [
            {
                "type": "var",
                "anno": "nb.Normals"
            }
        ]
    },
    "random._examples.numba.extending": {
        "bit_gen": [
            {
                "type": "var",
                "anno": "nb.BitGenerator"
            }
        ],
        "next_d": [
            {
                "type": "var",
                "anno": "nb.Callable"
            }
        ],
        "state_addr": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "normals": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "state": "int"
                }
            }
        ],
        "normalsj": [
            {
                "type": "var",
                "anno": "nb.Jit"
            }
        ],
        "n": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "numbacall": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "rg": [
            {
                "type": "var",
                "anno": "np.random.Generator"
            }
        ],
        "numpycall": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "r1": [
            {
                "type": "var",
                "anno": "nb.Jit"
            }
        ],
        "r2": [
            {
                "type": "var",
                "anno": "np.random.Random"
            }
        ],
        "t1": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "t2": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "next_u32": [
            {
                "type": "var",
                "anno": "nb.Jit"
            }
        ],
        "bounded_uint": [
            {
                "type": "func",
                "args": {
                    "lb": "int",
                    "ub": "int",
                    "state": "int"
                }
            }
        ],
        "bounded_uints": [
            {
                "type": "func",
                "args": {
                    "lb": "int",
                    "ub": "int",
                    "n": "int",
                    "state": "int"
                }
            }
        ],
        "ctypes_state": [
            {
                "type": "var",
                "anno": "nb.CTypes"
            }
        ]
    },
    "random._examples.cython.setup": {
        "path": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "src_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "defs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "inc_path": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "lib_path": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "extending": [
            {
                "type": "var",
                "anno": "Extension"
            }
        ],
        "distributions": [
            {
                "type": "var",
                "anno": "Extension"
            }
        ],
        "extensions": [
            {
                "type": "var",
                "anno": "list[Extension]"
            }
        ]
    },
    "random._examples.cffi.extending": {
        "ffi": [
            {
                "type": "var",
                "anno": "cffi.FFI"
            }
        ],
        "inc_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "lib": [
            {
                "type": "var",
                "anno": "ffi.Dlopen"
            }
        ],
        "bit_gen": [
            {
                "type": "var",
                "anno": "np.random.Generator"
            }
        ],
        "rng": [
            {
                "type": "var",
                "anno": "np.random.Generator"
            }
        ],
        "n": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "vals_cffi": [
            {
                "type": "var",
                "anno": "ffi.Cffi"
            }
        ],
        "vals": [
            {
                "type": "var",
                "anno": "np.random.RandomState"
            }
        ],
        "interface": [
            {
                "type": "var",
                "anno": "cffi.BitGenerator"
            }
        ],
        "state": [
            {
                "type": "var",
                "anno": "dict"
            }
        ]
    },
    "random.setup": {
        "is_msvc": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "str"
                }
            }
        ]
    },
    "random.tests.test_regression": {
        "TestRegression.test_VonMises_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_hypergeometric_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_logseries_convergence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_permutation_longs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_mixed_dimension": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_multivariate_normal_size_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_beta_small_parameters": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_choice_sum_of_probs_tolerance": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_of_array_of_different_length_strings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_of_array_of_objects": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.M.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestRegression.test_call_within_randomstate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.M.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_permutation_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "random.tests.test_seed_sequence": {
        "test_reference_data": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "random.tests.test_generator_mt19937": {
        "random": [
            {
                "type": "var",
                "anno": "Generator"
            }
        ],
        "endpoint": [
            {
                "type": "func",
                "args": {
                    "request": "Any"
                }
            }
        ],
        "TestSeed.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_seedsequence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_noninstantized_bitgen": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinomial.test_n_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinomial.test_p_is_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_zero_probability": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_int_negative_interval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_invalid_prob": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_invalid_n": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_p_non_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultivariateHypergeometric.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestMultivariateHypergeometric.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultivariateHypergeometric.test_edge_cases": [
            {
                "type": "method",
                "args": {
                    "method": "str"
                }
            }
        ],
        "TestMultivariateHypergeometric.test_repeatability1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultivariateHypergeometric.test_repeatability2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultivariateHypergeometric.test_repeatability3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestSetState.rg": [
            {
                "type": "attr",
                "anno": "Generator"
            }
        ],
        "TestSetState.bit_generator": [
            {
                "type": "attr",
                "anno": "Generator"
            }
        ],
        "TestSetState.state": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestSetState.legacy_state": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestSetState.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegers.rfunc": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "TestIntegers.itype": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestIntegers.test_unsupported_type": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_int64_uint64_broadcast_exceptions": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_error_byteorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestRandomDist.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_integers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_integers_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_integers_closed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_float_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_unsupported_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_uniform_replace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nonuniform_replace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_uniform_noreplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nonuniform_noreplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_noninteger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_multidimensional_default_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_multidimensional_custom_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nan_probabilities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_p_non_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_beta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet_bad_alpha": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet_alpha_non_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_exponential_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gamma_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_geometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_geometric_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gumbel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gumbel_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_hypergeometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_laplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_laplace_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_logistic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_lognormal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_lognormal_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_logseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_logseries_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_multinomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_negative_binomial_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_noncentral_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_noncentral_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_noncentral_f_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_normal_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_pareto": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_poisson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rayleigh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rayleigh_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_cauchy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_expoential_type_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gammma_scalar_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gamma_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gammma_float_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gamma_unknown_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_out_size_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gamma_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_normal_unsupported_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_t": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_triangular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.ThrowingFloat.__float__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.ThrowingInteger.__int__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_vonmises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_vonmises_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_wald": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_weibull": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_weibull_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_zipf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestBroadcast.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_beta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_standard_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_f_small_df": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_standard_t": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_vonmises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_pareto": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_weibull": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_laplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_gumbel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_logistic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_lognormal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_rayleigh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_wald": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_triangular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_poisson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_zipf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_geometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_hypergeometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_logseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_multinomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.seeds": [
            {
                "type": "attr",
                "anno": "SeedSequence"
            }
        ],
        "TestThread.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.argOne": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.argTwo": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.argThree": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.tgtShape": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestSingleEltArrayInput.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_gaussian_reset_in_media_res": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_gaussian_reset": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_vonmises_small": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_scalar_exception_propagation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_large_sample": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegers.test_repeatability": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestSingleEltArrayInput.test_three_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.test_integers": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestSingleEltArrayInput.test_two_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.test_one_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_return_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegers.test_zero_size": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestRandomDist.test_permutation_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_permutation_custom_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle_custom_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_permutation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle_axis_nonsquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegers.test_integers_small_dtype_chisquared": [
            {
                "type": "method",
                "args": {
                    "sample_size": "int",
                    "high": "int",
                    "dtype": "np.ndarray",
                    "chi2max": "float"
                }
            }
        ],
        "TestMultivariateHypergeometric.test_typical_cases": [
            {
                "type": "method",
                "args": {
                    "nsample": "int",
                    "method": "str",
                    "size": "int"
                }
            }
        ],
        "TestRandomDist.test_poisson_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_integers_max_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegers.test_int64_uint64_corner_case": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestMultivariateHypergeometric.test_argument_validation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_uniform_range_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegers.test_respect_dtype_array": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_respect_dtype_singleton": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_repeatability_broadcasting": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_scalar_array_equiv": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_in_bounds_fuzz": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_full_range_array": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_full_range": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_rng_zero_and_extremes_array": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_rng_zero_and_extremes": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_bounds_checking_array": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestIntegers.test_bounds_checking": [
            {
                "type": "method",
                "args": {
                    "endpoint": "bool"
                }
            }
        ],
        "TestRandomDist.test_multivariate_normal": [
            {
                "type": "method",
                "args": {
                    "method": "str"
                }
            }
        ],
        "TestThread.check_function": [
            {
                "type": "method",
                "args": {
                    "function": "Callable[[Generator], np.ndarray]",
                    "sz": "tuple"
                }
            }
        ],
        "TestThread.test_multinomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.test_exp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "random.tests.test_randomstate": {
        "INT_FUNCS": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "INT_FUNC_HASHES": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "int_func": [
            {
                "type": "func",
                "args": {
                    "request": "pytest.Request"
                }
            }
        ],
        "assert_mt19937_state_equal": [
            {
                "type": "func",
                "args": {
                    "a": "MT19937",
                    "b": "MT19937"
                }
            }
        ],
        "TestSeed.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_array_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_initialization": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinomial.test_n_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinomial.test_p_is_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_zero_probability": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_int_negative_interval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_invalid_prob": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_invalid_n": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_p_non_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestSetState.random_state": [
            {
                "type": "attr",
                "anno": "random.RandomState"
            }
        ],
        "TestSetState.state": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestSetState.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_gaussian_reset": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_gaussian_reset_in_media_res": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_backwards_compatibility": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_invalid_legacy_state_setting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_state_setting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.rfunc": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "TestRandint.itype": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestRandint.test_unsupported_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestRandomDist.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rand": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rand_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_randn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_randint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_sample": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_uniform_replace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nonuniform_replace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_uniform_noreplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nonuniform_noreplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_noninteger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nan_probabilities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_p_non_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_beta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet_bad_alpha": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet_alpha_non_contiguous": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_exponential_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gamma_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_geometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gumbel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gumbel_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_hypergeometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_laplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_laplace_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_logistic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_lognormal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_lognormal_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_logseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_multinomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_noncentral_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_noncentral_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_noncentral_f_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_normal_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_pareto": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_poisson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rayleigh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rayleigh_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_cauchy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gamma_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_randn_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_t": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_triangular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.ThrowingFloat.__float__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.ThrowingInteger.__int__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_vonmises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_vonmises_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_wald": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_weibull": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_weibull_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_zipf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestBroadcast.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.set_seed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_beta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_standard_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_f_small_df": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_standard_t": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_vonmises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_pareto": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_weibull": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_laplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_gumbel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_logistic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_lognormal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_rayleigh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_wald": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_triangular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_poisson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_zipf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_geometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_hypergeometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_logseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.seeds": [
            {
                "type": "attr",
                "anno": "range"
            }
        ],
        "TestThread.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.argOne": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.argTwo": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.argThree": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.tgtShape": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestSingleEltArrayInput.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_cannot_seed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_vonmises_small": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_integer_repeat": [
            {
                "type": "func",
                "args": {
                    "int_func": "tuple"
                }
            }
        ],
        "TestRandomDist.test_scalar_exception_propagation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_repeatability": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.test_three_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.test_two_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.test_one_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_return_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_integer_dtype": [
            {
                "type": "func",
                "args": {
                    "int_func": "tuple"
                }
            }
        ],
        "TestRandomDist.test_permutation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_integers_deprecated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_tomaxint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_int64_uint64_corner_case": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_uniform_range_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_respect_dtype_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_in_bounds_fuzz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_full_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_rng_zero_and_extremes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_bounds_checking": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_poisson_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_negative_binomial_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_multivariate_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_logseries_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_geometric_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_integers_max_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_integers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_get_state_warning": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.check_function": [
            {
                "type": "method",
                "args": {
                    "function": "Callable[[random.RandomState], np.ndarray]",
                    "sz": "tuple"
                }
            }
        ],
        "TestThread.test_multinomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.test_exp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "random.tests.test_extending": {
        "cffi": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "numba": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "cython": [
            {
                "type": "var",
                "anno": "typing.Optional[cython.Cython]"
            }
        ],
        "required_version": [
            {
                "type": "var",
                "anno": "LooseVersion"
            }
        ],
        "test_numba": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_cffi": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_cython": [
            {
                "type": "func",
                "args": {
                    "tmp_path": "pytest.TempPath"
                }
            }
        ]
    },
    "random.tests.test_randomstate_regression": {
        "TestRegression.test_VonMises_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_hypergeometric_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_logseries_convergence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_permutation_longs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_mixed_dimension": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_multivariate_normal_size_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_beta_small_parameters": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_choice_sum_of_probs_tolerance": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_of_array_of_different_length_strings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_of_array_of_objects": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.M.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestRegression.test_warns_byteorder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_named_argument_initialization": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_p_zero_stream": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_n_zero_stream": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_call_within_randomstate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.M.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_permutation_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_choice_retun_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_randint_117": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "random.tests.test_direct": {
        "MISSING_CFFI": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "MISSING_CTYPES": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "pwd": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "assert_state_equal": [
            {
                "type": "func",
                "args": {
                    "actual": "dict",
                    "target": "dict"
                }
            }
        ],
        "uniform32_from_uint32": [
            {
                "type": "func",
                "args": {
                    "x": "int"
                }
            }
        ],
        "uniform_from_uint64": [
            {
                "type": "func",
                "args": {
                    "x": "int"
                }
            }
        ],
        "uniform_from_uint32": [
            {
                "type": "func",
                "args": {
                    "x": "int"
                }
            }
        ],
        "uniform_from_uint": [
            {
                "type": "func",
                "args": {
                    "x": "int",
                    "bits": "int"
                }
            }
        ],
        "Base.dtype": [
            {
                "type": "attr",
                "anno": "np.dtype"
            }
        ],
        "Base.data2": [
            {
                "type": "attr",
                "anno": "data1"
            }
        ],
        "Base.data1": [
            {
                "type": "attr",
                "anno": "data2"
            }
        ],
        "Base.test_raw": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_random_raw": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_invalid_init_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_invalid_init_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_benchmark": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_cffi": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_ctypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMT19937.test_seed_float_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDefaultRNG.test_seed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDefaultRNG.test_passthrough": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMT19937.test_state_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPCG64.test_advance_symmetry": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPhilox.test_set_key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_getstate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_invalid_state_value": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_invalid_state_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_seedsequence": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "uniform32_from_uint53": [
            {
                "type": "func",
                "args": {
                    "x": "int"
                }
            }
        ],
        "uniform_from_dsfmt": [
            {
                "type": "func",
                "args": {
                    "x": "int"
                }
            }
        ],
        "gauss_from_uint": [
            {
                "type": "func",
                "args": {
                    "x": "int",
                    "n": "int",
                    "bits": "int"
                }
            }
        ],
        "Base.test_gauss_inv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_uniform_double": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "type"
                }
            }
        ],
        "uniform32_from_uint64": [
            {
                "type": "func",
                "args": {
                    "x": "int"
                }
            }
        ],
        "uniform32_from_uint": [
            {
                "type": "func",
                "args": {
                    "x": "int",
                    "bits": "int"
                }
            }
        ],
        "Base.test_uniform_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base._read_csv": [
            {
                "type": "method",
                "args": {
                    "cls": "Type",
                    "filename": "str"
                }
            }
        ],
        "TestSFC64.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "Type"
                }
            }
        ],
        "TestMT19937.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "Type"
                }
            }
        ],
        "TestPCG64.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "Type"
                }
            }
        ],
        "TestPhilox.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "Type"
                }
            }
        ],
        "Base.test_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Base.test_repr": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "random.tests.test_generator_mt19937_regressions": {
        "mt19937": [
            {
                "type": "var",
                "anno": "Generator[MT19937, np.ndarray, np.ndarray]"
            }
        ],
        "TestRegression.test_VonMises_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_hypergeometric_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_logseries_convergence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_permutation_longs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_mixed_dimension": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_call_within_randomstate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_multivariate_normal_size_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_beta_small_parameters": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_choice_sum_of_probs_tolerance": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_of_array_of_different_length_strings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_shuffle_of_array_of_objects": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.M.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestRegression.test_gamma_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.M.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_permutation_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "random.tests.test_smoke": {
        "dtype": [
            {
                "type": "func",
                "args": {
                    "request": "pytest.Request"
                }
            }
        ],
        "comp_state": [
            {
                "type": "func",
                "args": {
                    "state1": "np.ndarray",
                    "state2": "np.ndarray"
                }
            }
        ],
        "warmup": [
            {
                "type": "func",
                "args": {
                    "rg": "Generator",
                    "n": "int"
                }
            }
        ],
        "RNG.test_standard_normal_zig": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_gumbel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_laplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_logitic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_logseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_noncentral_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_noncentral_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_pareto": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_integers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_vonmises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_wald": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_weibull": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_output_fill_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDefaultRNG.test_default_is_pcg64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDefaultRNG.test_seed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_output_filling_gamma_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_output_filling_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_output_filling_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_output_filling_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_seed_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_pickle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_entropy_init": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_reset_state": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_jump": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_advance": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_init": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG._reset_state": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_reset_state_uint32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_reset_state_gauss": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_seed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMT19937.test_numpy_state": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_reset_state_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_uniform_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_integers_numpy": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "RNG.test_output_fill": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_dirichlet": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_multinomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_triangular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_hypergeometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_zipf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_beta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "params_0": [
            {
                "type": "func",
                "args": {
                    "f": "Callable[[], np.ndarray]"
                }
            }
        ],
        "RNG.test_standard_cauchy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_standard_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_standard_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_random": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_normal_zig_floats": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_normal_floats": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_gamma_floats": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_uniform_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_standard_exponential_float_log": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_standard_exponential_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG._extra_setup": [
            {
                "type": "method",
                "args": {
                    "cls": "RNG"
                }
            }
        ],
        "TestDefaultRNG.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "RNG"
                }
            }
        ],
        "TestPCG64.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "RNG"
                }
            }
        ],
        "TestSFC64.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "RNG"
                }
            }
        ],
        "TestPhilox.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "RNG"
                }
            }
        ],
        "TestMT19937.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "RNG"
                }
            }
        ],
        "RNG.setup_class": [
            {
                "type": "method",
                "args": {
                    "cls": "RNG"
                }
            }
        ],
        "RNG.test_multivariate_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_permutation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_shuffle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "params_1": [
            {
                "type": "func",
                "args": {
                    "f": "Callable[[np.ndarray], np.ndarray]",
                    "bounded": "bool"
                }
            }
        ],
        "RNG.test_rayleigh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_poisson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_geometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_standard_t": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_standard_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RNG.test_integers_broadcast_errors": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "RNG.test_integers_broadcast": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ]
    },
    "random.tests.test_random": {
        "TestSeed.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSeed.test_invalid_array_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinomial.test_n_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBinomial.test_p_is_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_zero_probability": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_int_negative_interval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestSetState.prng": [
            {
                "type": "attr",
                "anno": "random.RandomState"
            }
        ],
        "TestSetState.state": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestSetState.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_gaussian_reset": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_gaussian_reset_in_media_res": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_backwards_compatibility": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetState.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.rfunc": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "TestRandint.itype": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestRandint.test_unsupported_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestRandomDist.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rand": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_randn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_randint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_uniform_replace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nonuniform_replace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_uniform_noreplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nonuniform_noreplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_noninteger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_nan_probabilities": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_beta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet_bad_alpha": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_exponential_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gamma_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_geometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gumbel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_gumbel_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_hypergeometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_laplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_laplace_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_logistic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_lognormal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_lognormal_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_logseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_multinomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_noncentral_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_noncentral_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_normal_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_pareto": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_poisson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rayleigh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_rayleigh_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_cauchy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_gamma_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_standard_t": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_triangular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.ThrowingFloat.__float__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.ThrowingInteger.__int__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.ThrowingInteger.__index__": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestRandomDist.test_vonmises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_wald": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_weibull": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_weibull_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_zipf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.seed": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestBroadcast.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.setSeed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_beta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_exponential": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_standard_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_gamma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_f": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_f_small_df": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_noncentral_chisquare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_standard_t": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_vonmises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_pareto": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_weibull": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_power": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_laplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_gumbel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_logistic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_lognormal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_rayleigh": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_wald": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_triangular": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_negative_binomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_poisson": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_zipf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_geometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_hypergeometric": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBroadcast.test_logseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.seeds": [
            {
                "type": "attr",
                "anno": "range"
            }
        ],
        "TestThread.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.argOne": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.argTwo": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.argThree": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSingleEltArrayInput.tgtShape": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestSingleEltArrayInput.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_vonmises_small": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_scalar_exception_propagation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_repeatability": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.test_three_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.test_two_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSingleEltArrayInput.test_one_arg_funcs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_dirichlet_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_choice_return_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMultinomial.test_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_shuffle_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_poisson_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_integers_deprecated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_int64_uint64_corner_case": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_uniform_range_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_respect_dtype_singleton": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_in_bounds_fuzz": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_full_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_rng_zero_and_extremes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandint.test_bounds_checking": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_multivariate_normal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_integers_max_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRandomDist.test_random_integers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.check_function": [
            {
                "type": "method",
                "args": {
                    "function": "Callable[[np.random.RandomState], np.ndarray]",
                    "sz": "tuple"
                }
            }
        ],
        "TestThread.test_multinomial": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.test_exp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestThread.test_normal": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "random._pickle": {
        "BitGenerators": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "__generator_ctor": [
            {
                "type": "func",
                "args": {
                    "bit_generator_name": "str"
                }
            }
        ],
        "__bit_generator_ctor": [
            {
                "type": "func",
                "args": {
                    "bit_generator_name": "str"
                }
            }
        ],
        "__randomstate_ctor": [
            {
                "type": "func",
                "args": {
                    "bit_generator_name": "str"
                }
            }
        ]
    },
    "random": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "__RandomState_ctor": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ]
    },
    "fft._pocketfft": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "fmap"
            }
        ],
        "_unitary": [
            {
                "type": "func",
                "args": {
                    "norm": "str"
                }
            }
        ],
        "_fft_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "n": "int",
                    "axis": "int",
                    "norm": "str"
                }
            }
        ],
        "_fftn_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ],
        "_cook_nd_args": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "invreal": "int"
                }
            }
        ],
        "_raw_fft": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "n": "int",
                    "axis": "int",
                    "is_real": "bool",
                    "is_forward": "bool",
                    "inv_norm": "int"
                }
            }
        ],
        "irfft": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "n": "int",
                    "axis": "int",
                    "norm": "str"
                }
            }
        ],
        "hfft": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "n": "int",
                    "axis": "int",
                    "norm": "str"
                }
            }
        ],
        "rfft": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "n": "int",
                    "axis": "int",
                    "norm": "str"
                }
            }
        ],
        "ihfft": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "n": "int",
                    "axis": "int",
                    "norm": "str"
                }
            }
        ],
        "ifft": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "n": "int",
                    "axis": "int",
                    "norm": "str"
                }
            }
        ],
        "irfftn": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ],
        "irfft2": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ],
        "fft": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "n": "int",
                    "axis": "int",
                    "norm": "str"
                }
            }
        ],
        "rfftn": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ],
        "rfft2": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ],
        "_raw_fftnd": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "function": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ],
        "ifft2": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ],
        "fft2": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "int",
                    "norm": "str"
                }
            }
        ],
        "ifftn": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ],
        "fftn": [
            {
                "type": "func",
                "args": {
                    "a": "pfi.ArrayFunction",
                    "s": "pfi.ArrayFunction",
                    "axes": "pfi.ArrayFunction",
                    "norm": "str"
                }
            }
        ]
    },
    "fft.tests.test_helper": {
        "TestFFTShift.test_definition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTShift.test_inverse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTShift.test_axes_keyword": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTShift.test_uneven_dims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTFreq.test_definition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRFFTFreq.test_definition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIRFFTN.test_not_last_axis_success": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTShift.test_equal_to_original": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "fft.tests.test_pocketfft": {
        "TestFFTShift.test_fft_n": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_identity": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_ifft": [
            {
                "type": "method",
                "args": {
                    "norm": "str"
                }
            }
        ],
        "TestFFT1D.test_fft2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_ifft2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_fftn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_ifftn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_rfft": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_irfft": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_rfft2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_irfft2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_rfftn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_irfftn": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_hfft": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_ihttf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFT1D.test_axes": [
            {
                "type": "method",
                "args": {
                    "op": "np.fft.fft"
                }
            }
        ],
        "TestFFT1D.test_all_1d_norm_preserving": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTThreadSafe.threads": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestFFTThreadSafe.input_shape": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestFFT1D.test_dtypes": [
            {
                "type": "method",
                "args": {
                    "dtype": "str"
                }
            }
        ],
        "test_fft_with_order": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype",
                    "order": "str",
                    "fft": "typing.Callable"
                }
            }
        ],
        "fft1": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "TestFFT1D.test_fft": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTThreadSafe._test_mtsame": [
            {
                "type": "method",
                "args": {
                    "func": "Callable",
                    "args": "int"
                }
            }
        ],
        "TestFFTThreadSafe.test_irfft": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTThreadSafe.test_rfft": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTThreadSafe.test_ifft": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFFTThreadSafe.test_fft": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "fft": {
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ]
    },
    "fft.helper": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "integer_types": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "_fftshift_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "axes": "tuple"
                }
            }
        ],
        "fftfreq": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "d": "float"
                }
            }
        ],
        "rfftfreq": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "d": "float"
                }
            }
        ],
        "ifftshift": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "axes": "tuple"
                }
            }
        ],
        "fftshift": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "axes": "tuple"
                }
            }
        ]
    },
    "lib.mixins": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_disables_array_ufunc": [
            {
                "type": "func",
                "args": {
                    "obj": "um.Any"
                }
            }
        ],
        "_binary_method": [
            {
                "type": "func",
                "args": {
                    "ufunc": "um.Callable",
                    "name": "str"
                }
            }
        ],
        "_reflected_binary_method": [
            {
                "type": "func",
                "args": {
                    "ufunc": "um.Callable",
                    "name": "str"
                }
            }
        ],
        "_inplace_binary_method": [
            {
                "type": "func",
                "args": {
                    "ufunc": "um.Callable",
                    "name": "str"
                }
            }
        ],
        "_numeric_methods": [
            {
                "type": "func",
                "args": {
                    "ufunc": "um.Callable",
                    "name": "str"
                }
            }
        ],
        "_unary_method": [
            {
                "type": "func",
                "args": {
                    "ufunc": "um.UnaryOperator",
                    "name": "str"
                }
            }
        ],
        "NDArrayOperatorsMixin.__lt__": [
            {
                "type": "attr",
                "anno": "um.Callable"
            }
        ],
        "NDArrayOperatorsMixin.__le__": [
            {
                "type": "attr",
                "anno": "um.Callable"
            }
        ],
        "NDArrayOperatorsMixin.__eq__": [
            {
                "type": "attr",
                "anno": "um.Callable"
            }
        ],
        "NDArrayOperatorsMixin.__ne__": [
            {
                "type": "attr",
                "anno": "um.Callable"
            }
        ],
        "NDArrayOperatorsMixin.__gt__": [
            {
                "type": "attr",
                "anno": "um.Callable"
            }
        ],
        "NDArrayOperatorsMixin.__ge__": [
            {
                "type": "attr",
                "anno": "um.Callable"
            }
        ],
        "NDArrayOperatorsMixin.__divmod__": [
            {
                "type": "attr",
                "anno": "um.Callable"
            }
        ],
        "NDArrayOperatorsMixin.__rdivmod__": [
            {
                "type": "attr",
                "anno": "um.Callable"
            }
        ],
        "NDArrayOperatorsMixin.__neg__": [
            {
                "type": "attr",
                "anno": "um.UnaryOperator"
            }
        ],
        "NDArrayOperatorsMixin.__pos__": [
            {
                "type": "attr",
                "anno": "um.UnaryOperator"
            }
        ],
        "NDArrayOperatorsMixin.__abs__": [
            {
                "type": "attr",
                "anno": "um.UnaryOperator"
            }
        ],
        "NDArrayOperatorsMixin.__invert__": [
            {
                "type": "attr",
                "anno": "um.UnaryOperator"
            }
        ]
    },
    "lib._version": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "NumpyVersion.vstring": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NumpyVersion.version": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NumpyVersion.pre_release": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "NumpyVersion.is_devversion": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NumpyVersion._compare_version": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ],
        "NumpyVersion._compare_pre_release": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ],
        "NumpyVersion.__repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NumpyVersion.__init__": [
            {
                "type": "method",
                "args": {
                    "vstring": "str"
                }
            }
        ],
        "NumpyVersion._compare": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ],
        "NumpyVersion.__ge__": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ],
        "NumpyVersion.__gt__": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ],
        "NumpyVersion.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ],
        "NumpyVersion.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ],
        "NumpyVersion.__le__": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ],
        "NumpyVersion.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "NumpyVersion"
                }
            }
        ]
    },
    "lib.stride_tricks": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "DummyArray.__array_interface__": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "DummyArray.base": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "DummyArray.__init__": [
            {
                "type": "method",
                "args": {
                    "interface": "np.ndarray",
                    "base": "np.ndarray"
                }
            }
        ],
        "_broadcast_to_dispatcher": [
            {
                "type": "func",
                "args": {
                    "array": "np.ndarray",
                    "shape": "np.ndarray",
                    "subok": "bool"
                }
            }
        ],
        "_broadcast_arrays_dispatcher": [
            {
                "type": "func",
                "args": {
                    "args": "np.ndarray",
                    "subok": "bool"
                }
            }
        ],
        "_maybe_view_as_subclass": [
            {
                "type": "func",
                "args": {
                    "original_array": "np.ndarray",
                    "new_array": "np.ndarray"
                }
            }
        ],
        "_broadcast_to": [
            {
                "type": "func",
                "args": {
                    "array": "np.ndarray",
                    "shape": "np.ndarray",
                    "subok": "bool",
                    "readonly": "bool"
                }
            }
        ],
        "broadcast_to": [
            {
                "type": "func",
                "args": {
                    "array": "np.ndarray",
                    "shape": "np.ndarray",
                    "subok": "bool"
                }
            }
        ],
        "_broadcast_shape": [
            {
                "type": "func",
                "args": {
                    "args": "np.ndarray"
                }
            }
        ],
        "broadcast_arrays": [
            {
                "type": "func",
                "args": {
                    "args": "np.ndarray",
                    "subok": "bool"
                }
            }
        ],
        "as_strided": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "shape": "tuple",
                    "strides": "tuple",
                    "subok": "bool",
                    "writeable": "bool"
                }
            }
        ]
    },
    "lib.utils": {
        "__all__": [
            {
                "type": "var",
                "anno": "types.List[str]"
            }
        ],
        "get_include": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_set_function_name": [
            {
                "type": "func",
                "args": {
                    "func": "typing.Callable",
                    "name": "str"
                }
            }
        ],
        "_Deprecate.old_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_Deprecate.new_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_Deprecate.message": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_Deprecate.__init__": [
            {
                "type": "method",
                "args": {
                    "old_name": "str",
                    "new_name": "str",
                    "message": "str"
                }
            }
        ],
        "deprecate": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "deprecate_with_doc": [
            {
                "type": "var",
                "anno": "ufunc"
            }
        ],
        "_namedict": [
            {
                "type": "var",
                "anno": "typing.Optional[typing.Dict[str, typing.Any]]"
            }
        ],
        "_dictlist": [
            {
                "type": "var",
                "anno": "typing.Optional[typing.List[str]]"
            }
        ],
        "source": [
            {
                "type": "func",
                "args": {
                    "object": "numpy.ndarray",
                    "output": "sys.stdout"
                }
            }
        ],
        "_lookfor_caches": [
            {
                "type": "var",
                "anno": "typing.Dict[str, typing.Callable]"
            }
        ],
        "_function_signature_re": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "safe_eval": [
            {
                "type": "func",
                "args": {
                    "source": "str"
                }
            }
        ],
        "_split_line": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "arguments": "str",
                    "width": "int"
                }
            }
        ],
        "_makenamedict": [
            {
                "type": "func",
                "args": {
                    "module": "str"
                }
            }
        ],
        "_getmembers": [
            {
                "type": "func",
                "args": {
                    "item": "typing.Any"
                }
            }
        ],
        "_lookfor_generate_cache": [
            {
                "type": "func",
                "args": {
                    "module": "typing.Any",
                    "import_modules": "bool",
                    "regenerate": "bool"
                }
            }
        ],
        "byte_bounds": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "_median_nancheck": [
            {
                "type": "func",
                "args": {
                    "data": "np.ndarray",
                    "result": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray"
                }
            }
        ],
        "_get_indent": [
            {
                "type": "func",
                "args": {
                    "lines": "typing.List[str]"
                }
            }
        ],
        "lookfor": [
            {
                "type": "func",
                "args": {
                    "what": "typing.Any",
                    "module": "typing.Any",
                    "import_modules": "bool",
                    "regenerate": "bool",
                    "output": "typing.Optional[typing.Any]"
                }
            }
        ],
        "who": [
            {
                "type": "func",
                "args": {
                    "vardict": "dict"
                }
            }
        ],
        "_Deprecate.__call__": [
            {
                "type": "method",
                "args": {
                    "func": "typing.Callable",
                    "args": "typing.Any",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "_info": [
            {
                "type": "func",
                "args": {
                    "obj": "ndarray",
                    "output": "str"
                }
            }
        ],
        "info": [
            {
                "type": "func",
                "args": {
                    "object": "typing.Union[str, ndarray]",
                    "maxwidth": "int",
                    "output": "str",
                    "toplevel": "str"
                }
            }
        ]
    },
    "lib.ufunclike": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_deprecate_out_named_y": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "_fix_out_named_y": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "_fix_and_maybe_deprecate_out_named_y": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "nx.ndarray",
                    "out": "nx.ndarray"
                }
            }
        ],
        "fix": [
            {
                "type": "func",
                "args": {
                    "x": "nx.ndarray",
                    "out": "nx.ndarray"
                }
            }
        ],
        "isposinf": [
            {
                "type": "func",
                "args": {
                    "x": "nx.ndarray",
                    "out": "nx.ndarray"
                }
            }
        ],
        "isneginf": [
            {
                "type": "func",
                "args": {
                    "x": "nx.ndarray",
                    "out": "nx.ndarray"
                }
            }
        ]
    },
    "lib.arraypad": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_slice_at_axis": [
            {
                "type": "func",
                "args": {
                    "sl": "slice",
                    "axis": "int"
                }
            }
        ],
        "_view_roi": [
            {
                "type": "func",
                "args": {
                    "array": "np.ndarray",
                    "original_area_slice": "tuple",
                    "axis": "int"
                }
            }
        ],
        "_pad_dispatcher": [
            {
                "type": "func",
                "args": {
                    "array": "np.ndarray",
                    "pad_width": "np.ndarray",
                    "mode": "str",
                    "kwargs": "str"
                }
            }
        ],
        "_set_wrap_both": [
            {
                "type": "func",
                "args": {
                    "padded": "np.ndarray",
                    "axis": "int",
                    "width_pair": "tuple"
                }
            }
        ],
        "_set_reflect_both": [
            {
                "type": "func",
                "args": {
                    "padded": "np.ndarray",
                    "axis": "int",
                    "width_pair": "tuple",
                    "method": "str",
                    "include_edge": "bool"
                }
            }
        ],
        "_get_edges": [
            {
                "type": "func",
                "args": {
                    "padded": "np.ndarray",
                    "axis": "int",
                    "width_pair": "tuple"
                }
            }
        ],
        "_set_pad_area": [
            {
                "type": "func",
                "args": {
                    "padded": "np.ndarray",
                    "axis": "int",
                    "width_pair": "tuple",
                    "value_pair": "tuple"
                }
            }
        ],
        "_pad_simple": [
            {
                "type": "func",
                "args": {
                    "array": "np.ndarray",
                    "pad_width": "np.ndarray",
                    "fill_value": "int"
                }
            }
        ],
        "_get_linear_ramps": [
            {
                "type": "func",
                "args": {
                    "padded": "np.ndarray",
                    "axis": "int",
                    "width_pair": "tuple",
                    "end_value_pair": "tuple"
                }
            }
        ],
        "_round_if_needed": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray",
                    "dtype": "np.dtype"
                }
            }
        ],
        "_get_stats": [
            {
                "type": "func",
                "args": {
                    "padded": "np.ndarray",
                    "axis": "int",
                    "width_pair": "tuple",
                    "length_pair": "tuple",
                    "stat_func": "Callable"
                }
            }
        ],
        "_as_pairs": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "ndim": "int",
                    "as_index": "bool"
                }
            }
        ],
        "pad": [
            {
                "type": "func",
                "args": {
                    "array": "np.ndarray",
                    "pad_width": "np.ndarray",
                    "mode": "str",
                    "kwargs": "str"
                }
            }
        ]
    },
    "lib.scimath": {
        "__all__": [
            {
                "type": "var",
                "anno": "nt.List[str]"
            }
        ],
        "_ln2": [
            {
                "type": "var",
                "anno": "nx.Graph"
            }
        ],
        "_fix_int_lt_zero": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "_unary_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "nx.Graph"
                }
            }
        ],
        "_logn_dispatcher": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "x": "float"
                }
            }
        ],
        "_power_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "p": "float"
                }
            }
        ],
        "_tocomplex": [
            {
                "type": "func",
                "args": {
                    "arr": "nx.Graph"
                }
            }
        ],
        "_fix_real_abs_gt_1": [
            {
                "type": "func",
                "args": {
                    "x": "nx.Graph"
                }
            }
        ],
        "arctanh": [
            {
                "type": "func",
                "args": {
                    "x": "nx.Graph"
                }
            }
        ],
        "arcsin": [
            {
                "type": "func",
                "args": {
                    "x": "nx.Graph"
                }
            }
        ],
        "arccos": [
            {
                "type": "func",
                "args": {
                    "x": "nx.Graph"
                }
            }
        ],
        "_fix_real_lt_zero": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "power": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "p": "float"
                }
            }
        ],
        "log2": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "logn": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "x": "float"
                }
            }
        ],
        "log10": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "log": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "sqrt": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ]
    },
    "lib.function_base": {
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_rot90_dispatcher": [
            {
                "type": "func",
                "args": {
                    "m": "ndarray",
                    "k": "int",
                    "axes": "tuple"
                }
            }
        ],
        "_flip_dispatcher": [
            {
                "type": "func",
                "args": {
                    "m": "ndarray",
                    "axis": "tuple"
                }
            }
        ],
        "flip": [
            {
                "type": "func",
                "args": {
                    "m": "ndarray",
                    "axis": "tuple"
                }
            }
        ],
        "rot90": [
            {
                "type": "func",
                "args": {
                    "m": "ndarray",
                    "k": "int",
                    "axes": "tuple"
                }
            }
        ],
        "iterable": [
            {
                "type": "func",
                "args": {
                    "y": "Union[str, ndarray]"
                }
            }
        ],
        "_average_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "weights": "np.ndarray",
                    "returned": "bool"
                }
            }
        ],
        "_piecewise_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "condlist": "np.ndarray",
                    "funclist": "np.ndarray",
                    "args": "int",
                    "kw": "int"
                }
            }
        ],
        "_select_dispatcher": [
            {
                "type": "func",
                "args": {
                    "condlist": "list",
                    "choicelist": "list",
                    "default": "np.ndarray"
                }
            }
        ],
        "_copy_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "order": "int",
                    "subok": "bool"
                }
            }
        ],
        "copy": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "order": "int",
                    "subok": "bool"
                }
            }
        ],
        "_gradient_dispatcher": [
            {
                "type": "func",
                "args": {
                    "f": "ndarray",
                    "varargs": "int",
                    "axis": "int",
                    "edge_order": "int"
                }
            }
        ],
        "_diff_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "n": "int",
                    "axis": "int",
                    "prepend": "np.ndarray",
                    "append": "np.ndarray"
                }
            }
        ],
        "_interp_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "xp": "ndarray",
                    "fp": "ndarray",
                    "left": "np.ndarray",
                    "right": "np.ndarray",
                    "period": "float"
                }
            }
        ],
        "_angle_dispatcher": [
            {
                "type": "func",
                "args": {
                    "z": "ndarray",
                    "deg": "bool"
                }
            }
        ],
        "_unwrap_dispatcher": [
            {
                "type": "func",
                "args": {
                    "p": "ndarray",
                    "discont": "int",
                    "axis": "int"
                }
            }
        ],
        "_sort_complex": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "_trim_zeros": [
            {
                "type": "func",
                "args": {
                    "filt": "ndarray",
                    "trim": "str"
                }
            }
        ],
        "_extract_dispatcher": [
            {
                "type": "func",
                "args": {
                    "condition": "int",
                    "arr": "ndarray"
                }
            }
        ],
        "extract": [
            {
                "type": "func",
                "args": {
                    "condition": "int",
                    "arr": "ndarray"
                }
            }
        ],
        "_place_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "mask": "int",
                    "vals": "int"
                }
            }
        ],
        "place": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "mask": "int",
                    "vals": "int"
                }
            }
        ],
        "_DIMENSION_NAME": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_CORE_DIMENSION_LIST": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_ARGUMENT": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_ARGUMENT_LIST": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_SIGNATURE": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_calculate_shapes": [
            {
                "type": "func",
                "args": {
                    "broadcast_shape": "tuple",
                    "dim_sizes": "tuple",
                    "list_of_core_dims": "list"
                }
            }
        ],
        "vectorize.pyfunc": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "vectorize.cache": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "vectorize.signature": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "vectorize._ufunc": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "vectorize.__doc__": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "vectorize.otypes": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "vectorize.excluded": [
            {
                "type": "attr",
                "anno": "set"
            }
        ],
        "vectorize._in_and_out_core_dims": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "_cov_dispatcher": [
            {
                "type": "func",
                "args": {
                    "m": "ndarray",
                    "y": "ndarray",
                    "rowvar": "bool",
                    "bias": "bool",
                    "ddof": "int",
                    "fweights": "np.ndarray",
                    "aweights": "np.ndarray"
                }
            }
        ],
        "_corrcoef_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "rowvar": "bool",
                    "bias": "np.ndarray",
                    "ddof": "np.ndarray"
                }
            }
        ],
        "blackman": [
            {
                "type": "func",
                "args": {
                    "M": "int"
                }
            }
        ],
        "bartlett": [
            {
                "type": "func",
                "args": {
                    "M": "int"
                }
            }
        ],
        "hanning": [
            {
                "type": "func",
                "args": {
                    "M": "int"
                }
            }
        ],
        "hamming": [
            {
                "type": "func",
                "args": {
                    "M": "int"
                }
            }
        ],
        "_i0A": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_i0B": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_chbevl": [
            {
                "type": "func",
                "args": {
                    "x": "float",
                    "vals": "list"
                }
            }
        ],
        "_i0_1": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "_i0_2": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "_i0_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "_sinc_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "sinc": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray"
                }
            }
        ],
        "_msort_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "_median_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "out": "ndarray",
                    "overwrite_input": "bool",
                    "keepdims": "bool"
                }
            }
        ],
        "_percentile_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "q": "ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "bool"
                }
            }
        ],
        "_quantile_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "q": "ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "bool"
                }
            }
        ],
        "_quantile_is_valid": [
            {
                "type": "func",
                "args": {
                    "q": "ndarray"
                }
            }
        ],
        "_trapz_dispatcher": [
            {
                "type": "func",
                "args": {
                    "y": "ndarray",
                    "x": "ndarray",
                    "dx": "float",
                    "axis": "int"
                }
            }
        ],
        "_meshgrid_dispatcher": [
            {
                "type": "func",
                "args": {
                    "xi": "ndarray",
                    "copy": "bool",
                    "sparse": "bool",
                    "indexing": "str"
                }
            }
        ],
        "_delete_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "obj": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "_insert_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "obj": "ndarray",
                    "values": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "_append_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "values": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "_digitize_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "bins": "ndarray",
                    "right": "bool"
                }
            }
        ],
        "disp": [
            {
                "type": "func",
                "args": {
                    "mesg": "str",
                    "device": "str",
                    "linefeed": "bool"
                }
            }
        ],
        "_parse_gufunc_signature": [
            {
                "type": "func",
                "args": {
                    "signature": "str"
                }
            }
        ],
        "_update_dim_sizes": [
            {
                "type": "func",
                "args": {
                    "dim_sizes": "tuple",
                    "arg": "np.ndarray",
                    "core_dims": "tuple"
                }
            }
        ],
        "_parse_input_dimensions": [
            {
                "type": "func",
                "args": {
                    "args": "tuple",
                    "input_core_dims": "tuple"
                }
            }
        ],
        "interp": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "xp": "ndarray",
                    "fp": "ndarray",
                    "left": "np.ndarray",
                    "right": "np.ndarray",
                    "period": "float"
                }
            }
        ],
        "digitize": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "bins": "ndarray",
                    "right": "bool"
                }
            }
        ],
        "_create_arrays": [
            {
                "type": "func",
                "args": {
                    "broadcast_shape": "tuple",
                    "dim_sizes": "tuple",
                    "list_of_core_dims": "list",
                    "dtypes": "type"
                }
            }
        ],
        "vectorize._vectorize_call_with_signature": [
            {
                "type": "method",
                "args": {
                    "func": "Callable",
                    "args": "tuple"
                }
            }
        ],
        "angle": [
            {
                "type": "func",
                "args": {
                    "z": "ndarray",
                    "deg": "bool"
                }
            }
        ],
        "diff": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "n": "int",
                    "axis": "int",
                    "prepend": "np.ndarray",
                    "append": "np.ndarray"
                }
            }
        ],
        "select": [
            {
                "type": "func",
                "args": {
                    "condlist": "list",
                    "choicelist": "list",
                    "default": "np.ndarray"
                }
            }
        ],
        "piecewise": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "condlist": "np.ndarray",
                    "funclist": "np.ndarray",
                    "args": "int",
                    "kw": "int"
                }
            }
        ],
        "i0": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "kaiser": [
            {
                "type": "func",
                "args": {
                    "M": "int",
                    "beta": "float"
                }
            }
        ],
        "asarray_chkfinite": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "dtype": "np.dtype",
                    "order": "np.ndarray"
                }
            }
        ],
        "append": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "values": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "_ureduce": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "func": "Callable",
                    "kwargs": "int"
                }
            }
        ],
        "msort": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "sort_complex": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray"
                }
            }
        ],
        "unwrap": [
            {
                "type": "func",
                "args": {
                    "p": "ndarray",
                    "discont": "int",
                    "axis": "int"
                }
            }
        ],
        "insert": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "obj": "ndarray",
                    "values": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "delete": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "obj": "ndarray",
                    "axis": "int"
                }
            }
        ],
        "meshgrid": [
            {
                "type": "func",
                "args": {
                    "xi": "ndarray",
                    "copy": "bool",
                    "sparse": "bool",
                    "indexing": "str"
                }
            }
        ],
        "trapz": [
            {
                "type": "func",
                "args": {
                    "y": "ndarray",
                    "x": "ndarray",
                    "dx": "float",
                    "axis": "int"
                }
            }
        ],
        "average": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "weights": "np.ndarray",
                    "returned": "bool"
                }
            }
        ],
        "cov": [
            {
                "type": "func",
                "args": {
                    "m": "ndarray",
                    "y": "ndarray",
                    "rowvar": "bool",
                    "bias": "bool",
                    "ddof": "int",
                    "fweights": "np.ndarray",
                    "aweights": "np.ndarray"
                }
            }
        ],
        "corrcoef": [
            {
                "type": "func",
                "args": {
                    "x": "ndarray",
                    "y": "ndarray",
                    "rowvar": "bool",
                    "bias": "np.ndarray",
                    "ddof": "np.ndarray"
                }
            }
        ],
        "trim_zeros": [
            {
                "type": "func",
                "args": {
                    "filt": "ndarray",
                    "trim": "str"
                }
            }
        ],
        "gradient": [
            {
                "type": "func",
                "args": {
                    "f": "ndarray",
                    "varargs": "int",
                    "axis": "int",
                    "edge_order": "int"
                }
            }
        ],
        "_quantile_ureduce_func": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "q": "ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "bool"
                }
            }
        ],
        "_quantile_unchecked": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "q": "ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "bool"
                }
            }
        ],
        "quantile": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "q": "ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "bool"
                }
            }
        ],
        "percentile": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "q": "ndarray",
                    "axis": "int",
                    "out": "ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "bool"
                }
            }
        ],
        "_median": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "out": "ndarray",
                    "overwrite_input": "bool"
                }
            }
        ],
        "median": [
            {
                "type": "func",
                "args": {
                    "a": "ndarray",
                    "axis": "int",
                    "out": "ndarray",
                    "overwrite_input": "bool",
                    "keepdims": "bool"
                }
            }
        ],
        "vectorize._get_ufunc_and_otypes": [
            {
                "type": "method",
                "args": {
                    "func": "Callable",
                    "args": "tuple"
                }
            }
        ],
        "vectorize._vectorize_call": [
            {
                "type": "method",
                "args": {
                    "func": "Callable",
                    "args": "tuple"
                }
            }
        ],
        "vectorize.__call__": [
            {
                "type": "method",
                "args": {
                    "args": "tuple",
                    "kwargs": "tuple"
                }
            }
        ],
        "vectorize.__init__": [
            {
                "type": "method",
                "args": {
                    "pyfunc": "Callable",
                    "otypes": "str",
                    "doc": "str",
                    "excluded": "set",
                    "cache": "bool",
                    "signature": "str"
                }
            }
        ]
    },
    "lib.histograms": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_range": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "_hist_bin_scott": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "range": "_range"
                }
            }
        ],
        "_hist_bin_fd": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "range": "_range"
                }
            }
        ],
        "_search_sorted_inclusive": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "v": "np.ndarray"
                }
            }
        ],
        "_histogram_bin_edges_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "bins": "int",
                    "range": "float",
                    "weights": "np.ndarray"
                }
            }
        ],
        "_histogram_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "bins": "int",
                    "range": "int",
                    "normed": "bool",
                    "weights": "np.ndarray",
                    "density": "bool"
                }
            }
        ],
        "_histogramdd_dispatcher": [
            {
                "type": "func",
                "args": {
                    "sample": "np.ndarray",
                    "bins": "tuple",
                    "range": "tuple",
                    "normed": "bool",
                    "weights": "np.ndarray",
                    "density": "bool"
                }
            }
        ],
        "_unsigned_subtract": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray"
                }
            }
        ],
        "_ravel_and_check_weights": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "weights": "np.ndarray"
                }
            }
        ],
        "_get_outer_edges": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "range": "tuple"
                }
            }
        ],
        "histogramdd": [
            {
                "type": "func",
                "args": {
                    "sample": "np.ndarray",
                    "bins": "tuple",
                    "range": "tuple",
                    "normed": "bool",
                    "weights": "np.ndarray",
                    "density": "bool"
                }
            }
        ],
        "_ptp": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "_hist_bin_doane": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "range": "_range"
                }
            }
        ],
        "_hist_bin_stone": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "range": "_range"
                }
            }
        ],
        "_hist_bin_rice": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "range": "_range"
                }
            }
        ],
        "_hist_bin_sturges": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "range": "_range"
                }
            }
        ],
        "_hist_bin_auto": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "range": "_range"
                }
            }
        ],
        "_hist_bin_sqrt": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "range": "_range"
                }
            }
        ],
        "_hist_bin_selectors": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_get_bin_edges": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "bins": "int",
                    "range": "float",
                    "weights": "np.ndarray"
                }
            }
        ],
        "histogram": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "bins": "int",
                    "range": "int",
                    "normed": "bool",
                    "weights": "np.ndarray",
                    "density": "bool"
                }
            }
        ],
        "histogram_bin_edges": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "bins": "int",
                    "range": "float",
                    "weights": "np.ndarray"
                }
            }
        ]
    },
    "lib.nanfunctions": {
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "function_base"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_nanmin_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanmax_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanargmin_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int"
                }
            }
        ],
        "_nanargmax_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int"
                }
            }
        ],
        "_nansum_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanprod_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nancumsum_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray"
                }
            }
        ],
        "_nancumprod_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray"
                }
            }
        ],
        "_nanmean_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanmedian_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanpercentile_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "q": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanquantile_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "q": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanvar_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanstd_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_divide_by_count": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "b": "np.ndarray",
                    "out": "np.ndarray"
                }
            }
        ],
        "_copyto": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "val": "np.ndarray",
                    "mask": "np.ndarray"
                }
            }
        ],
        "_replace_nan": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "val": "np.ndarray"
                }
            }
        ],
        "nancumprod": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray"
                }
            }
        ],
        "nancumsum": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray"
                }
            }
        ],
        "nanprod": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "nansum": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "nanargmax": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int"
                }
            }
        ],
        "nanargmin": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int"
                }
            }
        ],
        "_nan_mask": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "out": "np.ndarray"
                }
            }
        ],
        "nanvar": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "nanstd": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "ddof": "int",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_remove_nan_1d": [
            {
                "type": "func",
                "args": {
                    "arr1d": "np.ndarray",
                    "overwrite_input": "bool"
                }
            }
        ],
        "_nanquantile_1d": [
            {
                "type": "func",
                "args": {
                    "arr1d": "np.ndarray",
                    "q": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str"
                }
            }
        ],
        "_nanquantile_ureduce_func": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "q": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str"
                }
            }
        ],
        "_nanquantile_unchecked": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "q": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "nanquantile": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "q": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "nanpercentile": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "q": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "interpolation": "str",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanmedian1d": [
            {
                "type": "func",
                "args": {
                    "arr1d": "np.ndarray",
                    "overwrite_input": "bool"
                }
            }
        ],
        "nanmean": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "dtype": "np.dtype",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "nanmax": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "nanmin": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "keepdims": "np.ndarray"
                }
            }
        ],
        "_nanmedian_small": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool"
                }
            }
        ],
        "_nanmedian": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool"
                }
            }
        ],
        "nanmedian": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "axis": "int",
                    "out": "np.ndarray",
                    "overwrite_input": "bool",
                    "keepdims": "np.ndarray"
                }
            }
        ]
    },
    "lib.tests.test_arraysetops": {
        "TestSetOps.test_intersect1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_intersect1d_array_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.Test.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_setxor1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_ediff1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_ediff1d_forbidden_type_casts": [
            {
                "type": "method",
                "args": {
                    "ary": "np.ndarray",
                    "prepend": "np.ndarray",
                    "append": "np.ndarray"
                }
            }
        ],
        "TestSetOps.test_in1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_in1d_char_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_in1d_invert": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_in1d_first_array_is_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_in1d_second_array_is_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_in1d_both_arrays_are_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_in1d_both_arrays_have_structured_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_union1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_setdiff1d_unique": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_setdiff1d_char_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_manyways": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnique.test_unique_axis_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnique.test_unique_1d_with_axis": [
            {
                "type": "method",
                "args": {
                    "axis": "int"
                }
            }
        ],
        "TestUnique.test_unique_sort_order_with_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnique._run_axis_tests": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestUnique.test_unique_axis_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_intersect1d_indices": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnique.test_unique_axis_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnique.test_unique_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_setdiff1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_ediff1d_scalar_handling": [
            {
                "type": "method",
                "args": {
                    "ary": "np.ndarray",
                    "prepend": "np.ndarray",
                    "append": "np.ndarray",
                    "expected": "np.ndarray"
                }
            }
        ],
        "TestUnique.test_unique_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_in1d_ravel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnique.test_unique_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSetOps.test_isin": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_recfunctions": {
        "get_fieldspec": [
            {
                "type": "var",
                "anno": "pytest.FuncCall_"
            }
        ],
        "get_names": [
            {
                "type": "var",
                "anno": "Callable[[], str]"
            }
        ],
        "get_names_flat": [
            {
                "type": "var",
                "anno": "np.lib.recfunctions.get_names_flat"
            }
        ],
        "zip_descr": [
            {
                "type": "var",
                "anno": "Callable[[tuple], tuple]"
            }
        ],
        "zip_dtype": [
            {
                "type": "var",
                "anno": "pytest.ZipType"
            }
        ],
        "TestRecFunctions.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestRecFunctions.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_zip_descr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_drop_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_get_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_get_names_flat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_get_fieldstructure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_find_duplicates": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestMergeArrays.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_solo": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_solo_w_flatten": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_flatten": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_flatten_wflexible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_wmasked_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_singlerecord": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendFields.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestAppendFields.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendFields.test_append_single": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendFields.test_append_double": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendFields.test_append_on_flex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendFields.test_append_on_nested": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.data": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestStackArrays.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.test_solo": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.test_unnamed_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestJoinBy.b": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestJoinBy.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_inner_join": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_join": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_outer_join": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_leftouter_join": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_duplicate_keys": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendFieldsObj.data": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestAppendFieldsObj.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAppendFieldsObj.test_append_to_objects": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy2.test_no_r2postfix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy2.test_no_postfix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy2.test_no_r1postfix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy2.setup": [
            {
                "type": "method",
                "args": {
                    "cls": "TestJoinBy"
                }
            }
        ],
        "TestRecFunctions.test_repack_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_join_subdtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_w_shorter_flex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_w_singlefield": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_find_duplicates_ignoremask": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy2.test_two_keys_two_vars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_padded_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_subarray_key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_same_name_different_dtypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_same_name_different_dtypes_key": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestJoinBy.test_different_field_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecursiveFillFields.test_masked_flexible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecursiveFillFields.test_simple_flexible": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_field_assignment_by_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_rename_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRecFunctions.test_structured_to_unstructured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.test_subdtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.test_checktitles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.test_autoconversion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.test_defaults": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.test_matching_named_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStackArrays.test_unnamed_and_named_fields": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMergeArrays.test_standard": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_utils": {
        "test_lookfor": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "old_func": [
            {
                "type": "func",
                "args": {
                    "x": "utils.BaseBounds"
                }
            }
        ],
        "old_func2": [
            {
                "type": "func",
                "args": {
                    "x": "utils.Base"
                }
            }
        ],
        "old_func3": [
            {
                "type": "func",
                "args": {
                    "x": "utils.Base"
                }
            }
        ],
        "new_func3": [
            {
                "type": "var",
                "anno": "utils.Base"
            }
        ],
        "old_func4": [
            {
                "type": "func",
                "args": {
                    "x": "utils.Base"
                }
            }
        ],
        "new_func4": [
            {
                "type": "var",
                "anno": "utils.Base"
            }
        ],
        "old_func5": [
            {
                "type": "func",
                "args": {
                    "x": "utils.Base"
                }
            }
        ],
        "new_func5": [
            {
                "type": "var",
                "anno": "utils.Base"
            }
        ],
        "old_func6": [
            {
                "type": "func",
                "args": {
                    "x": "utils.Base"
                }
            }
        ],
        "new_func6": [
            {
                "type": "var",
                "anno": "utils.Base"
            }
        ],
        "test_deprecate_decorator": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_deprecate_decorator_message": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_deprecate_fn": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_compare_docs": [
            {
                "type": "func",
                "args": {
                    "old_func": "utils.Base",
                    "new_func": "utils.Base"
                }
            }
        ],
        "test_deprecate_help_indentation": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_deprecate_preserve_whitespace": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_safe_eval_nameconstant": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestByteBounds.test_strided": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_assert_raises_regex_context_manager": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestByteBounds.test_byte_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestByteBounds.test_unusual_order_negative_stride": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestByteBounds.test_unusual_order_positive_stride": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_regression": {
        "TestRegression.test_poly1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_digitize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_unique_zero_sized": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_vectorise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mgrid_single_element": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_refcount_vectorize": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_poly1d_nan_roots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_polymul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_mem_string_concat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_poly_div": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_poly_eq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_polyfit_build": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_histogramdd_too_many_bins": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_ndenumerate_crash": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_asfarray_none": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_large_fancy_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_who_with_0dim_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_include_dirs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_polyder_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_loadtxt_fields_subarrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_nansum_with_boolean": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_append_fields_dtype_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_py3_compat": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_void_coercion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_polyint_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_polydiv_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRegression.test_cov_parameters": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_format": {
        "tempdir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "setup_module": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "teardown_module": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "scalars": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "basic_arrays": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "dtype": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "Pdescr": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "PbufferT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "Ndescr": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "NbufferT": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "record_arrays": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "roundtrip": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "roundtrip_randsize": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "roundtrip_truncated": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "assert_equal_": [
            {
                "type": "func",
                "args": {
                    "o1": "np.ndarray",
                    "o2": "np.ndarray"
                }
            }
        ],
        "test_roundtrip": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_long_str": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_compressed_roundtrip": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "dt1": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "dt2": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "dt3": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "dt4": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "dt5": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "dt6": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "test_load_padded_dtype": [
            {
                "type": "func",
                "args": {
                    "dt": "np.dtype"
                }
            }
        ],
        "test_python2_python3_interoperability": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_pickle_disallow": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_descr_to_dtype": [
            {
                "type": "func",
                "args": {
                    "dt": "np.ndarray"
                }
            }
        ],
        "test_write_version": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "bad_version_magic": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "malformed_magic": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "test_read_magic_bad_magic": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_read_version_1_0_bad_magic": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_bad_magic_args": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_large_header": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_bad_header": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_empty_npz": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_unicode_field_names": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "BytesIOSRandomSize.read": [
            {
                "type": "method",
                "args": {
                    "size": "int"
                }
            }
        ],
        "test_large_file_support": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_read_array_header_2_0": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_read_array_header_1_0": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_read_magic": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_version_2_0": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "basic": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "test_large_archive": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_metadata_dtype": [
            {
                "type": "func",
                "args": {
                    "dt": "np.dtype",
                    "fail": "bool"
                }
            }
        ],
        "test_version_2_0_memmap": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_memmap_roundtrip": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_roundtrip_truncated": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_roundtrip_randsize": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_pickle_python2_python3": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "lib.tests.test__datasource": {
        "old_urlopen": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "teardown_module": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "http_path": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "http_file": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "http_fakepath": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "http_fakefile": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "malicious_files": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "magic_line": [
            {
                "type": "var",
                "anno": "bytes"
            }
        ],
        "valid_textfile": [
            {
                "type": "func",
                "args": {
                    "filedir": "str"
                }
            }
        ],
        "invalid_textfile": [
            {
                "type": "func",
                "args": {
                    "filedir": "str"
                }
            }
        ],
        "valid_httpurl": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "urlopen_stub": [
            {
                "type": "func",
                "args": {
                    "url": "str",
                    "data": "dict"
                }
            }
        ],
        "setup_module": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "invalid_httpurl": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "valid_baseurl": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "invalid_baseurl": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "valid_httpfile": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "invalid_httpfile": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestDataSourceOpen.tmpdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestDataSourceOpen.ds": [
            {
                "type": "attr",
                "anno": "datasource.DataSource"
            }
        ],
        "TestDataSourceOpen.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceOpen.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceExists.tmpdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestDataSourceExists.ds": [
            {
                "type": "attr",
                "anno": "datasource.DataSource"
            }
        ],
        "TestDataSourceExists.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceExists.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceAbspath.tmpdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestDataSourceAbspath.ds": [
            {
                "type": "attr",
                "anno": "datasource.DataSource"
            }
        ],
        "TestDataSourceAbspath.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceAbspath.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryAbspath.tmpdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestRepositoryAbspath.repos": [
            {
                "type": "attr",
                "anno": "datasource.Repository"
            }
        ],
        "TestRepositoryAbspath.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryAbspath.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryExists.tmpdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestRepositoryExists.repos": [
            {
                "type": "attr",
                "anno": "datasource.Repository"
            }
        ],
        "TestRepositoryExists.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryExists.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOpenFunc.tmpdir": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestOpenFunc.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestOpenFunc.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_del_attr_handling": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestOpenFunc.test_DataSourceOpen": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryExists.test_CachedHTTPFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryExists.test_RemoveHTTPFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryExists.test_InvalidFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryExists.test_ValidFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceExists.test_InvalidFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceExists.test_ValidFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceExists.test_InvalidHTTP": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceExists.test_ValidHTTP": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceOpen.test_InvalidHTTPCacheURLError": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryAbspath.test_sandboxing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryAbspath.test_ValidHTTP": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepositoryAbspath.test_windows_os_sep": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceAbspath.test_sandboxing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceAbspath.test_InvalidFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceAbspath.test_InvalidHTTP": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceAbspath.test_ValidFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceAbspath.test_ValidHTTP": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceAbspath.test_windows_os_sep": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceOpen.test_ValidBz2File": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceOpen.test_ValidGzipFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceOpen.test_InvalidFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceOpen.test_ValidFile": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceOpen.test_InvalidHTTP": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDataSourceOpen.test_ValidHTTP": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test__version": {
        "test_main_versions": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_version_1_point_10": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_alpha_beta_rc": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_dev_version": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_dev_a_b_rc_mixed": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_dev0_version": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_dev0_a_b_rc_mixed": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_raises": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "lib.tests.test_function_base": {
        "get_mat": [
            {
                "type": "func",
                "args": {
                    "n": "int"
                }
            }
        ],
        "TestRot90.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_axes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_basic_lr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_basic_ud": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_3d_swap_axis0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_3d_swap_axis1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_3d_swap_axis2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_default_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_multiple_axes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAny.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAny.test_nd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAll.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAll.test_nd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCopy.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCopy.test_subok": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_returned": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSelect.choices": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestSelect.conditions": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestSelect._select": [
            {
                "type": "method",
                "args": {
                    "cond": "list",
                    "values": "list",
                    "default": "int"
                }
            }
        ],
        "TestSelect.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSelect.test_deprecated_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSelect.test_many_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInsert.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInsert.test_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInsert.test_index_array_copied": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAmax.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAmin.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCumsum.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCumprod.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiff.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiff.test_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiff.test_nd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDelete.a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestDelete.nd_a": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestDelete._check_inverse_of_slicing": [
            {
                "type": "method",
                "args": {
                    "indices": "slice"
                }
            }
        ],
        "TestDelete.test_slices": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDelete.test_fancy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDelete.test_single": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDelete.test_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_second_order_accurate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_specific_axes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_f_decreasing_unsigned_int": [
            {
                "type": "method",
                "args": {
                    "f_dtype": "np.dtype"
                }
            }
        ],
        "TestGradient.test_x_decreasing_unsigned": [
            {
                "type": "method",
                "args": {
                    "x_dtype": "np.dtype"
                }
            }
        ],
        "TestAngle.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTrimZeros.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTrimZeros.test_leading_skip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTrimZeros.test_trailing_skip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExtins.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExtins.test_place": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_large": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_ufunc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_keywords": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_keywords_no_func_code": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_keywords2_ticket_2100": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_keywords3_ticket_2100": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_keywords4_ticket_2100": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_keywords5_ticket_2100": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_coverage1_ticket_2100": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_assigning_docstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.Foo.b": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestVectorize.Foo.bar": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "TestVectorize.test_UnboundMethod_ticket_1156": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_execution_order_ticket_1487": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_string_ticket_1892": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_cache": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_otypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_parse_gufunc_signature": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_two_outputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_outer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_computed_size": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_excluded": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_invalid_inputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_invalid_outputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLeaks.A.iters": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestLeaks.A.bound": [
            {
                "type": "method",
                "args": {
                    "args": "int"
                }
            }
        ],
        "TestLeaks.A.unbound": [
            {
                "type": "method",
                "args": {
                    "args": "int"
                }
            }
        ],
        "TestDigitize.test_forward": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_reverse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_right_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_right_open": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_right_open_reverse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_monotonic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_casting_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_large_integers_increasing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_large_integers_decreasing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnwrap.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFilterwindows.test_hanning": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFilterwindows.test_hamming": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFilterwindows.test_bartlett": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFilterwindows.test_blackman": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTrapz.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTrapz.test_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSinc.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSinc.test_array_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUnique.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCheckFinite.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrCoef.A": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrCoef.B": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrCoef.res1": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrCoef.res2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCorrCoef.test_non_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrCoef.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrCoef.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrCoef.test_xy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrCoef.test_extreme": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.res1": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.x2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.frequencies": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.res2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.unit_frequencies": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.weights": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.res3": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.unit_weights": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.x3": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_xy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_1D_rowvar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_1D_variance": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_I0.test_non_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_I0.array_like.__array_interface__": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Test_I0.array_like.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "arr": "np.ndarray"
                }
            }
        ],
        "TestKaiser.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestKaiser.test_int_beta": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMsort.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMeshgrid.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMeshgrid.test_single_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMeshgrid.test_no_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMeshgrid.test_sparse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMeshgrid.test_invalid_arguments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMeshgrid.test_writeback": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPiecewise.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPiecewise.test_two_conditions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPiecewise.test_scalar_domains_three_conditions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPiecewise.test_default": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPiecewise.test_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPiecewise.test_0d_comparison": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPiecewise.test_0d_0d_condition": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPiecewise.test_multidimensional_extrafunc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_simple2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_simple_weight": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_simple_weight2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_with_minlength": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_with_minlength_smaller_than_maxvalue": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_with_minlength_and_weights": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_empty_with_minlength": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_with_incorrect_minlength": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestBincount.test_dtype_reference_leaks": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_right_left_behavior": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_scalar_interpolation_point": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_non_finite_behavior_exact_x": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_complex_interp": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_zero_dimensional_interpolation_point": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_if_len_x_is_small": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "compare_results": [
            {
                "type": "func",
                "args": {
                    "res": "np.ndarray",
                    "desired": "np.ndarray"
                }
            }
        ],
        "TestPercentile.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_fraction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_api": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_2D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_linear": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_lower_higher": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_midpoint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_nearest": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_sequence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_exception": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_percentile_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_percentile_no_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_percentile_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_extended_axis_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_out_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestQuantile.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestQuantile.test_fraction": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_array_like": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.MySubClass.mean": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "dtype": "np.ndarray",
                    "out": "str"
                }
            }
        ],
        "TestMedian.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_out_nan": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_extended_axis_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAdd_newdoc_ufunc.test_ufunc_arg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAdd_newdoc_ufunc.test_string_arg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAdd_newdoc.test_add_doc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSelect.test_non_bool_deprecation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCopy.test_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLeaks.test_frompyfunc_leaks": [
            {
                "type": "method",
                "args": {
                    "name": "str",
                    "incr": "int"
                }
            }
        ],
        "TestProd.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.MySubClass.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "typing.Type[MySubClass]",
                    "input_array": "np.ndarray",
                    "info": "dict"
                }
            }
        ],
        "TestDigitize.test_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDelete.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInsert.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_subclasses": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMeshgrid.test_indexing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Test_I0.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRot90.test_axes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_make_complex": [
            {
                "type": "func",
                "args": {
                    "real": "np.ndarray",
                    "imag": "np.ndarray"
                }
            }
        ],
        "TestInterp.sc": [
            {
                "type": "method",
                "args": {
                    "request": "Any"
                }
            }
        ],
        "TestInterp.test_non_finite_half_inf_f": [
            {
                "type": "method",
                "args": {
                    "sc": "np.ndarray"
                }
            }
        ],
        "TestInterp.test_non_finite_half_inf_x": [
            {
                "type": "method",
                "args": {
                    "sc": "np.ndarray"
                }
            }
        ],
        "TestInterp.test_non_finite_half_inf_xf": [
            {
                "type": "method",
                "args": {
                    "sc": "np.ndarray"
                }
            }
        ],
        "TestInterp.test_non_finite_inf": [
            {
                "type": "method",
                "args": {
                    "sc": "np.ndarray"
                }
            }
        ],
        "TestInterp.test_non_finite_any_nan": [
            {
                "type": "method",
                "args": {
                    "sc": "np.ndarray"
                }
            }
        ],
        "TestSortComplex.test_sort_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSortComplex.test_sort_real": [
            {
                "type": "method",
                "args": {
                    "type_in": "str",
                    "type_out": "str"
                }
            }
        ],
        "TestQuantile.test_correct_quantile_value": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMeshgrid.test_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCheckFinite.test_dtype_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_otypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_inexact_dtypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_timedelta64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_datetime64": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiff.test_times": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiff.test_n": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInsert.test_structured_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSelect.test_return_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_upcasting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_nan_behavior": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_nan_behavior": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_percentile_empty_dim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_percentile_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_scalar_q": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterp.test_period": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrCoef.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_badargs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_args": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDelete.test_array_order_preserve": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiff.test_append": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiff.test_prepend": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSelect.test_broadcasting": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRot90.test_rotation_axes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.x2_repeats": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.x1": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCov.test_unit_fweights_and_aweights": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_aweights": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_fweights": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_wrong_ddof": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCov.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_size_zero_output": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_spacing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlip.test_4d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDelete.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInsert.test_multidim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAngle.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiff.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_extended_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_overwrite_keyword": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_axis_keyword": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_extended_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExtins.test_both": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTrapz.test_ndim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_weights": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMedian.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_center": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVectorize.test_signature_mean_last": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_object_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAverage.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_f_signed_int_big_jump": [
            {
                "type": "method",
                "args": {
                    "f_dtype": "np.dtype"
                }
            }
        ],
        "TestDigitize.test_right_open_random": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDigitize.test_random": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGradient.test_x_signed_int_big_jump": [
            {
                "type": "method",
                "args": {
                    "x_dtype": "np.dtype"
                }
            }
        ],
        "TestPtp.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestQuantile.test_no_p_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPercentile.test_no_p_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrCoef.test_bias": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCorrCoef.test_ddof": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_type_check": {
        "assert_all": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "TestCommonType.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMintypecode.test_default_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMintypecode.test_default_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMintypecode.test_default_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsscalar.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestReal.test_real": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestImag.test_real": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplex.test_fail": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplex.test_pass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsreal.test_pass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsreal.test_fail": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.test_list": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.DummyComplexArray.dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.PdDtype.name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestIscomplexobj.PdDtype.names": [
            {
                "type": "attr",
                "anno": "list | None"
            }
        ],
        "TestIscomplexobj.PdDtype.type": [
            {
                "type": "attr",
                "anno": "type"
            }
        ],
        "TestIscomplexobj.PdDtype.kind": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestIscomplexobj.PdDtype.str": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestIscomplexobj.PdDtype.base": [
            {
                "type": "attr",
                "anno": "np.dtype"
            }
        ],
        "TestIscomplexobj.DummyPd.dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.MyArray.dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsrealobj.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsnan.test_goodvalues": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsnan.test_posinf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsnan.test_neginf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsnan.test_ind": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsnan.test_integer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsnan.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsnan.test_complex1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsfinite.test_goodvalues": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsfinite.test_posinf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsfinite.test_neginf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsfinite.test_ind": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsfinite.test_integer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsfinite.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsfinite.test_complex1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsinf.test_goodvalues": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsinf.test_posinf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsinf.test_posinf_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsinf.test_neginf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsinf.test_neginf_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsinf.test_ind": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsposinf.test_generic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIsneginf.test_generic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanToNum.test_generic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanToNum.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanToNum.test_integer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanToNum.test_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanToNum.test_complex_good": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanToNum.test_complex_bad": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanToNum.test_complex_bad2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanToNum.test_do_not_rewrite_previous_keyword": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRealIfClose.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestReal.test_cmplx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestImag.test_cmplx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArrayConversion.test_asfarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.test_custom_dtype_duck": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.test_pandas_duck": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIscomplexobj.test_duck": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_shape_base": {
        "IS_64BIT": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "_add_keepdims": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "TestTakeAlongAxis.test_argequivalent": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_tuple_func1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExpandDims.test_axis_out_of_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExpandDims.test_repeated_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_integer_0_split": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSplit.test_unequal_split": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestColumnStack.test_non_iterable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestColumnStack.test_1D_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestColumnStack.test_2D_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestColumnStack.test_generator": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDstack.test_non_iterable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDstack.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDstack.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDstack.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDstack.test_2D_array2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDstack.test_generator": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHsplit.test_non_iterable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHsplit.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVsplit.test_non_iterable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVsplit.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVsplit.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDsplit.test_non_iterable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDsplit.test_0D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDsplit.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDsplit.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSqueeze.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestKron.myarray.__array_priority__": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "TestTile.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTile.test_tile_one_repetition_on_array_gh4679": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMayShareMemory.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "compare_results": [
            {
                "type": "func",
                "args": {
                    "res": "np.ndarray",
                    "desired": "np.ndarray"
                }
            }
        ],
        "TestDsplit.test_3D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVsplit.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHsplit.test_2D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHsplit.test_1D_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSplit.test_equal_split": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_index_split_high_bound": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_index_split_low_bound": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_index_split_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_integer_split_2D_cols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_integer_split": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTakeAlongAxis.test_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_0d_array": [
            {
                "type": "method",
                "args": {
                    "cls": "np.ndarray"
                }
            }
        ],
        "TestApplyAlongAxis.test_scalar_array": [
            {
                "type": "method",
                "args": {
                    "cls": "np.ndarray"
                }
            }
        ],
        "TestApplyAlongAxis.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_preserve_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTile.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_integer_split_2D_rows_greater_max_int32": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExpandDims.test_axis_tuple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExpandDims.test_functionality": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_with_iterable_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_simple101": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTakeAlongAxis.test_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTakeAlongAxis.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTile.test_kroncompare": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestKron.test_return_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_integer_split_2D_default": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArraySplit.test_integer_split_2D_rows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyOverAxes.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_axis_insertion": [
            {
                "type": "method",
                "args": {
                    "cls": "np.ndarray"
                }
            }
        ],
        "TestApplyAlongAxis.test_subclass_preservation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPutAlongAxis.test_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestExpandDims.test_subclasses": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestApplyAlongAxis.test_axis_insertion_ma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPutAlongAxis.test_replace_max": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_twodim_base": {
        "get_mat": [
            {
                "type": "func",
                "args": {
                    "n": "int"
                }
            }
        ],
        "TestEye.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEye.test_diag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEye.test_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEye.test_diag2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEye.test_eye_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEye.test_strings": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEye.test_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiag.test_diag_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiag.test_failure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFliplr.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFlipud.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram2d.test_asym": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram2d.test_density": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram2d.test_all_outliers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram2d.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram2d.test_binparameter_combination": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram2d.test_dispatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram2d.ShouldDispatch.__array_function__": [
            {
                "type": "method",
                "args": {
                    "function": "np.ndarray",
                    "types": "np.ndarray",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestTrilIndicesFrom.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTriuIndicesFrom.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_dtypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestTri.test_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiag.test_matrix": [
            {
                "type": "method",
                "args": {
                    "vals": "np.ndarray"
                }
            }
        ],
        "TestDiag.test_fortran_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEye.test_order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_tril_triu_dtype": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_tril_triu_ndim3": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestTriuIndices.test_triu_indices": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_tril_indices": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_mask_indices": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_tril_triu_with_inf": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_tril_triu_ndim2": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestHistogram2d.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiag.test_vector": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_index_tricks": {
        "TestRavelUnravelIndex.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRavelUnravelIndex.test_empty_indices": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRavelUnravelIndex.test_dtypes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRavelUnravelIndex.test_clipmodes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRavelUnravelIndex.test_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGrid.test_linspace_equivalence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGrid.test_sparse": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGrid.test_mgrid_size_none_handling": [
            {
                "type": "method",
                "args": {
                    "start": "int",
                    "stop": "int",
                    "step": "int",
                    "expected": "tuple"
                }
            }
        ],
        "TestConcatenator.test_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNdenumerate.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexExpression.test_regression_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIndexExpression.test_simple_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIx_.test_bool": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIx_.test_1d_only": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_c_": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestFillDiagonal.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillDiagonal.test_tall_matrix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillDiagonal.test_tall_matrix_wrap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillDiagonal.test_wide_matrix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillDiagonal.test_operate_4d_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillDiagonal.test_low_dim_handling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFillDiagonal.test_hetero_shape_handling": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_diag_indices": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestDiagIndicesFrom.test_diag_indices_from": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiagIndicesFrom.test_error_small_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDiagIndicesFrom.test_error_shape_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_ndindex": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestRavelUnravelIndex.test_writeability": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIx_.test_repeated_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_complex_step": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGrid.test_nd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGrid.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRavelUnravelIndex.test_empty_array_unravel": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRavelUnravelIndex.test_empty_array_ravel": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestIx_.test_shape_and_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIx_.test_regression_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_more_mixed_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConcatenator.test_mixed_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRavelUnravelIndex.test_big_indices": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_arraypad": {
        "_numeric_dtypes": [
            {
                "type": "var",
                "anno": "np.dtype"
            }
        ],
        "_all_modes": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "TestAsPairs.test_single_value": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsPairs.test_two_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsPairs.test_with_none": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsPairs.test_as_index": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAsPairs.test_exceptions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_maximum_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_maximum_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_maximum_stat_length": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_minimum_1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_minimum_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_minimum_stat_length": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_median_01": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_mean_shape_one": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_same_prepend_append": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestStatistic.test_simple_stat_length": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_zero_stat_length_valid": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestStatistic.test_zero_stat_length_invalid": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestConstant.test_check_constant": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstant.test_check_constant_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstant.test_check_constant_float3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstant.test_check_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinearRamp.test_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinearRamp.test_negative_difference": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestReflect.test_check_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestReflect.test_check_odd_method": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestReflect.test_check_large_pad": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestReflect.test_check_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestReflect.test_check_01": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestReflect.test_check_02": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestReflect.test_check_03": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSymmetric.test_check_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSymmetric.test_check_odd_method": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSymmetric.test_check_large_pad": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSymmetric.test_check_large_pad_odd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSymmetric.test_check_shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSymmetric.test_check_01": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSymmetric.test_check_02": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSymmetric.test_check_03": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWrap.test_check_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWrap.test_check_large_pad": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWrap.test_check_01": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWrap.test_check_02": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWrap.test_pad_with_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestWrap.test_repeated_wrapping": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEdge.test_check_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_unicode_mode": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_object_input": [
            {
                "type": "func",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestPadWidth.test_pad_width_as_ndarray": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_constant_zero_default": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_unsupported_mode": [
            {
                "type": "func",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestLinearRamp.test_check_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_mean_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_median_stat_length": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_median": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_mean_stat_length": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEmptyArray.test_pad_empty_dimension": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "test_memory_layout_persistence": [
            {
                "type": "func",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestEmpty.test_pad_empty_dimension": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEmptyArray.test_pad_non_empty_dimension": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestConstant.test_pad_empty_dimension": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_kwargs": [
            {
                "type": "func",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "test_dtype_persistence": [
            {
                "type": "func",
                "args": {
                    "dtype": "str",
                    "mode": "str"
                }
            }
        ],
        "test_non_contiguous_array": [
            {
                "type": "func",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestPadWidth.test_zero_pad_width": [
            {
                "type": "method",
                "args": {
                    "pad_width": "int",
                    "mode": "str"
                }
            }
        ],
        "TestPadWidth.test_bad_type": [
            {
                "type": "method",
                "args": {
                    "pad_width": "int",
                    "dtype": "int",
                    "mode": "int"
                }
            }
        ],
        "TestPadWidth.test_negative_pad_width": [
            {
                "type": "method",
                "args": {
                    "pad_width": "int",
                    "mode": "str"
                }
            }
        ],
        "TestPadWidth.test_misshaped_pad_width_2": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestPadWidth.test_misshaped_pad_width": [
            {
                "type": "method",
                "args": {
                    "pad_width": "int",
                    "mode": "str"
                }
            }
        ],
        "test_legacy_vector_functionality": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestEmpty.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEdge.test_check_width_shape_1_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinearRamp.test_end_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinearRamp.test_check_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstant.test_check_constant_pad_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstant.test_check_constant_odd_pad_amount": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstant.test_check_constant_float2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstant.test_check_constant_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_negative_stat_length": [
            {
                "type": "method",
                "args": {
                    "mode": "str",
                    "stat_length": "int"
                }
            }
        ],
        "TestConditionalShortcuts.test_clip_statistic_range": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestConditionalShortcuts.test_shallow_statistic_range": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestConditionalShortcuts.test_zero_padding_shortcuts": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "TestAsPairs.test_pass_through": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStatistic.test_check_median_02": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstant.test_check_large_integers": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_io": {
        "TextIO.__init__": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "TextIO.write": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "TextIO.writelines": [
            {
                "type": "method",
                "args": {
                    "lines": "list"
                }
            }
        ],
        "IS_64BIT": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "HAS_BZ2": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "HAS_LZMA": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "RoundtripTest.arr": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "RoundtripTest.arr_reloaded": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestSaveTxt.test_0D_3D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_multifield_view": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_file_roundtrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_large_zip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.loadfunc": [
            {
                "type": "attr",
                "anno": "Callable"
            }
        ],
        "TestLoadTxt.orig_chunk": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "TestLoadTxt.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.CrazyInt.__index__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_shaped_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_3d_shaped_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_str_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_generator_source": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Testfromregex.test_compiled_bytes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.loadfunc": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "TestFromTxt.test_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_1D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_comments": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_skiprows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_header": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_auto_dtype_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_fancy_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_names_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_commented_header": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_names_and_comments_none": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_autonames_and_usecols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_converters_with_usecols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_converters_with_usecols_and_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_tricky_converter_bug1666": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_dtype_with_converters": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_userconverters_with_explicit_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_spacedelimiter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_integer_delimiter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_usecols_as_css": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_usecols_with_structured_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_usecols_with_integer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_usecols_with_named_columns": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_fancy_dtype_alt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_shaped_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_user_missing_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_user_filling_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_with_masked_column_uniform": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_with_masked_column_various": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_default_field_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_single_dtype_wo_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_single_dtype_w_explicit_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_single_dtype_w_implicit_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_easy_structured_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_autostrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_replace_space": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_replace_space_known_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_incomplete_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_names_auto_completion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_fixed_width_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_filling_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_comments_is_none": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_utf8_byte_encoding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_gft_using_generator": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_loadtxt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_save_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_save_load_memmap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_save_load_memmap_readwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_savez_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_genfromtxt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JustWriter.base": [
            {
                "type": "attr",
                "anno": "TextIO"
            }
        ],
        "JustWriter.__init__": [
            {
                "type": "method",
                "args": {
                    "base": "TextIO"
                }
            }
        ],
        "JustReader.base": [
            {
                "type": "attr",
                "anno": "TextIO"
            }
        ],
        "JustReader.__init__": [
            {
                "type": "method",
                "args": {
                    "base": "TextIO"
                }
            }
        ],
        "JustWriter.flush": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "JustReader.read": [
            {
                "type": "method",
                "args": {
                    "n": "int"
                }
            }
        ],
        "JustReader.seek": [
            {
                "type": "method",
                "args": {
                    "off": "int",
                    "whence": "int"
                }
            }
        ],
        "TestFromTxt.test_usecols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_unused_converter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_unused_converter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_usecols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_unicode_and_bytes_fmt": [
            {
                "type": "method",
                "args": {
                    "fmt": "str",
                    "iotype": "Union[StringIO, BytesIO]"
                }
            }
        ],
        "TestSaveTxt.test_complex_negative_exponent": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_complex_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_header_footer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_format": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_delimiter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_structured_padded": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_structured": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_1D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSavezLoad.test_not_closing_opened_fid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSavezLoad.test_named_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_ducktyping": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_load_refcount": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestSaveTxt.CustomWriter.write": [
            {
                "type": "method",
                "args": {
                    "text": "str"
                }
            }
        ],
        "JustWriter.write": [
            {
                "type": "method",
                "args": {
                    "s": "str"
                }
            }
        ],
        "Testfromregex.test_record_3": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Testfromregex.test_record_2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Testfromregex.test_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_max_rows_larger": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_max_rows_with_read_continuation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_max_rows_with_skiprows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_max_rows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_none_as_string": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_bad_line": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_empty_field_after_tab": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_universal_newline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_from_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_int64_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_uint64_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_fancy_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_skiprows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_comments_multi_chars": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_comments_multiple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_comments_byte": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_comments_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_converters_with_usecols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_1D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_custom_writer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_gzip_loadtxt_from_string": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_gzip_loadtxt": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_gzip_load": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestPathUsage.test_savez_compressed_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSavezLoad.test_closing_zipfile_after_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSavezLoad.test_big_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RoundtripTest.roundtrip": [
            {
                "type": "method",
                "args": {
                    "save_func": "Callable[[np.ndarray], np.ndarray]",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "RoundtripTest.test_mmap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RoundtripTest.test_1D": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSavezLoad.test_BagObj": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_npzfile_dict": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "RoundtripTest.check_roundtrips": [
            {
                "type": "method",
                "args": {
                    "a": "np.ndarray"
                }
            }
        ],
        "RoundtripTest.test_format_2_0": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RoundtripTest.test_record": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RoundtripTest.test_array_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RoundtripTest.test_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_auto_dtype_largeint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_names_with_usecols_bug1636": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_auto_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_structure_unpack": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSavezLoad.roundtrip": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestSavezLoad.test_multiple_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveLoad.roundtrip": [
            {
                "type": "method",
                "args": {
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "TestFromTxt.test_gft_from_gzip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_gft_using_filename": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoadTxtBase.check_compressed": [
            {
                "type": "method",
                "args": {
                    "fopen": "TextIO",
                    "suffixes": "tuple"
                }
            }
        ],
        "LoadTxtBase.test_compressed_lzma": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoadTxtBase.test_compressed_bz2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoadTxtBase.test_compressed_gzip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_recfromtxt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_withmissing_float": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_withmissing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_missing_with_tabs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_recfromcsv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_invalid_converter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_recfromcsv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_recfromtxt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_mafromtxt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPathUsage.test_ndfromtxt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_complex_misformatted": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_max_rows": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_empty_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_skip_footer_with_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_ndmin_keyword": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_empty_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSavezLoad.test_closing_fid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_invalid_raise_with_usecols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_invalid_raise": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_skip_footer": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_from_float_hex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSavezLoad.test_savez_filename_clashes": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_utf8_file_nodtype_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_file_is_closed_on_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoadTxtBase.test_encoding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_utf8_file": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_binary_decode_autodtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_latin1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_inconsistent_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_utf8_userconverters_with_explicit_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_dtype_with_converters_and_usecols": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Testfromregex.test_record_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_binary_load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoadTxtBase.test_converters_nodecode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoadTxtBase.test_converters_decode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoadTxtBase.test_binary_decode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "LoadTxtBase.test_stringload": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_unicode_stringstream": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_unicode_bytestream": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_unicode_roundtrip": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSaveTxt.test_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "strptime": [
            {
                "type": "func",
                "args": {
                    "s": "str",
                    "fmt": "typing.Optional[str]"
                }
            }
        ],
        "TestFromTxt.test_dtype_with_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_converters_cornercases2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFromTxt.test_converters_cornercases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLoadTxt.test_dtype_with_object": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_ufunclike": {
        "TestUfunclike.MyArray.metadata": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestUfunclike.MyArray.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "nx.ndarray"
                }
            }
        ],
        "TestUfunclike.MyArray.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "obj": "nx.ndarray",
                    "context": "nx.Context"
                }
            }
        ],
        "TestUfunclike.test_deprecated": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunclike.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunclike.MyArray.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type[nx.ndarray]",
                    "data": "np.ndarray",
                    "metadata": "str"
                }
            }
        ],
        "TestUfunclike.test_fix_with_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunclike.test_fix": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunclike.test_isneginf": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestUfunclike.test_isposinf": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_nanfunctions": {
        "_ndat": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "_rdat": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_ndat_ones": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "_ndat_zeros": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "TestNanFunctions_MinMax.nanfuncs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestNanFunctions_MinMax.stdfuncs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestNanFunctions_MinMax.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_result_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_object_array": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_ArgminArgmax.nanfuncs": [
            {
                "type": "attr",
                "anno": "list[Callable]"
            }
        ],
        "TestNanFunctions_ArgminArgmax.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_ArgminArgmax.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.int_types": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "TestNanFunctions_IntTypes.mat": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestNanFunctions_SumProd.nanfuncs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestNanFunctions_SumProd.stdfuncs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestNanFunctions_SumProd.test_allnans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_SumProd.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_CumSumProd.nanfuncs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestNanFunctions_CumSumProd.stdfuncs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestNanFunctions_CumSumProd.test_allnans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_CumSumProd.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_CumSumProd.test_result_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_CumSumProd.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MeanVarStd.nanfuncs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SharedNanFunctionsTestsMixin.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MeanVarStd.stdfuncs": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "SharedNanFunctionsTestsMixin.test_result_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SharedNanFunctionsTestsMixin.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SharedNanFunctionsTestsMixin.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MeanVarStd.test_dtype_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MeanVarStd.test_ddof": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_result_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_extended_axis_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_result_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_scalar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_extended_axis_invalid": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Quantile.test_basic": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.integer_arrays": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nanstd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nanvar": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nanmean": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nancumprod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nancumsum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nanprod": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nansum": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nanargmax": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nanargmin": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nanmax": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_IntTypes.test_nanmin": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test__replace_nan": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MeanVarStd.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test__nan_mask": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray",
                    "expected": "np.ndarray"
                }
            }
        ],
        "TestNanFunctions_MeanVarStd.test_out_dtype_error": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_CumSumProd.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SharedNanFunctionsTestsMixin.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_ArgminArgmax.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SharedNanFunctionsTestsMixin.test_dtype_from_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_dtype_from_input": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Quantile.test_regression": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_allnans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MeanVarStd.test_allnans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_ArgminArgmax.test_allnans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_allnans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_small_large": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_mutation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_mutation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SharedNanFunctionsTestsMixin.test_mutation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_ArgminArgmax.test_mutation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_mutation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MinMax.test_masked": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Quantile.test_no_p_overwrite": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_allnans": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_multiple_percentiles": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Percentile.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_float_special": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_Median.test_keepdims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_MeanVarStd.test_ddof_too_big": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SharedNanFunctionsTestsMixin.test_dtype_from_char": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "SharedNanFunctionsTestsMixin.test_dtype_from_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNanFunctions_ArgminArgmax.test_result_values": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_packbits": {
        "test_packbits_very_large": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestCount.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCount.padded1": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCount.padded1b": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCount.padded2": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestCount.test_bad_count": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCount.test_axis_count": [
            {
                "type": "method",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "TestCount.test_roundtrip_axis": [
            {
                "type": "method",
                "args": {
                    "bitorder": "str",
                    "count": "int"
                }
            }
        ],
        "TestCount.test_count": [
            {
                "type": "method",
                "args": {
                    "kwargs": "dict"
                }
            }
        ],
        "TestCount.test_roundtrip": [
            {
                "type": "method",
                "args": {
                    "bitorder": "str",
                    "count": "int"
                }
            }
        ],
        "test_unpackbits_empty_with_axis": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_unpackbits_empty": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_pack_unpack_order": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_unpackbits": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_packbits_empty_with_axis": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_packbits_empty": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_packbits": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_unpackbits_large": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_packbits_large": [
            {
                "type": "func",
                "args": {
                    "bitorder": "str"
                }
            }
        ]
    },
    "lib.tests.test_financial": {
        "filter_deprecation": [
            {
                "type": "func",
                "args": {
                    "func": "Callable"
                }
            }
        ],
        "TestFinancial.test_npv_irr_congruence": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_rate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_rate_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_irr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_pv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_pv_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_fv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_fv_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_pmt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_pmt_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_ppmt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_ppmt_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_ppmt_special_rate": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_ppmt_special_rate_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_ipmt": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_nper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_nper2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_npv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_npv_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_mirr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_mirr_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_when": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_broadcast": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_broadcast_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_decimal_with_when": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFinancial.test_ipmt_decimal": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_histograms": {
        "TestHistogram.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_one_bin": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_density": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_arr_weights_mismatch": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_weights": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_exotic_weights": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_no_side_effects": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_error_binnum_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_finite_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_invalid_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_bin_edge_cases": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_last_bin_inclusive_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_bin_array_dims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_unsigned_monotonicity_check": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_object_array_of_0d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.do_signed_overflow_bounds": [
            {
                "type": "method",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "TestHistogram.test_signed_overflow_bounds": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_histogram_bin_edges": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_small": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_incorrect_methods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_novariance": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_limited_variance": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_outlier": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_simple_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_simple_weighted": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_weights": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_identical_samples": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_empty": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_rightmost_binedge": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_finite_range": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_equal_edges": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_large_integers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_density_non_uniform_2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_density_non_uniform_1d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_density_via_normed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_density_normed_redundancy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_signed_integer_data": [
            {
                "type": "method",
                "args": {
                    "bins": "str"
                }
            }
        ],
        "TestHistogramdd.test_simple": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_shape_4d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_shape_3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_edge_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.do_precision_upper_bound": [
            {
                "type": "method",
                "args": {
                    "float_small": "float",
                    "float_large": "float"
                }
            }
        ],
        "TestHistogram.do_precision_lower_bound": [
            {
                "type": "method",
                "args": {
                    "float_small": "float",
                    "float_large": "float"
                }
            }
        ],
        "TestHistogram.do_precision": [
            {
                "type": "method",
                "args": {
                    "float_small": "float",
                    "float_large": "float"
                }
            }
        ],
        "TestHistogram.test_precision": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_datetime": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_type": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_inf_edges": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramdd.test_bins_errors": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogramOptimBinNums.test_scott_vs_stone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_f32_rounding": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_outliers": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_bool_conversion": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_normed": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestHistogram.test_some_nan_values": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test__iotools": {
        "TestLineSplitter.test_no_delimiter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLineSplitter.test_space_delimiter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLineSplitter.test_tab_delimiter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLineSplitter.test_other_delimiter": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLineSplitter.test_constant_fixed_width": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLineSplitter.test_variable_fixed_width": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNameValidator.test_missing_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNameValidator.test_validate_nb_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNameValidator.test_validate_wo_names": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_bytes_to_date": [
            {
                "type": "func",
                "args": {
                    "s": "bytes"
                }
            }
        ],
        "TestStringConverter.test_upgrademapper": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_int64_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_uint64_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMiscFunctions.test_has_nested_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMiscFunctions.test_easy_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMiscFunctions.test_flatten_dtype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_keep_default_zero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_creation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_keep_missing_values": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_string_to_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_keep_default": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_missing": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStringConverter.test_upgrade": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNameValidator.test_excludelist": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNameValidator.test_case_sensitivity": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_stride_tricks": {
        "assert_incompatible_shapes_raise": [
            {
                "type": "func",
                "args": {
                    "input_shapes": "tuple"
                }
            }
        ],
        "test_same": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_broadcast_kwargs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_incompatible_shapes_raise_valueerror": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_broadcast_to_raises": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_broadcast_shape": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "SimpleSubClass.info": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "SimpleSubClass.__array_finalize__": [
            {
                "type": "method",
                "args": {
                    "obj": "np.ndarray"
                }
            }
        ],
        "test_writeable_memoryview": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_reference_types": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "as_strided_writeable": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "SimpleSubClass.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "VerySimpleSubClass.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "args": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "test_writeable": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "assert_shapes_correct": [
            {
                "type": "func",
                "args": {
                    "input_shapes": "tuple",
                    "expected_shape": "tuple"
                }
            }
        ],
        "test_two_compatible_by_prepending_ones_input_shapes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_two_compatible_by_ones_input_shapes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_same_input_shapes": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_as_strided": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_subclasses": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_broadcast_to_succeeds": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_one_off": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "assert_same_as_ufunc": [
            {
                "type": "func",
                "args": {
                    "shape0": "int",
                    "shape1": "int",
                    "transposed": "bool",
                    "flipped": "bool"
                }
            }
        ],
        "test_same_as_ufunc": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "lib.tests.test_polynomial": {
        "TestPolynomial.test_poly1d_str_and_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_poly1d_resolution": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_poly1d_misc": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_poly1d_variable_arg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_poly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_roots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_str_leading_zeros": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_zero_dims": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_poly_int_overflow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_poly_eq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_poly_coeffs_mutable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_polydiv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_polyfit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_integ_coeffs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_complex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_objects": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPolynomial.test_poly1d_math": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_mixins": {
        "ArrayLike.value": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "ArrayLike.__init__": [
            {
                "type": "method",
                "args": {
                    "value": "np.ndarray"
                }
            }
        ],
        "ArrayLike._HANDLED_TYPES": [
            {
                "type": "attr",
                "anno": "tuple[type, ...]"
            }
        ],
        "ArrayLike.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_assert_equal_type_and_value": [
            {
                "type": "func",
                "args": {
                    "result": "np.ndarray",
                    "expected": "np.ndarray",
                    "err_msg": "str"
                }
            }
        ],
        "_ALL_BINARY_OPERATORS": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "TestNDArrayOperatorsMixin.test_array_like_add": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.test_inplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.test_opt_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.OptOut.__array_ufunc__": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestNDArrayOperatorsMixin.OptOut.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "OptOut"
                }
            }
        ],
        "TestNDArrayOperatorsMixin.OptOut.__radd__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "TestNDArrayOperatorsMixin.test_subclass": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.test_object": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.test_unary_methods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.test_matmul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.test_ufunc_at": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.test_ufunc_two_outputs": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ArrayLike.__array_ufunc__": [
            {
                "type": "method",
                "args": {
                    "ufunc": "np.ndarray",
                    "method": "str",
                    "inputs": "np.ndarray",
                    "kwargs": "np.ndarray"
                }
            }
        ],
        "wrap_array_like": [
            {
                "type": "func",
                "args": {
                    "result": "np.ndarray"
                }
            }
        ],
        "TestNDArrayOperatorsMixin.test_reflected_binary_methods": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestNDArrayOperatorsMixin.test_forward_binary_methods": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "distutils.line_endings": {
        "unix2dos": [
            {
                "type": "func",
                "args": {
                    "file": "str"
                }
            }
        ],
        "unix2dos_one_dir": [
            {
                "type": "func",
                "args": {
                    "modified_files": "list",
                    "dir_name": "str",
                    "file_names": "list"
                }
            }
        ],
        "unix2dos_dir": [
            {
                "type": "func",
                "args": {
                    "dir_name": "str"
                }
            }
        ],
        "dos2unix": [
            {
                "type": "func",
                "args": {
                    "file": "str"
                }
            }
        ],
        "dos2unix_one_dir": [
            {
                "type": "func",
                "args": {
                    "modified_files": "list",
                    "dir_name": "str",
                    "file_names": "list"
                }
            }
        ],
        "dos2unix_dir": [
            {
                "type": "func",
                "args": {
                    "dir_name": "str"
                }
            }
        ]
    },
    "distutils.command.install_headers": {
        "install_headers.run": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.index_tricks": {
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_ix__dispatcher": [
            {
                "type": "func",
                "args": {
                    "args": "_nx.ndarray"
                }
            }
        ],
        "nd_grid.sparse": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "nd_grid.__init__": [
            {
                "type": "method",
                "args": {
                    "sparse": "bool"
                }
            }
        ],
        "MGridClass.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "mgrid": [
            {
                "type": "var",
                "anno": "MGridClass"
            }
        ],
        "OGridClass.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ogrid": [
            {
                "type": "var",
                "anno": "OGridClass"
            }
        ],
        "AxisConcatenator.concatenate": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "AxisConcatenator.makemat": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "AxisConcatenator.axis": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AxisConcatenator.matrix": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "AxisConcatenator.trans1d": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AxisConcatenator.ndmin": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "AxisConcatenator.__init__": [
            {
                "type": "method",
                "args": {
                    "axis": "int",
                    "matrix": "bool",
                    "ndmin": "int",
                    "trans1d": "int"
                }
            }
        ],
        "AxisConcatenator.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "RClass.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "r_": [
            {
                "type": "var",
                "anno": "RClass"
            }
        ],
        "CClass.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "c_": [
            {
                "type": "var",
                "anno": "CClass"
            }
        ],
        "ndenumerate.iter": [
            {
                "type": "attr",
                "anno": "scalar"
            }
        ],
        "ndenumerate.__next__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ndenumerate.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ndenumerate.next": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ndindex._it": [
            {
                "type": "attr",
                "anno": "_nx.nditer"
            }
        ],
        "ndindex.__init__": [
            {
                "type": "method",
                "args": {
                    "shape": "int"
                }
            }
        ],
        "ndindex.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ndindex.ndincr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ndindex.__next__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ndindex.next": [
            {
                "type": "attr",
                "anno": "_nx.nditer"
            }
        ],
        "IndexExpression.maketuple": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "IndexExpression.__init__": [
            {
                "type": "method",
                "args": {
                    "maketuple": "bool"
                }
            }
        ],
        "IndexExpression.__getitem__": [
            {
                "type": "method",
                "args": {
                    "item": "ScalarType"
                }
            }
        ],
        "index_exp": [
            {
                "type": "var",
                "anno": "IndexExpression"
            }
        ],
        "s_": [
            {
                "type": "var",
                "anno": "IndexExpression"
            }
        ],
        "_fill_diagonal_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "val": "np.ndarray",
                    "wrap": "bool"
                }
            }
        ],
        "diag_indices": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "ndim": "int"
                }
            }
        ],
        "_diag_indices_from": [
            {
                "type": "func",
                "args": {
                    "arr": "numpy.ndarray"
                }
            }
        ],
        "nd_grid.__getitem__": [
            {
                "type": "method",
                "args": {
                    "key": "int"
                }
            }
        ],
        "diag_indices_from": [
            {
                "type": "func",
                "args": {
                    "arr": "numpy.ndarray"
                }
            }
        ],
        "ix_": [
            {
                "type": "func",
                "args": {
                    "args": "_nx.ndarray"
                }
            }
        ],
        "ndenumerate.__init__": [
            {
                "type": "method",
                "args": {
                    "arr": "ScalarType"
                }
            }
        ],
        "AxisConcatenator.__getitem__": [
            {
                "type": "method",
                "args": {
                    "key": "tuple"
                }
            }
        ],
        "fill_diagonal": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "val": "np.ndarray",
                    "wrap": "bool"
                }
            }
        ]
    },
    "lib.user_array": {
        "container.array": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "container.__init__": [
            {
                "type": "method",
                "args": {
                    "data": "object",
                    "dtype": "str",
                    "copy": "bool"
                }
            }
        ],
        "container.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__iadd__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__isub__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__imul__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__idiv__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__imod__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__ipow__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__ilshift__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__irshift__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__iand__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__ixor__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__ior__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container._scalarfunc": [
            {
                "type": "method",
                "args": {
                    "func": "Callable[[], float]"
                }
            }
        ],
        "container.__complex__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__float__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__int__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__long__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__hex__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__oct__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container._rc": [
            {
                "type": "method",
                "args": {
                    "a": "object"
                }
            }
        ],
        "container.astype": [
            {
                "type": "method",
                "args": {
                    "typecode": "str"
                }
            }
        ],
        "container.__array__": [
            {
                "type": "method",
                "args": {
                    "t": "str"
                }
            }
        ],
        "container.byteswap": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__ge__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__gt__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__le__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__lt__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__invert__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__pos__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__ror__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__or__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__rxor__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__xor__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__rand__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__and__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__rrshift__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__rlshift__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__rshift__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__lshift__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__rpow__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__pow__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__rdivmod__": [
            {
                "type": "method",
                "args": {
                    "other": "int"
                }
            }
        ],
        "container.__divmod__": [
            {
                "type": "method",
                "args": {
                    "other": "int"
                }
            }
        ],
        "container.__rmod__": [
            {
                "type": "method",
                "args": {
                    "other": "array"
                }
            }
        ],
        "container.__mod__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__rdiv__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "container.__div__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__rmul__": [
            {
                "type": "attr",
                "anno": "container"
            }
        ],
        "container.__rsub__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__sub__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "container"
                }
            }
        ],
        "container.__radd__": [
            {
                "type": "attr",
                "anno": "Callable[[container], container]"
            }
        ],
        "container.__neg__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__abs__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__getitem__": [
            {
                "type": "method",
                "args": {
                    "index": "int"
                }
            }
        ],
        "container.__array_wrap__": [
            {
                "type": "method",
                "args": {
                    "args": "int"
                }
            }
        ],
        "container.__setattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str",
                    "value": "object"
                }
            }
        ],
        "container.__getattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "temp": [
            {
                "type": "var",
                "anno": "array"
            }
        ],
        "ua": [
            {
                "type": "var",
                "anno": "array"
            }
        ],
        "ua_small": [
            {
                "type": "var",
                "anno": "array"
            }
        ],
        "container.tostring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "container.__setitem__": [
            {
                "type": "method",
                "args": {
                    "index": "int",
                    "value": "object"
                }
            }
        ],
        "container.copy": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "core.tests.test_protocols": {
        "test_getattr_warning": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_array_called": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "lib.financial": {
        "_depmsg": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_when_to_num": [
            {
                "type": "var",
                "anno": "dict[Decimal, Decimal]"
            }
        ],
        "_fv_dispatcher": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "nper": "Decimal",
                    "pmt": "float",
                    "pv": "float",
                    "when": "Decimal"
                }
            }
        ],
        "_pmt_dispatcher": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "nper": "Decimal",
                    "pv": "np.array",
                    "fv": "np.array",
                    "when": "Decimal"
                }
            }
        ],
        "_nper_dispatcher": [
            {
                "type": "func",
                "args": {
                    "rate": "float",
                    "pmt": "float",
                    "pv": "float",
                    "fv": "Decimal",
                    "when": "Decimal"
                }
            }
        ],
        "_ipmt_dispatcher": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "per": "Decimal",
                    "nper": "Decimal",
                    "pv": "np.array",
                    "fv": "np.array",
                    "when": "Decimal"
                }
            }
        ],
        "_ppmt_dispatcher": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "per": "Decimal",
                    "nper": "Decimal",
                    "pv": "np.array",
                    "fv": "np.array",
                    "when": "Decimal"
                }
            }
        ],
        "_g_div_gp": [
            {
                "type": "func",
                "args": {
                    "r": "float",
                    "n": "float",
                    "p": "float",
                    "x": "float",
                    "y": "float",
                    "w": "float"
                }
            }
        ],
        "_rate_dispatcher": [
            {
                "type": "func",
                "args": {
                    "nper": "float",
                    "pmt": "Decimal",
                    "pv": "Decimal",
                    "fv": "Decimal",
                    "when": "Decimal",
                    "guess": "Decimal",
                    "tol": "Decimal",
                    "maxiter": "int"
                }
            }
        ],
        "_irr_dispatcher": [
            {
                "type": "func",
                "args": {
                    "values": "np.ndarray"
                }
            }
        ],
        "_npv_dispatcher": [
            {
                "type": "func",
                "args": {
                    "rate": "float",
                    "values": "np.ndarray"
                }
            }
        ],
        "_mirr_dispatcher": [
            {
                "type": "func",
                "args": {
                    "values": "np.ndarray",
                    "finance_rate": "Decimal",
                    "reinvest_rate": "Decimal"
                }
            }
        ],
        "_convert_when": [
            {
                "type": "func",
                "args": {
                    "when": "Decimal"
                }
            }
        ],
        "rate": [
            {
                "type": "func",
                "args": {
                    "nper": "float",
                    "pmt": "Decimal",
                    "pv": "Decimal",
                    "fv": "Decimal",
                    "when": "Decimal",
                    "guess": "Decimal",
                    "tol": "Decimal",
                    "maxiter": "int"
                }
            }
        ],
        "pv": [
            {
                "type": "func",
                "args": {
                    "rate": "float",
                    "nper": "int",
                    "pmt": "int",
                    "fv": "Decimal",
                    "when": "Decimal"
                }
            }
        ],
        "_pv_dispatcher": [
            {
                "type": "func",
                "args": {
                    "rate": "float",
                    "nper": "int",
                    "pmt": "int",
                    "fv": "Decimal",
                    "when": "Decimal"
                }
            }
        ],
        "nper": [
            {
                "type": "func",
                "args": {
                    "rate": "float",
                    "pmt": "float",
                    "pv": "float",
                    "fv": "Decimal",
                    "when": "Decimal"
                }
            }
        ],
        "pmt": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "nper": "Decimal",
                    "pv": "np.array",
                    "fv": "np.array",
                    "when": "Decimal"
                }
            }
        ],
        "fv": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "nper": "Decimal",
                    "pmt": "float",
                    "pv": "float",
                    "when": "Decimal"
                }
            }
        ],
        "_rbl": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "per": "Decimal",
                    "pmt": "float",
                    "pv": "float",
                    "when": "Decimal"
                }
            }
        ],
        "ipmt": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "per": "Decimal",
                    "nper": "Decimal",
                    "pv": "np.array",
                    "fv": "np.array",
                    "when": "Decimal"
                }
            }
        ],
        "ppmt": [
            {
                "type": "func",
                "args": {
                    "rate": "Decimal",
                    "per": "Decimal",
                    "nper": "Decimal",
                    "pv": "np.array",
                    "fv": "np.array",
                    "when": "Decimal"
                }
            }
        ],
        "npv": [
            {
                "type": "func",
                "args": {
                    "rate": "float",
                    "values": "np.ndarray"
                }
            }
        ],
        "mirr": [
            {
                "type": "func",
                "args": {
                    "values": "np.ndarray",
                    "finance_rate": "Decimal",
                    "reinvest_rate": "Decimal"
                }
            }
        ],
        "irr": [
            {
                "type": "func",
                "args": {
                    "values": "np.ndarray"
                }
            }
        ]
    },
    "lib.recfunctions": {
        "_check_fill_value": [
            {
                "type": "var",
                "anno": "Callable[[int], np.ndarray]"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_recursive_fill_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "input": "np.ndarray",
                    "output": "np.ndarray"
                }
            }
        ],
        "get_names": [
            {
                "type": "func",
                "args": {
                    "adtype": "PdDtype"
                }
            }
        ],
        "get_names_flat": [
            {
                "type": "func",
                "args": {
                    "adtype": "PdDtype"
                }
            }
        ],
        "flatten_descr": [
            {
                "type": "func",
                "args": {
                    "ndtype": "np.dtype"
                }
            }
        ],
        "_izip_fields_flat": [
            {
                "type": "func",
                "args": {
                    "iterable": "tuple"
                }
            }
        ],
        "_izip_fields": [
            {
                "type": "func",
                "args": {
                    "iterable": "tuple"
                }
            }
        ],
        "_izip_records": [
            {
                "type": "func",
                "args": {
                    "seqarrays": "tuple",
                    "fill_value": "int",
                    "flatten": "bool"
                }
            }
        ],
        "_merge_arrays_dispatcher": [
            {
                "type": "func",
                "args": {
                    "seqarrays": "tuple",
                    "fill_value": "int",
                    "flatten": "bool",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "_drop_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "drop_names": "bool",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "_rec_drop_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "drop_names": "bool"
                }
            }
        ],
        "_rename_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "base": "type",
                    "namemapper": "dict"
                }
            }
        ],
        "_append_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "names": "tuple",
                    "data": "np.ndarray",
                    "dtypes": "tuple",
                    "fill_value": "int",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "_rec_append_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "names": "tuple",
                    "data": "recarray.recarray",
                    "dtypes": "tuple"
                }
            }
        ],
        "_repack_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.dtype",
                    "align": "bool",
                    "recurse": "bool"
                }
            }
        ],
        "_structured_to_unstructured_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "dtype": "np.dtype",
                    "copy": "bool",
                    "casting": "bool"
                }
            }
        ],
        "_unstructured_to_structured_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "dtype": "np.dtype",
                    "names": "list",
                    "align": "bool",
                    "copy": "bool",
                    "casting": "bool"
                }
            }
        ],
        "_apply_along_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "func": "Callable[[ndarray], ndarray]",
                    "arr": "ndarray"
                }
            }
        ],
        "_assign_fields_by_name_dispatcher": [
            {
                "type": "func",
                "args": {
                    "dst": "np.dtype",
                    "src": "np.dtype",
                    "zero_unassigned": "bool"
                }
            }
        ],
        "_require_fields_dispatcher": [
            {
                "type": "func",
                "args": {
                    "array": "ndarray",
                    "required_dtype": "type"
                }
            }
        ],
        "_stack_arrays_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arrays": "ndarray",
                    "defaults": "np.ndarray",
                    "usemask": "bool",
                    "asrecarray": "bool",
                    "autoconvert": "bool"
                }
            }
        ],
        "_find_duplicates_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "key": "str",
                    "ignoremask": "bool",
                    "return_index": "bool"
                }
            }
        ],
        "_join_by_dispatcher": [
            {
                "type": "func",
                "args": {
                    "key": "typing.Union[str, int]",
                    "r1": "np.ndarray",
                    "r2": "np.ndarray",
                    "jointype": "str",
                    "r1postfix": "str",
                    "r2postfix": "str",
                    "defaults": "dict",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "_rec_join_dispatcher": [
            {
                "type": "func",
                "args": {
                    "key": "typing.Union[str, int]",
                    "r1": "np.ndarray",
                    "r2": "np.ndarray",
                    "jointype": "str",
                    "r1postfix": "str",
                    "r2postfix": "str",
                    "defaults": "dict"
                }
            }
        ],
        "_get_fieldspec": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "_fix_output": [
            {
                "type": "func",
                "args": {
                    "output": "ndarray",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "_get_fields_and_offsets": [
            {
                "type": "func",
                "args": {
                    "dt": "np.dtype",
                    "offset": "int"
                }
            }
        ],
        "get_fieldstructure": [
            {
                "type": "func",
                "args": {
                    "adtype": "np.dtype",
                    "lastname": "str",
                    "parents": "dict"
                }
            }
        ],
        "assign_fields_by_name": [
            {
                "type": "func",
                "args": {
                    "dst": "np.dtype",
                    "src": "np.dtype",
                    "zero_unassigned": "bool"
                }
            }
        ],
        "require_fields": [
            {
                "type": "func",
                "args": {
                    "array": "ndarray",
                    "required_dtype": "type"
                }
            }
        ],
        "unstructured_to_structured": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "dtype": "np.dtype",
                    "names": "list",
                    "align": "bool",
                    "copy": "bool",
                    "casting": "bool"
                }
            }
        ],
        "repack_fields": [
            {
                "type": "func",
                "args": {
                    "a": "np.dtype",
                    "align": "bool",
                    "recurse": "bool"
                }
            }
        ],
        "rename_fields": [
            {
                "type": "func",
                "args": {
                    "base": "type",
                    "namemapper": "dict"
                }
            }
        ],
        "_zip_dtype": [
            {
                "type": "func",
                "args": {
                    "seqarrays": "tuple",
                    "flatten": "bool"
                }
            }
        ],
        "_zip_descr": [
            {
                "type": "func",
                "args": {
                    "seqarrays": "tuple",
                    "flatten": "bool"
                }
            }
        ],
        "recursive_fill_fields": [
            {
                "type": "func",
                "args": {
                    "input": "np.ndarray",
                    "output": "np.ndarray"
                }
            }
        ],
        "_keep_fields": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "keep_names": "list",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "drop_fields": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "drop_names": "bool",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "rec_drop_fields": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "drop_names": "bool"
                }
            }
        ],
        "merge_arrays": [
            {
                "type": "func",
                "args": {
                    "seqarrays": "tuple",
                    "fill_value": "int",
                    "flatten": "bool",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "append_fields": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "names": "tuple",
                    "data": "np.ndarray",
                    "dtypes": "tuple",
                    "fill_value": "int",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "rec_append_fields": [
            {
                "type": "func",
                "args": {
                    "base": "np.ndarray",
                    "names": "tuple",
                    "data": "recarray.recarray",
                    "dtypes": "tuple"
                }
            }
        ],
        "_fix_defaults": [
            {
                "type": "func",
                "args": {
                    "output": "ndarray",
                    "defaults": "dict"
                }
            }
        ],
        "join_by": [
            {
                "type": "func",
                "args": {
                    "key": "typing.Union[str, int]",
                    "r1": "np.ndarray",
                    "r2": "np.ndarray",
                    "jointype": "str",
                    "r1postfix": "str",
                    "r2postfix": "str",
                    "defaults": "dict",
                    "usemask": "bool",
                    "asrecarray": "bool"
                }
            }
        ],
        "rec_join": [
            {
                "type": "func",
                "args": {
                    "key": "typing.Union[str, int]",
                    "r1": "np.ndarray",
                    "r2": "np.ndarray",
                    "jointype": "str",
                    "r1postfix": "str",
                    "r2postfix": "str",
                    "defaults": "dict"
                }
            }
        ],
        "stack_arrays": [
            {
                "type": "func",
                "args": {
                    "arrays": "ndarray",
                    "defaults": "np.ndarray",
                    "usemask": "bool",
                    "asrecarray": "bool",
                    "autoconvert": "bool"
                }
            }
        ],
        "find_duplicates": [
            {
                "type": "func",
                "args": {
                    "a": "np.ndarray",
                    "key": "str",
                    "ignoremask": "bool",
                    "return_index": "bool"
                }
            }
        ],
        "structured_to_unstructured": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray",
                    "dtype": "np.dtype",
                    "copy": "bool",
                    "casting": "bool"
                }
            }
        ],
        "apply_along_fields": [
            {
                "type": "func",
                "args": {
                    "func": "Callable[[ndarray], ndarray]",
                    "arr": "ndarray"
                }
            }
        ]
    },
    "lib.arraysetops": {
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "typing.Callable"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_ediff1d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ary": "np.ndarray",
                    "to_end": "np.ndarray",
                    "to_begin": "np.ndarray"
                }
            }
        ],
        "_unpack_tuple": [
            {
                "type": "func",
                "args": {
                    "x": "tuple"
                }
            }
        ],
        "_unique_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ar": "np.ndarray",
                    "return_index": "bool",
                    "return_inverse": "bool",
                    "return_counts": "bool",
                    "axis": "int"
                }
            }
        ],
        "_intersect1d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray",
                    "assume_unique": "bool",
                    "return_indices": "bool"
                }
            }
        ],
        "_setxor1d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray",
                    "assume_unique": "bool"
                }
            }
        ],
        "_in1d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray",
                    "assume_unique": "bool",
                    "invert": "bool"
                }
            }
        ],
        "_isin_dispatcher": [
            {
                "type": "func",
                "args": {
                    "element": "np.ndarray",
                    "test_elements": "np.ndarray",
                    "assume_unique": "bool",
                    "invert": "bool"
                }
            }
        ],
        "_union1d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray"
                }
            }
        ],
        "_setdiff1d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray",
                    "assume_unique": "bool"
                }
            }
        ],
        "in1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray",
                    "assume_unique": "bool",
                    "invert": "bool"
                }
            }
        ],
        "isin": [
            {
                "type": "func",
                "args": {
                    "element": "np.ndarray",
                    "test_elements": "np.ndarray",
                    "assume_unique": "bool",
                    "invert": "bool"
                }
            }
        ],
        "ediff1d": [
            {
                "type": "func",
                "args": {
                    "ary": "np.ndarray",
                    "to_end": "np.ndarray",
                    "to_begin": "np.ndarray"
                }
            }
        ],
        "_unique1d": [
            {
                "type": "func",
                "args": {
                    "ar": "np.ndarray",
                    "return_index": "bool",
                    "return_inverse": "bool",
                    "return_counts": "bool"
                }
            }
        ],
        "unique": [
            {
                "type": "func",
                "args": {
                    "ar": "np.ndarray",
                    "return_index": "bool",
                    "return_inverse": "bool",
                    "return_counts": "bool",
                    "axis": "int"
                }
            }
        ],
        "setdiff1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray",
                    "assume_unique": "bool"
                }
            }
        ],
        "union1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray"
                }
            }
        ],
        "setxor1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray",
                    "assume_unique": "bool"
                }
            }
        ],
        "intersect1d": [
            {
                "type": "func",
                "args": {
                    "ar1": "np.ndarray",
                    "ar2": "np.ndarray",
                    "assume_unique": "bool",
                    "return_indices": "bool"
                }
            }
        ]
    },
    "lib.format": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "MAGIC_PREFIX": [
            {
                "type": "var",
                "anno": "bytes"
            }
        ],
        "MAGIC_LEN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "ARRAY_ALIGN": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "BUFFER_SIZE": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_header_size_info": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_check_version": [
            {
                "type": "func",
                "args": {
                    "version": "tuple"
                }
            }
        ],
        "magic": [
            {
                "type": "func",
                "args": {
                    "major": "int",
                    "minor": "int"
                }
            }
        ],
        "_has_metadata": [
            {
                "type": "func",
                "args": {
                    "dt": "pd.dtype"
                }
            }
        ],
        "dtype_to_descr": [
            {
                "type": "func",
                "args": {
                    "dtype": "pd.dtype"
                }
            }
        ],
        "_filter_header": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "_read_bytes": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO",
                    "size": "int",
                    "error_template": "str"
                }
            }
        ],
        "read_magic": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO"
                }
            }
        ],
        "descr_to_dtype": [
            {
                "type": "func",
                "args": {
                    "descr": "str | tuple"
                }
            }
        ],
        "header_data_from_array_1_0": [
            {
                "type": "func",
                "args": {
                    "array": "numpy.ndarray"
                }
            }
        ],
        "_wrap_header": [
            {
                "type": "func",
                "args": {
                    "header": "str",
                    "version": "tuple"
                }
            }
        ],
        "_wrap_header_guess_version": [
            {
                "type": "func",
                "args": {
                    "header": "str"
                }
            }
        ],
        "_write_array_header": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO",
                    "d": "dict",
                    "version": "tuple"
                }
            }
        ],
        "write_array": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO",
                    "array": "numpy.ndarray",
                    "version": "tuple",
                    "allow_pickle": "bool",
                    "pickle_kwargs": "dict"
                }
            }
        ],
        "write_array_header_2_0": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO",
                    "d": "dict"
                }
            }
        ],
        "write_array_header_1_0": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO",
                    "d": "dict"
                }
            }
        ],
        "_read_array_header": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO",
                    "version": "tuple"
                }
            }
        ],
        "open_memmap": [
            {
                "type": "func",
                "args": {
                    "filename": "str",
                    "mode": "str",
                    "dtype": "typing.Union[numpy.dtype, str]",
                    "shape": "typing.List[int]",
                    "fortran_order": "bool",
                    "version": "tuple"
                }
            }
        ],
        "read_array": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO",
                    "allow_pickle": "bool",
                    "pickle_kwargs": "typing.Optional[typing.Dict[str, typing.Any]]"
                }
            }
        ],
        "read_array_header_2_0": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO"
                }
            }
        ],
        "read_array_header_1_0": [
            {
                "type": "func",
                "args": {
                    "fp": "io.BufferedIO"
                }
            }
        ]
    },
    "lib.polynomial": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_poly_dispatcher": [
            {
                "type": "func",
                "args": {
                    "seq_of_zeros": "object"
                }
            }
        ],
        "_roots_dispatcher": [
            {
                "type": "func",
                "args": {
                    "p": "nx.Tensor"
                }
            }
        ],
        "_polyint_dispatcher": [
            {
                "type": "func",
                "args": {
                    "p": "array",
                    "m": "int",
                    "k": "int"
                }
            }
        ],
        "_polyder_dispatcher": [
            {
                "type": "func",
                "args": {
                    "p": "array",
                    "m": "int"
                }
            }
        ],
        "_polyfit_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "int",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray",
                    "cov": "str"
                }
            }
        ],
        "_polyval_dispatcher": [
            {
                "type": "func",
                "args": {
                    "p": "float",
                    "x": "float"
                }
            }
        ],
        "polyval": [
            {
                "type": "func",
                "args": {
                    "p": "float",
                    "x": "float"
                }
            }
        ],
        "_binary_op_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a1": "object",
                    "a2": "object"
                }
            }
        ],
        "_polydiv_dispatcher": [
            {
                "type": "func",
                "args": {
                    "u": "object",
                    "v": "object"
                }
            }
        ],
        "_poly_mat": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_raise_power": [
            {
                "type": "func",
                "args": {
                    "astr": "str",
                    "wrap": "int"
                }
            }
        ],
        "poly1d.__hash__": [
            {
                "type": "attr",
                "anno": "typing.Optional[int]"
            }
        ],
        "poly1d._variable": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "poly1d.variable": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "poly1d._coeffs": [
            {
                "type": "attr",
                "anno": "nx.Tensor"
            }
        ],
        "poly1d.order": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "poly1d.o": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "poly1d.coeffs": [
            {
                "type": "method",
                "args": {
                    "value": "nx.Tensor"
                }
            }
        ],
        "poly1d.coefficients": [
            {
                "type": "attr",
                "anno": "nx.Tensor"
            }
        ],
        "poly1d.coef": [
            {
                "type": "attr",
                "anno": "nx.Tensor"
            }
        ],
        "poly1d.c": [
            {
                "type": "attr",
                "anno": "nx.Tensor"
            }
        ],
        "poly1d.__array__": [
            {
                "type": "method",
                "args": {
                    "t": "int"
                }
            }
        ],
        "poly1d.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "poly1d.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "poly1d.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "poly1d.__call__": [
            {
                "type": "method",
                "args": {
                    "val": "float"
                }
            }
        ],
        "poly1d.__pos__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "poly1d.__getitem__": [
            {
                "type": "method",
                "args": {
                    "val": "int"
                }
            }
        ],
        "poly1d.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "poly1d.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "poly1d.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "poly1d.__setitem__": [
            {
                "type": "method",
                "args": {
                    "key": "int",
                    "val": "nx.Tensor"
                }
            }
        ],
        "roots": [
            {
                "type": "func",
                "args": {
                    "p": "nx.Tensor"
                }
            }
        ],
        "poly1d.roots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "poly1d.r": [
            {
                "type": "attr",
                "anno": "nx.Tensor"
            }
        ],
        "poly": [
            {
                "type": "func",
                "args": {
                    "seq_of_zeros": "object"
                }
            }
        ],
        "poly1d.__init__": [
            {
                "type": "method",
                "args": {
                    "c_or_r": "object",
                    "r": "bool",
                    "variable": "str"
                }
            }
        ],
        "poly1d.__neg__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "polydiv": [
            {
                "type": "func",
                "args": {
                    "u": "object",
                    "v": "object"
                }
            }
        ],
        "poly1d.__rdiv__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "poly1d.__rtruediv__": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "poly1d.__div__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "poly1d.__truediv__": [
            {
                "type": "attr",
                "anno": "object"
            }
        ],
        "polymul": [
            {
                "type": "func",
                "args": {
                    "a1": "object",
                    "a2": "object"
                }
            }
        ],
        "poly1d.__pow__": [
            {
                "type": "method",
                "args": {
                    "val": "int"
                }
            }
        ],
        "poly1d.__rmul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "poly1d.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "polysub": [
            {
                "type": "func",
                "args": {
                    "a1": "object",
                    "a2": "object"
                }
            }
        ],
        "poly1d.__rsub__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "poly1d.__sub__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "polyadd": [
            {
                "type": "func",
                "args": {
                    "a1": "object",
                    "a2": "object"
                }
            }
        ],
        "poly1d.__radd__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "poly1d.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "polyder": [
            {
                "type": "func",
                "args": {
                    "p": "array",
                    "m": "int"
                }
            }
        ],
        "poly1d.deriv": [
            {
                "type": "method",
                "args": {
                    "m": "int"
                }
            }
        ],
        "polyint": [
            {
                "type": "func",
                "args": {
                    "p": "array",
                    "m": "int",
                    "k": "int"
                }
            }
        ],
        "poly1d.integ": [
            {
                "type": "method",
                "args": {
                    "m": "int",
                    "k": "int"
                }
            }
        ],
        "polyfit": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "int",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray",
                    "cov": "str"
                }
            }
        ]
    },
    "lib.type_check": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_typecodes_by_elsize": [
            {
                "type": "var",
                "anno": "typing.Type[str]"
            }
        ],
        "_asfarray_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "_nx.float_",
                    "dtype": "_nx.float_"
                }
            }
        ],
        "asfarray": [
            {
                "type": "func",
                "args": {
                    "a": "_nx.float_",
                    "dtype": "_nx.float_"
                }
            }
        ],
        "_real_dispatcher": [
            {
                "type": "func",
                "args": {
                    "val": "_nx.ndarray"
                }
            }
        ],
        "_imag_dispatcher": [
            {
                "type": "func",
                "args": {
                    "val": "float"
                }
            }
        ],
        "_is_type_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "type"
                }
            }
        ],
        "_nan_to_num_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "_nx.ndarray",
                    "copy": "bool",
                    "nan": "float",
                    "posinf": "float",
                    "neginf": "float"
                }
            }
        ],
        "_real_if_close_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "_nx.complexfloating",
                    "tol": "float"
                }
            }
        ],
        "_asscalar_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "_nx.Series"
                }
            }
        ],
        "asscalar": [
            {
                "type": "func",
                "args": {
                    "a": "_nx.Series"
                }
            }
        ],
        "_namefromtype": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "typename": [
            {
                "type": "func",
                "args": {
                    "char": "str"
                }
            }
        ],
        "array_type": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_precision": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "_common_type_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arrays": "_nx.ndarray"
                }
            }
        ],
        "real": [
            {
                "type": "func",
                "args": {
                    "val": "_nx.ndarray"
                }
            }
        ],
        "imag": [
            {
                "type": "func",
                "args": {
                    "val": "float"
                }
            }
        ],
        "isreal": [
            {
                "type": "func",
                "args": {
                    "x": "type"
                }
            }
        ],
        "real_if_close": [
            {
                "type": "func",
                "args": {
                    "a": "_nx.complexfloating",
                    "tol": "float"
                }
            }
        ],
        "iscomplexobj": [
            {
                "type": "func",
                "args": {
                    "x": "type"
                }
            }
        ],
        "common_type": [
            {
                "type": "func",
                "args": {
                    "arrays": "_nx.ndarray"
                }
            }
        ],
        "isrealobj": [
            {
                "type": "func",
                "args": {
                    "x": "type"
                }
            }
        ],
        "iscomplex": [
            {
                "type": "func",
                "args": {
                    "x": "type"
                }
            }
        ],
        "mintypecode": [
            {
                "type": "func",
                "args": {
                    "typechars": "Any",
                    "typeset": "typing.Type[str]",
                    "default": "str"
                }
            }
        ],
        "_getmaxmin": [
            {
                "type": "func",
                "args": {
                    "t": "type"
                }
            }
        ],
        "nan_to_num": [
            {
                "type": "func",
                "args": {
                    "x": "_nx.ndarray",
                    "copy": "bool",
                    "nan": "float",
                    "posinf": "float",
                    "neginf": "float"
                }
            }
        ]
    },
    "lib.twodim_base": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "functools.Mapping[Callable, ...]"
            }
        ],
        "i1": [
            {
                "type": "var",
                "anno": "iinfo"
            }
        ],
        "i2": [
            {
                "type": "var",
                "anno": "iinfo"
            }
        ],
        "i4": [
            {
                "type": "var",
                "anno": "iinfo"
            }
        ],
        "_flip_dispatcher": [
            {
                "type": "func",
                "args": {
                    "m": "Callable"
                }
            }
        ],
        "fliplr": [
            {
                "type": "func",
                "args": {
                    "m": "Callable"
                }
            }
        ],
        "flipud": [
            {
                "type": "func",
                "args": {
                    "m": "Callable"
                }
            }
        ],
        "_diag_dispatcher": [
            {
                "type": "func",
                "args": {
                    "v": "Callable",
                    "k": "int"
                }
            }
        ],
        "_trilu_dispatcher": [
            {
                "type": "func",
                "args": {
                    "m": "Callable",
                    "k": "int"
                }
            }
        ],
        "_vander_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "Callable",
                    "N": "int",
                    "increasing": "bool"
                }
            }
        ],
        "_histogram2d_dispatcher": [
            {
                "type": "func",
                "args": {
                    "x": "int",
                    "y": "int",
                    "bins": "int",
                    "range": "int",
                    "normed": "int",
                    "weights": "int",
                    "density": "int"
                }
            }
        ],
        "histogram2d": [
            {
                "type": "func",
                "args": {
                    "x": "int",
                    "y": "int",
                    "bins": "int",
                    "range": "int",
                    "normed": "int",
                    "weights": "int",
                    "density": "int"
                }
            }
        ],
        "mask_indices": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "mask_func": "functools.Callable",
                    "k": "int"
                }
            }
        ],
        "_trilu_indices_form_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray",
                    "k": "int"
                }
            }
        ],
        "vander": [
            {
                "type": "func",
                "args": {
                    "x": "Callable",
                    "N": "int",
                    "increasing": "bool"
                }
            }
        ],
        "diagflat": [
            {
                "type": "func",
                "args": {
                    "v": "Callable",
                    "k": "int"
                }
            }
        ],
        "diag": [
            {
                "type": "func",
                "args": {
                    "v": "Callable",
                    "k": "int"
                }
            }
        ],
        "eye": [
            {
                "type": "func",
                "args": {
                    "N": "int",
                    "M": "int",
                    "k": "int",
                    "dtype": "str",
                    "order": "str"
                }
            }
        ],
        "_min_int": [
            {
                "type": "func",
                "args": {
                    "low": "int",
                    "high": "int"
                }
            }
        ],
        "tri": [
            {
                "type": "func",
                "args": {
                    "N": "int",
                    "M": "int",
                    "k": "int",
                    "dtype": "type"
                }
            }
        ],
        "triu_indices": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "k": "int",
                    "m": "int"
                }
            }
        ],
        "triu_indices_from": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray",
                    "k": "int"
                }
            }
        ],
        "tril_indices": [
            {
                "type": "func",
                "args": {
                    "n": "int",
                    "k": "int",
                    "m": "int"
                }
            }
        ],
        "tril_indices_from": [
            {
                "type": "func",
                "args": {
                    "arr": "np.ndarray",
                    "k": "int"
                }
            }
        ],
        "triu": [
            {
                "type": "func",
                "args": {
                    "m": "Callable",
                    "k": "int"
                }
            }
        ],
        "tril": [
            {
                "type": "func",
                "args": {
                    "m": "Callable",
                    "k": "int"
                }
            }
        ]
    },
    "lib": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ]
    },
    "lib._datasource": {
        "_open": [
            {
                "type": "var",
                "anno": "typing.Callable"
            }
        ],
        "_check_mode": [
            {
                "type": "func",
                "args": {
                    "mode": "str",
                    "encoding": "str",
                    "newline": "str"
                }
            }
        ],
        "_FileOpeners._loaded": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "_FileOpeners._file_openers": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "_FileOpeners.__init__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_FileOpeners._load": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_FileOpeners.keys": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_FileOpeners.__getitem__": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "_file_openers": [
            {
                "type": "var",
                "anno": "typing.Dict[str, typing.Callable]"
            }
        ],
        "DataSource._destpath": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "DataSource._istmpdest": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "DataSource.__init__": [
            {
                "type": "method",
                "args": {
                    "destpath": "str"
                }
            }
        ],
        "DataSource.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataSource._iszip": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "DataSource._iswritemode": [
            {
                "type": "method",
                "args": {
                    "mode": "str"
                }
            }
        ],
        "DataSource._splitzipext": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "DataSource._possible_names": [
            {
                "type": "method",
                "args": {
                    "filename": "str"
                }
            }
        ],
        "DataSource._isurl": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "Repository._baseurl": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Repository.__init__": [
            {
                "type": "method",
                "args": {
                    "baseurl": "str",
                    "destpath": "str"
                }
            }
        ],
        "Repository.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Repository._fullpath": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "Repository.listdir": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "DataSource._sanitize_relative_path": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "DataSource.abspath": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "Repository.abspath": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "DataSource.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "Repository.exists": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "DataSource._cache": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "DataSource._findfile": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "Repository._findfile": [
            {
                "type": "method",
                "args": {
                    "path": "str"
                }
            }
        ],
        "DataSource.open": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "mode": "str",
                    "encoding": "str",
                    "newline": "str"
                }
            }
        ],
        "Repository.open": [
            {
                "type": "method",
                "args": {
                    "path": "str",
                    "mode": "str",
                    "encoding": "str",
                    "newline": "str"
                }
            }
        ],
        "open": [
            {
                "type": "func",
                "args": {
                    "path": "str",
                    "mode": "str",
                    "destpath": "str",
                    "encoding": "str",
                    "newline": "str"
                }
            }
        ]
    },
    "lib.arrayterator": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "Arrayterator.var": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Arrayterator.buf_size": [
            {
                "type": "attr",
                "anno": "int | None"
            }
        ],
        "Arrayterator.start": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Arrayterator.stop": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Arrayterator.step": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Arrayterator.__getattr__": [
            {
                "type": "method",
                "args": {
                    "attr": "str"
                }
            }
        ],
        "Arrayterator.__array__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Arrayterator.shape": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Arrayterator.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Arrayterator.__init__": [
            {
                "type": "method",
                "args": {
                    "var": "np.ndarray",
                    "buf_size": "int | None"
                }
            }
        ],
        "Arrayterator.__getitem__": [
            {
                "type": "method",
                "args": {
                    "index": "int | long | slice"
                }
            }
        ],
        "Arrayterator.flat": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib._iotools": {
        "__docformat__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_is_string_like": [
            {
                "type": "func",
                "args": {
                    "obj": "str"
                }
            }
        ],
        "_is_bytes_like": [
            {
                "type": "func",
                "args": {
                    "obj": "bytes"
                }
            }
        ],
        "has_nested_fields": [
            {
                "type": "func",
                "args": {
                    "ndtype": "np.ndarray"
                }
            }
        ],
        "LineSplitter.comments": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "LineSplitter.delimiter": [
            {
                "type": "attr",
                "anno": "str | tuple"
            }
        ],
        "LineSplitter._handyman": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "LineSplitter.encoding": [
            {
                "type": "attr",
                "anno": "str | bytes"
            }
        ],
        "LineSplitter._variablewidth_splitter": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "NameValidator.defaultexcludelist": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "NameValidator.defaultdeletechars": [
            {
                "type": "attr",
                "anno": "typing.Set[str]"
            }
        ],
        "NameValidator.excludelist": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "NameValidator.deletechars": [
            {
                "type": "attr",
                "anno": "typing.Set[str]"
            }
        ],
        "NameValidator.case_converter": [
            {
                "type": "attr",
                "anno": "StringConverter"
            }
        ],
        "NameValidator.replace_space": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "StringConverter._locked": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "StringConverter.func": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "StringConverter._status": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "StringConverter.default": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "StringConverter.missing_values": [
            {
                "type": "attr",
                "anno": "typing.Set[str]"
            }
        ],
        "StringConverter._callingfunction": [
            {
                "type": "attr",
                "anno": "typing.Callable"
            }
        ],
        "StringConverter.type": [
            {
                "type": "attr",
                "anno": "typing.Type"
            }
        ],
        "StringConverter._checked": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "StringConverter._initial_default": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "StringConverter._loose_call": [
            {
                "type": "method",
                "args": {
                    "value": "typing.Any"
                }
            }
        ],
        "StringConverter.__call__": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "StringConverter._dtypeortype": [
            {
                "type": "method",
                "args": {
                    "cls": "typing.Type",
                    "dtype": "np.dtype"
                }
            }
        ],
        "flatten_dtype": [
            {
                "type": "func",
                "args": {
                    "ndtype": "np.ndarray",
                    "flatten_base": "bool"
                }
            }
        ],
        "StringConverter._getsubdtype": [
            {
                "type": "method",
                "args": {
                    "cls": "Type",
                    "val": "typing.Any"
                }
            }
        ],
        "StringConverter._getdtype": [
            {
                "type": "method",
                "args": {
                    "cls": "typing.Type",
                    "val": "typing.Any"
                }
            }
        ],
        "StringConverter.update": [
            {
                "type": "method",
                "args": {
                    "func": "typing.Callable",
                    "default": "typing.Any",
                    "testing_value": "typing.Any",
                    "missing_values": "typing.Optional[typing.List[str]]",
                    "locked": "bool"
                }
            }
        ],
        "str2bool": [
            {
                "type": "func",
                "args": {
                    "value": "str"
                }
            }
        ],
        "StringConverter._mapper": [
            {
                "type": "attr",
                "anno": "typing.List[typing.Tuple[typing.Type, typing.Callable, typing.Any]]"
            }
        ],
        "StringConverter.upgrade_mapper": [
            {
                "type": "method",
                "args": {
                    "cls": "Type",
                    "func": "typing.Callable",
                    "default": "typing.Any"
                }
            }
        ],
        "StringConverter._strict_call": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "StringConverter.iterupgrade": [
            {
                "type": "method",
                "args": {
                    "value": "typing.Any"
                }
            }
        ],
        "StringConverter.upgrade": [
            {
                "type": "method",
                "args": {
                    "value": "str"
                }
            }
        ],
        "StringConverter.__init__": [
            {
                "type": "method",
                "args": {
                    "dtype_or_func": "typing.Any",
                    "default": "typing.Any",
                    "missing_values": "typing.Any",
                    "locked": "bool"
                }
            }
        ],
        "LineSplitter._fixedwidth_splitter": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "LineSplitter._delimited_splitter": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "LineSplitter.autostrip": [
            {
                "type": "method",
                "args": {
                    "method": "typing.Callable"
                }
            }
        ],
        "NameValidator.__init__": [
            {
                "type": "method",
                "args": {
                    "excludelist": "typing.List[str]",
                    "deletechars": "typing.Set[str]",
                    "case_sensitive": "bool",
                    "replace_space": "str"
                }
            }
        ],
        "easy_dtype": [
            {
                "type": "func",
                "args": {
                    "ndtype": "np.ndarray",
                    "names": "str | tuple",
                    "defaultfmt": "str",
                    "validationargs": "typing.Any"
                }
            }
        ],
        "NameValidator.validate": [
            {
                "type": "method",
                "args": {
                    "names": "typing.Union[str, typing.List[str]]",
                    "defaultfmt": "str",
                    "nbfields": "typing.Optional[int]"
                }
            }
        ],
        "NameValidator.__call__": [
            {
                "type": "method",
                "args": {
                    "names": "typing.Union[str, typing.List[str]]",
                    "defaultfmt": "str",
                    "nbfields": "typing.Optional[int]"
                }
            }
        ],
        "_decode_line": [
            {
                "type": "func",
                "args": {
                    "line": "str",
                    "encoding": "str | bytes"
                }
            }
        ],
        "LineSplitter.__call__": [
            {
                "type": "method",
                "args": {
                    "line": "str"
                }
            }
        ],
        "LineSplitter.__init__": [
            {
                "type": "method",
                "args": {
                    "delimiter": "str | tuple",
                    "comments": "str",
                    "autostrip": "bool",
                    "encoding": "str | bytes"
                }
            }
        ]
    },
    "lib.npyio": {
        "loads": [
            {
                "type": "func",
                "args": {
                    "args": "str",
                    "kwargs": "str"
                }
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "typing.Mapping[str, typing.Callable]"
            }
        ],
        "BagObj._obj": [
            {
                "type": "attr",
                "anno": "typing.Any"
            }
        ],
        "BagObj.__init__": [
            {
                "type": "method",
                "args": {
                    "obj": "typing.Any"
                }
            }
        ],
        "BagObj.__getattribute__": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ],
        "BagObj.__dir__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "zipfile_factory": [
            {
                "type": "func",
                "args": {
                    "file": "typing.Any",
                    "args": "typing.Any",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "NpzFile._files": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "NpzFile.files": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "NpzFile.allow_pickle": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "NpzFile.pickle_kwargs": [
            {
                "type": "attr",
                "anno": "typing.Dict[str, typing.Any]"
            }
        ],
        "NpzFile.zip": [
            {
                "type": "attr",
                "anno": "typing.Optional[zipfile.ZipFile]"
            }
        ],
        "NpzFile.f": [
            {
                "type": "attr",
                "anno": "BagObj"
            }
        ],
        "NpzFile.fid": [
            {
                "type": "attr",
                "anno": "typing.Optional[str]"
            }
        ],
        "NpzFile.__init__": [
            {
                "type": "method",
                "args": {
                    "fid": "typing.Any",
                    "own_fid": "bool",
                    "allow_pickle": "bool",
                    "pickle_kwargs": "typing.Dict[str, typing.Any]"
                }
            }
        ],
        "NpzFile.__enter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NpzFile.close": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NpzFile.__exit__": [
            {
                "type": "method",
                "args": {
                    "exc_type": "str",
                    "exc_value": "str",
                    "traceback": "str"
                }
            }
        ],
        "NpzFile.__del__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NpzFile.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NpzFile.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NpzFile.iteritems": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "NpzFile.iterkeys": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "_save_dispatcher": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "arr": "np.ndarray",
                    "allow_pickle": "bool",
                    "fix_imports": "bool"
                }
            }
        ],
        "_savez_dispatcher": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "args": "typing.Any",
                    "kwds": "typing.Any"
                }
            }
        ],
        "_savez_compressed_dispatcher": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "args": "typing.Any",
                    "kwds": "typing.Any"
                }
            }
        ],
        "_loadtxt_chunksize": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_savetxt_dispatcher": [
            {
                "type": "func",
                "args": {
                    "fname": "str",
                    "X": "np.ndarray",
                    "fmt": "str",
                    "delimiter": "str",
                    "newline": "str",
                    "header": "str",
                    "footer": "str",
                    "comments": "str",
                    "encoding": "str"
                }
            }
        ],
        "fromregex": [
            {
                "type": "func",
                "args": {
                    "file": "DataSource",
                    "regexp": "str",
                    "dtype": "np.dtype",
                    "encoding": "str"
                }
            }
        ],
        "_getconv": [
            {
                "type": "func",
                "args": {
                    "dtype": "np.dtype"
                }
            }
        ],
        "savetxt": [
            {
                "type": "func",
                "args": {
                    "fname": "str",
                    "X": "np.ndarray",
                    "fmt": "str",
                    "delimiter": "str",
                    "newline": "str",
                    "header": "str",
                    "footer": "str",
                    "comments": "str",
                    "encoding": "str"
                }
            }
        ],
        "_savez": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "args": "typing.Iterable[typing.Any]",
                    "kwds": "typing.Dict[str, typing.Any]",
                    "compress": "bool",
                    "allow_pickle": "bool",
                    "pickle_kwargs": "dict"
                }
            }
        ],
        "savez_compressed": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "args": "typing.Any",
                    "kwds": "typing.Any"
                }
            }
        ],
        "savez": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "args": "typing.Any",
                    "kwds": "typing.Any"
                }
            }
        ],
        "save": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "arr": "np.ndarray",
                    "allow_pickle": "bool",
                    "fix_imports": "bool"
                }
            }
        ],
        "loadtxt": [
            {
                "type": "func",
                "args": {
                    "fname": "str | os_PathLike | str | bytes",
                    "dtype": "float",
                    "comments": "str | bytes",
                    "delimiter": "str | None",
                    "converters": "typing.List[Callable]",
                    "skiprows": "int",
                    "usecols": "int | None",
                    "unpack": "bool",
                    "ndmin": "int",
                    "encoding": "str | bytes",
                    "max_rows": "int"
                }
            }
        ],
        "genfromtxt": [
            {
                "type": "func",
                "args": {
                    "fname": "str | os_PathLike",
                    "dtype": "float",
                    "comments": "str",
                    "delimiter": "str | tuple",
                    "skip_header": "int",
                    "skip_footer": "int",
                    "converters": "dict",
                    "missing_values": "typing.Any",
                    "filling_values": "typing.Any",
                    "usecols": "str | None",
                    "names": "str | tuple",
                    "excludelist": "typing.List[str]",
                    "deletechars": "str",
                    "replace_space": "str",
                    "autostrip": "bool",
                    "case_sensitive": "bool",
                    "defaultfmt": "str",
                    "unpack": "str",
                    "usemask": "bool",
                    "loose": "bool",
                    "invalid_raise": "bool",
                    "max_rows": "int",
                    "encoding": "str | bytes"
                }
            }
        ],
        "recfromcsv": [
            {
                "type": "func",
                "args": {
                    "fname": "str | os_PathLike",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "recfromtxt": [
            {
                "type": "func",
                "args": {
                    "fname": "str | os_PathLike",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "mafromtxt": [
            {
                "type": "func",
                "args": {
                    "fname": "str | os_PathLike",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "ndfromtxt": [
            {
                "type": "func",
                "args": {
                    "fname": "str | os_PathLike",
                    "kwargs": "typing.Any"
                }
            }
        ],
        "load": [
            {
                "type": "func",
                "args": {
                    "file": "str",
                    "mmap_mode": "str",
                    "allow_pickle": "bool",
                    "fix_imports": "bool",
                    "encoding": "str"
                }
            }
        ],
        "NpzFile.__getitem__": [
            {
                "type": "method",
                "args": {
                    "key": "str"
                }
            }
        ]
    },
    "lib.shape_base": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "array_function_dispatch": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "_take_along_axis_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "numpy.ndarray",
                    "indices": "tuple",
                    "axis": "int"
                }
            }
        ],
        "_put_along_axis_dispatcher": [
            {
                "type": "func",
                "args": {
                    "arr": "numpy.ndarray",
                    "indices": "tuple",
                    "values": "tuple",
                    "axis": "int"
                }
            }
        ],
        "_apply_along_axis_dispatcher": [
            {
                "type": "func",
                "args": {
                    "func1d": "Callable",
                    "axis": "int",
                    "arr": "array",
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "_apply_over_axes_dispatcher": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "a": "array",
                    "axes": "tuple"
                }
            }
        ],
        "_expand_dims_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "array",
                    "axis": "tuple"
                }
            }
        ],
        "row_stack": [
            {
                "type": "var",
                "anno": "_arrays_for_stack_dispatcher"
            }
        ],
        "_column_stack_dispatcher": [
            {
                "type": "func",
                "args": {
                    "tup": "tuple"
                }
            }
        ],
        "_dstack_dispatcher": [
            {
                "type": "func",
                "args": {
                    "tup": "tuple"
                }
            }
        ],
        "dstack": [
            {
                "type": "func",
                "args": {
                    "tup": "tuple"
                }
            }
        ],
        "_array_split_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ary": "_nx.Tensor",
                    "indices_or_sections": "tuple",
                    "axis": "int"
                }
            }
        ],
        "_split_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ary": "_nx.Tensor",
                    "indices_or_sections": "tuple",
                    "axis": "int"
                }
            }
        ],
        "_hvdsplit_dispatcher": [
            {
                "type": "func",
                "args": {
                    "ary": "_nx.Tensor",
                    "indices_or_sections": "tuple"
                }
            }
        ],
        "_kron_dispatcher": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "b": "float"
                }
            }
        ],
        "_tile_dispatcher": [
            {
                "type": "func",
                "args": {
                    "A": "_nx.ndarray",
                    "reps": "tuple"
                }
            }
        ],
        "get_array_wrap": [
            {
                "type": "func",
                "args": {
                    "args": "object"
                }
            }
        ],
        "get_array_prepare": [
            {
                "type": "func",
                "args": {
                    "args": "object"
                }
            }
        ],
        "_replace_zero_by_x_arrays": [
            {
                "type": "func",
                "args": {
                    "sub_arys": "list"
                }
            }
        ],
        "apply_along_axis": [
            {
                "type": "func",
                "args": {
                    "func1d": "Callable",
                    "axis": "int",
                    "arr": "array",
                    "args": "tuple",
                    "kwargs": "dict"
                }
            }
        ],
        "kron": [
            {
                "type": "func",
                "args": {
                    "a": "float",
                    "b": "float"
                }
            }
        ],
        "expand_dims": [
            {
                "type": "func",
                "args": {
                    "a": "array",
                    "axis": "tuple"
                }
            }
        ],
        "apply_over_axes": [
            {
                "type": "func",
                "args": {
                    "func": "Callable",
                    "a": "array",
                    "axes": "tuple"
                }
            }
        ],
        "_make_along_axis_idx": [
            {
                "type": "func",
                "args": {
                    "arr_shape": "tuple",
                    "indices": "tuple",
                    "axis": "int"
                }
            }
        ],
        "put_along_axis": [
            {
                "type": "func",
                "args": {
                    "arr": "numpy.ndarray",
                    "indices": "tuple",
                    "values": "tuple",
                    "axis": "int"
                }
            }
        ],
        "take_along_axis": [
            {
                "type": "func",
                "args": {
                    "arr": "numpy.ndarray",
                    "indices": "tuple",
                    "axis": "int"
                }
            }
        ],
        "column_stack": [
            {
                "type": "func",
                "args": {
                    "tup": "tuple"
                }
            }
        ],
        "tile": [
            {
                "type": "func",
                "args": {
                    "A": "_nx.ndarray",
                    "reps": "tuple"
                }
            }
        ],
        "array_split": [
            {
                "type": "func",
                "args": {
                    "ary": "_nx.Tensor",
                    "indices_or_sections": "tuple",
                    "axis": "int"
                }
            }
        ],
        "split": [
            {
                "type": "func",
                "args": {
                    "ary": "_nx.Tensor",
                    "indices_or_sections": "tuple",
                    "axis": "int"
                }
            }
        ],
        "dsplit": [
            {
                "type": "func",
                "args": {
                    "ary": "_nx.Tensor",
                    "indices_or_sections": "tuple"
                }
            }
        ],
        "vsplit": [
            {
                "type": "func",
                "args": {
                    "ary": "_nx.Tensor",
                    "indices_or_sections": "tuple"
                }
            }
        ],
        "hsplit": [
            {
                "type": "func",
                "args": {
                    "ary": "_nx.Tensor",
                    "indices_or_sections": "tuple"
                }
            }
        ]
    },
    "dual": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "fft": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "ifft": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "fftn": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "ifftn": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "fft2": [
            {
                "type": "var",
                "anno": "fftpkg.fft2"
            }
        ],
        "ifft2": [
            {
                "type": "var",
                "anno": "fftpkg.Ifft2"
            }
        ],
        "norm": [
            {
                "type": "var",
                "anno": "Callable[[], float]"
            }
        ],
        "inv": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "svd": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "solve": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "det": [
            {
                "type": "var",
                "anno": "float"
            }
        ],
        "eig": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "eigvals": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "eigh": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "eigvalsh": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "lstsq": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "pinv": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "cholesky": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_restore_dict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "register_func": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "func": "Callable"
                }
            }
        ],
        "restore_func": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "restore_all": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "f2py.capi_maps": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "using_newcore": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "depargs": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "lcb_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "lcb2_map": [
            {
                "type": "var",
                "anno": "dict[str, dict[str, str]]"
            }
        ],
        "c2py_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "c2capi_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "c2pycode_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "c2buildvalue_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "f2cmap_all": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "f2cmap_default": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "cformat_map": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "getctype": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "load_f2cmap_file": [
            {
                "type": "func",
                "args": {
                    "f2cmap_file": "str"
                }
            }
        ],
        "modsign2map": [
            {
                "type": "func",
                "args": {
                    "m": "dict"
                }
            }
        ],
        "getinit": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "var": "dict"
                }
            }
        ],
        "getstrlength": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "getarrdocsign": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "var": "dict"
                }
            }
        ],
        "getpydocsign": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "var": "dict"
                }
            }
        ],
        "getarrdims": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "var": "dict",
                    "verbose": "int"
                }
            }
        ],
        "common_sign2map": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "var": "dict"
                }
            }
        ],
        "cb_sign2map": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "var": "str",
                    "index": "int"
                }
            }
        ],
        "cb_routsign2map": [
            {
                "type": "func",
                "args": {
                    "rout": "dict",
                    "um": "str"
                }
            }
        ],
        "sign2map": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "var": "dict"
                }
            }
        ],
        "routsign2map": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ]
    },
    "f2py.cfuncs": {
        "errmess": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "outneeds": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "needs": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "includes0": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "includes": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "userincludes": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "typedefs": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "typedefs_generated": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "cppmacros": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "cfuncs": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "callbacks": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "f90modhooks": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "commonhooks": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "buildcfuncs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "append_needs": [
            {
                "type": "func",
                "args": {
                    "need": "str",
                    "flag": "int"
                }
            }
        ],
        "get_needs": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "f2py.cb_rules": {
        "cb_routine_rules": [
            {
                "type": "var",
                "anno": "dict[str, str]"
            }
        ],
        "cb_map": [
            {
                "type": "var",
                "anno": "Any"
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "cb_arg_rules": [
            {
                "type": "var",
                "anno": "list[dict[str, str]]"
            }
        ],
        "cb_rout_rules": [
            {
                "type": "var",
                "anno": "list[dict[str, str]]"
            }
        ],
        "buildcallback": [
            {
                "type": "func",
                "args": {
                    "rout": "dict",
                    "um": "str"
                }
            }
        ],
        "buildcallbacks": [
            {
                "type": "func",
                "args": {
                    "m": "dict"
                }
            }
        ]
    },
    "f2py.auxfuncs": {
        "__all__": [
            {
                "type": "var",
                "anno": "types.List[str]"
            }
        ],
        "errmess": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "show": [
            {
                "type": "var",
                "anno": "Callable"
            }
        ],
        "options": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "debugoptions": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "wrapfuncs": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "outmess": [
            {
                "type": "func",
                "args": {
                    "t": "str"
                }
            }
        ],
        "debugcapi": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "get_kind": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isallocatable": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "ismoduleroutine": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "ismodule": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "isfunction": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "issubroutine": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "hasassumedshape": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "isroutine": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "hasexternals": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "isthreadsafe": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "hasvariables": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "isexternal": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isarray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "issigned_long_longarray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "issigned_array": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "issigned_shortarray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "issigned_chararray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isunsigned_long_longarray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isunsignedarray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isunsigned_shortarray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isunsigned_chararray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isint1array": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "iscomplexarray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "_isstring": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isstringarray": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isarrayofstrings": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isstring": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isstringfunction": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "ismutable": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isscalar": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "islong_double": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "islong_doublefunction": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "isdouble": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isunsigned_long_long": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isunsigned": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isunsigned_short": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isunsigned_char": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "islong_long": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "islong_longfunction": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "isreal": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isinteger": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "islogical": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "islogicalfunction": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "iscomplex": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "iscomplexfunction": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "iscomplexfunction_warn": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "islong_complex": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "ischaracter": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_in": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_inout": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_out": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_c": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "issubroutine_wrap": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "isfunction_wrap": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "isintent_cache": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_copy": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_overwrite": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_callback": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_inplace": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_aux": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_aligned4": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_aligned8": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_aligned16": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isprivate": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "hasinitvalue": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "hasinitvalueasstring": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "hasnote": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "hasresultnote": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "hascommon": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "hasbody": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "containsmodule": [
            {
                "type": "func",
                "args": {
                    "block": "dict"
                }
            }
        ],
        "containscommon": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "istrue": [
            {
                "type": "func",
                "args": {
                    "var": "str"
                }
            }
        ],
        "isfalse": [
            {
                "type": "func",
                "args": {
                    "var": "bool"
                }
            }
        ],
        "throw_error.mess": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "throw_error.__init__": [
            {
                "type": "method",
                "args": {
                    "mess": "str"
                }
            }
        ],
        "throw_error.__call__": [
            {
                "type": "method",
                "args": {
                    "var": "str"
                }
            }
        ],
        "l_not": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "isdummyroutine": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "getfortranname": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "getmultilineblock": [
            {
                "type": "func",
                "args": {
                    "rout": "dict",
                    "blockname": "str",
                    "comment": "int",
                    "counter": "int"
                }
            }
        ],
        "getcallstatement": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "hascallstatement": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "getusercode": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "getusercode1": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "getpymethoddef": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "getargs": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "getargs2": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "getrestdoc": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "gentitle": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "flatlist": [
            {
                "type": "func",
                "args": {
                    "l": "list"
                }
            }
        ],
        "stripcomma": [
            {
                "type": "func",
                "args": {
                    "s": "str"
                }
            }
        ],
        "dictappend": [
            {
                "type": "func",
                "args": {
                    "rd": "dict",
                    "ar": "dict"
                }
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "replace": [
            {
                "type": "func",
                "args": {
                    "str": "str",
                    "d": "dict",
                    "defaultsep": "str"
                }
            }
        ],
        "applyrules": [
            {
                "type": "func",
                "args": {
                    "rules": "dict",
                    "d": "str",
                    "var": "dict"
                }
            }
        ],
        "l_or": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "isintent_hide": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_nothide": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isoptional": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "isintent_dict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "isrequired": [
            {
                "type": "func",
                "args": {
                    "var": "str"
                }
            }
        ],
        "l_and": [
            {
                "type": "func",
                "args": {
                    "f": "Callable"
                }
            }
        ],
        "getcallprotoargument": [
            {
                "type": "func",
                "args": {
                    "rout": "dict",
                    "cb_map": "dict"
                }
            }
        ]
    },
    "f2py.tests.test_regression": {
        "_path": [
            {
                "type": "func",
                "args": {
                    "a": "str"
                }
            }
        ],
        "TestIntentInOut.sources": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestIntentInOut.test_inout": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_mixed": {
        "_path": [
            {
                "type": "func",
                "args": {
                    "a": "str"
                }
            }
        ],
        "TestMixed.sources": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestMixed.test_docstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMixed.test_all": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_compile_function": {
        "test_f2py_init_compile_failure": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_f2py_init_compile_bad_cmd": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_compile_from_strings": [
            {
                "type": "func",
                "args": {
                    "tmpdir": "util.TempDir",
                    "fsource": "bytes"
                }
            }
        ],
        "test_f2py_init_compile": [
            {
                "type": "func",
                "args": {
                    "extra_args": "str"
                }
            }
        ],
        "setup_module": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_assumed_shape": {
        "_path": [
            {
                "type": "func",
                "args": {
                    "a": "str"
                }
            }
        ],
        "TestAssumedShapeSumExample.sources": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestF2cmapOption.sources": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestF2cmapOption.f2cmap_file": [
            {
                "type": "attr",
                "anno": "tempfile.NamedTemporaryFile"
            }
        ],
        "TestF2cmapOption.options": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "TestF2cmapOption.teardown": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestAssumedShapeSumExample.test_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestF2cmapOption.setup": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_kind": {
        "_path": [
            {
                "type": "func",
                "args": {
                    "a": "str"
                }
            }
        ],
        "TestKind.sources": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "TestKind.test_all": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_array_from_pyobj": {
        "wrap": [
            {
                "type": "var",
                "anno": "util.Module"
            }
        ],
        "flags2names": [
            {
                "type": "func",
                "args": {
                    "flags": "int"
                }
            }
        ],
        "flags_info": [
            {
                "type": "func",
                "args": {
                    "arr": "ndarray"
                }
            }
        ],
        "Intent.intent_list": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Intent.flags": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "Intent.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Intent.is_intent": [
            {
                "type": "method",
                "args": {
                    "names": "str"
                }
            }
        ],
        "Intent.is_intent_exact": [
            {
                "type": "method",
                "args": {
                    "names": "str"
                }
            }
        ],
        "_type_names": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_cast_dict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "Type._type_cache": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "Type.NAME": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Type.type_num": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Type.dtype": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Type.elsize": [
            {
                "type": "attr",
                "anno": "float"
            }
        ],
        "Type.dtypechar": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Type.cast_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Type.all_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Type.smaller_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Type.equal_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Type.larger_types": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Array.type": [
            {
                "type": "attr",
                "anno": "Type"
            }
        ],
        "Array.dims": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Array.intent": [
            {
                "type": "attr",
                "anno": "Intent"
            }
        ],
        "Array.obj_copy": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "Array.obj": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "Array.arr": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "Array.arr_attr": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Array.pyarr": [
            {
                "type": "attr",
                "anno": "ndarray"
            }
        ],
        "Array.pyarr_attr": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "Array.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Array.has_shared_memory": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.num2seq": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestSharedMemory.num23seq": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "Array.arr_equal": [
            {
                "type": "method",
                "args": {
                    "arr1": "ndarray",
                    "arr2": "ndarray"
                }
            }
        ],
        "Array.__init__": [
            {
                "type": "method",
                "args": {
                    "typ": "Type",
                    "dims": "tuple",
                    "intent": "Intent",
                    "obj": "ndarray"
                }
            }
        ],
        "TestSharedMemory.setup_type": [
            {
                "type": "method",
                "args": {
                    "request": "pytest.Request"
                }
            }
        ],
        "Type._init": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "Intent.__init__": [
            {
                "type": "method",
                "args": {
                    "intent_list": "list"
                }
            }
        ],
        "intent": [
            {
                "type": "var",
                "anno": "Intent"
            }
        ],
        "TestSharedMemory.test_inplace_from_casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_inplace": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_optional_from_23seq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_optional_from_2seq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_optional_none": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_hidden": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_cache_hidden": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_in_cache_from_2casttype_failure": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_in_cache_from_2casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_c_copy_in_from_23casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_f_copy_in_from_23casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_c_in_from_23casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_f_in_from_23casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_in_from_23casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_c_in_from_23seq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_in_copy_from_2casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_c_inout_23seq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_f_inout_23seq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_inout_2seq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_in_from_2casttype": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSharedMemory.test_in_from_2seq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Intent.__getattr__": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "setup_module": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "Intent.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntent.test_in_out": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "Type.__new__": [
            {
                "type": "method",
                "args": {
                    "cls": "Type",
                    "name": "str"
                }
            }
        ]
    },
    "f2py.tests.test_return_real": {
        "TestReturnReal.check_function": [
            {
                "type": "method",
                "args": {
                    "t": "typing.Callable",
                    "tname": "str"
                }
            }
        ],
        "TestCReturnReal.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCReturnReal.module_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCReturnReal.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF77ReturnReal.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnReal.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnReal.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnReal.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TestF77ReturnReal.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TestCReturnReal.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ]
    },
    "f2py.tests.util": {
        "_module_dir": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "_module_num": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "_cleanup": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_module_dir": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "get_temp_module_name": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "_memoize": [
            {
                "type": "func",
                "args": {
                    "func": "typing.Callable"
                }
            }
        ],
        "build_module": [
            {
                "type": "func",
                "args": {
                    "source_files": "typing.List[str]",
                    "options": "typing.List[str]",
                    "skip": "typing.List[str]",
                    "only": "typing.List[str]",
                    "module_name": "str"
                }
            }
        ],
        "build_code": [
            {
                "type": "func",
                "args": {
                    "source_code": "str",
                    "options": "typing.List[str]",
                    "skip": "typing.List[str]",
                    "only": "typing.List[str]",
                    "suffix": "str",
                    "module_name": "str"
                }
            }
        ],
        "_compiler_status": [
            {
                "type": "var",
                "anno": "tuple[bool, bool, bool]"
            }
        ],
        "_get_compiler_status": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "has_c_compiler": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "has_f77_compiler": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "has_f90_compiler": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "F2PyTest.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "F2PyTest.sources": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "F2PyTest.options": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "F2PyTest.skip": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "F2PyTest.only": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "F2PyTest.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "F2PyTest.module": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "F2PyTest.module_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "F2PyTest.setup": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "build_module_distutils": [
            {
                "type": "func",
                "args": {
                    "source_files": "list",
                    "config_code": "str",
                    "module_name": "str",
                    "kw": "str"
                }
            }
        ]
    },
    "f2py.tests.test_semicolon_split": {
        "TestMultiline.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestMultiline.module_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestMultiline.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestMultiline.test_multiline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCallstatement.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCallstatement.module_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCallstatement.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestCallstatement.test_callstatement": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_block_docstring": {
        "TestBlockDocString.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestBlockDocString.test_block_docstring": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_size": {
        "_path": [
            {
                "type": "func",
                "args": {
                    "a": "str"
                }
            }
        ],
        "TestSizeSumExample.sources": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestSizeSumExample.test_all": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeSumExample.test_transpose": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestSizeSumExample.test_flatten": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_quoted_character": {
        "TestQuotedCharacter.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestQuotedCharacter.test_quoted_character": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_return_integer": {
        "TestReturnInteger.check_function": [
            {
                "type": "method",
                "args": {
                    "t": "typing.Callable",
                    "tname": "str"
                }
            }
        ],
        "TestF77ReturnInteger.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF77ReturnInteger.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TestF90ReturnInteger.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnInteger.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnInteger.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ]
    },
    "f2py.tests.test_common": {
        "_path": [
            {
                "type": "func",
                "args": {
                    "a": "str"
                }
            }
        ],
        "TestCommonBlock.sources": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestCommonBlock.test_common_block": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_return_character": {
        "IS_S390X": [
            {
                "type": "var",
                "anno": "bool"
            }
        ],
        "TestReturnCharacter.check_function": [
            {
                "type": "method",
                "args": {
                    "t": "typing.Callable",
                    "tname": "str"
                }
            }
        ],
        "TestF77ReturnCharacter.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF77ReturnCharacter.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TestF90ReturnCharacter.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnCharacter.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnCharacter.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ]
    },
    "f2py.tests.test_callback": {
        "TestF77Callback.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF77Callback.test_docstring": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestF77Callback.A.__call__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestF77Callback.A.mth": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestF77Callback.check_function": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TestF77Callback.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TestF77Callback.test_string_callback": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestF77Callback.test_string_callback_array": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_return_complex": {
        "TestReturnComplex.check_function": [
            {
                "type": "method",
                "args": {
                    "t": "typing.Callable",
                    "tname": "str"
                }
            }
        ],
        "TestF77ReturnComplex.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF77ReturnComplex.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TestF90ReturnComplex.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnComplex.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnComplex.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ]
    },
    "f2py.tests.test_crackfortran": {
        "TestNoSpace.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestNoSpace.test_module": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_string": {
        "_path": [
            {
                "type": "func",
                "args": {
                    "a": "str"
                }
            }
        ],
        "TestString.sources": [
            {
                "type": "attr",
                "anno": "typing.List[str]"
            }
        ],
        "TestString.test_char": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_parameter": {
        "_path": [
            {
                "type": "func",
                "args": {
                    "a": "str"
                }
            }
        ],
        "TestParameters.sources": [
            {
                "type": "attr",
                "anno": "list"
            }
        ],
        "TestParameters.test_constant_real_single": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParameters.test_constant_real_double": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParameters.test_constant_compound_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParameters.test_constant_non_compound_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParameters.test_constant_integer_int": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParameters.test_constant_integer_long": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParameters.test_constant_both": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParameters.test_constant_no": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestParameters.test_constant_sum": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "f2py.tests.test_return_logical": {
        "TestReturnLogical.check_function": [
            {
                "type": "method",
                "args": {
                    "t": "typing.Callable"
                }
            }
        ],
        "TestF77ReturnLogical.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF77ReturnLogical.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ],
        "TestF90ReturnLogical.suffix": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnLogical.code": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "TestF90ReturnLogical.test_all": [
            {
                "type": "method",
                "args": {
                    "name": "str"
                }
            }
        ]
    },
    "f2py.f90mod_rules": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "options": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "findf90modules": [
            {
                "type": "func",
                "args": {
                    "m": "dict"
                }
            }
        ],
        "fgetdims1": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "fgetdims2": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "fgetdims2_sa": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "buildhooks": [
            {
                "type": "func",
                "args": {
                    "pymod": "dict"
                }
            }
        ]
    },
    "f2py.f2py2e": {
        "errmess": [
            {
                "type": "var",
                "anno": "Callable[[str], str]"
            }
        ],
        "show": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "outmess": [
            {
                "type": "var",
                "anno": "Callable[[str], str]"
            }
        ],
        "numpy_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "dict_append": [
            {
                "type": "func",
                "args": {
                    "d_out": "dict",
                    "d_in": "dict"
                }
            }
        ],
        "get_prefix": [
            {
                "type": "func",
                "args": {
                    "module": "str"
                }
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "__usage__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "scaninputline": [
            {
                "type": "func",
                "args": {
                    "inputline": "list"
                }
            }
        ],
        "filter_files": [
            {
                "type": "func",
                "args": {
                    "prefix": "str",
                    "suffix": "str",
                    "files": "str",
                    "remove_prefix": "bool"
                }
            }
        ],
        "run_compile": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "buildmodules": [
            {
                "type": "func",
                "args": {
                    "lst": "list"
                }
            }
        ],
        "callcrackfortran": [
            {
                "type": "func",
                "args": {
                    "files": "list",
                    "options": "dict"
                }
            }
        ],
        "run_main": [
            {
                "type": "func",
                "args": {
                    "comline_list": "list"
                }
            }
        ],
        "main": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "f2py.diagnose": {
        "run_command": [
            {
                "type": "func",
                "args": {
                    "cmd": "str"
                }
            }
        ],
        "run": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "f2py.use_rules": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "usemodule_rules": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "buildusevar": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "realname": "str",
                    "vars": "dict",
                    "usemodulename": "str"
                }
            }
        ],
        "buildusevars": [
            {
                "type": "func",
                "args": {
                    "m": "dict",
                    "r": "dict"
                }
            }
        ]
    },
    "f2py.common_rules": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "findcommonblocks": [
            {
                "type": "func",
                "args": {
                    "block": "dict",
                    "top": "int"
                }
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "buildhooks": [
            {
                "type": "func",
                "args": {
                    "m": "dict"
                }
            }
        ]
    },
    "f2py.crackfortran": {
        "strictf77": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "sourcecodeform": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "quiet": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "verbose": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "tabchar": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "pyffilename": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "f77modulename": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "skipemptyends": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "ignorecontains": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "dolowercase": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "debug": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "beginpattern": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "currentfilename": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "expectbegin": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "f90modulevars": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "filepositiontext": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "gotnextfile": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "groupcache": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "groupcounter": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "grouplist": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "groupname": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "include_paths": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "neededmodule": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "onlyfuncs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "previous_context": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "skipblocksuntil": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "skipfuncs": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "skipfunctions": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "usermodules": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "reset_global_f2py_vars": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "outmess": [
            {
                "type": "func",
                "args": {
                    "line": "str",
                    "flag": "int"
                }
            }
        ],
        "defaultimplicitrules": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "badnames": [
            {
                "type": "var",
                "anno": "dict[str, str]"
            }
        ],
        "invbadnames": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "rmbadname1": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "rmbadname": [
            {
                "type": "func",
                "args": {
                    "names": "list"
                }
            }
        ],
        "undo_rmbadname1": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "undo_rmbadname": [
            {
                "type": "func",
                "args": {
                    "names": "list"
                }
            }
        ],
        "getextension": [
            {
                "type": "func",
                "args": {
                    "name": "str"
                }
            }
        ],
        "is_f_file": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_has_f_header": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_has_f90_header": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_has_fix_header": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_free_f90_start": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "beforethisafter": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "fortrantypes": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "typespattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "typespattern4implicit": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "functionpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "subroutinepattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "groupbegins77": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "beginpattern77": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "groupbegins90": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "beginpattern90": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "groupends": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "endpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "endifs": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "endifpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "implicitpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "dimensionpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "externalpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "optionalpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "requiredpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "publicpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "privatepattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "intrinsicpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "intentpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "parameterpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "datapattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "callpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "entrypattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "callfunpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "commonpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "usepattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "containspattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "formatpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "f2pyenhancementspattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "multilinepattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "split_by_unquoted": [
            {
                "type": "func",
                "args": {
                    "line": "str",
                    "characters": "str"
                }
            }
        ],
        "crackline_re_1": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "markouterparen": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "markoutercomma": [
            {
                "type": "func",
                "args": {
                    "line": "str",
                    "comma": "str"
                }
            }
        ],
        "selectpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "nameargspattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "callnameargspattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "real16pattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "real8pattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_intentcallbackpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_is_intent_callback": [
            {
                "type": "func",
                "args": {
                    "vdecl": "dict"
                }
            }
        ],
        "_resolvenameargspattern": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "appendmultiline": [
            {
                "type": "func",
                "args": {
                    "group": "dict",
                    "context_name": "str",
                    "ml": "str"
                }
            }
        ],
        "namepattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "kindselector": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "charselector": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "lenkindpattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "lenarraypattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "markinnerspaces": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "cracktypespec": [
            {
                "type": "func",
                "args": {
                    "typespec": "str",
                    "selector": "str"
                }
            }
        ],
        "setattrspec": [
            {
                "type": "func",
                "args": {
                    "decl": "dict",
                    "attr": "str",
                    "force": "int"
                }
            }
        ],
        "setkindselector": [
            {
                "type": "func",
                "args": {
                    "decl": "dict",
                    "sel": "dict",
                    "force": "int"
                }
            }
        ],
        "setcharselector": [
            {
                "type": "func",
                "args": {
                    "decl": "dict",
                    "sel": "dict",
                    "force": "int"
                }
            }
        ],
        "appenddecl": [
            {
                "type": "func",
                "args": {
                    "decl": "dict",
                    "decl2": "dict",
                    "force": "int"
                }
            }
        ],
        "getblockname": [
            {
                "type": "func",
                "args": {
                    "block": "dict",
                    "unknown": "str"
                }
            }
        ],
        "setmesstext": [
            {
                "type": "func",
                "args": {
                    "block": "dict"
                }
            }
        ],
        "buildimplicitrules": [
            {
                "type": "func",
                "args": {
                    "block": "dict"
                }
            }
        ],
        "myeval": [
            {
                "type": "func",
                "args": {
                    "e": "str",
                    "g": "dict",
                    "l": "dict"
                }
            }
        ],
        "getlincoef_re_1": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "getlincoef": [
            {
                "type": "func",
                "args": {
                    "e": "str",
                    "xset": "list"
                }
            }
        ],
        "_varname_match": [
            {
                "type": "var",
                "anno": "re.Match"
            }
        ],
        "getarrlen": [
            {
                "type": "func",
                "args": {
                    "dl": "tuple",
                    "args": "list",
                    "star": "str"
                }
            }
        ],
        "word_pattern": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_get_depend_dict": [
            {
                "type": "func",
                "args": {
                    "name": "str",
                    "vars": "dict",
                    "deps": "dict"
                }
            }
        ],
        "_calc_depend_dict": [
            {
                "type": "func",
                "args": {
                    "vars": "dict"
                }
            }
        ],
        "get_sorted_names": [
            {
                "type": "func",
                "args": {
                    "vars": "dict"
                }
            }
        ],
        "_kind_func": [
            {
                "type": "func",
                "args": {
                    "string": "str"
                }
            }
        ],
        "_selected_int_kind_func": [
            {
                "type": "func",
                "args": {
                    "r": "int"
                }
            }
        ],
        "_is_kind_number": [
            {
                "type": "var",
                "anno": "typing.Match[str]"
            }
        ],
        "_eval_scalar": [
            {
                "type": "func",
                "args": {
                    "value": "str",
                    "params": "dict"
                }
            }
        ],
        "_eval_length": [
            {
                "type": "func",
                "args": {
                    "length": "str",
                    "params": "dict"
                }
            }
        ],
        "analyzeargs_re_1": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "determineexprtype_re_1": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "determineexprtype_re_2": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "determineexprtype_re_3": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "determineexprtype_re_4": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "determineexprtype_re_5": [
            {
                "type": "var",
                "anno": "re.Pattern"
            }
        ],
        "_ensure_exprdict": [
            {
                "type": "func",
                "args": {
                    "r": "typing.Union[int, float, dict]"
                }
            }
        ],
        "use2fortran": [
            {
                "type": "func",
                "args": {
                    "use": "dict",
                    "tab": "str"
                }
            }
        ],
        "true_intent_list": [
            {
                "type": "func",
                "args": {
                    "var": "dict"
                }
            }
        ],
        "files": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "funcs": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "f": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "f2": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "f3": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "showblocklist": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "get_usedict": [
            {
                "type": "func",
                "args": {
                    "block": "dict"
                }
            }
        ],
        "determineexprtype": [
            {
                "type": "func",
                "args": {
                    "expr": "str",
                    "vars": "dict",
                    "rules": "dict"
                }
            }
        ],
        "removespaces": [
            {
                "type": "func",
                "args": {
                    "expr": "str"
                }
            }
        ],
        "is_free_format": [
            {
                "type": "func",
                "args": {
                    "file": "str"
                }
            }
        ],
        "expr2name": [
            {
                "type": "func",
                "args": {
                    "a": "str",
                    "block": "dict",
                    "args": "list"
                }
            }
        ],
        "analyzeargs": [
            {
                "type": "func",
                "args": {
                    "block": "dict"
                }
            }
        ],
        "_selected_real_kind_func": [
            {
                "type": "func",
                "args": {
                    "p": "int",
                    "r": "int",
                    "radix": "int"
                }
            }
        ],
        "common2fortran": [
            {
                "type": "func",
                "args": {
                    "common": "dict",
                    "tab": "str"
                }
            }
        ],
        "analyzecommon": [
            {
                "type": "func",
                "args": {
                    "block": "dict"
                }
            }
        ],
        "sortvarnames": [
            {
                "type": "func",
                "args": {
                    "vars": "dict"
                }
            }
        ],
        "_simplifyargs": [
            {
                "type": "func",
                "args": {
                    "argsline": "str"
                }
            }
        ],
        "get_parameters": [
            {
                "type": "func",
                "args": {
                    "vars": "dict",
                    "global_params": "dict"
                }
            }
        ],
        "get_useparameters": [
            {
                "type": "func",
                "args": {
                    "block": "dict",
                    "param_map": "dict"
                }
            }
        ],
        "postcrack2": [
            {
                "type": "func",
                "args": {
                    "block": "dict",
                    "tab": "str",
                    "param_map": "dict"
                }
            }
        ],
        "unmarkouterparen": [
            {
                "type": "func",
                "args": {
                    "line": "str"
                }
            }
        ],
        "updatevars": [
            {
                "type": "func",
                "args": {
                    "typespec": "str",
                    "selector": "str",
                    "attrspec": "str",
                    "entitydecl": "str"
                }
            }
        ],
        "cracktypespec0": [
            {
                "type": "func",
                "args": {
                    "typespec": "str",
                    "ll": "str"
                }
            }
        ],
        "analyzeline": [
            {
                "type": "func",
                "args": {
                    "m": "re.Match",
                    "case": "str",
                    "line": "str"
                }
            }
        ],
        "crackline": [
            {
                "type": "func",
                "args": {
                    "line": "str",
                    "reset": "int"
                }
            }
        ],
        "analyzevars": [
            {
                "type": "func",
                "args": {
                    "block": "dict"
                }
            }
        ],
        "vars2fortran": [
            {
                "type": "func",
                "args": {
                    "block": "dict",
                    "vars": "dict",
                    "args": "list",
                    "tab": "str",
                    "as_interface": "bool"
                }
            }
        ],
        "crack2fortrangen": [
            {
                "type": "func",
                "args": {
                    "block": "dict",
                    "tab": "str",
                    "as_interface": "bool"
                }
            }
        ],
        "crack2fortran": [
            {
                "type": "func",
                "args": {
                    "block": "dict"
                }
            }
        ],
        "analyzebody": [
            {
                "type": "func",
                "args": {
                    "block": "dict",
                    "args": "list",
                    "tab": "str"
                }
            }
        ],
        "postcrack": [
            {
                "type": "func",
                "args": {
                    "block": "dict",
                    "args": "list",
                    "tab": "str"
                }
            }
        ],
        "readfortrancode": [
            {
                "type": "func",
                "args": {
                    "ffile": "str",
                    "dowithline": "Callable",
                    "istop": "int"
                }
            }
        ],
        "crackfortran": [
            {
                "type": "func",
                "args": {
                    "files": "list"
                }
            }
        ],
        "postlist": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "pyf": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "f2py.rules": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "options": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "sepdict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "generationtime": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "module_rules": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "defmod_rules": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "routine_rules": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "typedef_need_dict": [
            {
                "type": "var",
                "anno": "dict"
            }
        ],
        "stnd": [
            {
                "type": "var",
                "anno": "dict[int, str]"
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "check_rules": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "arg_rules": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "aux_rules": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "rout_rules": [
            {
                "type": "var",
                "anno": "list[dict]"
            }
        ],
        "buildapi": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ],
        "buildmodule": [
            {
                "type": "func",
                "args": {
                    "m": "dict",
                    "um": "list"
                }
            }
        ]
    },
    "f2py.func2subr": {
        "__version__": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "f2py_version": [
            {
                "type": "var",
                "anno": "str"
            }
        ],
        "var2fixfortran": [
            {
                "type": "func",
                "args": {
                    "vars": "dict",
                    "a": "str",
                    "fa": "str",
                    "f90mode": "bool"
                }
            }
        ],
        "createsubrwrapper": [
            {
                "type": "func",
                "args": {
                    "rout": "dict",
                    "signature": "int"
                }
            }
        ],
        "createfuncwrapper": [
            {
                "type": "func",
                "args": {
                    "rout": "dict",
                    "signature": "int"
                }
            }
        ],
        "assubr": [
            {
                "type": "func",
                "args": {
                    "rout": "dict"
                }
            }
        ]
    },
    "f2py.__version__": {
        "major": [
            {
                "type": "var",
                "anno": "int"
            }
        ],
        "version_info": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "version": [
            {
                "type": "var",
                "anno": "str"
            }
        ]
    },
    "f2py": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "run_main": [
            {
                "type": "var",
                "anno": "subprocess.Popen"
            }
        ],
        "main": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ],
        "compile": [
            {
                "type": "func",
                "args": {
                    "source": "str",
                    "modulename": "str",
                    "extra_args": "str",
                    "verbose": "bool",
                    "source_fn": "typing.Optional[str]",
                    "extension": "str"
                }
            }
        ]
    },
    "polynomial.chebyshev": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "_zseries_mul": [
            {
                "type": "func",
                "args": {
                    "z1": "np.ndarray",
                    "z2": "np.ndarray"
                }
            }
        ],
        "chebdomain": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "chebzero": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "chebone": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "chebx": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "chebline": [
            {
                "type": "func",
                "args": {
                    "off": "float",
                    "scl": "float"
                }
            }
        ],
        "chebweight": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "chebpts1": [
            {
                "type": "func",
                "args": {
                    "npts": "int"
                }
            }
        ],
        "chebpts2": [
            {
                "type": "func",
                "args": {
                    "npts": "int"
                }
            }
        ],
        "Chebyshev._line": [
            {
                "type": "attr",
                "anno": "Callable[[float, float], np.ndarray]"
            }
        ],
        "Chebyshev.nickname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Chebyshev.domain": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Chebyshev.window": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Chebyshev.basis_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "chebgauss": [
            {
                "type": "func",
                "args": {
                    "deg": "int"
                }
            }
        ],
        "chebvander": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "chebder": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "scl": "int",
                    "axis": "int"
                }
            }
        ],
        "Chebyshev._der": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "_zseries_int": [
            {
                "type": "func",
                "args": {
                    "zs": "np.ndarray"
                }
            }
        ],
        "_cseries_to_zseries": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "chebval": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "c": "np.ndarray",
                    "tensor": "bool"
                }
            }
        ],
        "Chebyshev._val": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "chebgrid3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "chebval3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "chebgrid2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "chebval2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "chebint": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "k": "list",
                    "lbnd": "int",
                    "scl": "int",
                    "axis": "int"
                }
            }
        ],
        "Chebyshev._int": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "chebvander3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "chebvander2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "chebinterpolate": [
            {
                "type": "func",
                "args": {
                    "func": "np.ndarray",
                    "deg": "np.ndarray",
                    "args": "np.ndarray"
                }
            }
        ],
        "_zseries_div": [
            {
                "type": "func",
                "args": {
                    "z1": "np.ndarray",
                    "z2": "np.ndarray"
                }
            }
        ],
        "_zseries_der": [
            {
                "type": "func",
                "args": {
                    "zs": "np.ndarray"
                }
            }
        ],
        "_zseries_to_cseries": [
            {
                "type": "func",
                "args": {
                    "zs": "np.ndarray"
                }
            }
        ],
        "chebcompanion": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "chebroots": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "Chebyshev._roots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "chebpow": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "pow": "int",
                    "maxpower": "int"
                }
            }
        ],
        "Chebyshev._pow": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "chebdiv": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "Chebyshev._div": [
            {
                "type": "attr",
                "anno": "tuple"
            }
        ],
        "chebmul": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "Chebyshev._mul": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "chebmulx": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "chebsub": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "Chebyshev._sub": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "chebadd": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "Chebyshev._add": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "poly2cheb": [
            {
                "type": "func",
                "args": {
                    "pol": "np.ndarray"
                }
            }
        ],
        "chebfromroots": [
            {
                "type": "func",
                "args": {
                    "roots": "np.ndarray"
                }
            }
        ],
        "Chebyshev._fromroots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "chebtrim": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "chebfit": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray"
                }
            }
        ],
        "Chebyshev._fit": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "cheb2poly": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "Chebyshev.interpolate": [
            {
                "type": "method",
                "args": {
                    "cls": "ABCPolyBase",
                    "func": "np.ndarray",
                    "deg": "np.ndarray",
                    "domain": "np.ndarray",
                    "args": "np.ndarray"
                }
            }
        ]
    },
    "polynomial.polyutils": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "trimseq": [
            {
                "type": "func",
                "args": {
                    "seq": "np.ndarray"
                }
            }
        ],
        "mapparms": [
            {
                "type": "func",
                "args": {
                    "old": "np.ndarray",
                    "new": "np.ndarray"
                }
            }
        ],
        "mapdomain": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "old": "np.ndarray",
                    "new": "np.ndarray"
                }
            }
        ],
        "_nth_slice": [
            {
                "type": "func",
                "args": {
                    "i": "int",
                    "ndim": "int"
                }
            }
        ],
        "_vander_nd": [
            {
                "type": "func",
                "args": {
                    "vander_fs": "tuple",
                    "points": "tuple",
                    "degrees": "tuple"
                }
            }
        ],
        "_gridnd": [
            {
                "type": "func",
                "args": {
                    "val_f": "np.ndarray",
                    "c": "np.ndarray",
                    "args": "np.ndarray"
                }
            }
        ],
        "_deprecate_as_int": [
            {
                "type": "func",
                "args": {
                    "x": "int",
                    "desc": "str"
                }
            }
        ],
        "_valnd": [
            {
                "type": "func",
                "args": {
                    "val_f": "np.ndarray",
                    "c": "np.ndarray",
                    "args": "np.ndarray"
                }
            }
        ],
        "_vander_nd_flat": [
            {
                "type": "func",
                "args": {
                    "vander_fs": "tuple",
                    "points": "tuple",
                    "degrees": "tuple"
                }
            }
        ],
        "as_series": [
            {
                "type": "func",
                "args": {
                    "alist": "np.ndarray",
                    "trim": "bool"
                }
            }
        ],
        "_pow": [
            {
                "type": "func",
                "args": {
                    "mul_f": "np.ndarray",
                    "c": "np.ndarray",
                    "pow": "int",
                    "maxpower": "int"
                }
            }
        ],
        "_sub": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "_add": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "_div": [
            {
                "type": "func",
                "args": {
                    "mul_f": "np.ndarray",
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "_fromroots": [
            {
                "type": "func",
                "args": {
                    "line_f": "np.ndarray",
                    "mul_f": "np.ndarray",
                    "roots": "np.ndarray"
                }
            }
        ],
        "trimcoef": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "tol": "float"
                }
            }
        ],
        "_fit": [
            {
                "type": "func",
                "args": {
                    "vander_f": "np.ndarray",
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray"
                }
            }
        ],
        "getdomain": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ]
    },
    "polynomial.hermite": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "hermdomain": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermzero": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermone": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermx": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermline": [
            {
                "type": "func",
                "args": {
                    "off": "np.ndarray",
                    "scl": "np.ndarray"
                }
            }
        ],
        "hermweight": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "Hermite._line": [
            {
                "type": "attr",
                "anno": "la.FuncCall_"
            }
        ],
        "Hermite.nickname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Hermite.domain": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Hermite.window": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Hermite.basis_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "_normed_hermite_n": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "n": "int"
                }
            }
        ],
        "hermvander": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "hermder": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "scl": "int",
                    "axis": "int"
                }
            }
        ],
        "Hermite._der": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "hermval": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "c": "np.ndarray",
                    "tensor": "bool"
                }
            }
        ],
        "Hermite._val": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "hermgrid3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "hermval3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "hermgrid2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "hermval2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "hermint": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "k": "list",
                    "lbnd": "float",
                    "scl": "float",
                    "axis": "int"
                }
            }
        ],
        "Hermite._int": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "hermvander3d": [
            {
                "type": "func",
                "args": {
                    "x": "int",
                    "y": "int",
                    "z": "int",
                    "deg": "int"
                }
            }
        ],
        "hermvander2d": [
            {
                "type": "func",
                "args": {
                    "x": "int",
                    "y": "int",
                    "deg": "int"
                }
            }
        ],
        "hermcompanion": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "hermroots": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "Hermite._roots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "hermmulx": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "hermsub": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "Hermite._sub": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "hermadd": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "Hermite._add": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "hermmul": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "Hermite._mul": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "hermpow": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "pow": "int",
                    "maxpower": "int"
                }
            }
        ],
        "Hermite._pow": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "poly2herm": [
            {
                "type": "func",
                "args": {
                    "pol": "np.ndarray"
                }
            }
        ],
        "hermdiv": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "Hermite._div": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "hermfromroots": [
            {
                "type": "func",
                "args": {
                    "roots": "np.ndarray"
                }
            }
        ],
        "Hermite._fromroots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "hermtrim": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermgauss": [
            {
                "type": "func",
                "args": {
                    "deg": "int"
                }
            }
        ],
        "hermfit": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray"
                }
            }
        ],
        "Hermite._fit": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "herm2poly": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ]
    },
    "polynomial.tests.test_laguerre": {
        "L0": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L1": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L2": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L3": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L4": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L5": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L6": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "Llist": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "trim": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "TestConstants.test_lagdomain": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_lagzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_lagone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_lagx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestArithmetic.test_lagadd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_lagsub": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_lagmulx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_lagmul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_lagdiv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_lagpow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.c1d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c2d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c3d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.y": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestIntegral.test_lagint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_lagder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.x": [
            {
                "type": "attr",
                "anno": "tuple[int, int, int]"
            }
        ],
        "TestCompanion.test_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_linear_root": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_lagfromroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_lagroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_lagtrim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_lagline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_lag2poly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_poly2lag": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_weight": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_lagvander": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_laggrid3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_laggrid2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_lagval3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_lagval2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_lagval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_lagvander3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_lagvander2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_lagder_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegral.test_lagint_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFitting.test_lagfit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGauss.test_100": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.tests.test_classes": {
        "classes": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "classids": [
            {
                "type": "var",
                "anno": "tuple"
            }
        ],
        "Poly": [
            {
                "type": "func",
                "args": {
                    "request": "op.Parameter"
                }
            }
        ],
        "random": [
            {
                "type": "var",
                "anno": "Callable[[], np.ndarray]"
            }
        ],
        "Poly1": [
            {
                "type": "var",
                "anno": "op.Parameter"
            }
        ],
        "Poly2": [
            {
                "type": "var",
                "anno": "op.Parameter"
            }
        ],
        "test_equal": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_not_equal": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_ufunc_override": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "TestInterpolate.f": [
            {
                "type": "method",
                "args": {
                    "x": "int"
                }
            }
        ],
        "TestInterpolate.test_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterpolate.test_approximation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterpolate.test_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "test_trim": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_truncate": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_cutdeg": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_mapparms": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_linspace": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_deriv": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "assert_poly_almost_equal": [
            {
                "type": "func",
                "args": {
                    "p1": "op.Parameter",
                    "p2": "op.Parameter",
                    "msg": "str"
                }
            }
        ],
        "test_pow": [
            {
                "type": "func",
                "args": {
                    "Poly": "Polynomial"
                }
            }
        ],
        "test_divmod": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_mod": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_truediv": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_floordiv": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_mul": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_sub": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_add": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_copy": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_degree": [
            {
                "type": "func",
                "args": {
                    "Poly": "Polynomial"
                }
            }
        ],
        "test_basis": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_identity": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_roots": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_fromroots": [
            {
                "type": "func",
                "args": {
                    "Poly": "Polynomial"
                }
            }
        ],
        "test_fit": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_bad_conditioned_fit": [
            {
                "type": "func",
                "args": {
                    "Poly": "Polynomial"
                }
            }
        ],
        "test_conversion": [
            {
                "type": "func",
                "args": {
                    "Poly1": "Polynomial",
                    "Poly2": "Polynomial"
                }
            }
        ],
        "test_call": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Parameter"
                }
            }
        ],
        "test_integ": [
            {
                "type": "func",
                "args": {
                    "Poly": "op.Poly"
                }
            }
        ],
        "test_cast": [
            {
                "type": "func",
                "args": {
                    "Poly1": "Polynomial",
                    "Poly2": "Polynomial"
                }
            }
        ],
        "TestLatexRepr.as_latex": [
            {
                "type": "method",
                "args": {
                    "obj": "Polynomial"
                }
            }
        ],
        "TestLatexRepr.test_multichar_basis_func": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLatexRepr.test_basis_func": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLatexRepr.test_simple_polynomial": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.tests.test_hermite_e": {
        "He0": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He1": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He2": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He3": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He4": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He5": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He6": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He7": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He8": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "He9": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "Helist": [
            {
                "type": "var",
                "anno": "list[int]"
            }
        ],
        "trim": [
            {
                "type": "func",
                "args": {
                    "x": "herme.herme"
                }
            }
        ],
        "TestConstants.test_hermedomain": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_hermezero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_hermeone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_hermex": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestArithmetic.test_hermeadd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermesub": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermemulx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermemul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermediv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermepow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.c1d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c2d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c3d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.y": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestIntegral.test_hermeint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_hermeder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.x": [
            {
                "type": "attr",
                "anno": "tuple[int, int, int]"
            }
        ],
        "TestCompanion.test_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_linear_root": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_hermefromroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_hermeroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_hermetrim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_hermeline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_herme2poly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_poly2herme": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_weight": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_hermevander": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermegrid3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermegrid2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermeval3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermeval2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermeval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_hermevander3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_hermevander2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_hermeder_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegral.test_hermeint_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFitting.test_hermefit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGauss.test_100": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.tests.test_polyutils": {
        "TestMisc.test_trimseq": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_trimcoef": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDomain.test_getdomain": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDomain.test_mapparms": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDomain.test_mapdomain": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_as_series": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.tests.test_legendre": {
        "L0": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L1": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L2": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L3": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L4": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L5": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L6": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L7": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L8": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "L9": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "Llist": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "trim": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "TestConstants.test_legdomain": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_legzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_legone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_legx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestArithmetic.test_legadd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_legsub": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_legmulx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_legmul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_legdiv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_legpow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.c1d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c2d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c3d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.y": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestIntegral.test_legint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_legder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.x": [
            {
                "type": "attr",
                "anno": "tuple[int, int, int]"
            }
        ],
        "TestCompanion.test_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_linear_root": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_legfromroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_legroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_legtrim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_legline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_leg2poly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_poly2leg": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_weight": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_legvander": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_leggrid3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_leggrid2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_legval3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_legval2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_legval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_legvander3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_legvander2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_legder_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegral.test_legint_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFitting.test_legfit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGauss.test_100": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.tests.test_chebyshev": {
        "trim": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "T0": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T1": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T2": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T3": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T4": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T5": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T6": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T7": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T8": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T9": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "Tlist": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "TestPrivate.test__cseries_to_zseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestPrivate.test__zseries_to_cseries": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_chebdomain": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_chebzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_chebone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_chebx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_chebadd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_chebsub": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_chebmulx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_chebmul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_chebdiv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_chebpow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.c1d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c2d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c3d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.y": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestIntegral.test_chebint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_chebder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.x": [
            {
                "type": "attr",
                "anno": "tuple[int, int, int]"
            }
        ],
        "TestInterpolate.f": [
            {
                "type": "method",
                "args": {
                    "x": "int"
                }
            }
        ],
        "TestInterpolate.test_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterpolate.test_approximation": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_linear_root": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_chebfromroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_chebroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_chebtrim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_chebline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_cheb2poly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_poly2cheb": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_weight": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_chebpts1": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_chebpts2": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestInterpolate.test_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_chebvander": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_chebgrid3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_chebgrid2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_chebval3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_chebval2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_chebval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_chebvander3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_chebvander2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_chebder_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegral.test_chebint_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFitting.test_chebfit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGauss.test_100": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.tests.test_hermite": {
        "H0": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H1": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H2": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H3": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H4": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H5": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H6": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H7": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H8": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "H9": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "Hlist": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "trim": [
            {
                "type": "func",
                "args": {
                    "x": "herm.Herm"
                }
            }
        ],
        "TestConstants.test_hermdomain": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_hermzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_hermone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_hermx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestArithmetic.test_hermadd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermsub": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermmulx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermmul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermdiv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_hermpow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.c1d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c2d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c3d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.y": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestIntegral.test_hermint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_hermder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.x": [
            {
                "type": "attr",
                "anno": "tuple[int, int, int]"
            }
        ],
        "TestCompanion.test_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_linear_root": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_hermfromroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_hermroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_hermtrim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_hermline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_herm2poly": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_poly2herm": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_weight": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_hermvander": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermgrid3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermgrid2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermval3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermval2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_hermval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_hermvander3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_hermvander2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_hermder_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegral.test_hermint_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFitting.test_hermfit": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestGauss.test_100": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.tests.test_printing": {
        "TestStrUnicodeSuperSubscripts.use_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStrUnicodeSuperSubscripts.test_polynomial_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "str"
                }
            }
        ],
        "TestStrUnicodeSuperSubscripts.test_chebyshev_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrUnicodeSuperSubscripts.test_legendre_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrUnicodeSuperSubscripts.test_hermite_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrUnicodeSuperSubscripts.test_hermiteE_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrUnicodeSuperSubscripts.test_laguerre_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrAscii.use_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestStrAscii.test_polynomial_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "str"
                }
            }
        ],
        "TestStrAscii.test_chebyshev_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrAscii.test_legendre_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrAscii.test_hermite_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrAscii.test_hermiteE_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestStrAscii.test_laguerre_str": [
            {
                "type": "method",
                "args": {
                    "inp": "int",
                    "tgt": "int"
                }
            }
        ],
        "TestLinebreaking.test_single_line_one_less": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinebreaking.test_num_chars_is_linewidth": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinebreaking.test_first_linebreak_multiline_one_less_than_linewidth": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinebreaking.test_first_linebreak_multiline_on_linewidth": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestLinebreaking.test_linewidth_printoption": [
            {
                "type": "method",
                "args": {
                    "lw": "int",
                    "tgt": "int"
                }
            }
        ],
        "test_set_default_printoptions": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "test_complex_coefficients": [
            {
                "type": "func",
                "args": {}
            }
        ],
        "TestFormat.test_format_unicode": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFormat.test_format_ascii": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFormat.test_empty_formatstr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestFormat.test_bad_formatstr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr.test_polynomial_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr.test_chebyshev_str": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr.test_legendre_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr.test_hermite_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr.test_hermiteE_repr": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestRepr.test_laguerre_repr": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.tests.test_polynomial": {
        "trim": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "T0": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T1": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T2": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T3": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T4": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T5": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T6": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T7": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T8": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "T9": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "Tlist": [
            {
                "type": "var",
                "anno": "Tlist"
            }
        ],
        "TestConstants.test_polydomain": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_polyzero": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_polyone": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestConstants.test_polyx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_polyadd": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_polysub": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_polymulx": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_polymul": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_polydiv": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestArithmetic.test_polypow": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.c1d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c2d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.c3d": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.x": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestEvaluation.y": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "TestIntegral.test_polyint": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_polyder": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.x": [
            {
                "type": "attr",
                "anno": "tuple[int, int, int]"
            }
        ],
        "TestCompanion.test_raises": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_linear_root": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_polyfromroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_polyroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_polytrim": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_polyline": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestCompanion.test_dimensions": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_polyvander": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_polygrid3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_polygrid2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_polyval3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_polyval2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_polyvalfromroots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_polyvander3d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestVander.test_polyvander2d": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestDerivative.test_polyder_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestIntegral.test_polyint_axis": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestEvaluation.test_polyval": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestMisc.test_polyfit": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial._polybase": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "ABCPolyBase.__hash__": [
            {
                "type": "attr",
                "anno": "pu.Optional[int]"
            }
        ],
        "ABCPolyBase.__array_ufunc__": [
            {
                "type": "attr",
                "anno": "pu.Optional[np.ndarray]"
            }
        ],
        "ABCPolyBase.maxpower": [
            {
                "type": "attr",
                "anno": "int"
            }
        ],
        "ABCPolyBase._superscript_mapping": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ABCPolyBase._subscript_mapping": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "ABCPolyBase._use_unicode": [
            {
                "type": "attr",
                "anno": "bool"
            }
        ],
        "ABCPolyBase.nickname": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.basis_name": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase._add": [
            {
                "type": "method",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase._sub": [
            {
                "type": "method",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase._mul": [
            {
                "type": "method",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase._div": [
            {
                "type": "method",
                "args": {
                    "c1": "float",
                    "c2": "float"
                }
            }
        ],
        "ABCPolyBase._pow": [
            {
                "type": "method",
                "args": {
                    "c": "np.ndarray",
                    "pow": "np.ndarray",
                    "maxpower": "int"
                }
            }
        ],
        "ABCPolyBase._val": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase._int": [
            {
                "type": "method",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "k": "list",
                    "lbnd": "float",
                    "scl": "float"
                }
            }
        ],
        "ABCPolyBase._der": [
            {
                "type": "method",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "scl": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase._fit": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "rcond": "np.ndarray",
                    "full": "bool"
                }
            }
        ],
        "ABCPolyBase._line": [
            {
                "type": "method",
                "args": {
                    "off": "np.ndarray",
                    "scl": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase._roots": [
            {
                "type": "method",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase._fromroots": [
            {
                "type": "method",
                "args": {
                    "r": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.has_sametype": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.coef": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "ABCPolyBase.has_samecoef": [
            {
                "type": "method",
                "args": {
                    "other": "ABCPolyBase"
                }
            }
        ],
        "ABCPolyBase.domain": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "ABCPolyBase.window": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "ABCPolyBase.__repr__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase._repr_latex_scalar": [
            {
                "type": "method",
                "args": {
                    "x": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.__dict__": [
            {
                "type": "attr",
                "anno": "dict"
            }
        ],
        "ABCPolyBase.__setstate__": [
            {
                "type": "method",
                "args": {
                    "dict": "dict"
                }
            }
        ],
        "ABCPolyBase.__call__": [
            {
                "type": "method",
                "args": {
                    "arg": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.__iter__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.__len__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.__pos__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.__rtruediv__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.copy": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.__getstate__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.__init__": [
            {
                "type": "method",
                "args": {
                    "coef": "np.ndarray",
                    "domain": "np.ndarray",
                    "window": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.__rdivmod__": [
            {
                "type": "method",
                "args": {
                    "other": "float"
                }
            }
        ],
        "ABCPolyBase.__rmod__": [
            {
                "type": "method",
                "args": {
                    "other": "float"
                }
            }
        ],
        "ABCPolyBase.__rfloordiv__": [
            {
                "type": "method",
                "args": {
                    "other": "float"
                }
            }
        ],
        "ABCPolyBase.__rdiv__": [
            {
                "type": "method",
                "args": {
                    "other": "float"
                }
            }
        ],
        "ABCPolyBase.__rmul__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.__rsub__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.__radd__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.__pow__": [
            {
                "type": "method",
                "args": {
                    "other": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.__neg__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase._generate_string": [
            {
                "type": "method",
                "args": {
                    "term_method": "Callable[[str, str], str]"
                }
            }
        ],
        "ABCPolyBase.degree": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.trim": [
            {
                "type": "method",
                "args": {
                    "tol": "float"
                }
            }
        ],
        "ABCPolyBase.truncate": [
            {
                "type": "method",
                "args": {
                    "size": "int"
                }
            }
        ],
        "ABCPolyBase.cutdeg": [
            {
                "type": "method",
                "args": {
                    "deg": "int"
                }
            }
        ],
        "ABCPolyBase.mapparms": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.integ": [
            {
                "type": "method",
                "args": {
                    "m": "int",
                    "k": "list",
                    "lbnd": "float"
                }
            }
        ],
        "ABCPolyBase.deriv": [
            {
                "type": "method",
                "args": {
                    "m": "int"
                }
            }
        ],
        "ABCPolyBase.roots": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.linspace": [
            {
                "type": "method",
                "args": {
                    "n": "int",
                    "domain": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.has_samedomain": [
            {
                "type": "method",
                "args": {
                    "other": "ABCPolyBase"
                }
            }
        ],
        "ABCPolyBase.basis": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "deg": "int",
                    "domain": "np.ndarray",
                    "window": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.identity": [
            {
                "type": "method",
                "args": {
                    "cls": "ABCPolyBase",
                    "domain": "np.ndarray",
                    "window": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.fromroots": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "roots": "np.ndarray",
                    "domain": "np.ndarray",
                    "window": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.fit": [
            {
                "type": "method",
                "args": {
                    "cls": "type",
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "domain": "np.ndarray",
                    "rcond": "np.ndarray",
                    "full": "bool",
                    "w": "np.ndarray",
                    "window": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.convert": [
            {
                "type": "method",
                "args": {
                    "domain": "np.ndarray",
                    "kind": "ABCPolyBase",
                    "window": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.cast": [
            {
                "type": "method",
                "args": {
                    "cls": "ABCPolyBase",
                    "series": "p.Series",
                    "domain": "np.ndarray",
                    "window": "np.ndarray"
                }
            }
        ],
        "ABCPolyBase.__eq__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.__ne__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase._get_coefficients": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.__divmod__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.__mod__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.__floordiv__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.__truediv__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.__mul__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.__sub__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.__add__": [
            {
                "type": "method",
                "args": {
                    "other": "object"
                }
            }
        ],
        "ABCPolyBase.has_samewindow": [
            {
                "type": "method",
                "args": {
                    "other": "ABCPolyBase"
                }
            }
        ],
        "ABCPolyBase._repr_latex_term": [
            {
                "type": "method",
                "args": {
                    "cls": "ABCPolyBase",
                    "i": "int",
                    "arg_str": "str",
                    "needs_parens": "bool"
                }
            }
        ],
        "ABCPolyBase._repr_latex_": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase._str_term_ascii": [
            {
                "type": "method",
                "args": {
                    "cls": "ABCPolyBase",
                    "i": "int",
                    "arg_str": "str"
                }
            }
        ],
        "ABCPolyBase._str_term_unicode": [
            {
                "type": "method",
                "args": {
                    "cls": "ABCPolyBase",
                    "i": "int",
                    "arg_str": "str"
                }
            }
        ],
        "ABCPolyBase.__str__": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "ABCPolyBase.__format__": [
            {
                "type": "method",
                "args": {
                    "fmt_str": "str"
                }
            }
        ]
    },
    "matrixlib.tests.test_multiarray": {
        "TestView.test_keywords": [
            {
                "type": "method",
                "args": {}
            }
        ],
        "TestView.test_type": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "lib.tests.test_arrayterator": {
        "test": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "f2py.f2py_testing": {
        "run": [
            {
                "type": "func",
                "args": {
                    "runtest": "typing.Callable",
                    "test_functions": "typing.List[typing.Callable]",
                    "repeat": "int"
                }
            }
        ],
        "cmdline": [
            {
                "type": "func",
                "args": {}
            }
        ]
    },
    "distutils.command.bdist_rpm": {
        "bdist_rpm._make_spec_file": [
            {
                "type": "method",
                "args": {}
            }
        ]
    },
    "polynomial.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "typing.Optional[str]"
                }
            }
        ]
    },
    "f2py.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "str"
                }
            }
        ],
        "config": [
            {
                "type": "var",
                "anno": "Configuration"
            }
        ]
    },
    "lib.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "typing.Optional[str]"
                }
            }
        ]
    },
    "compat.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "typing.Optional[str]"
                }
            }
        ]
    },
    "ma.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "typing.Optional[str]"
                }
            }
        ],
        "config": [
            {
                "type": "var",
                "anno": "dict"
            }
        ]
    },
    "matrixlib.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "typing.Optional[str]"
                }
            }
        ],
        "config": [
            {
                "type": "var",
                "anno": "dict"
            }
        ]
    },
    "random._examples.cffi.parse": {
        "parse_distributions_h": [
            {
                "type": "func",
                "args": {
                    "ffi": "typing.Any",
                    "inc_dir": "str"
                }
            }
        ]
    },
    "fft.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "typing.Optional[str]"
                }
            }
        ]
    },
    "distutils.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "str"
                }
            }
        ]
    },
    "testing.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "str"
                }
            }
        ]
    },
    "setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "str"
                }
            }
        ]
    },
    "distutils.command.autodist": {
        "check_gcc_variable_attribute": [
            {
                "type": "func",
                "args": {
                    "cmd": "commands.Command",
                    "attribute": "str"
                }
            }
        ],
        "check_gcc_function_attribute_with_intrinsics": [
            {
                "type": "func",
                "args": {
                    "cmd": "commands.Command",
                    "attribute": "str",
                    "name": "str",
                    "code": "str",
                    "include": "str"
                }
            }
        ],
        "check_gcc_function_attribute": [
            {
                "type": "func",
                "args": {
                    "cmd": "commands.Command",
                    "attribute": "str",
                    "name": "str"
                }
            }
        ],
        "check_compiler_gcc4": [
            {
                "type": "func",
                "args": {
                    "cmd": "commands.Command"
                }
            }
        ],
        "check_restrict": [
            {
                "type": "func",
                "args": {
                    "cmd": "commands.Command"
                }
            }
        ],
        "check_inline": [
            {
                "type": "func",
                "args": {
                    "cmd": "commands.Command"
                }
            }
        ]
    },
    "polynomial.hermite_e": {
        "__all__": [
            {
                "type": "var",
                "anno": "list[str]"
            }
        ],
        "hermetrim": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermedomain": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermezero": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermeone": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermex": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "hermeline": [
            {
                "type": "func",
                "args": {
                    "off": "np.ndarray",
                    "scl": "np.ndarray"
                }
            }
        ],
        "hermeadd": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "hermesub": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "hermemulx": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "poly2herme": [
            {
                "type": "func",
                "args": {
                    "pol": "np.ndarray"
                }
            }
        ],
        "hermemul": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "hermefromroots": [
            {
                "type": "func",
                "args": {
                    "roots": "np.ndarray"
                }
            }
        ],
        "hermediv": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "hermepow": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "pow": "int",
                    "maxpower": "int"
                }
            }
        ],
        "hermeder": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "scl": "int",
                    "axis": "int"
                }
            }
        ],
        "hermeval": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "c": "np.ndarray",
                    "tensor": "bool"
                }
            }
        ],
        "hermeint": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "k": "np.ndarray",
                    "lbnd": "int",
                    "scl": "int",
                    "axis": "int"
                }
            }
        ],
        "hermeval2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "hermegrid2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "hermeval3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "hermegrid3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "hermevander": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "hermevander2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "hermevander3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "hermefit": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray"
                }
            }
        ],
        "hermecompanion": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "hermeroots": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "_normed_hermite_e_n": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "n": "int"
                }
            }
        ],
        "hermegauss": [
            {
                "type": "func",
                "args": {
                    "deg": "int"
                }
            }
        ],
        "hermeweight": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "HermiteE._add": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._sub": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._mul": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._div": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._pow": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._val": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._int": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._der": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._fit": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "HermiteE._line": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._roots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE._fromroots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE.nickname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "HermiteE.domain": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE.window": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "HermiteE.basis_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "herme2poly": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ]
    },
    "polynomial.laguerre": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "lagtrim": [
            {
                "type": "var",
                "anno": "pu.Laguerre"
            }
        ],
        "lagdomain": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "lagzero": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "lagone": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "lagx": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "lagline": [
            {
                "type": "func",
                "args": {
                    "off": "np.ndarray",
                    "scl": "np.ndarray"
                }
            }
        ],
        "lagadd": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "lagsub": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "lagmulx": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "poly2lag": [
            {
                "type": "func",
                "args": {
                    "pol": "np.ndarray"
                }
            }
        ],
        "lagmul": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "lagfromroots": [
            {
                "type": "func",
                "args": {
                    "roots": "np.ndarray"
                }
            }
        ],
        "lagdiv": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "lagpow": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "pow": "int",
                    "maxpower": "int"
                }
            }
        ],
        "lagder": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "scl": "int",
                    "axis": "int"
                }
            }
        ],
        "lagval": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "c": "np.ndarray",
                    "tensor": "bool"
                }
            }
        ],
        "lagint": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "k": "np.ndarray",
                    "lbnd": "int",
                    "scl": "int",
                    "axis": "int"
                }
            }
        ],
        "lagval2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "laggrid2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "lagval3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "laggrid3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "lagvander": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "lagvander2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "lagvander3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "lagfit": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray"
                }
            }
        ],
        "lagcompanion": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "lagroots": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "laggauss": [
            {
                "type": "func",
                "args": {
                    "deg": "int"
                }
            }
        ],
        "lagweight": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "Laguerre._add": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Laguerre._sub": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Laguerre._mul": [
            {
                "type": "attr",
                "anno": "la.Function"
            }
        ],
        "Laguerre._div": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Laguerre._pow": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Laguerre._val": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Laguerre._int": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Laguerre._der": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Laguerre._fit": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Laguerre._line": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Laguerre._roots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Laguerre._fromroots": [
            {
                "type": "attr",
                "anno": "la.FuncCall_"
            }
        ],
        "Laguerre.nickname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Laguerre.domain": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Laguerre.window": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Laguerre.basis_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "lag2poly": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ]
    },
    "polynomial.legendre": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "legtrim": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "legdomain": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "legzero": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "legone": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "legx": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "legline": [
            {
                "type": "func",
                "args": {
                    "off": "np.ndarray",
                    "scl": "np.ndarray"
                }
            }
        ],
        "legadd": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "legsub": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "legmulx": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "poly2leg": [
            {
                "type": "func",
                "args": {
                    "pol": "np.ndarray"
                }
            }
        ],
        "legmul": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "legfromroots": [
            {
                "type": "func",
                "args": {
                    "roots": "np.ndarray"
                }
            }
        ],
        "legdiv": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "legpow": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "pow": "int",
                    "maxpower": "int"
                }
            }
        ],
        "legder": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "scl": "int",
                    "axis": "int"
                }
            }
        ],
        "legval": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "c": "np.ndarray",
                    "tensor": "bool"
                }
            }
        ],
        "legint": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "k": "list",
                    "lbnd": "float",
                    "scl": "float",
                    "axis": "int"
                }
            }
        ],
        "legval2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "leggrid2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "legval3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "leggrid3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "legvander": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "legvander2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "legvander3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "legfit": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray"
                }
            }
        ],
        "legcompanion": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "legroots": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "leggauss": [
            {
                "type": "func",
                "args": {
                    "deg": "int"
                }
            }
        ],
        "legweight": [
            {
                "type": "func",
                "args": {
                    "x": "float"
                }
            }
        ],
        "Legendre._add": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Legendre._sub": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Legendre._mul": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Legendre._div": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Legendre._pow": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Legendre._val": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Legendre._int": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Legendre._der": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Legendre._fit": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Legendre._line": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Legendre._roots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Legendre._fromroots": [
            {
                "type": "attr",
                "anno": "la.FuncCall_"
            }
        ],
        "Legendre.nickname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Legendre.domain": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Legendre.window": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Legendre.basis_name": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "leg2poly": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ]
    },
    "polynomial.polynomial": {
        "__all__": [
            {
                "type": "var",
                "anno": "list"
            }
        ],
        "polytrim": [
            {
                "type": "var",
                "anno": "pu.Polynomial"
            }
        ],
        "polydomain": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "polyzero": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "polyone": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "polyx": [
            {
                "type": "var",
                "anno": "np.ndarray"
            }
        ],
        "polyline": [
            {
                "type": "func",
                "args": {
                    "off": "np.ndarray",
                    "scl": "np.ndarray"
                }
            }
        ],
        "polyadd": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "polysub": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "polymulx": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "polymul": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "polyfromroots": [
            {
                "type": "func",
                "args": {
                    "roots": "np.ndarray"
                }
            }
        ],
        "polydiv": [
            {
                "type": "func",
                "args": {
                    "c1": "np.ndarray",
                    "c2": "np.ndarray"
                }
            }
        ],
        "polypow": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "pow": "int",
                    "maxpower": "int"
                }
            }
        ],
        "polyder": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "scl": "float",
                    "axis": "int"
                }
            }
        ],
        "polyval": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "c": "np.ndarray",
                    "tensor": "bool"
                }
            }
        ],
        "polyint": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray",
                    "m": "int",
                    "k": "list",
                    "lbnd": "float",
                    "scl": "float",
                    "axis": "int"
                }
            }
        ],
        "polyvalfromroots": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "r": "np.ndarray",
                    "tensor": "bool"
                }
            }
        ],
        "polyval2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "polygrid2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "polyval3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "polygrid3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "c": "np.ndarray"
                }
            }
        ],
        "polyvander": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "polyvander2d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "polyvander3d": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "z": "np.ndarray",
                    "deg": "np.ndarray"
                }
            }
        ],
        "polyfit": [
            {
                "type": "func",
                "args": {
                    "x": "np.ndarray",
                    "y": "np.ndarray",
                    "deg": "np.ndarray",
                    "rcond": "float",
                    "full": "bool",
                    "w": "np.ndarray"
                }
            }
        ],
        "polycompanion": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "polyroots": [
            {
                "type": "func",
                "args": {
                    "c": "np.ndarray"
                }
            }
        ],
        "Polynomial._add": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial._sub": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial._mul": [
            {
                "type": "attr",
                "anno": "la.Method"
            }
        ],
        "Polynomial._div": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial._pow": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial._val": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial._int": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial._der": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial._fit": [
            {
                "type": "attr",
                "anno": "la.Callable"
            }
        ],
        "Polynomial._line": [
            {
                "type": "attr",
                "anno": "la.FuncCall_"
            }
        ],
        "Polynomial._roots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial._fromroots": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial.nickname": [
            {
                "type": "attr",
                "anno": "str"
            }
        ],
        "Polynomial.domain": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial.window": [
            {
                "type": "attr",
                "anno": "np.ndarray"
            }
        ],
        "Polynomial.basis_name": [
            {
                "type": "attr",
                "anno": "pu.Optional[str]"
            }
        ],
        "Polynomial._str_term_unicode": [
            {
                "type": "method",
                "args": {
                    "cls": "typing.Type[Polynomial]",
                    "i": "np.ndarray",
                    "arg_str": "str"
                }
            }
        ],
        "Polynomial._str_term_ascii": [
            {
                "type": "method",
                "args": {
                    "i": "int",
                    "arg_str": "str"
                }
            }
        ],
        "Polynomial._repr_latex_term": [
            {
                "type": "method",
                "args": {
                    "i": "int",
                    "arg_str": "str",
                    "needs_parens": "bool"
                }
            }
        ]
    },
    "linalg.setup": {
        "configuration": [
            {
                "type": "func",
                "args": {
                    "parent_package": "str",
                    "top_path": "str"
                }
            }
        ]
    },
    "polynomial": {
        "set_default_printstyle": [
            {
                "type": "func",
                "args": {
                    "style": "str"
                }
            }
        ],
        "test": [
            {
                "type": "var",
                "anno": "PytestTester"
            }
        ]
    }
}